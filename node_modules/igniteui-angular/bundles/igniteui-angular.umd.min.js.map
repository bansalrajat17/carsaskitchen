{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/operations.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/container-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/base.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.strategy.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-handle.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/daysview-navigation.service.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/months-view.pipe.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/grids/common/enums.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/common/templates.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/core/i18n/paginator-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/grids/filtering/advanced-filtering/advanced-filtering-dialog.component.ts","ng://igniteui-angular/lib/grids/igx-row-selectors.module.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/grids/grid-footer/grid-footer.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts","ng://igniteui-angular/lib/paginator/paginator.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/slider/label/thumb-label.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","isEqual","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","PlatformUtil","platformId","isBrowser","isPlatformBrowser","isIOS","window","Injectable","providedIn","type","Inject","PLATFORM_ID","isLeftClick","event","button","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","isHierarchyMatch","h1","h2","every","level","index","fieldName","getHierarchy","gRow","hierarchy","undefined","expression","groupParent","unshift","DefaultSortingStrategy","instance","_instance","sort","data","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","parent","grid","groupsRecords","fullResult","expansion","group","this_1","groupRow","records","groups","renderedRowHeight","expandState","find","expanded","defaultExpanded","recursiveResult","group_1","group_1_1","groupItem","slice","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","And","Or","Regular","Advanced","FilteringExpressionsTree","operator","filteringOperands","empty","expressionTree","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","val","logic","searchVal","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","_super","_instace","filter","advancedExpressionsTree","ADD","DELETE","UPDATE","String","Number","Boolean","DataUtil","sorting","treeGridSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","grouping","splice","page","recordsPerPage","countPages","countRecords","PagingError","isNaN","Math","ceil","correctPagingState","maxPage","mergeTransactions","transactions","primaryKey","deleteRows","item","rowId","transaction","TransactionType","newValue","map","mergeHierarchicalTransactions","childDataKey","path","parent_1","findParentFromPath","collection","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","parseValue","dataType","DataType","parseFloat","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","enabled","getAggregatedChanges","getTransactionLog","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","castToNumber","oldValue","summaryService","clearSummaryCache","updateData","selectionService","isRowSelected","deselectRow","selectRowById","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","_update_row","rowInEditMode","newData","getAggregatedValue","transactionState","getState","update_row","selected","hasSummarized","onRowEdit","hasChanges","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","fieldFilterIndex","prepare_filtering_expression","filter_global","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","myExpr","clear_groupby","should_apply_number_style","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","hasRowInNonDeletedState","onRowDeleted","clearHeaderCBState","notifyChanges","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","totalPages","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","filterStrategy","advancedFilteringExpressionsTree","pipeTrigger","filteringPipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","max","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","Util","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","setPosition","justifyContent","alignItems","clone","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","NgZone","ContainerPositionStrategy","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","min","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","cdr","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IgxSelectionAPIService","selection","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","selectedChange","itemIndex","displayDensity","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","tslib_1.__decorate","IgxDropDownItemComponent","focusedState","focusedItem","focusedIndex","allowItemsFocus","focus","preventScroll","mousedownHandler","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBase","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","static","VirtualHelperBaseDirective","scrollAmount","_size","destroyed","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfScrollSyncService","_masterScroll","setScrollMaster","scroll","getScrollMaster","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","syncScrollService","totalItemCount","onChunkLoad","onScrollbarVisibilityChanged","onContentSizeChange","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","contentResizeNotify","dc","scrollComponent","getScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","func","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","createComponent","scrollDirection","touchAction","initSizesCache","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","destructor","throttleTime","leading","trailing","runTask","updateSizes","onHScroll","hvFactory","_updateHScrollOffset","ngAfterViewInit","contentObserver","ResizeObserver","observe","disconnect","ngOnChanges","changes","currentValue","igxForTrackBy","getTypeNameForDebugging","firstChange","_applyChanges","_recalcOnContainerChange","diff","_updateSizeCache","run","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","containerSize","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","l","rNodes","rootNodes","nodeType","Node","ELEMENT_NODE","nextElementSibling","rNode","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","embView","cntx","context","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","getElement","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","scrollable","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","onStable","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","scrollToItem","_scrollPosition","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","isSelectionValid","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","IgxInputGroupBase","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","LINE","BOX","BORDER","FLUENT","SEARCH","FLUENT_SEARCH","IgxInputGroupComponent","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","isFluentSearch","isFluent","hasWarning","hints","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_defaultType","_cssClassPrefix","buttonClick","removeClass","addClass","_color","color","_backgroundColor","_label","setAttribute","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","IgxDefaultDropStrategy","dropAction","drag","drop","atIndex","IgxAppendDropStrategy","dragElement","dropAreaElement","IgxPrependDropStrategy","IgxInsertDropStrategy","IgxDragHandleDirective","baseClass","VERTICALLY","HORIZONTALLY","NONE","_pageX","_pageY","IgxDragDirective","viewContainer","zone","renderer","ghostContext","dragTolerance","ghost","ghostClass","hideBaseOnDrag","animateOnRelease","dragStart","dragMove","dragEnd","dragClick","ghostCreate","ghostDestroy","transitioned","_visibility","selectDisabled","defaultReturnDuration","animInProgress","_baseMarginLeft","_baseMarginTop","_lastX","_lastY","_dragStarted","_ghostHostX","_ghostHostY","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","_offsetX","_defaultOffsetX","_offsetY","_defaultOffsetY","bVisible","IgxDragLocation","baseOriginLeft","baseOriginTop","PointerEvent","ghostElement","ghostLeft","baseLeft","ghostTop","baseTop","getTransformX","getTransformY","ghostMarginLeft","getComputedStyle","ghostMarginTop","ngAfterContentInit","dragHandles","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","onPointerLost","touchEventsEnabled","onTransitionEnd","_baseOriginX","_baseOriginY","_ghostStartX","_ghostStartY","setLocation","newLocation","offsetHostX","ghostHost","ghostHostOffsetLeft","offsetHostY","ghostHostOffsetTop","getWindowScrollLeft","getWindowScrollTop","transformX","transformY","setTransformXY","transitionToOrigin","customAnimArgs","startLocation","createGhost","transitionProperty","timingFunction","transitionDelay","transitionTo","movedElem","targetRects","handleFound","handle","currentTarget","targetElement","setPointerCapture","ghostOffsetX","ghostOffsetY","totalMovedX","totalMovedY","dragStartArgs_1","originalEvent","owner","startX","startY","moveArgs","nextPageX","nextPageY","setPageX","setPageY","updatedMovedX","updatedMovedY","lastMovedX","lastMovedY","translateX","translateY","dispatchDragEvents","dispatchDropEvent","dynamicGhostRef","ghostTemplate","cloneNode","createEventArgs","visible","topDropArea","customEventArgs","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","newPosX","newPosY","totalDraggedX","totalDraggedY","diffStartX","diffStartY","dropFinished","ghostDestroyArgs","viewPortX","pageXOffset","viewPortY","pageYOffset","elements","eventName","dragLeaveEvent","createEvent","initCustomEvent","posX","matrix","match","posY","ghostPosition","getPropertyValue","offsetParent","IgxDropDirective","enter","over","leave","dropped","droppable","dragover","_dropStrategy","classRef","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","dragData","isDragLinked","onDragDrop","elementsAtPoint","insertIndex","getInsertIndexAt","dragLinkArray","dragChannel","dropLinkArray","dropChannel","dropLinks","dragLinks","draggedDir","dropChildren","childUnder","draggedElemIndex","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","clientX","clientY","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","_initRadioButtons","radioButtons","props_1","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","_defaultCssClass","_defaultActiveCssClass","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IgxExpansionPanelBodyComponent","panel","_labelledBy","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","LEFT","RIGHT","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","collapsedChange","onCollapsed","onExpanded","Promise","resolve","labelledBy","headerId","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","zIndex","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","FEBRUARY","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","getFirstViewDate","activeViewIdx","getNextMonth","TimeDeltaInterval","getPrevMonth","getNextYear","getPrevYear","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","SINGLE","MULTI","RANGE","PREV","NEXT","IgxCalendarBase","hideOutsideDays","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","ScrollMonth","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","newDates","selDates","valueDateOnly_1","isDateDisabled","valueOf","selectRange","excludeDisabledDates","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectMultipleInMonth","valueDateOnly","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","activeView","yearsBtns","idx","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","monthsRef","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","isLastInRange","isFirstInRange","isWithinRange","onDateSelection","isDisabled","isInactive","today","outOfRangeDates","isHidden","isOutOfRange","isSingleSelection","specialDates","isWeekend","IgxDaysViewNavigationService","focusNextDate","nextView","childElementCount","nextDate","monthView","Direction","isFocusable","dayIsNextMonth","nextMonthView","prevMonthView","daysNavService","changeDaysView","monthAction","onViewChanging","focusHomeDate","focusFirstDay","focusEndDate","focusLastDay","IgxDaysViewComponent","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","isSelected","checkForRange","focusActiveDate","isToday","selectDay","getFirstMonthView","getLastMonthView","onKeydownArrow","IgxCalendarComponent","hasHeader","animationAction","isKeydownTrigger","_monthsViewNumber","startPrevMonthScroll","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","daysView","prevMonthBtn","nextMonthBtn","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","setSiblingMonths","monthViews","_monthViewsChanges$","switchMap","skipLast","onActiveViewDecade","dacadeView","onActiveViewDecadeKB","getFormattedDate","monthday","childClicked","deselectDateInMonthViews","viewChanging","callback","changeMonth","monthsBtns","onActiveViewYear","monthsView","focusMonth","attributes","onActiveViewYearKB","getViewDate","animationDone","toState","onKeydownPageDown","activeDate","isPageDown","activeElement","dayItem","onKeydownShiftPageUp","yearView","getMonthView","animations","transition","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","yearsBtn","onKeydownPageUp","IgxMonthViewSlotsCalendar","IgxGetViewDateCalendar","calendar","wholeDate","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","IgxCarouselComponent","platformUtil","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","activeChange","_active","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","readonly","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onSelectionDone","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onSelectTransitionDone","propertyName","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","chipsList","selectedChips","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","valueKey","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","IgxComboFilterConditionPipe","ItemHeights","diffInSets","set1","set2","results","entry","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","_remoteSelection","_overlaySettings","IgxComboState","searchInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","searchValue","manageRequiredAsterisk","_displayKey","clearSorting","comboInput","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","vContainer","DataTypes","registerRemoteEntries","ids","getValueDisplayPairs","selection_1","selection_1_1","ids_1","ids_1_1","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","removed","added","removedItems","addedItems","convertKeysToItems","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","monthsViewNumber","valueChange","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_destroy$","_onOpen","_onClose","_ngControl","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","getInputGroupElement","inputDirectiveElementRef","_inputElementRef","_inputUserTemplateElementRef","_positionSettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","_updateValidityOnBlur","_inputDirective","handleSelection","emitValueChangeEvent","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","mouseDown","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","_inputDirectiveUserTemplate","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxRow","IgxCell","inlineEditorTemplate","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","newCell","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","rowSelection","initPointerState","initKeyboardState","addKeyboardRange","parse","isCellSelectable","generateRange","primaryButton","ctrl","addToRange","isActiveNode","isInMap","isActive","hasColumnLayouts","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","dom","kbState","isChromium","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","clearAcriveEl","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","Range","selectNode","getSelectedRows","clearRowSelection","removedRec","isFilteringApplied","getRowIDs","allData","rID","emitRowSelectionEvent","selectAllRows","addedRows","clearPrevSelection","isRowSelectable","isRowDeleted","isMultiRowSelectionEnabled","selectRowsWithNoEvent","rowIDs","allRowsSelected","deselectRowsWithNoEvent","selectMultipleRows","gridData","lastRowID","currIndex","getRowDataById","rows","areAllRowSelected","dataItemsID","hasSomeRowSelected","currSelection","areEqualCollections","onRowSelectionChange","clearAllSelectedRows","filteredSortedData","rData","vendor","HammerGesturesManager","doc","hammerOptions","_hammerManagers","platformBrowser","inputClass","TouchInput","recognizers","Pan","Swipe","DIRECTION_HORIZONTAL","Tap","taps","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","quickFilter","excelStyleFilter","rootLevelOnly","childLevelsOnly","rootAndChildLevels","dataCell","summaryCell","hierarchicalRow","none","single","multiple","IgxGridCellComponent","touchManager","_vIndex","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","_cellSelection","GridSelectionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","setStartNavigationCell","colStart","onRangeSelection","_updateCRUDStatus","onDoubleClick","editable","deleted","cellTemplate","defaultCellTemplate","gridID","columnLayoutChild","setEditMode","addPointerListeners","removePointerListeners","gridRowSpan","gridColumnSpan","colEnd","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","cellSelectionMode","compositionStartHandler","compositionEndHandler","cssProps","crud","editableCell","isCellSelected","update","onCellClick","onContextMenu","shouldEmitSelection","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","onCellEditCancel","highlightText","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowComponent","dragging","defaultCssClass","_rowData","resolveClasses","visibleColumns","groupingExpressions","pinnedColumns","unpinnedColumns","showRowSelectors","rowDraggable","onRowSelectorClick","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","defaultDragIndicatorCssClass","rowDragging","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","WatchColumnChanges","rowIslandAPI","rowIsland","updateColumnList","repaint","_","IgxRowIslandAPIService","childRowIslands","childGrids","unset","oldId","registerChildRowIsland","unsetChildRowIsland","getChildRowIsland","rowIslandKey","registerChildGrid","parentRowID","getChildGrids","inDepth","allChildren","getChildGridByID","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnComponent","sortable","groupable","resizable","hiddenChange","disableHiding","disablePinning","movable","widthChange","_calcWidth","headerClasses","headerGroupClasses","cellStyles","sortingIgnoreCase","pinnedChange","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disablePinning","_defaultMinWidth","_hasSummary","hasTransactions","isPrimaryColumn","_editable","resetSummaryHeight","filteringService","refreshExpressions","hideFilteringRowOnColumnVisibilityChange","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","columnGroup","vIndex","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","resetCaches","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","multiRowLayoutRowSize","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","calcWidth","getFilledChildColumnSizes","getPossibleColumnWidth","getResizableColUnderEnd","spanUsed","columnSized","targets","targetsSquashed","topLevelParent","pinnable","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","headerGroup","autosize","getLargestCellWidth","reflow","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingLeft","paddingRight","borderRightWidth","headerCell","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","gridUnpinnedWidth","getUnpinnedWidth","elementWidth","unpinnedAreaMinWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","isLastPinned","orderedCols","rs","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","actualMinWidth","minWidth","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","relativeColumns","combinedSpan","pinnedWidth","maxPinnedWidth","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","resizeScaled","IgxResizeHandleDirective","colResizingService","_dblClick","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostClass","ghostImgIconClass","ghostImgIconGroupClass","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","childNodes","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","_hVirtDir","hasMovableColumns","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","RowEditPositionStrategy","isTop","isTopInitialPosition","container","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","collection_1","collection_1_1","hideAllColumns","collection_2","collection_2_1","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","showAdvancedFilteringUI","openAdvancedFilteringDialog","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","api","activateCell","currentCellIndex","rowEditTabs","last","move","handleEscape","activeNode","getCellElementByVisibleIndex","lastEditableColumnIndex","firstEditableColumnIndex","isColumnFullyVisible","performHorizontalScrollToCell","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","verticalScrollContainer","groupRowIndex","toggleGroup","rowExpandedIndicatorTemplate","defaultGroupByExpandedTemplate","rowCollapsedIndicatorTemplate","defaultGroupByCollapsedTemplate","isKeySupportedInGroupRow","handleTabKey","getColumnByName","dataView","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxGridNavigationService","parentVirtDir","offsetWidth","headerContainer","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnRightEdgeVisible","isColumnLeftEdgeVisible","forOfDir","isColumnPinned","displayContainerWidth","displayContainerScrollLeft","tslib_1.__spread","isRowInEditMode","findNextEditable","gridColumns","MoveDirection","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","getFocusableGrid","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","focusEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","findFirstDataRowIndex","verticalScroll","isGroupByRecord","findLastDataRowIndex","targetScr","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","shouldPerformVerticalScroll","targetRowIndex","targetRow","performVerticalScrollToCell","visibleColIndex","unpinnedIndex","cellElement","nextIndex","tbody","icons","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","_filterIconsRegistered","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filteringRow","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","ExpressionUI","prevExprUI","isFilteringExpressionsTreeEmpty","exprTree","IgxExcelStyleLoadingValuesTemplateDirective","IgxExcelStyleSearchComponent","_isLoading","excelStyleLoadingValuesTemplateDirective","defaultExcelStyleLoadingValuesTemplate","refreshSize","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","isSpecial","isBlanks","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","isColumnPinnable","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","pinClass","closeDropdown","onPin","onHide","onTextFilterClick","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","uniqueColumnValuesStrategy","renderColumnValuesRemotely","renderColumnValuesFromData","isLoading","getColumnFilterExpressionsTree","colVals","columnValues","toDateString","renderValues","columnField","generateUniqueValues","generateFilterValues","generateListData","isDateColumn","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","gridExpressionsTree","filterListItem","FilterListItem","numberPipe","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","selectAllFilterItems","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","igx_grid_advanced_filter_title","igx_grid_advanced_filter_and_group","igx_grid_advanced_filter_or_group","igx_grid_advanced_filter_end_group","igx_grid_advanced_filter_create_and_group","igx_grid_advanced_filter_create_or_group","igx_grid_advanced_filter_and_label","igx_grid_advanced_filter_or_label","igx_grid_advanced_filter_add_condition","igx_grid_advanced_filter_ungroup","igx_grid_advanced_filter_delete","igx_grid_advanced_filter_delete_filters","igx_grid_advanced_filter_initial_text","igx_grid_advanced_filter_column_placeholder","igx_grid_advanced_filter_value_placeholder","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","PaginatorResStrings","igx_paginator_label","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","recalculateSummaries","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","TOP","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","onBeforeViewDetach","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","stopImmediatePropagation","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","condToRemove","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","toggleChip","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxSelectItemComponent","_text","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","viewPort","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","positionNoScroll","CURRENT_POSITION_Y","itemTextToInputTextDiff","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputElement","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","inputFontSize","fontSize","numericInputFontSize","itemFontSize","inputTextToInputTop","itemTextToItemTop","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","itemLeftPadding","textIndent","numericLeftPadding","numericTextIndent","selectItemPaddingHorizontal","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","notifyOnChanges","ExpressionGroupItem","ExpressionItem","ExpressionOperandItem","IgxAdvancedFilteringDialogComponent","selectedExpressions","selectedGroups","columnSelectOverlaySettings","conditionSelectOverlaySettings","_dblClickDelay","_preventChipClick","_editingInputsContainer","scrollElementIntoView","_addModeContainer","_currentGroupButtonsContainer","overlayOutlet","contextMenuToggle","contextualGroup","_selectedColumn","selectedCondition","dragArgs","calculateContextMenuTarget","addCondition","afterExpression","cancelOperandAdd","operandItem","enterExpressionEdit","addAndGroup","addGroup","addOrGroup","endGroup","currentGroup","commitOperandEdit","editedExpression","selectedColumn","addModeExpression","inAddMode","cancelOperandEdit","deleteItem","operandCanBeCommitted","exitOperandEdit","isExpressionGroup","rootGroup","createExpressionGroupItem","filteringExpr","exprCopy","createExpressionsTreeFromGroupItem","subTree","onChipRemove","expressionItem","_clickTimer","onToggleExpression","onChipDblClick","hovered","columnSelect","conditionSelect","searchValueInput","toggleContextMenu","enterExpressionAdd","toggleExpression","deselectParentRecursive","findSingleSelectedGroup","filteringLogics","op","isInsideGroup","createAndGroup","createGroup","createOrGroup","chips","minIndex","MAX_VALUE","firstExpression","deleteFilters","onGroupClick","toggleGroupRecursive","operandExpression","minTop","maxRight","targetOffset","ungroup","selectedGroup","deleteGroup","selectFilteringLogic","getConditionFriendlyName","onExpressionsScrolled","invokeClick","onOutletPointerDown","getConditionList","setAddButtonFocus","addRootAndGroupButton","addConditionButton","applyChanges","onChipSelectionEnd","IgxRowSelectorDirective","templateRef","IgxHeadSelectorDirective","IgxRowSelectorsModule","IgxGroupByRowTemplateDirective","IgxRowExpandedIndicatorDirective","IgxRowCollapsedIndicatorDirective","IgxHeaderExpandIndicatorDirective","IgxHeaderCollapseIndicatorDirective","IgxGroupAreaDropDirective","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","onRowDragStart","onRowDragEnd","dropArea","expander","expanderWidth","rowRect","ghostCells","getElementsByClassName","IgxDragIndicatorIconDirective","IgxRowDragGhostDirective","IgxRowDragModule","IgxGridTransaction","IgxGridBaseComponent","differs","viewRef","_cdrRequests","_cdrRequestRepaint","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","overlayIDs","_advancedFilteringPositionSettings","_advancedFilteringOverlaySettings","autoGenerate","filteringExpressionsTreeChange","advancedFilteringExpressionsTreeChange","pageChange","perPageChange","columnHidingTitle","columnPinningTitle","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onGridCopy","tmpOutlets","headerExpandIndicatorTemplate","headerCollapseIndicatorTemplate","sortingExpressionsChange","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_hideRowSelectors","_rowDrag","_filteringPipeTrigger","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_allowFiltering","_allowAdvancedFiltering","_filterMode","observer","resizeNotify","_hiddenColumnsText","_pinnedColumnsText","_height","_horizontalForOfs","_multiRowLayoutRowSize","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","_cellSelectionMode","_rowSelectionMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","vfor","keydownHandler","isNavigationKey","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","tfoot","rowEditingWheelHandler","_scrollWidth","FilteringExpressionsTreeType","_advancedFilteringExpressionsTree","previous","navigateTo","hasVisibleColumns","refreshGridState","_hostWidth","evaluateLoadingState","calcGridHeadRow","_filteringStrategy","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","headSelectorsTemplates","rowSelectorsTemplates","_customDragIndicatorIconTemplate","dragIndicatorIconTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","selectionMode","overlayID","_setupServices","_setupListeners","_advancedFilteringOverlayId","ind","$event","isPercentHeight","getDataBasedBodyHeight","calculateGridHeight","calculateGridSizes","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","_setupRowObservers","elementFilter","isDefined","extractForOfs","rowListObserver","summaryRowObserver","combineLatest","_zoneBegoneListeners","initPinning","reattach","vertScrDC","displayContainer","resetNotifyChanges","getDragGhostCustomTemplate","dragGhostCustomTemplates","tmplOutlet","toggleColumnVisibility","paginatorClassName","unpinnedWidth","getFeatureColumnsWidth","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","hideRowSelectors","to","list","fromIndex","toIndex","newList","_resetColumnList","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","paginate","addRow","deleteRow","updateCell","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","_hasVisibleColumns","dataLength","_derivePossibleWidth","MINIMUM_COLUMN_WIDTH","columnWidthCombined","allItems","theadRow","minHeight","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","footer","getFilterCellHeight","headerGroupNativeEl","filterCellNativeEl","actualTheadRow","footerHeight","renderedHeight","computed","_shouldAutoSize","bodyHeight","defaultTargetBodyHeight","checkContainerSizeChange","origHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","showDragIcons","headerDragContainer","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","isPercentWidth","getColumnWidthSum","colSum","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","headerSelectorContainer","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","onHeaderSelectorClick","selectedRows","selectRows","deselectRows","onlyFilterData","deselectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","activeEl","selectionMap","tuple","cellSelection","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","copyHandlerIE","copyHandler","ie11","setData","childGridsData","shouldScrollVertically","shouldScrollHorizontally","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","inCollection","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","dataRow","occurenceIndex","searchIndex","_group","rowEditingOverlay","toggleRowEditingOverlay","shouldOverlayLoading","loadingOutlet","_loadingId","loadingOverlay","configureRowEditingOverlay","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","gridOutletKeyboardHandler","activeCell","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","viewDetachHandler","focusedCell","cachedViewLoaded","tmplId","templateID","index_1","summaryRow","closeAdvancedFilteringDialog","advancedFilteringDialog","IgxGridFooterComponent","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","MIN_VALUE","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxSelectGroupComponent","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectModule","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","_selectOptions","sortUniqueOptions","totalRecords","_totalRecords","newOption","paginatorSelectDisplayDensity","IgxPaginatorModule","IgxGridCellStyleClassesPipe","callbackOrValue","IgxGridCellStylesPipe","styles","css","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxHasVisibleColumnsPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","NavigationDirection","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isGroupRow","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","hScroll","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","groupingExpressionsChange","groupingExpansionStateChange","onGroupingDone","oldExpressions","_gridAPI","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","checkIfNoColumnField","clearGrouping","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","defaultExpandedTemplate","defaultCollapsedTemplate","getColumnGroupable","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","expression_1","expression_1_1","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","IgxGridSummaryPipe","summaryPosition","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","g","skipAdd","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","flatData","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","loadChildrenOnDemand","hasChildrenKey","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","expansionStatesChange","loadingRows","cloneMap","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","onLoadingDblClick","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","topIsVisible","getNextScrollable","targetIndex_1","scrTopPosition","verticalScrollTop","cellSelector_1","endIsVisible","getNextScrollableDown","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","_navigateToNextParentRow","focusNextRow","childContainer","focusNextChildDOMElem","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","prevChild","getSibling","prevChildRow","childRow","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","parentState","atLastChunk","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","horizontalScrollGridToIndex","inChild","cellSelector_2","cell_2","rIndex_1","scrTop","callBackFunc","containerTop","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","showExpandAll","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","currPath","pathElem","childrenForLayout","layoutMap","getParentRowId","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","cleanGridState","childGridTemplates","tmpl","IgxChildGridRowComponent","ch","_handleLayoutChanges","hGrid","setupEventEmitters","inputNames","outputs","matchingInputPropName","output","IgxHierarchicalGridComponent","hierarchicalStateChange","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","dragIndicatorIconTemplate","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","trackChanges","moveView","rootHeight","topDiff","toggleAll","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","persistFocusedCell","IgxHierarchicalRowComponent","deselect","expanderClick","expandable","defaultEmptyTemplate","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","_isOpen","enableGestures","isOpenChange","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","Renderer","IgxNavigationDrawerModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","SLIDER","FROM","TO","IgxSliderThumbComponent","_elementRef","_isActive","_isPressed","onThumbValueChange","onChange","onHoverChange","thumbBounderies","thumbCenter","SliderHandle","onPan","mouseX","updateThumbValue","onPinterEnter","onPointerLeave","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","continuous","IgxThumbLabelComponent","IgxSliderComponent","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_continuous","_labels","SliderType","_destroyer$","_indicatorsDestroyer$","thumbs","labelRefs","slierClass","thumbLabelVisibilityDuration","thumb","lowerValue","labelsViewEnabled","upperValue","labels","updateTrack","calculateStepDistance","positionHandlesAndUpdateTrack","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","lowerBound","updateLowerBoundAndMinTravelZone","upperBound","updateUpperBoundAndMaxTravelZone","_lowerBound","valueToFraction","_upperBound","isRange","lower","upper","validateInitialValue","findClosestThumb","thumbTo","thumbFrom","showSliderIndicators","releasePointerCapture","hideSliderIndicators","toggleSliderIndicators","onPanListener","onPanStart","onPanEnd","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","labelFrom","positionHandle","ngAfterContentChecked","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","thumbHandle","labelHandle","positionLeft","labelTo","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","track","unsubscriber","merge","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","_currentBottomNavId","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","setPanelsAttributes","_panelsChanges$","panels","panelsArray","tabPanels","getTabPanelId","getTabId","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","ariaDisabled","ariaSelected","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","autoGenerated","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","performSelectionChange","newTab","transformContentAnimation","transformIndicatorAnimation","IgxTabItemBase","setSelectedInternal","IgxTabsGroupBase","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","_tabs","IgxTabItemComponent","_ngZone","_nativeTabItem","relatedGroup","tabsArray","finalIndex","nativeTabItem","FIXED","CONTENTFIT","NEXT_TABS_ID","IgxTabsComponent","_currentTabsId","selectedIndexChange","tabsType","onTabItemDeselected","onTabItemSelected","_selectedIndex","iconLabelFoundInGroups","iconLabelFoundInTabs","TabsType","performSelection","hideIndicator","tabsContainer","setGroupsAttributes","_groupChanges$","resetSelectionOnCollectionChanged","groupsArray","tabsGroup","getTabsGroupId","getTabItemId","currentTab","tabsArray_1","tabsArray_1_1","oldTab","selectedTabItem","performDeselection","oldTabRelatedGroup","newTabRelatedGroup","bringNewTabIntoView","tabNativeElement","viewPortOffsetWidth","contentOffset","contentsContainer","selectedIndicator","IgxTabsModule","IgxItemListDirective","timePicker","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showAmPmList","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","leadZeroHour","leadZeroMinutes","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_hoursPos","_minutesPos","_secondsPos","_amPmPos","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","_dialogOverlaySettings","_dateFromModel","_mask","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","spinOnEdit","_inputGroup","_onDropDownClosed","determineCursorPos","onKeydownSpace","onAltArrowDown","clearCursorPos","lastIndexOf","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroMinute","itemsCount","formattedMinute","formattedHour","minute","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_isEntryValid","validH","validM","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","IgxTimePickerModule","IgxToastComponent","_isVisible","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","isVisibleChange","IgxToastPosition","mapPositionToClassName","IgxToastModule","SMALL","MEDIUM","LARGE"],"mappings":"6yBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAezB,SAASI,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2H5B,EAAvH6B,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAO1B,OAAO6B,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAGH,GAAK,EAAGA,KAASlB,EAAIyB,EAAWP,MAAIY,GAAKD,EAAI,EAAI7B,EAAE8B,GAAKD,EAAI,EAAI7B,EAAE0B,EAAQC,EAAKG,GAAK9B,EAAE0B,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAK5B,OAAOgC,eAAeR,EAAQC,EAAKG,GAAIA,EAOzD,SAASK,EAAWC,EAAaC,GACpC,GAAuB,iBAAZL,SAAoD,mBAArBA,QAAQM,SAAyB,OAAON,QAAQM,SAASF,EAAaC,GA4C7G,SAASE,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWzB,EAAI,EAChE,OAAIuB,EAAUA,EAAEnB,KAAKkB,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKtB,GAAKsB,EAAEnB,SAAQmB,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAEtB,KAAM4B,MAAON,KAKzC,SAASO,EAAOP,EAAGrB,GACtB,IAAIsB,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBV,EAAYkB,EAA3B9B,EAAIuB,EAAEnB,KAAKkB,GAAOS,EAAK,GAC3B,IACI,WAAc,IAAN9B,GAAgBA,KAAM,MAAQW,EAAIZ,EAAE0B,QAAQE,MAAMG,EAAGC,KAAKpB,EAAEe,OAExE,MAAOM,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQrB,IAAMA,EAAEgB,OAASL,EAAIvB,EAAU,YAAIuB,EAAEnB,KAAKJ,GAE1D,QAAkB,GAAI8B,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAI/B,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C+B,EAAKA,EAAGI,OAAON,EAAO3B,UAAUF,KACpC,OAAO+B,SC1IPK,KAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,gDAIAP,KAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,4CCfEC,EAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,qBAEbC,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,qBAKfE,EAA+B,CACjCC,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQZ,KAChBa,WAAY,EACZC,aAAc,GAGZC,EAAqCC,EAAAA,UAAUZ,EAAM,CACvDa,OAAQT,IAGNU,EAAsCF,EAAAA,UAAUZ,EAAM,CACxDa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQZ,KAChBa,WAAY,EACZC,aAAc,KCvBhBK,EAAkC,CACpCd,EAAAA,MAAM,CACFe,mBAAoB,SACpBC,eAAgB,gBAEpBd,EAAAA,QACI,oCACAe,EAAAA,UAAU,CACNjB,EAAAA,MAAM,CACFkB,OAAQ,EACRC,UAAW,sHAGfnB,EAAAA,MAAM,CACFkB,OAAQ,EACRC,UAAW,sHAOrBhB,EAA+B,CACjCC,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChB6B,SAAU,IACVC,YAAa,MACbC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,WAAY,EACZC,cAAe,OAGbC,EAAsChB,EAAAA,UAAUG,EAAY,CAC9DF,OAAM7D,EAAA,GACCoD,KAILyB,EAAyCjB,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCoD,EAAU,CACbiB,UAAW,QAIbS,EAAuClB,EAAAA,UAAUG,EAAY,CAC/DF,OAAM7D,EAAA,GACCoD,EAAU,CACbmB,QAAS,EACTC,QAAS,MAIXO,EAAwCnB,EAAAA,UAAUG,EAAY,CAChEF,OAAM7D,EAAA,GACCoD,EAAU,CACbiB,UAAW,IACXE,QAAS,EACTC,QAAS,MAIXQ,EAAyCpB,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCoD,EAAU,CACbkB,YAAa,YAIfW,EAAyCrB,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCoD,EAAU,CACbkB,YAAa,aAIfY,EAAyCtB,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCoD,EAAU,CACbkB,YAAa,QACbC,QAAS,EACTC,QAAS,MAIXW,EAAyCvB,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCoD,EAAU,CACbkB,YAAa,SACbC,QAAS,EACTC,QAAS,MCpGXT,EAAkC,CACpCd,EAAAA,MAAM,CACFC,QAAS,mBACTkB,UAAW,kEACXgB,gBAAiB,sBAErBjC,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFkB,OAAQ,EACRjB,QAAS,iBACTkB,UAAW,gEACXgB,gBAAiB,wBAKvBC,EAAiC,CACnChC,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChB6B,SAAU,EACVZ,WAAY,EACZc,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,YAAa,IACbhB,aAAc,EACd4B,KAAM,SACNC,KAAM,UAGJC,EAAaxF,EAAA,GACZqF,EAAY,CACf9B,OAAQkC,EAAOjD,KACfiB,WAAY,EACZC,aAAc,IAGZgC,EAA6C9B,EAAAA,UAAUG,EAAY,CACrEF,OAAM7D,EAAA,GAAOqF,KAGXM,EAA8C/B,EAAAA,UAAUG,EAAY,CACtEF,OAAM7D,EAAA,GAAOwF,KAGXI,EAA0ChC,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,UAIRO,EAA2CjC,EAAAA,UAAUG,EAAY,CACnEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,UAIRQ,EAA4ClC,EAAAA,UAAUG,EAAY,CACpEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,YAIRS,EAA6CnC,EAAAA,UAAUG,EAAY,CACrEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,YAIRU,EAA6CpC,EAAAA,UAAUG,EAAY,CACrEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,aAIRW,EAA8CrC,EAAAA,UAAUG,EAAY,CACtEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,aAIRY,EAA2CtC,EAAAA,UAAUG,EAAY,CACnEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,WAIRa,EAA4CvC,EAAAA,UAAUG,EAAY,CACpEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,WAIRc,EAAyCxC,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,QACNC,KAAM,UAIRc,EAA0CzC,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,QACNC,KAAM,UAIRe,EAAyC1C,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,QACNC,KAAM,aAIRgB,EAA0C3C,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,QACNC,KAAM,aAIRiB,EAAyC5C,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,OACNC,KAAM,aAIRkB,EAA0C7C,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,OACNC,KAAM,aAIRmB,EAAyC9C,EAAAA,UAAUG,EAAY,CACjEF,OAAM7D,EAAA,GACCqF,EAAY,CACfC,KAAM,OACNC,KAAM,UAIRoB,GAA0C/C,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBF,KAAM,OACNC,KAAM,UAIRqB,GAAgDhD,EAAAA,UAAUG,EAAY,CACxEF,OAAM7D,EAAA,GACCqF,EAAY,CACfd,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXoC,GAAiDjD,EAAAA,UAAUG,EAAY,CACzEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBjB,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXqC,GAAgDlD,EAAAA,UAAUG,EAAY,CACxEF,OAAM7D,EAAA,GACCqF,EAAY,CACfd,SAAU,EACVC,QAAS,EACTC,QAAS,MAIXsC,GAAiDnD,EAAAA,UAAUG,EAAY,CACzEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBjB,SAAU,EACVC,QAAS,EACTC,QAAS,MAIXuC,GAA0CpD,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCqF,EAAY,CACfd,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXwC,GAA2CrD,EAAAA,UAAUG,EAAY,CACnEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBjB,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXyC,GAA0CtD,EAAAA,UAAUG,EAAY,CAClEF,OAAM7D,EAAA,GACCqF,EAAY,CACfd,QAAS,EACTC,QAAS,EACTC,QAAS,MAIX0C,GAA2CvD,EAAAA,UAAUG,EAAY,CACnEF,OAAM7D,EAAA,GACCwF,EAAa,CAChBjB,QAAS,EACTC,QAAS,EACTC,QAAS,MCpOXV,GAAkC,CACpCZ,EAAAA,QACI,oCACAe,EAAAA,UAAU,CACNjB,EAAAA,MAAM,CACFkB,OAAQ,EACRC,UAAW,yCACXgB,gBAAiB,sBAErBnC,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,uEAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,yEAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,yEAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,yEAGfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,yEAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,yEAGfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,yEAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,qEAGfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,qEAGfnB,EAAAA,MAAM,CACFkB,OAAQ,EACRC,UAAW,yCACXgB,gBAAiB,0BAM3BhC,GAA+B,CACjCC,MAAO,KACP+D,UAAW,IACX9D,SAAU,QACVC,OJlDA,2CImDAc,SAAU,EACVC,YAAa,MACbI,WAAY,EACZC,cAAe,OACfW,KAAM,SACNC,KAAM,UAGJ8B,GAAuCzD,EAAAA,UAAUG,GAAY,CAC/DF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,QAIbE,GAAuC1D,EAAAA,UAAUG,GAAY,CAC/DF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,QAIbG,GAAuC3D,EAAAA,UAAUG,GAAY,CAC/DF,OAAM7D,EAAA,GACCoD,GAAU,CACbiB,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfY,KAAM,UAIRiC,GAA0C5D,EAAAA,UAAUG,GAAY,CAClEF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfY,KAAM,aAIRkC,GAAyC7D,EAAAA,UAAUG,GAAY,CACjEF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,QACNC,KAAM,aAIRmC,GAAwC9D,EAAAA,UAAUG,GAAY,CAChEF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,OACNC,KAAM,aAIRoC,GAA0C/D,EAAAA,UAAUG,GAAY,CAClEF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,GACZC,cAAe,IACfW,KAAM,SACNC,KAAM,aAIRqC,GAAsChE,EAAAA,UAAUG,GAAY,CAC9DF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,QACNC,KAAM,UAIRsC,GAAsCjE,EAAAA,UAAUG,GAAY,CAC9DF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,QACNC,KAAM,aAIRuC,GAAsClE,EAAAA,UAAUG,GAAY,CAC9DF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,OACNC,KAAM,aAIRwC,GAAsCnE,EAAAA,UAAUG,GAAY,CAC9DF,OAAM7D,EAAA,GACCoD,GAAU,CACbgE,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,OACNC,KAAM,UCrMRyC,GAAqC,CACvC/E,EAAAA,MAAM,CACFgF,wBAAyB,WACzB7D,UAAW,WACXgB,gBAAiB,kBAErBjC,EAAAA,QACI,oCACAe,EAAAA,UAAU,CACNjB,EAAAA,MAAM,CACFgF,wBAAyB,UACzB9D,OAAQ,GACRC,UAAW,gBAEfnB,EAAAA,MAAM,CACFgF,wBAAyB,WACzB9D,OAAQ,IACRC,UAAW,gBAEfnB,EAAAA,MAAM,CACFgF,wBAAyB,UACzB9D,OAAQ,IACRC,UAAW,gBAEfnB,EAAAA,MAAM,CACFgF,wBAAyB,WACzB9D,OAAQ,IACRC,UAAW,iBAYrB8D,GAAmC,CACrC/E,EAAAA,QACI,oCACAe,EAAAA,UAAU,CACNjB,EAAAA,MAAM,CACFkB,OAAQ,EACRC,UAAW,yBAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRC,UAAW,uBAEfnB,EAAAA,MAAM,CACFkB,OAAQ,EACRC,UAAW,6BAMrB+D,GAAkC,CACpC9E,MAAO,KACPC,SAAU,MACVC,OAAQ,cACR6E,UAAW,EACXC,QAAS,KAGPC,GAAiC,CACnCnF,EAAAA,QACI,oCACAe,EAAAA,UAAU,CACNjB,EAAAA,MAAM,CACFkB,OAAQ,EACRjB,QAAS,GACTkB,UAAW,yBAEfnB,EAAAA,MAAM,CACFkB,OAAQ,GACRjB,QAAS,EACTkB,UAAW,wBAEfnB,EAAAA,MAAM,CACFkB,OAAQ,EACRjB,QAAS,EACTkB,UAAW,2BAerBmE,GAAa3E,EAAAA,UAAUsE,GAAa,CACtCrE,OAAM7D,EAAA,GACCmI,MAILK,GAAa5E,EAAAA,UAAUsE,GAAa,CACtCrE,OAAM7D,EAAA,GACCmI,GAAa,CAChBE,QAAS,OAIXI,GAAY7E,EAAAA,UAAUoE,GAAe,CACvCnE,OAAM7D,EAAA,GAhFgC,CACtCqD,MAAO,KACPC,SAAU,OACVC,OAAQ,kBAkFNmF,GAAQ9E,EAAAA,UAAU0E,GAAW,CAC/BzE,OAAM7D,EAAA,GA7B4B,CAClCqD,MAAO,KACPC,SAAU,MACVC,OAAQ,cACR6E,UAAW,GACXO,SAAU,IACVN,QAAS,QCrGPrF,GAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,mBACTkB,UAAW,oCACXgB,gBAAiB,sBAErBjC,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,iBACTkB,UAAW,kCACXgB,gBAAiB,wBAKvBC,GAAiC,CACnChC,MAAO,KACP+D,UAAW,GACX9D,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZ2E,UAAW,GACX1E,aAAc,EACd2E,QAAS,EACT/C,KAAM,MACNC,KAAM,OAGJC,GAAaxF,EAAA,GACZqF,GAAY,CACf9B,OAAQC,EAAQZ,KAChBa,WAAY,EACZ2E,UAAW,EACX1E,aAAc,EACd2E,QAAS,KAGPO,GAA4ChF,EAAAA,UAAUZ,GAAM,CAAEa,OAAQwB,KAEtEwD,GAAwCjF,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,IACNC,KAAM,WAKZuD,GAA+ClF,EAAAA,UAAUZ,GAC3D,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACf+B,UAAW,IACXgB,UAAW,OAKjBW,GAAyCnF,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,MACNC,KAAM,QAKZyD,GAA0CpF,EAAAA,UAAUZ,GACtD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,IACNC,KAAM,UAKZ0D,GAA4CrF,EAAAA,UAAUZ,GACxD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,OACNC,KAAM,QAKZ2D,GAAYtF,EAAAA,UAAUZ,GACxB,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,OACNC,KAAM,QAKZ4D,GAAwCvF,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,IACNC,KAAM,QAKZ6D,GAA+CxF,EAAAA,UAAUZ,GAC3D,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,IACNC,KAAM,WAKZ8D,GAA2CzF,EAAAA,UAAUZ,GACvD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,OACNC,KAAM,UAKZ+D,GAA+C1F,EAAAA,UAAUZ,GAC3D,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACf+B,UAAW,IACXgB,UAAW,OAKjBmB,GAAwC3F,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,OACNC,KAAM,WAKZiE,GAA6C5F,EAAAA,UAAUZ,GACzD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,IACNC,KAAM,QAKZkE,GAA4C7F,EAAAA,UAAUZ,GACxD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfC,KAAM,MACNC,KAAM,WAKZmE,GAA8C9F,EAAAA,UAAUZ,GAC1D,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,OACNC,KAAM,WAKZoE,GAA6C/F,EAAAA,UAAUZ,GAAM,CAAEa,OAAQ2B,KAEvEoE,GAAyChG,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,IACNC,KAAM,WAKZsE,GAAyCjG,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,OACNC,KAAM,WAKZuE,GAAgDlG,EAAAA,UAAUZ,GAC5D,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChB4B,UAAW,IACXiB,QAAS,OAKf0B,GAA6CnG,EAAAA,UAAUZ,GACzD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,OACNC,KAAM,QAKZyE,GAAgDpG,EAAAA,UAAUZ,GAC5D,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,IACNC,KAAM,WAKZ0E,GAA0CrG,EAAAA,UAAUZ,GACtD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,MACNC,KAAM,QAKZ2E,GAA2CtG,EAAAA,UAAUZ,GACvD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,IACNC,KAAM,UAKZ4E,GAAyCvG,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,OACNC,KAAM,QAKZ6E,GAAyCxG,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,IACNC,KAAM,QAKZ8E,GAA4CzG,EAAAA,UAAUZ,GACxD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,OACNC,KAAM,UAKZ+E,GAA6C1G,EAAAA,UAAUZ,GACzD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBF,KAAM,MACNC,KAAM,WAKZgF,GAAgD3G,EAAAA,UAAUZ,GAC5D,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChB4B,UAAW,IACXiB,QAAS,OAKfmC,GAA8C5G,EAAAA,UAAUZ,GAC1D,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,IACNC,KAAM,QAKZkF,GAA+C7G,EAAAA,UAAUZ,GAC3D,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,OACNC,KAAM,WC7UZvC,GAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,mBACTkB,UAAW,qBAEfjB,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,iBACTkB,UAAW,qBAKjBiB,GAAiC,CACnChC,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZiH,aAAc,qBACdhH,aAAc,EACdiH,WAAY,iBAGVnF,GAAkC,CACpCnC,MAAO,KACPC,SAAU,QACVC,OAAQkC,EAAOjD,KACfiB,WAAY,EACZiH,aAAc,gBACdhH,aAAc,EACdiH,WAAY,sBAGVC,GAAyChH,EAAAA,UAAUZ,GAAM,CAAEa,OAAQwB,KAEnEwF,GAA0CjH,EAAAA,UAAUZ,GACtD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZiH,aAAc,qBACdhH,aAAc,EACdiH,WAAY,mBAKlBG,GAA2ClH,EAAAA,UAAUZ,GACvD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZiH,aAAc,oBACdhH,aAAc,EACdiH,WAAY,mBAKlBI,GAA4CnH,EAAAA,UAAUZ,GACxD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZiH,aAAc,oBACdhH,aAAc,EACdiH,WAAY,mBAKlBK,GAAwCpH,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfqF,aAAc,uCACdC,WAAY,kCAKlBM,GAAwCrH,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfqF,aAAc,wCACdC,WAAY,kCAKlBO,GAAwCtH,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfqF,aAAc,sCACdC,WAAY,kCAKlBQ,GAAwCvH,EAAAA,UAAUZ,GACpD,CACIa,OAAM7D,EAAA,GACCqF,GAAY,CACfqF,aAAc,uCACdC,WAAY,kCAKlBS,GAA0CxH,EAAAA,UAAUZ,GAAM,CAAEa,OAAQ2B,KAEpE6F,GAA4CzH,EAAAA,UAAUZ,GACxD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBmF,WAAY,wBAKlBW,GAA6C1H,EAAAA,UAAUZ,GACzD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQkC,EAAOjD,KACfiB,WAAY,EACZiH,aAAc,gBACdhH,aAAc,EACdiH,WAAY,uBAKlBY,GAA2C3H,EAAAA,UAAUZ,GACvD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBmF,WAAY,yBAKlBa,GAAyC5H,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBkF,aAAc,8BACdC,WAAY,2CAKlBc,GAAyC7H,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBkF,aAAc,8BACdC,WAAY,0CAKlBe,GAAyC9H,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBkF,aAAc,8BACdC,WAAY,2CAKlBgB,GAAyC/H,EAAAA,UAAUZ,GACrD,CACIa,OAAM7D,EAAA,GACCwF,GAAa,CAChBkF,aAAc,8BACdC,WAAY,4CC3LlBiB,GAAiC,CACnC3I,EAAAA,MAAM,CACFC,QAAS,mBACTkB,UAAW,yCACXgB,gBAAiB,sBAErBjC,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,iBACTkB,UAAW,uCACXgB,gBAAiB,wBAKvByG,GAAgC,CAClCxI,MAAO,KACP+D,UAAW,IACX9D,SAAU,MACVC,OAAQC,EAAQT,KAChBsB,SAAU,EACVZ,WAAY,EACZiB,YAAa,IACbhB,aAAc,EACd4B,KAAM,MACNC,KAAM,UAGJuG,GAAc9L,EAAA,GACb6L,GAAW,CACdvI,SAAU,OACVC,OAAQkC,EAAO1C,KACfsB,SAAU,GACVZ,WAAY,EACZiB,WAAY,EACZhB,aAAc,IAGZqI,GAA4CnI,EAAAA,UAAUgI,GAAW,CACnE/H,OAAM7D,EAAA,GACC6L,MAILG,GAA8CpI,EAAAA,UAAUgI,GAAW,CACrE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdzE,UAAW,IACX9B,KAAM,SACNC,KAAM,YAIR0G,GAA+CrI,EAAAA,UAAUgI,GAAW,CACtE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdnH,WAAY,IACZY,KAAM,aAIR4G,GAA6CtI,EAAAA,UAAUgI,GAAW,CACpE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdzE,UAAW,IACX1C,WAAY,IACZY,KAAM,SACNC,KAAM,WAIR4G,GAA4CvI,EAAAA,UAAUgI,GAAW,CACnE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdvI,SAAU,MACVoB,WAAY,OAId0H,GAA8CxI,EAAAA,UAAUgI,GAAW,CACrE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdzE,UAAW,IACX9D,SAAU,MACVoB,WAAY,GACZY,KAAM,SACNC,KAAM,YAIR8G,GAA+CzI,EAAAA,UAAUgI,GAAW,CACtE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdvI,SAAU,MACVoB,YAAa,GACbY,KAAM,aAIRgH,GAA6C1I,EAAAA,UAAUgI,GAAW,CACpE/H,OAAM7D,EAAA,GACC6L,GAAW,CACdzE,UAAW,IACX9D,SAAU,MACVoB,YAAa,GACbY,KAAM,SACNC,KAAM,WAIRgH,GAA6C3I,EAAAA,UAAUgI,GAAW,CACpE/H,OAAM7D,EAAA,GACC8L,MAILU,GAA+C5I,EAAAA,UAAUgI,GAAW,CACtE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjB1E,UAAW,IACX9B,KAAM,SACNC,KAAM,YAIRkH,GAAgD7I,EAAAA,UAAUgI,GAAW,CACvE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjBzH,UAAW,GACXiB,KAAM,aAIRoH,GAA+C9I,EAAAA,UAAUgI,GAAW,CACtE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjB1E,UAAW,IACX/C,UAAW,GACXiB,KAAM,SACNC,KAAM,WAIRoH,GAA6C/I,EAAAA,UAAUgI,GAAW,CACpE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjBxI,SAAU,OACVe,UAAW,QAIbuI,GAA+ChJ,EAAAA,UAAUgI,GAAW,CACtE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjB1E,UAAW,IACX9D,SAAU,OACVe,UAAW,IACXiB,KAAM,SACNC,KAAM,YAIRsH,GAAgDjJ,EAAAA,UAAUgI,GAAW,CACvE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjBxI,SAAU,OACVe,SAAU,IACViB,KAAM,aAIRwH,GAA8ClJ,EAAAA,UAAUgI,GAAW,CACrE/H,OAAM7D,EAAA,GACC8L,GAAc,CACjB1E,UAAW,IACX9D,SAAU,OACVe,SAAU,IACViB,KAAM,SACNC,KAAM,WCnLRvC,GAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,qBACT6J,OAAQ,sBAEZ5J,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,mBACT6J,OAAQ,sBAKd3J,GAA+B,CACjCC,MAAO,KACPC,SAAU,QACVC,OAAQkC,EAAOjD,KACfkB,aAAc,EACdD,WAAY,EACZuJ,YAAa,GACbC,UAAW,IAGTC,GAAwCtJ,EAAAA,UAAUZ,GAAM,CAC1Da,OAAM7D,EAAA,GACCoD,GAAU,CACbG,OAAQC,EAAQhB,KAChBkB,aAAc,EACdD,WAAY,EACZuJ,YAAa,MACbC,UAAW,QAIbE,GAAyCvJ,EAAAA,UAAUZ,GAAM,CAC3Da,OAAM7D,EAAA,GACCoD,GAAU,CACbG,OAAQC,EAAQhB,KAChBkB,aAAc,EACdD,WAAY,EACZuJ,YAAa,IACbC,UAAW,wBCpCf,SAAAG,IACIxN,KAAKyN,KAAO,GAgCpB,OA7BWD,EAAAtN,UAAAwN,IAAP,SAAWC,EAAYC,GACnB5N,KAAKyN,KAAKE,GAAMC,GAGbJ,EAAAtN,UAAA2N,OAAP,SAAcF,UACH3N,KAAKyN,KAAKE,IAGdH,EAAAtN,UAAA4N,IAAP,SAAWH,GACP,GAAIA,EACA,OAAO3N,KAAKyN,KAAKE,IAIlBH,EAAAtN,UAAA6N,OAAP,SAAcJ,aAAYK,EAAA,GAAAC,EAAA,EAAAA,EAAAvN,UAAAC,OAAAsN,IAAAD,EAAAC,EAAA,GAAAvN,UAAAuN,GACtB,GAAIjO,KAAKyN,KAAKE,GACV,OAAOO,EAAAlO,KAAKyN,KAAKE,IAAII,OAAMlN,MAAAqN,EAAAxL,EAAIsL,KAGhCR,EAAAtN,UAAAiO,KAAP,SAAYR,aAAYK,EAAA,GAAAC,EAAA,EAAAA,EAAAvN,UAAAC,OAAAsN,IAAAD,EAAAC,EAAA,GAAAvN,UAAAuN,GACpB,GAAIjO,KAAKyN,KAAKE,GACV,OAAOO,EAAAlO,KAAKyN,KAAKE,IAAIQ,KAAItN,MAAAqN,EAAAxL,EAAIsL,KAG9BR,EAAAtN,UAAAkO,MAAP,SAAaT,aAAYK,EAAA,GAAAC,EAAA,EAAAA,EAAAvN,UAAAC,OAAAsN,IAAAD,EAAAC,EAAA,GAAAvN,UAAAuN,GACrB,GAAIjO,KAAKyN,KAAKE,GACV,OAAOO,EAAAlO,KAAKyN,KAAKE,IAAIS,MAAKvN,MAAAqN,EAAAxL,EAAIsL,KAG1CR,KC/BAa,GAAA,WAMI,SAAAA,EAAYC,GACRtO,KAAKuO,MAAQD,EAOrB,OAHWD,EAAAnO,UAAAsO,uBADP,WAEIxO,KAAKuO,MAAMR,OAAO/N,KAAKgB,QAAQ,wBAZtCyN,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,8DAXflB,sCAeHmB,EAAAA,MAAKX,KAAA,CAAC,gDAMNY,EAAAA,aAAYZ,KAAA,CAAC,YAIlBK,EAdA,GAyBAQ,GAAA,WAMI,SAAAA,EAAYP,GACRtO,KAAKuO,MAAQD,EAOrB,OAHWO,EAAA3O,UAAA4O,sBADP,WAEI9O,KAAKuO,MAAMH,MAAMpO,KAAKgB,QAAQ,wBAZrCyN,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,6DApCflB,sCAwCHmB,EAAAA,MAAKX,KAAA,CAAC,8CAMNY,EAAAA,aAAYZ,KAAA,CAAC,YAIlBa,EAdA,GAmBAE,GAAA,WAAA,SAAAA,KAKkC,2BALjCC,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACJ,GAA6BR,IAC5Ca,QAAS,CAACL,GAA6BR,IACvCc,UAAW,CAAC3B,QAEkBuB,EALlC,GClDA,SAAgBK,GAAWC,EAAcC,OAC/BC,EAAM,GACZ,IAAKF,EACD,OAAOE,EAGX,QADI/O,EAAI6O,EAAM1O,OACPH,KACH+O,EAAI/O,GAAK8O,EAAOE,GAAWH,EAAM7O,IAAM6O,EAAM7O,GAEjD,OAAO+O,EA8BX,SAAgBE,GAAaC,EAAUC,WACnC,IAAKC,GAASF,GACV,MAAM,IAAIG,MAAM,qBAAqBH,EAAI,oCAG7C,IAAKE,GAASD,GACV,OAAOD,MAGX,IAAkB,IAAAI,EAAAC,EAAAvQ,OAAOwQ,KAAKL,IAAKM,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAhC,IAAMjB,EAAGgP,EAAA9N,MACVuN,EAAKzO,GAAOuO,GAAWG,EAAK1O,yGAGhC,OAAOyO,EAWX,SAAgBF,GAAWrN,WACvB,GAAI+N,GAAO/N,GACP,OAAO,IAAIgO,KAAKhO,EAAMiO,WAE1B,GAAIzQ,MAAM0Q,QAAQlO,GACd,OAAAO,EAAWP,GAGf,GAAIA,aAAiBmO,KAAOnO,aAAiBoO,IACzC,OAAOpO,EAGX,GAAIyN,GAASzN,GAAQ,KACXqO,EAAS,OAEf,IAAkB,IAAAV,EAAAC,EAAAvQ,OAAOwQ,KAAK7N,IAAM8N,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAjC,IAAMjB,EAAGgP,EAAA9N,MACVqO,EAAOvP,GAAOuO,GAAWrN,EAAMlB,yGAEnC,OAAOuP,EAEX,OAAOrO,EASX,SAAgByN,GAASzN,GACrB,OAAOA,GAA8B,oBAArBA,EAAMsO,WAS1B,SAAgBP,GAAO/N,GACnB,MAAiD,kBAA1C3C,OAAOU,UAAUuQ,SAAS7P,KAAKuB,GAW1C,SAAgBuO,GAAQhB,EAAMC,GAC1B,OAAIO,GAAOR,IAASQ,GAAOP,GAChBD,EAAKU,YAAcT,EAAKS,UAE5BV,IAASC,EAmDpB,SAAgBgB,GAAoBC,EAAcC,OAC1CC,EAAW,KACVC,OACDD,EAAWD,EAAKxN,MAAMyN,SAEtBD,EAAKxN,MAAMyN,SAAW,WAG1BF,EAAMI,mBAAmBH,OACnBI,EAAQL,EAAMM,wBAAwBD,MAO5C,OALKF,OAEDF,EAAKxN,MAAMyN,SAAWA,GAGnBG,EAuBX,SAAgBE,KACZ,OAAOC,UAAUC,WAAWC,QAAQ,YAAc,EAKtD,SAAgBC,KAEZ,MADoB,uBAAuBC,KAAKJ,UAAUK,WAO9D,SAAgBV,KAEZ,MADuB,0BAA0BS,KAAKJ,UAAUK,WAOpE,IAAAC,GAAA,WAMI,SAAAA,EAAyCC,GAAA3R,KAAA2R,WAAAA,EAJlC3R,KAAA4R,UAAqBC,EAAAA,kBAAkB7R,KAAK2R,YAE5C3R,KAAA8R,MAAQ9R,KAAK4R,WAAa,mBAAmBJ,KAAKJ,UAAUK,cAAgB,aAAcM,mCAJpGC,EAAAA,WAAUhE,KAAA,CAAC,CAAEiE,WAAY,oDAM+BzS,OAAMuB,WAAA,CAAA,CAAAmR,KAA9CC,EAAAA,OAAMnE,KAAA,CAACoE,EAAAA,oJANxB,GAaA,SAAgBC,GAAYC,GACxB,OAAwB,IAAjBA,EAAMC,OAyBjB,SAAgBC,GAAQjD,OAChBiB,EAAS,GASb,OAPAjB,EAAIkD,QAAQ,SAAAC,GAER,GADAlC,EAAOhO,KAAKkQ,GACRA,EAAGC,SAAU,KACPA,EAAWhT,MAAM0Q,QAAQqC,EAAGC,UAAYD,EAAGC,SAAWD,EAAGC,SAASC,UACxEpC,EAASA,EAAO7N,OAAO6P,GAAQG,OAGhCnC,EAsBX,IAAaqC,GAAkB,IAAItC,IAAI,CACnC,OACA,KACA,OACA,QACA,YACA,UACA,YACA,aACA,OACA,MACA,QACA,WACA,MAESuC,GAAkB,IAAIvC,IAAI,kCAAkCwC,MAAM,MAClEC,GAAoB,IAAIzC,IAAI,4BAA4BwC,MAAM,MAC9DE,GAAiB,IAAI1C,IAAG7N,EAAK/C,MAAMuT,KAAKL,IAAgB,CAAE,MAAO,QAAS,KAAM,SAAU,aC7TnGM,KAAA,EACAC,IAAA,EACAC,KAAA,GCNJ,SAAgBC,GAAiBC,EAAwBC,GACrD,OAAID,EAAG5S,SAAW6S,EAAG7S,QAGd4S,EAAGE,MAAM,SAACC,EAAOC,GACpB,OAAOD,EAAME,YAAcJ,EAAGG,GAAOC,WAAaF,EAAMvR,QAAUqR,EAAGG,GAAOxR,QAIpF,SAAgB0R,GAAaC,OACnBC,EAAgC,GACtC,GAAID,IAASE,WAAaF,EAAKG,WAE3B,IADAF,EAAUvR,KAAK,CAAEoR,UAAWE,EAAKG,WAAWL,UAAWzR,MAAO2R,EAAK3R,QAC5D2R,EAAKI,aACRJ,EAAOA,EAAKI,YACZH,EAAUI,QAAQ,CAAEP,UAAWE,EAAKG,WAAWL,UAAWzR,MAAO2R,EAAK3R,QAG9E,OAAO4R,2ECDP,SAAAK,KAmDJ,OAjDkBA,EAAAC,SAAd,WACI,OAAOrU,KAAKsU,YAActU,KAAKsU,UAAY,IAAItU,OAG5CoU,EAAAlU,UAAAqU,KAAP,SAAYC,EACAZ,EACAa,EACAC,EACAC,GAJZ,IAAAC,EAAA5U,KAKUiB,EAAM2S,EACNiB,EAAWJ,IAAQK,GAAiBzB,MAAQ,EAAI,EAItD,OAAOrT,KAAK+U,UAAUP,EAHN,SAAC9E,EAAMC,GACnB,OAAOiF,EAAKI,eAAetF,EAAMC,EAAM1O,EAAK4T,EAASH,EAAYC,MAKlEP,EAAAlU,UAAA+U,cAAP,SAAqBC,EAAQ3V,OACnB4V,EAAY,OAAND,GAAcA,IAAMlB,UAC1BoB,EAAY,OAAN7V,GAAcA,IAAMyU,UAChC,OAAImB,EACIC,EACO,GAEH,EACDA,EACA,EAEJF,EAAI3V,EAAI,EAAI2V,EAAI3V,GAAK,EAAI,GAG1B6U,EAAAlU,UAAA8U,eAAV,SAAyBtF,EACAC,EACA1O,EACA4T,EACAH,EACAC,OACjBO,EAAIP,EAAcjF,EAAMzO,GACxB1B,EAAIoV,EAAchF,EAAM1O,GAK5B,OAJIyT,IACAQ,EAAIA,GAAKA,EAAEG,YAAcH,EAAEG,cAAgBH,EAC3C3V,EAAIA,GAAKA,EAAE8V,YAAc9V,EAAE8V,cAAgB9V,GAExCsV,EAAU7U,KAAKiV,cAAcC,EAAG3V,IAGjC6U,EAAAlU,UAAA6U,UAAV,SAAoBP,EAAac,GAC7B,OAAOd,EAAKD,KAAKe,IAnDNlB,EAAAE,UAAoC,KAqDvDF,mBAEA,SAAAmB,KAqHA,OApHWA,EAAArV,UAAAqU,KAAP,SAAYC,EAAagB,GACrB,OAAOxV,KAAKyV,kBAAkBjB,EAAMgB,IAGhCD,EAAArV,UAAAwV,2BAAR,SAAmClB,EAC3Bb,EACAM,OACAzT,EACAmV,EACEC,EAAM,GACN3U,EAAMgT,EAAWL,UACjBiC,EAAMrB,EAAK7T,OACjBiV,EAAIpT,KAAKgS,EAAKb,IACdgC,EAAW3V,KAAK8V,cAActB,EAAKb,GAAQ1S,GAC3C0S,QACMoC,EAAW9B,EAAW+B,kBAAoB5B,GAAuBC,WAAWY,cAClF,IAAKzU,EAAImT,EAAOnT,EAAIqV,GAC6C,IAAzDE,EAAS/V,KAAK8V,cAActB,EAAKhU,GAAIS,GAAM0U,GAD1BnV,IAEjBoV,EAAIpT,KAAKgS,EAAKhU,IAKtB,OAAOoV,GAEHL,EAAArV,UAAAuV,kBAAR,SAA6BjB,EACAgB,EACAS,OACrBzV,EACA0V,EACAC,EACAC,EACAC,OALqB,IAAAJ,IAAAA,EAAA,OAMnBK,EAAWd,EAAY7U,OACvB4V,EAAU/B,EAAK7T,OAErB,IADAsV,EAAkBA,GAAmB,IACdK,GAAYC,GAAW,EAC1C,OAAO/B,EAOX,IALA2B,EAAOX,EAAYS,IACTO,WACNL,EAAKK,SAAWpC,GAAuBC,YAE3CG,EAAO2B,EAAKK,SAASjC,KAAKC,EAAM2B,EAAKvC,UAAWuC,EAAK1B,IAAK0B,EAAKzB,WAAY1U,KAAK8V,eAC5EG,IAAoBK,EAAW,EAC/B,OAAO9B,EAGX,IAAKhU,EAAI,EAAGA,EAAI+V,EAAS/V,IAAK,CAM1B,KAJA6V,GADAD,EAASpW,KAAK0V,2BAA2BlB,EAAMhU,EAAG2V,IAC/BxV,QACH,IACZyV,EAASpW,KAAKyV,kBAAkBW,EAAQZ,EAAaS,EAAkB,IAEtEC,EAAI,EAAGA,EAAIG,EAAWH,IACvB1B,EAAKhU,EAAI0V,GAAKE,EAAOF,GAEzB1V,GAAK6V,EAAY,EAErB,OAAO7B,GAEDe,EAAArV,UAAAuW,mBAAV,SAAgCjC,EAAWjG,EAAuBmF,EAC9DgD,EAAwB9U,EAA4B+U,EACpDC,EAA2BC,QADyB,IAAAF,IAAAA,EAAA,WACpD,IAAAC,IAAAA,EAAA,SAA2B,IAAAC,IAAAA,EAAA,CAA+BrC,KAAM,GAAI5S,SAAU,KAK9E,QAJM4T,EAAcjH,EAAMiH,YACpBsB,EAAYvI,EAAMuI,UACpBtW,EAAI,EACJgQ,EAAS,wBAEHuG,EAAQC,EAAKtB,2BAA2BlB,EAAMhU,EAAGgV,EAAY9B,IAC7DuD,EAA2B,CAC7BhD,WAAYuB,EAAY9B,GACxBA,MAAKA,EACLwD,QAAS9H,GAAW2H,GACpB5U,MAAO4U,EAAM,GAAGvB,EAAY9B,GAAOE,WACnCM,YAAawC,EACbS,OAAQ,GACRhK,OAAQwJ,EAAOA,EAAKS,kBAAoB,MAExCV,EACAA,EAAOS,OAAO3U,KAAKyU,GAEnBL,EAAcpU,KAAKyU,OAEjBlD,EAAYF,GAAaoD,GACzBI,EAAmCP,EAAUQ,KAAK,SAAC/W,GACrD,OAAA+S,GAAiB/S,EAAEwT,WAAa,CAAC,CAAEH,UAAWqD,EAAShD,WAAWL,UAAWzR,MAAO8U,EAAS9U,QAAU4R,KACrGwD,EAAWF,EAAcA,EAAYE,SAAWhJ,EAAMiJ,gBACxDC,OAAe,EAKnB,GAJAjH,EAAOhO,KAAKyU,GACZrV,EAASY,KAAK,MACdqU,EAAWrC,KAAKhS,KAAKyU,GACrBJ,EAAWjV,SAASY,KAAK,MACrBkR,EAAQ8B,EAAY7U,OAAS,EAC7B8W,EAAkBT,EAAKP,mBAAmBM,EAAOxI,EAAOmF,EAAQ,EAAGuD,EAC/DM,EAAW3V,EAAW,GAAI+U,EAAMC,EAAeC,GAC/CU,IACA/G,EAASA,EAAO7N,OAAO8U,QAExB,KACH,IAAwB,IAAAC,EAAA3H,EAAAgH,GAAKY,EAAAD,EAAAxV,QAAAyV,EAAAvV,KAAAuV,EAAAD,EAAAxV,OAAE,CAA1B,IAAM0V,EAASD,EAAAxV,MAChB0U,EAAWjV,SAASY,KAAKyU,GACzBJ,EAAWrC,KAAKhS,KAAKoV,wGAErBL,IACA3V,EAASY,KAAI3B,MAAbe,EAAQc,EAASmU,EAAWjV,SAASiW,MAAMhB,EAAWjV,SAASjB,OAASoW,EAAMpW,UAC9E6P,EAAOhO,KAAI3B,MAAX2P,EAAM9N,EAASmU,EAAWrC,KAAKqD,MAAMhB,EAAWrC,KAAK7T,OAASoW,EAAMpW,WAG5EH,GAAKuW,EAAMpW,eAzCRH,EAAIgU,EAAK7T,YA2ChB,OAAO6P,GAED+E,EAAArV,UAAA4V,cAAV,SAAwBgC,EAAU7W,GAC9B,OAAO6W,EAAI7W,IAEnBsU,oBAEA,SAAAwC,mDAIA,OAJ0CC,EAAAA,EAAAA,GAC5BD,EAAA7X,UAAA4V,cAAV,SAAwBgC,EAAU7W,GAC9B,OAAO6W,EAAItD,KAAKvT,IAExB8W,GAJ0CxC,mBC3L1C,SAAA0C,mDAUA,OAViCD,EAAAA,EAAAA,GACtBC,EAAA/X,UAAAgY,QAAP,SAAe1D,EAAajG,EAAuBoI,EAC/CC,EAAuBC,QAAA,IAAAA,IAAAA,EAAA,CAA+BrC,KAAM,GAAI5S,SAAU,SACpEA,EAA6B,GAEnC,MAAO,CACH4S,KAFaxU,KAAKyW,mBAAmBjC,EAAMjG,EAAO,EAAG,KAAM3M,EAAU+U,EAAMC,EAAeC,GAG1FjV,SAAUA,IAGtBqW,GAViC1C,QCJ7BpC,KAAA,EACAgF,mBAAA,EACAC,wBAAA,sICAAC,IAAA,EACAC,GAAA,2CCAAC,QAAA,EACAC,SAAA,uDAaJ,IAAAC,GAAA,WA2DI,SAAAA,EAAYC,EAA0B9E,GAtCtC5T,KAAA2Y,kBAA0E,GAuCtE3Y,KAAK0Y,SAAWA,EAChB1Y,KAAK4T,UAAYA,EAuEzB,OA/DkB6E,EAAAG,MAAd,SAAoBC,GAChB,OAAQA,IAAmBA,EAAeF,oBAAsBE,EAAeF,kBAAkBhY,QAU9F8X,EAAAvY,UAAAoX,KAAP,SAAY1D,OACFD,EAAQ3T,KAAK8Y,UAAUlF,GAE7B,OAAID,GAAS,EACF3T,KAAK2Y,kBAAkBhF,GAG3B,MAUJ8E,EAAAvY,UAAA4Y,UAAP,SAAiBlF,GAEb,QADIuC,EACK3V,EAAI,EAAGA,EAAIR,KAAK2Y,kBAAkBhY,OAAQH,IAE/C,IADA2V,EAAOnW,KAAK2Y,kBAAkBnY,cACViY,GAChB,GAAIzY,KAAK+Y,oCAAoC5C,EAAMvC,GAC/C,OAAOpT,OAGX,GAAI,EAA+BoT,YAAcA,EAC7C,OAAOpT,EAKnB,OAAQ,GAGFiY,EAAAvY,UAAA6Y,oCAAV,SAA8CC,EAA4CpF,GACtF,GAAIoF,EAAgBpF,YAAcA,EAC9B,OAAO,EAIX,QADIuC,EACK3V,EAAI,EAAGA,EAAIwY,EAAgBL,kBAAkBhY,OAAQH,IAE1D,OADA2V,EAAO6C,EAAgBL,kBAAkBnY,cACpBiY,EACVzY,KAAK+Y,oCAAoC5C,EAAMvC,GAE/C,EAA+BA,YAAcA,EAI5D,OAAO,GAEf6E,EApIA,iBCXA,SAAAQ,KA+CA,OAzCWA,EAAA/Y,UAAAgZ,sBAAP,SAA6BC,EAAahD,OAChCiD,EAAOjD,EAAKkD,UACZC,EAAMtZ,KAAK8V,cAAcqD,EAAKhD,EAAKvC,WACzC,OAAOwF,EAAKG,MAAMD,EAAKnD,EAAKqD,UAAWrD,EAAKzB,aAGzCuE,EAAA/Y,UAAAuZ,YAAP,SAAmBN,EAAa3D,GAC5B,GAAIA,EAAa,CACb,GAAIA,aAAuBiD,GAA0B,KAC3CO,EAAe,EACfN,EAAWM,EAAwB,SACrCU,OAAY,EAAEC,OAAO,EAEzB,GAAIX,EAAgBL,mBAAqBK,EAAgBL,kBAAkBhY,OAAQ,CAC/E,IAAK,IAAIH,EAAI,EAAGA,EAAIwY,EAAgBL,kBAAkBhY,OAAQH,IAAK,CAK/D,GAJAmZ,EAAUX,EAAgBL,kBAAkBnY,KAC5CkZ,EAAe1Z,KAAKyZ,YAAYN,EAAKQ,KAGhBjB,IAAakB,GAAevB,IAC7C,OAAO,EAIX,GAAIqB,GAAgBhB,IAAakB,GAAetB,GAC5C,OAAO,EAIf,OAAOoB,EAGX,OAAO,MAEDzF,EAAU,EAChB,OAAOjU,KAAKkZ,sBAAsBC,EAAKlF,GAI/C,OAAO,GAEfgF,oBAKI,SAAAY,WAAuBC,EAAAlZ,KAAAZ,OAAOA,KA0BlC,OA7BuCgY,EAAAA,EAAAA,GAKrB6B,EAAAxF,SAAd,WACI,OAAOrU,KAAK+Z,WAAa/Z,KAAK+Z,SAAW,IAAI/Z,OAG1C6Z,EAAA3Z,UAAA8Z,OAAP,SAAiBxF,EAAWwE,EAA4CiB,OAChEzZ,EACA2Y,EACEtD,EAAMrB,EAAK7T,OACXiV,EAAW,GACjB,GAAK6C,GAAyBG,MAAMI,IAAoBP,GAAyBG,MAAMqB,KAA8BpE,EACjH,OAAOrB,EAEX,IAAKhU,EAAI,EAAGA,EAAIqV,EAAKrV,IACjB2Y,EAAM3E,EAAKhU,GACPR,KAAKyZ,YAAYN,EAAKH,IAAoBhZ,KAAKyZ,YAAYN,EAAKc,IAChErE,EAAIpT,KAAK2W,GAGjB,OAAOvD,GAGDiE,EAAA3Z,UAAA4V,cAAV,SAAwBqD,EAAavF,GACjC,OAAOuF,EAAIvF,IA1BAiG,EAAAE,SAA8B,KA4BjDF,GA7BuCZ,QCrDnCiB,IAAM,MACNC,OAAS,SACTC,OAAS,cCiBTC,OAAS,SACTC,OAAS,SACTC,QAAU,UACVpK,KAAO,sBAMX,SAAAqK,KA4MA,OA3MkBA,EAAAjG,KAAd,SAAsBC,EAAWgB,EAAmCiF,GAChE,YADgE,IAAAA,IAAAA,EAAA,IAA0BlF,IACnFkF,EAAQlG,KAAKC,EAAMgB,IAGhBgF,EAAAE,aAAd,SAA2BC,EACvBnF,EACAkB,OACId,EAAyB,GAY7B,OAXA+E,EAAiBlI,QAAQ,SAACmI,OAChBzB,EAAuBqB,EAASK,oBAAoBD,GAC1DzB,EAAIzC,OAASA,EACTyC,EAAIxG,WACJwG,EAAIxG,SAAW6H,EAASE,aAAavB,EAAIxG,SAAU6C,EAAa2D,IAEpEvD,EAAIpT,KAAK2W,KAGbvD,EAAM4E,EAASjG,KAAKqB,EAAKJ,EAAa,IAAIuC,KAKhCyC,EAAAK,oBAAd,SAAkCC,GAS9B,MAR6B,CACzBC,MAAOD,EAAmBC,MAC1BvG,KAAMsG,EAAmBtG,KACzB7B,SAAUmI,EAAmBnI,SAC7BqI,oBAAqBF,EAAmBE,oBACxCtH,MAAOoH,EAAmBpH,MAC1B6D,SAAUuD,EAAmBvD,WAKvBiD,EAAAzD,MAAd,SAAuBvC,EAAWjG,EAAuBoI,EACrDC,EAA2BC,QAD0B,IAAAF,IAAAA,EAAA,WACrD,IAAAC,IAAAA,EAAA,SAA2B,IAAAC,IAAAA,EAAA,CAA+BrC,KAAM,GAAI5S,SAAU,SACxEqZ,EAAW,IAAIhD,GAErB,OADArB,EAAcsE,OAAO,EAAGtE,EAAcjW,QAC/Bsa,EAAS/C,QAAQ1D,EAAMjG,EAAOoI,EAAMC,EAAeC,IAGhD2D,EAAAW,KAAd,SAAsB3G,EAAWjG,GAC7B,IAAKA,EACD,OAAOiG,MAELqB,EAAMrB,EAAK7T,OACXgT,EAAQpF,EAAMoF,MACdiC,EAAM,GACNwF,EAAiB7M,EAAM6M,eAM7B,OALA7M,EAAM3M,SAAW,CACbyZ,WAAY,EACZC,aAAc9G,EAAK7T,OACnB8B,MAAO8Y,GAAYpI,MAEnBQ,EAAQ,GAAK6H,MAAM7H,IACnBpF,EAAM3M,SAASa,MAAQ8Y,GAAYpD,mBAC5BvC,GAEPwF,GAAkB,GAAKI,MAAMJ,IAC7B7M,EAAM3M,SAASa,MAAQ8Y,GAAYnD,wBAC5BxC,IAEXrH,EAAM3M,SAASyZ,WAAaI,KAAKC,KAAK7F,EAAMuF,GACvCvF,EAGDlC,GAASpF,EAAM3M,SAASyZ,YACxB9M,EAAM3M,SAASa,MAAQ8Y,GAAYpD,mBAC5BvC,GAEJpB,EAAKqD,MAAMlE,EAAQyH,GAAiBzH,EAAQ,GAAKyH,GAN7C5G,IASDgG,EAAAR,OAAd,SAAwBxF,EAAWjG,GAI/B,OAHKA,EAAMiI,WACPjI,EAAMiI,SAAW,IAAIqD,IAElBtL,EAAMiI,SAASwD,OAAOxF,EAAMjG,EAAMyK,gBAAiBzK,EAAM0L,0BAGtDO,EAAAmB,mBAAd,SAAiCpN,EAAqB5N,OAC5Cib,EAAUH,KAAKC,KAAK/a,EAAS4N,EAAM6M,gBAAkB,GACtDI,MAAMI,IAAYrN,EAAMoF,MAAQiI,IACjCrN,EAAMoF,MAAQiI,IAIRpB,EAAA3G,aAAd,SAA2BC,GACvB,OAAOD,GAAaC,IAGV0G,EAAAlH,iBAAd,SAA+BC,EAAwBC,GACnD,OAAOF,GAAiBC,EAAIC,IAWlBgH,EAAAqB,kBAAd,SAAmCrH,EAAWsH,EAA6BC,EAAkBC,GAwBzF,YAxByF,IAAAA,IAAAA,GAAA,GACzFxH,EAAK/B,QAAQ,SAACwJ,EAAWtI,OACfuI,EAAQH,EAAaE,EAAKF,GAAcE,EACxCE,EAAcL,EAAaxE,KAAK,SAAAhX,GAAK,OAAAA,EAAEqN,KAAOuO,IAChDC,GAAeA,EAAYjK,OAASkK,GAAgBhC,SACpD5F,EAAKb,GAASwI,EAAYE,YAI9BL,GACAF,EACK9B,OAAO,SAAA1Z,GAAK,OAAAA,EAAE4R,OAASkK,GAAgBjC,SACvC1H,QAAQ,SAAAnS,OACCqT,EAAQoI,EAAavH,EAAKsE,UAAU,SAAAxZ,GAAK,OAAAA,EAAEyc,KAAgBzb,EAAEqN,KAAM6G,EAAKsE,UAAU,SAAAxZ,GAAK,OAAAA,IAAMgB,EAAEqN,KACjG,GAAKgG,GAASA,EAAQa,EAAK7T,QAC3B6T,EAAK0G,OAAOvH,EAAO,KAKnCa,EAAKhS,KAAI3B,MAAT2T,EAAI9R,EAASoZ,EACR9B,OAAO,SAAA1Z,GAAK,OAAAA,EAAE4R,OAASkK,GAAgBlC,MACvCoC,IAAI,SAAAhc,GAAK,OAAAA,EAAE+b,aAET7H,GAYGgG,EAAA+B,8BAAd,SACI/H,EACAsH,EACAU,EACAT,EACAC,gBAAA,IAAAA,IAAAA,GAAA,kBACWG,GACP,GAAIA,EAAYM,KAAM,KACZC,EAAS1F,EAAK2F,mBAAmBnI,EAAMuH,EAAYS,EAAcL,EAAYM,MAC/EG,EAAoBF,EAASA,EAAOF,GAAgBhI,EACxD,OAAQ2H,EAAYjK,MAChB,KAAKkK,GAAgBlC,IAEbwC,IAAWA,EAAOF,KAClBE,EAAOF,GAAgBI,EAAa,IAExCA,EAAWpa,KAAK2Z,EAAYE,UAC5B,MACJ,KAAKD,GAAgBhC,WACXyC,EAAcD,EAAW9D,UAAU,SAAAgE,GAAK,OAAAA,EAAEf,KAAgBI,EAAYxO,MACvD,IAAjBkP,IACAD,EAAWC,GAAepN,GAAaD,GAAWoN,EAAWC,IAAeV,EAAYE,WAE5F,MACJ,KAAKD,GAAgBjC,OACjB,GAAI6B,EAAY,KACNe,EAAcH,EAAW9D,UAAU,SAAA1X,GAAK,OAAAA,EAAE2a,KAAgBI,EAAYxO,MACvD,IAAjBoP,GACAH,EAAW1B,OAAO6B,EAAa,UAO/CvI,EAAKhS,KAAK2Z,EAAYE,sBA7B9B,IAA0B,IAAAW,EAAAjN,EAAA+L,GAAYmB,EAAAD,EAAA9a,QAAA+a,EAAA7a,KAAA6a,EAAAD,EAAA9a,OAAA,GAAhB+a,EAAA9a,4GAgCtB,OAAOqS,GAGGgG,EAAA0C,WAAd,SAAyBC,EAAoBhb,GAKzC,OAJIgb,IAAaC,GAAS9C,SACtBnY,EAAQkb,WAAWlb,IAGhBA,GAGIqY,EAAAmC,mBAAf,SAAkCnI,EAAauH,EAAiBS,EAAmBC,WAE3EjM,EADAoM,EAAoBpI,aAGb7G,GAEP,KADA6C,EAASoM,GAAcA,EAAWtF,KAAK,SAAAwF,GAAK,OAAAA,EAAEf,KAAgBpO,mBAK9DiP,EAAapM,EAAOgM,QANxB,IAAiB,IAAAc,EAAAvN,EAAA0M,GAAIc,EAAAD,EAAApb,QAAAqb,EAAAnb,KAAAmb,EAAAD,EAAApb,OAAA,gBAARqb,EAAApb,kHASb,OAAOqO,GAEfgK,mBCvOA,SAAAgD,KA6DA,OA5DkBA,EAAAC,gBAAd,SAA8BjJ,OACpB7T,EAAS6T,EAAK7T,OACpB,GAAe,IAAXA,EACA,MAAO,OAGL+c,EAAYlJ,EAAK,GACjBmJ,EAAkBnJ,EAAKiH,KAAKmC,MAAMjd,EAAS,IAC3Ckd,EAAgBrJ,EAAK7T,EAAS,GAE9Bmd,EAAQte,OAAOwQ,KAAK0N,GACpBK,EAAQve,OAAOwQ,KAAK2N,GACpBK,EAAQxe,OAAOwQ,KAAK6N,GAEpB7N,EAAO,IAAIO,IAAIuN,EAAMnb,OAAOob,GAAOpb,OAAOqb,IAEhD,OAAQR,EAAgBS,cAAczJ,GAA2B,CAAE,YAArB7U,MAAMuT,KAAKlD,IAG/CwN,EAAAU,eAAd,SAA6BC,EAAYC,OAC/BlJ,EAAImJ,SAASC,cAAc,KACjC,GAAIvM,OAAOX,WAAaW,OAAOX,UAAUmN,iBACrCxM,OAAOX,UAAUmN,iBAAiBJ,EAAMC,OACrC,KACGI,EAAMzM,OAAO0M,IAAIC,gBAAgBP,GACvCjJ,EAAEyJ,SAAWP,EAEblJ,EAAE0J,KAAOJ,EACTH,SAASQ,KAAKC,YAAY5J,GAC1BA,EAAE6J,QACFV,SAASQ,KAAKG,YAAY9J,GAC1BnD,OAAO0M,IAAIQ,gBAAgBT,KAIrBhB,EAAA0B,oBAAd,SAAkC3e,GAG9B,QAFM4e,EAAM,IAAIC,YAAY7e,EAAEI,QACxB0e,EAAO,IAAIC,WAAWH,GACnB3e,EAAI,EAAGA,IAAMD,EAAEI,SAAUH,EAE9B6e,EAAK7e,GAAuB,IAAlBD,EAAEgf,WAAW/e,GAG3B,OAAO2e,GAGG3B,EAAAS,cAAd,SAA4BzJ,OAClBkJ,EAAYlJ,EAAK,GACvB,MAA6B,iBAAdkJ,GACc,iBAAdA,GACPA,aAAqBvN,MAGnBqN,EAAAgC,SAAd,SAAuBrd,GACnB,OAAOA,IAAU6R,WAAuB,OAAV7R,GAGpBqb,EAAAiC,oBAAd,SAAkCtd,GAC9B,OAAOA,IAAU6R,WAAuB,OAAV7R,IAAmBA,EAAMud,QAE/DlC,KChDAmC,GAAA,WAAA,SAAAA,IAIc3f,KAAA4f,cAAkC,IAAItP,IACtCtQ,KAAA6f,aAA8D,IAAIvP,IAClEtQ,KAAA8f,WAA4C,IAAIxP,IAsgB9D,OApgBWqP,EAAAzf,UAAA6f,mBAAP,SAA0BC,GACtB,OAAOhgB,KAAK2W,KAAKsJ,WAAW3I,KAAK,SAAC4I,GAAQ,OAAAA,EAAIC,QAAUH,KAGrDL,EAAAzf,UAAAkgB,iBAAP,eACUzJ,EAAO3W,KAAK2W,KACdnC,EAAOmC,EAAK0J,aACX7L,IACGmC,EAAKmF,aAAawE,SAClB9L,EAAOgG,GAASqB,kBACZzM,GAAWuH,EAAKnC,MAChBmC,EAAKmF,aAAayE,sBAAqB,GACvC5J,EAAKoF,YAEWpF,EAAKmF,aAAa0E,oBAAoBxG,OAAO,SAAA1Z,GAAK,OAAAA,EAAE4R,OAASkK,GAAgBjC,SAAQmC,IAAI,SAAAhc,GAAK,OAAAA,EAAEqN,KACxG8E,QAAQ,SAAAsI,OAEVpH,GADWgD,EAAKoF,WAAavH,EAAK8H,IAAI,SAAAnD,GAAO,OAAAA,EAAIxC,EAAKoF,cAAevH,GACpDlD,QAAQyJ,IAChB,IAAXpH,GACDa,EAAK0G,OAAOvH,EAAO,MAI1Ba,EAAOmC,EAAKnC,MAGpB,OAAOA,GAOJmL,EAAAzf,UAAAugB,WAAP,SAAkB1F,GAGd,OAFa/a,KAAK0gB,aAAa1gB,KAAK2W,KAAKmF,aAAawE,SACxCtgB,KAAK2gB,sBAAsB5F,KAKtC4E,EAAAzf,UAAA0gB,gBAAP,WACI5gB,KAAK2W,KAAKkK,YAAYC,OAInBnB,EAAAzf,UAAA6gB,oBAAP,WACI,OAAO/gB,KAAK2W,KAAKkK,YAAYG,MAG1BrB,EAAAzf,UAAAygB,sBAAP,SAA6B5F,OACnBpE,EAAO3W,KAAS,KACtB,IAAK2W,EACD,OAAQ,MAENnC,EAAOxU,KAAK0gB,aAAa/J,EAAKmF,aAAawE,SACjD,OAAO3J,EAAKoF,WAAavH,EAAKsE,UAAU,SAAAmI,GAAU,OAAAA,EAAOtK,EAAKoF,cAAgBhB,IAASvG,EAAKlD,QAAQyJ,IAGjG4E,EAAAzf,UAAAghB,eAAP,SAAsBC,OACZpF,EAAa/b,KAAK2W,KAAKoF,WAC7B,OAAIA,IAAe/H,WAA4B,OAAf+H,EACrB/b,KAAK2W,KAAKyK,YAAY9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAIC,QAAQvF,KAAgBoF,IAEhEnhB,KAAK2W,KAAKyK,YAAY9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAIC,UAAYH,KAI5DxB,EAAAzf,UAAAqhB,iBAAP,SAAwBC,GACpB,OAAOxhB,KAAK2W,KAAK8K,QAAQnK,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,KAGlD7B,EAAAzf,UAAAwhB,gBAAP,SAAuBP,EAAkBhB,OAC/BkB,EAAMrhB,KAAKkhB,eAAeC,GAChC,GAAIE,GAAOA,EAAIM,MACX,OAAON,EAAIM,MAAMrK,KAAK,SAAC0J,GAAS,OAAAA,EAAKY,OAAOzB,QAAUA,KAIvDR,EAAAzf,UAAA2hB,kBAAP,SAAyBL,EAAkBM,OACjCT,EAAMrhB,KAAKuhB,iBAAiBC,GAClC,GAAIH,GAAOA,EAAIM,MACX,OAAON,EAAIM,MAAMrK,KAAK,SAAC0J,GAAS,OAAAA,EAAKc,cAAgBA,KAItDnC,EAAAzf,UAAA6hB,0BAAP,SAAiCP,EAAkBM,OACzCT,EAAMrhB,KAAKuhB,iBAAiBC,GAClC,GAAIH,GAAOA,EAAIM,MACX,OAAON,EAAIM,MAAMrK,KAAK,SAAC0J,GAAS,OAAAA,EAAKgB,qBAAuBF,KAI7DnC,EAAAzf,UAAA+hB,aAAP,eACUjB,EAAOhhB,KAAK2W,KAAKkK,YAAYG,KACnC,GAAIA,EAAO,CAEP,GADahhB,KAAKkiB,YAAYlB,EAAMA,EAAKmB,WAChCC,OACL,OAEJpiB,KAAK4gB,oBAIbjB,EAAAzf,UAAAgiB,YAAA,SAAYlB,EAAe7e,SACjBqS,EAAOxU,KAAK0gB,aAAa1gB,KAAK2W,KAAKmF,aAAawE,SAChD3M,EAAQ3T,KAAK2gB,sBAAsBK,EAAKrT,GAAGoN,OAEjDiG,EAAKmB,UAAYhgB,MAEX6L,EAAOgT,EAAKqB,sBAGlB,OADAriB,KAAK2W,KAAK2L,WAAWC,KAAKvU,GACtBA,EAAKoU,OACEpU,GAKXA,EAAKqO,SAAW2E,EAAKwB,aAAaxU,EAAKqO,UAEnC3L,GAAQ1C,EAAKyU,SAAUzU,EAAKqO,UACrBrO,GAGXhO,KAAK2W,KAAK+L,eAAeC,kBAAkB3U,GAC3ChO,KAAK4iB,WAAW5iB,KAAK2W,KAAMqK,EAAKrT,GAAGoN,MAAOvG,EAAKb,GAAQqN,EAAKM,UAAOpT,EAAA,IAAK8S,EAAKY,OAAOzB,OAASnS,EAAKqO,SAAQnO,IACtGlO,KAAK2W,KAAKoF,aAAeiF,EAAKY,OAAOzB,QAChCngB,KAAK2W,KAAKkM,iBAAiBC,cAAc9B,EAAKrT,GAAGoN,SAClD/a,KAAK2W,KAAKkM,iBAAiBE,YAAY/B,EAAKrT,GAAGoN,OAC/C/a,KAAK2W,KAAKkM,iBAAiBG,cAAchV,EAAKqO,WAE9Crc,KAAK2W,KAAKsM,sBACVjjB,KAAK2W,KAAK+L,eAAeQ,gBAAgBlC,EAAKrT,GAAGoN,QAGpD/a,KAAK2W,KAAKwM,aAAgBnjB,KAAK2W,KAAKkK,YAAYQ,KAC7CrhB,KAAK2W,KAAKkK,YAAYQ,IAAI1T,KAAOqT,EAAKrT,GAAGoN,OAAU/a,KAAK2W,KAAKmF,aAAawE,UAC9EtgB,KAAK2W,KAAK+L,eAAeC,kBAAkB3U,GAC1ChO,KAAS,KAASojB,gBAGhBpV,KAWD2R,EAAAzf,UAAA0iB,WAAV,SAAqBjM,EAAMoE,EAAOsI,EAA2BC,EAAsBC,GAC/E,GAAI5M,EAAKmF,aAAawE,QAAS,KACrBnE,EAA2B,CAC7BxO,GAAIoN,EACJ7I,KAAMkK,GAAgBhC,OACtBiC,SAAUkH,GAEd5M,EAAKmF,aAAapO,IAAIyO,EAAamH,QAEnC7T,GAAa4T,EAAsBE,IAI3C5D,EAAAzf,UAAAsjB,YAAA,SAAYnC,EAAalf,OACfwU,EAAO3W,KAAK2W,KAEZ8M,EAAgB9M,EAAKkK,YAAYQ,IAIvC,GAHAA,EAAIqC,QAAUvhB,GAAgBwU,EAAKmF,aAAa6H,mBAAmBtC,EAAI1T,IAAI,GAGvE8V,GAAiBpC,EAAI1T,KAAO8V,EAAc9V,GAC1C0T,EAAI7M,KAAIpU,EAAA,GAAQihB,EAAI7M,KAASiP,EAAcG,uBAExC,GAAI5jB,KAAK2W,KAAKmF,aAAawE,QAAS,KACjC/R,EAAQoI,EAAKmF,aAAa+H,SAASxC,EAAI1T,IAC7C0T,EAAI7M,KAAOjG,EAAQ/O,OAAOa,OAAO,GAAIghB,EAAI7M,KAAMjG,EAAMpM,OAASkf,EAAI7M,OAI1EmL,EAAAzf,UAAA4jB,WAAA,SAAWzC,EAAalf,OACdwU,EAAO3W,KAAK2W,KACZoN,EAAWpN,EAAKkM,iBAAiBC,cAAczB,EAAI1T,IACnD8V,EAAgB9M,EAAKkK,YAAYQ,IACjC7M,EAAOxU,KAAK0gB,aAAa/J,EAAKmF,aAAawE,SAC3C3M,EAAQ3T,KAAK2gB,sBAAsBU,EAAI1T,IACvCqW,EAAgBrN,EAAKsM,qBAE3BjjB,KAAKwjB,YAAYnC,EAAKlf,OAEhB6L,EAAOqT,EAAIgB,sBAGjB,IAAe,IAAX1O,EACA,OAAO3F,EAKX,GAFA2I,EAAKsN,UAAU1B,KAAKvU,GAEhBA,EAAKoU,OACL,OAAOpU,EAGX,GAAIyV,EAAe,KACTS,EAAavN,EAAKmF,aAAa+H,SAAS7V,EAAK+M,OAAO,GAE1D,GADApE,EAAKmF,aAAaqI,YAAW,IACxBD,EACD,OAAOlW,EAIf,IAAKA,EAAKqO,SACN,OAAOrO,EAGPgW,GACArN,EAAK+L,eAAeQ,gBAAgBlV,EAAK+M,OAG7C/a,KAAK4iB,WAAWjM,EAAM0K,EAAI1T,GAAI6G,EAAKb,GAAQ3F,EAAKyU,SAAUzU,EAAKqO,cACzD+H,EAAQzN,EAAKoF,WAAa/N,EAAKqO,SAAS1F,EAAKoF,YAAc/N,EAAKqO,SAUtE,OATI0H,IACApN,EAAKkM,iBAAiBE,YAAY1B,EAAI1T,IACtCgJ,EAAKkM,iBAAiBG,cAAcoB,IAEpCJ,GACArN,EAAK+L,eAAeQ,gBAAgBkB,GAExC,EAAchB,eAEPpV,GAKD2R,EAAAzf,UAAAmkB,oBAAV,SAA8BliB,EAAY4Y,EAAYpH,GACrC3T,KAAK2W,KACbnC,KAAKb,GAASxR,GAGhBwd,EAAAzf,UAAAqU,KAAP,SAAYN,GACJA,EAAWQ,MAAQK,GAAiB3B,MACpCnT,KAAKskB,2BAA2BrQ,EAAWL,eAEzC2Q,EAAenV,GAAWpP,KAAK2W,KAAK6N,oBAC1CxkB,KAAKykB,2BAA2B,CAACF,GAAetQ,GAChDjU,KAAK2W,KAAK6N,mBAAqBD,GAG5B5E,EAAAzf,UAAAwkB,cAAP,SAAqBlP,WACX+O,EAAenV,GAAWpP,KAAK2W,KAAK6N,wBAE1C,IAAmB,IAAAG,EAAA5U,EAAAyF,GAAWoP,EAAAD,EAAAziB,QAAA0iB,EAAAxiB,KAAAwiB,EAAAD,EAAAziB,OAAE,CAA3B,IAAM2iB,EAAID,EAAAziB,MACP0iB,EAAKpQ,MAAQK,GAAiB3B,MAC9BnT,KAAKskB,2BAA2BO,EAAKjR,WAEzC5T,KAAKykB,2BAA2B,CAACF,GAAeM,wGAGpD7kB,KAAK2W,KAAK6N,mBAAqBD,GAG5B5E,EAAAzf,UAAA8Z,OAAP,SAAcpG,EAAmBkR,EAAMC,EACnCrQ,OACMiC,EAAO3W,KAAK2W,KACZqO,EAAgBrO,EAAKsO,yBAC3BtO,EAAKuO,SAAQ,GAETvO,EAAKwO,SACLxO,EAAKwE,KAAO,OAGViK,EAAmBJ,EAAclM,UAAUlF,GAC7CwR,GAAoB,GACpBJ,EAAcrM,kBAAkBuC,OAAOkK,EAAkB,GAG7DplB,KAAKqlB,6BAA6BL,EAAepR,EAAWkR,EAAMC,EAA4BrQ,EAAY0Q,GAC1GzO,EAAKsO,yBAA2BD,GAG7BrF,EAAAzf,UAAAolB,cAAP,SAAqBR,EAAMzL,EAAW3E,WAClC,GAAK2E,EAAL,KAIM1C,EAAO3W,KAAK2W,KACZqO,EAAgBrO,EAAKsO,yBAC3BtO,EAAKuO,SAAQ,GACTvO,EAAKwO,SACLxO,EAAKwE,KAAO,GAGhB6J,EAAcrM,kBAAoB,OAClC,IAAqB,IAAA7I,EAAAC,EAAA4G,EAAK4O,SAAOtV,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA9B,IAAM0f,EAAM3R,EAAA9N,MACbnC,KAAKqlB,6BAA6BL,EAAepD,EAAOzB,MAAO2E,EAC3DzL,EAAW3E,GAAckN,EAAO4D,0HAGxC7O,EAAKsO,yBAA2BD,IAG7BrF,EAAAzf,UAAAulB,aAAP,SAAoB7R,OACV+C,EAAO3W,KAAK2W,KAClBA,EAAKuO,SAAQ,OACPQ,EAAiB/O,EAAKsO,yBACtBtR,EAAQ+R,EAAe5M,UAAUlF,GAEnCD,GAAS,EACT+R,EAAe/M,kBAAkBuC,OAAOvH,EAAO,GACvCC,IACR8R,EAAe/M,kBAAoB,IAGvChC,EAAKsO,yBAA2BS,GAG7B/F,EAAAzf,UAAAylB,WAAP,SAAkB/R,OACR2Q,EAAevkB,KAAK2W,KAAK6N,mBACzB7Q,EAAQ4Q,EAAazL,UAAU,SAAC3C,GAAS,OAAAA,EAAKvC,YAAcA,IAC9DD,GAAS,IACT4Q,EAAarJ,OAAOvH,EAAO,GAC3B3T,KAAK2W,KAAK6N,mBAAqBD,IAI7B5E,EAAAzf,UAAAmlB,6BAAV,SAAuCK,EAA2C9R,EAAmB4F,EACjGuL,EAA6ErQ,EAAqBkR,OAE9FC,OAF8F,IAAAD,IAAAA,GAAiB,OAG7GE,EAA0BJ,EAAe5M,UAAUlF,GACnDoF,EAAkB+L,aAAsCtM,KACA,KACxDY,EAAY0L,aAAsCtM,GACpD,KAAI,EACFsN,EAAsC,CAAEnS,UAASA,EAAE4F,UAASA,EAAEH,UAASA,EAAE3E,WAAUA,IAExD,IAA7BoR,IAEI9M,EACI4M,GAAiB,EACjBF,EAAe/M,kBAAkBuC,OAAO0K,EAAe,EAAG5M,GAE1D0M,EAAe/M,kBAAkBnW,KAAKwW,GAEnCK,KAEPwM,EAAqB,IAAIpN,GAAyBiN,EAAehN,SAAU9E,IACxD+E,kBAAkBnW,KAAKujB,GAC1CL,EAAe/M,kBAAkBnW,KAAKqjB,MAKxClG,EAAAzf,UAAAukB,2BAAV,SAAqCuB,EAAqC/R,GACtE,GAAIA,EAAWQ,MAAQK,GAAiB3B,KAAxC,CAaA,QADI8S,EAAgBD,EAAiB,GAC5BxlB,EAAI,EAAGA,EAAIwlB,EAAiBrlB,OAAQH,IACrCylB,EAActlB,OAASqlB,EAAiBxlB,GAAGG,SAC3CslB,EAAgBD,EAAiBxlB,QAGnC0lB,EAAUD,EAAc3O,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcK,EAAWL,YAE3EoS,EAAiBvT,QAAQ,SAAAmK,OACfuJ,EAASvJ,EAAWtF,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcK,EAAWL,YAClEuS,GAAWD,GAGJC,GAAUD,GAElBtJ,EAAWpa,KAAK0jB,GAChB1mB,OAAOa,OAAO6lB,EAASjS,IAGvBzU,OAAOa,OAAO8lB,EAAQlS,GAPtB2I,EAAWpa,KAAKyR,UAvBpB+R,EAAiBvT,QAAQ,SAAAlE,GACrBA,EAAM2M,OAAO3M,EAAMuK,UAAU,SAAC3C,GAAS,OAAAA,EAAKvC,YAAcK,EAAWL,YAAY,MAkCnF+L,EAAAzf,UAAAokB,2BAAV,SAAqC1Q,KAG9B+L,EAAAzf,UAAAkmB,cAAP,SAAqBpG,KAGdL,EAAAzf,UAAAmmB,0BAAP,SAAiCzE,GAC7B,OAAOA,EAAOzE,WAAaC,GAAS9C,QAGjCqF,EAAAzf,UAAAomB,SAAP,eACU3P,EAAO3W,KAAK2W,KAElB,OADaA,EAAKnC,KAAOmC,EAAKnC,KAAO,IAIlCmL,EAAAzf,UAAAwgB,aAAP,SAAoB6F,QAAA,IAAAA,IAAAA,GAAA,OACV5P,EAAO3W,KAAK2W,KACdnC,EAAOmC,EAAKnC,KAAOmC,EAAKnC,KAAO,GAEnC,OADAA,EAAO+R,EAAsB5P,EAAK6P,+BAAiChS,GAIhEmL,EAAAzf,UAAAumB,kBAAP,WACI,OAAOzmB,KAAK2W,KAAK0J,cAGXV,EAAAzf,UAAAwmB,yBAAV,SAAmC9S,GAC/B,OAAO5T,KAAK+f,mBAAmBnM,GAC3B5T,KAAK+f,mBAAmBnM,GAAW+S,aAAe3S,WAGnD2L,EAAAzf,UAAA0mB,aAAP,SAAoBtF,OAGV3K,EAAO3W,KAAK2W,KAClB,GAAIA,EAAKmF,aAAawE,QAAS,KAErBnE,EAA2B,CAAExO,GADbgJ,EAAKoF,WAAauF,EAAQ3K,EAAKoF,YAAcuF,EACbpP,KAAMkK,GAAgBlC,IAAKmC,SAAUiF,GAC3F3K,EAAKmF,aAAapO,IAAIyO,QAEtBxF,EAAKnC,KAAKhS,KAAK8e,IAIhB3B,EAAAzf,UAAA2mB,kBAAP,SAAyB9L,EAAYpH,OAG3BgD,EAAO3W,KAAK2W,KAClB,IAAe,IAAXhD,EACA,GAAIgD,EAAKmF,aAAawE,QAAS,KACrBnE,EAA2B,CAAExO,GAAIoN,EAAO7I,KAAMkK,GAAgBjC,OAAQkC,SAAU,MACtF1F,EAAKmF,aAAapO,IAAIyO,EAAaxF,EAAKnC,KAAKb,SAE7CgD,EAAKnC,KAAK0G,OAAOvH,EAAO,OAEzB,KACGpF,EAAeoI,EAAKmF,aAAa+H,SAAS9I,GAChDpE,EAAKmF,aAAapO,IAAI,CAAEC,GAAIoN,EAAO7I,KAAMkK,GAAgBjC,OAAQkC,SAAU,MAAQ9N,GAASA,EAAMuY,aAInGnH,EAAAzf,UAAA6mB,cAAP,SAAqB7K,OACbvI,EACEgD,EAAO3W,KAAK2W,KACZnC,EAAOxU,KAAK0gB,eAEd/M,EADAgD,EAAKoF,WACGvH,EAAK8H,IAAI,SAAC2E,GAAW,OAAAA,EAAOtK,EAAKoF,cAAazK,QAAQ4K,GAEtD1H,EAAKlD,QAAQ4K,OAEnB3N,EAAeoI,EAAKmF,aAAa+H,SAAS3H,GAC1C8K,EAA0BzY,GAASA,EAAM2D,OAASkK,GAAgBjC,OAKxE,IAAe,IAAXxG,GAAgBqT,EAApB,CAEIrQ,EAAKuO,SAAQ,GAMjBvO,EAAKsQ,aAAa1E,KAAK,CAAE/N,KAAMA,EAAKb,KAEpC3T,KAAK6mB,kBAAkB3K,EAAOvI,GAE9BgD,EAAKkM,iBAAiBC,cAAc5G,GAASvF,EAAKkM,iBAAiBE,YAAY7G,GAASvF,EAAKkM,iBAAiBqE,qBAC9G,EAAc9D,eACdzM,EAAKwQ,oBAGCC,EAAkBzQ,EAAKmF,aAAawE,QAAU3J,EAAK6P,+BAAiChS,EAC1FmC,EAAK0Q,gBACDD,EAAgBzmB,OAASgW,EAAK2Q,SAAY,GAAKF,EAAgBzmB,OAASgW,EAAK2Q,QAAU,EAAI3Q,EAAKwE,MAAsB,IAAdxE,EAAKwE,MAC7GxE,EAAKwE,SAINwE,EAAAzf,UAAAqnB,WAAP,SAAkBjG,GACd,OAAOthB,KAAK2W,KAAKoF,WAAauF,EAAQthB,KAAK2W,KAAKoF,YAAcuF,GAG3D3B,EAAAzf,UAAAsnB,wBAAP,SAA+BzM,OACrBpE,EAAO3W,KAAK2W,KAClB,IAAKA,EACD,OAAO,EAEX,IAAKA,EAAKmF,aAAawE,QACnB,OAAO,MAEL/R,EAAQoI,EAAKmF,aAAa+H,SAAS9I,GACzC,QAAIxM,GACOA,EAAM2D,OAASkK,GAAgBjC,QAMvCwF,EAAAzf,UAAAunB,iBAAP,WACI,OAAOznB,KAAK2W,KAAK+Q,WAAa,EAAI1nB,KAAK2W,KAAKwE,0BA1gBnDnJ,EAAAA,aA4gBD2N,EA5gBA,kBCLA,SAAAgI,mDAqCA,OArC+C3P,EAAAA,EAAAA,GACpC2P,EAAAznB,UAAA8Z,OAAP,SAAcxF,EAAyBwE,EACnCiB,GACA,OAAOja,KAAK4nB,WAAWpT,EAAMwE,EAAiBiB,EAAyBjG,YAGnE2T,EAAAznB,UAAA0nB,WAAR,SAAmBpT,EAAyBwE,EACxCiB,EAAoDvD,OAChDlW,EACA2Y,EACEtD,EAAMrB,EAAK7T,OACXiV,EAAyB,GAC/B,GAAK6C,GAAyBG,MAAMI,IAAoBP,GAAyBG,MAAMqB,KAA8BpE,EACjH,OAAOrB,EAEX,IAAKhU,EAAI,EAAGA,EAAIqV,EAAKrV,IAAK,CAGtB,IAFA2Y,EAAMqB,GAASK,oBAAoBrG,EAAKhU,KACpCkW,OAASA,EACTyC,EAAIxG,SAAU,KACRkV,EAAmB7nB,KAAK4nB,WAAWzO,EAAIxG,SAAUqG,EAAiBiB,EAAyBd,GACjGA,EAAIxG,SAAWkV,EAAiBlnB,OAAS,EAAIknB,EAAmB,KAGhE7nB,KAAKyZ,YAAYN,EAAKH,IAAoBhZ,KAAKyZ,YAAYN,EAAKc,GAChErE,EAAIpT,KAAK2W,GACFA,EAAIxG,UAAYwG,EAAIxG,SAAShS,OAAS,IAC7CwY,EAAI6B,qBAAsB,EAC1BpF,EAAIpT,KAAK2W,IAGjB,OAAOvD,GAGD+R,EAAAznB,UAAA4V,cAAV,SAAwBqD,EAAavF,GAEjC,OADwB,EACEY,KAAKZ,IAEvC+T,GArC+C1O,IAwC/C6O,GAAA,WAOI,SAAAA,EAAYC,GACR/nB,KAAK+nB,QAAO,EA8DpB,OA3DWD,EAAA5nB,UAAAsE,UAAP,SAAiBwjB,EAAkChP,EAC/CiP,EACAC,EAA6Dva,EAC7Dwa,EAAqBC,OACfzR,EAA6B3W,KAAK+nB,QAAQpR,KAC1CpI,EAAyB,CAC3ByK,gBAAiBA,EACjBiB,wBAAyBiO,EACzB1R,SAAU,IAAImR,IASlB,GANIM,IACA1Z,EAAMiI,SAAWyR,GAGrBjoB,KAAKqoB,yBAAyB1R,EAAKO,SAE/BuB,GAAyBG,MAAMrK,EAAMyK,kBAAoBP,GAAyBG,MAAMrK,EAAM0L,yBAE9F,OADAtD,EAAK0J,aAAe,KACb2H,MAGLxX,EAASxQ,KAAKga,OAAOgO,EAAezZ,GACpC8R,EAAsB,GAI5B,OAHArgB,KAAKsoB,mBAAmB3R,EAAMnG,EAAQmG,EAAK4R,gBAAiBlI,GAC5D1J,EAAK0J,aAAeA,EAEb7P,GAGHsX,EAAA5nB,UAAAmoB,yBAAR,SAAiC/L,GAE7B,QADMtM,EAAOrQ,MAAMuT,KAAKoJ,EAAItM,QACnBxP,EAAI,EAAGA,EAAIwP,EAAKrP,OAAQH,IAC7B8b,EAAIxO,IAAIkC,EAAKxP,IAAIwa,oBAAsBhH,WAIvC8T,EAAA5nB,UAAAooB,mBAAR,SAA2B3R,EAA4BnC,EACnDgU,EAAmCnI,GACnC,IAAK,IAAI7f,EAAI,EAAGA,EAAIgU,EAAK7T,OAAQH,IAAK,KAC5B2Y,EAAM3E,EAAKhU,GACjB6f,EAAa7d,KAAK2W,EAAI3E,MACtBxU,KAAKyoB,yBAAyB9R,EAAMwC,GAEhCA,EAAIxG,UAAYwG,EAAIxG,SAAShS,OAAS,IACtC6nB,EAAeE,IAAIvP,EAAI4B,OAAO,GAC9B/a,KAAKsoB,mBAAmB3R,EAAMwC,EAAIxG,SAAU6V,EAAgBnI,MAKhEyH,EAAA5nB,UAAAuoB,yBAAR,SAAiC9R,EAA4BsK,GAC7CtK,EAAKO,QAAQpJ,IAAImT,EAAOlG,OAChCC,oBAAsBiG,EAAOjG,qBAG7B8M,EAAA5nB,UAAA8Z,OAAR,SAAexF,EAAyBjG,GACpC,OAAOA,EAAMiI,SAASwD,OAAOxF,EAAMjG,EAAMyK,gBAAiBzK,EAAM0L,8CApEvE0O,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,oBACN4I,MAAM,+CApDDjJ,MAwHTmI,EAtEA,GCmBAe,GAAA,WAAA,SAAAA,IAEY7oB,KAAA8oB,YAAc,GAEZ9oB,KAAA+oB,aAAc,EACd/oB,KAAAgpB,0BAA4B,EAC5BhpB,KAAAipB,MAAQ,KAYXjpB,KAAAkpB,YAAc,IAAIC,EAAAA,aAYlBnpB,KAAAopB,eAAiB,IAAID,EAAAA,aAuNhC,OA9MWN,EAAA3oB,UAAAmpB,UAAP,SAAc1S,EAAW2S,GAAzB,IAAA1U,EAAA5U,KACI,GAAIspB,IAAYtV,WAAyB,OAAZsV,EACzB,MAAMzZ,MAAM,4BAGV0V,EAAU5O,EAAKsJ,WAAWrN,UAChC5S,KAAKupB,YAAc,IAAI5pB,MAAW4lB,EAAQ5kB,YAEpC6oB,EAAgB,GAClBC,GAAyB,EAE7BlE,EAAQ9S,QAAQ,SAACmP,OACP8H,EAAiC,KAAlB9H,EAAO+H,OAAgB/H,EAAO+H,OAAS/H,EAAOzB,MAC7DyJ,GAAgBhI,EAAOiI,QAAUP,EAAQQ,wBACzCnW,EAAQ2V,EAAQS,mBAAqBnI,EAAOjO,MAAQiO,EAAOoI,aAE3DC,EAAa,CACfN,OAAQD,EACRvJ,MAAOyB,EAAOzB,MACd+J,MAAON,EACPO,UAAWvI,EAAOuI,UAClBC,eAAe,IAGJ,IAAXzW,GACAiB,EAAK2U,YAAY5V,GAASsW,EAC1BR,EAAwBhO,KAAK4O,IAAIZ,EAAuB9V,IAExD6V,EAAchnB,KAAKynB,GAGnBrI,EAAO0I,QAAUV,GACjBhV,EAAKoU,6BAKbQ,EAAc/W,QAAQ,SAAC8X,GACnB3V,EAAK2U,cAAcE,GAAyBc,QAG1C/V,EAAOxU,KAAKwqB,YAAY7T,EAAM2S,GACpCtpB,KAAKyqB,WAAWjW,EAAM8U,IAUnBT,EAAA3oB,UAAAuqB,WAAP,SAAkBjW,EAAa8U,GAA/B,IAAA1U,EAAA5U,KACI,GAAIspB,IAAYtV,WAAyB,OAAZsV,EACzB,MAAMzZ,MAAM,wBAGhB,IAAK7P,KAAKupB,aAA2C,IAA5BvpB,KAAKupB,YAAY5oB,OAAc,KAC9CqP,EAAOwN,GAAgBC,gBAAgBjJ,GAC7CxU,KAAKupB,YAAcvZ,EAAKsM,IAAI,SAACoO,GAAM,MAAA,CAAGf,OAAQe,EAAGvK,MAAOuK,EAAGR,MAAM,SAGjES,EAA4B,EAC5BC,EAA4B,EAChC5qB,KAAKupB,YAAY9W,QAAQ,SAACmP,EAAQjO,GAC9B,IAAKiO,EAAOsI,KAAM,KACRW,EAAmB,CACrBlB,OAAQnM,GAAgBiC,oBAAoBmC,EAAO+H,QAC/C,SAAWiB,IAA8BhJ,EAAO+H,OACpDxJ,MAAOyB,EAAOzB,MACd2B,YAAanO,EACbyO,QAAQ,EACRgI,eAAe,GAEnBxV,EAAKwU,eAAe7G,KAAKsI,GAEzBjJ,EAAO+H,OAASkB,EAAiBlB,OACjC/H,EAAOsI,KAAOW,EAAiBzI,OAC/BR,EAAOwI,cAAgBS,EAAiBT,cAEpCxI,EAAOsI,MAAQvW,GAASiB,EAAKoU,0BAC7B2B,IAGA/V,EAAKqU,OAASrU,EAAKqU,MAAMrV,YAAcgO,EAAOzB,QAC1CyB,EAAOsI,KACPtV,EAAKqU,MAAQ,KAEbrU,EAAKqU,MAAMrV,UAAYgO,EAAO+H,WAM9C3pB,KAAKgpB,0BAA4B2B,MAE3BG,EAAe,IAAInrB,MACnBse,EAAgBT,GAAgBS,cAAczJ,GAEpDA,EAAK/B,QAAQ,SAAC4O,EAAK1N,GACfiB,EAAKmW,UAAUD,EAAczJ,EAAK1N,EAAOsK,KAG7Cje,KAAKgrB,yBAAyBF,EAAcxB,GAC5CtpB,KAAKirB,iBAKDpC,EAAA3oB,UAAA6qB,UAAR,SAAkBvW,EAAa8M,EAAc3N,EAAesK,GAA5D,IAAArJ,EAAA5U,KAeUkrB,EAAU,CACZ5J,QAbCrD,EASKje,KAAK+oB,YAAczH,EAAQ9M,KAAO8M,EARlCthB,KAAKupB,YAAY4B,OAAO,SAACjW,EAAG5S,GAC9B,IAAKA,EAAE4nB,KAAM,KACHkB,EAAWxW,EAAKmU,YAAczH,EAAQ9M,KAAKlS,EAAE6d,OAASmB,EAAQhf,EAAE6d,OACtEjL,EAAE5S,EAAEqnB,QAAUrnB,EAAE6nB,YAAc7nB,EAAE8nB,cAAgB9nB,EAAE6nB,UAAUiB,GAAYA,EAE5E,OAAOlW,GACR,IAOHsM,SAAU7N,EACVyO,QAAQ,GAEZpiB,KAAKkpB,YAAY3G,KAAK2I,GAEjBA,EAAQ9I,QACT5N,EAAKhS,KAAK,CAAE8e,QAAS4J,EAAQ5J,QAAS+J,gBAAiB/J,KAIvDuH,EAAA3oB,UAAAsqB,YAAR,SAAoB7T,EAAW2S,GAC3BtpB,KAAK8oB,YAAc,OACfwC,EAAc3U,EAAK2U,YACvBtrB,KAAK+oB,YAAcuC,IAAgBtX,UAE/BhU,KAAK+oB,aACL/oB,KAAKurB,wBAAwBD,OAG7B9W,EAAOxU,KAAK+oB,YAAc/oB,KAAK8oB,YAAcnS,EAAKnC,KAEtD,IAAMmC,EAAKsO,0BACPtO,EAAKsO,yBAAyBtM,kBAAkBhY,OAAS,GACxDgW,EAAKuR,kCACNvR,EAAKuR,iCAAiCvP,kBAAkBhY,OAAS,KAChE2oB,EAAQkC,gBAAiB,KACpB9F,EAAsB,CACxB1M,gBAAiBrC,EAAKsO,yBACtBhL,wBAAyBtD,EAAKuR,iCAC9B3O,MAAO5C,EAAK8U,gBAGZzrB,KAAK+oB,aACL/oB,KAAK8oB,YAAc,GACnBpD,EAAelP,SAAW,IAAImR,GAC9B2D,EAAc5F,EAAelP,SAASwD,OAAOsR,EACzC5F,EAAe1M,gBAAiB0M,EAAezL,yBACnDja,KAAKurB,wBAAwBD,GAC7B9W,EAAOxU,KAAK8oB,aAEZtU,EAAOgG,GAASR,OAAOxF,EAAMkR,GAmBrC,OAfI/O,EAAK6N,oBACL7N,EAAK6N,mBAAmB7jB,OAAS,IAChC2oB,EAAQoC,gBACT1rB,KAAKipB,MAAQzZ,GAAWmH,EAAK6N,mBAAmB,IAE5CxkB,KAAK+oB,aACL/oB,KAAK8oB,YAAc,GACnBwC,EAAc9Q,GAASE,aAAa4Q,EAAa3U,EAAK6N,oBACtDxkB,KAAKurB,wBAAwBD,GAC7B9W,EAAOxU,KAAK8oB,aAEZtU,EAAOgG,GAASjG,KAAKC,EAAMmC,EAAK6N,qBAIjChQ,GAGHqU,EAAA3oB,UAAAqrB,wBAAR,SAAgCrU,GAC5B,GAAKA,EAGL,IAAK,IAAI1W,EAAI,EAAGA,EAAI0W,EAAQvW,OAAQH,IAAK,KAC/Bsa,EAAqB5D,EAAQ1W,GAEnCR,KAAK8oB,YAAYtmB,KAAKsY,GACtB9a,KAAKurB,wBAAwBzQ,EAAmBnI,YAIhDkW,EAAA3oB,UAAA+qB,cAAR,WACIjrB,KAAKupB,YAAc,GACnBvpB,KAAKgpB,0BAA4B,EACjChpB,KAAKipB,MAAQ,KACbjpB,KAAK8oB,YAAc,yCAlOtB6C,EAAAA,+BAYAA,EAAAA,UAwNL9C,EArPA,iBCzDI,SAAA+C,EAAoBC,EAAcC,GAAd9rB,KAAA6rB,MAAAA,EARZ7rB,KAAA+rB,cAAgB,GAChB/rB,KAAAgsB,aAAe,GACfhsB,KAAAisB,KAAO,OAEPjsB,KAAAksB,kBAAoB,CAAC,KAAM,KAAM,QACjClsB,KAAAmsB,iBAAmB,EACnBnsB,KAAAosB,gBAAiB,EAGrBpsB,KAAKqsB,aAAaP,GAgE1B,OA7DWF,EAAA1rB,UAAAsqB,YAAP,WACI,IAAKxqB,KAAK6rB,OAA+B,IAAtB7rB,KAAK6rB,MAAMlrB,OAC1B,MAAO,OAGLqP,EAAOwN,GAAgBC,gBAAgBzd,KAAK6rB,OAElD,OAAoB,IAAhB7b,EAAKrP,OACE,IAGXX,KAAKosB,eAAiB5O,GAAgBS,cAAcje,KAAK6rB,OACzD7rB,KAAKksB,kBAAkB1pB,KAAKxC,KAAKssB,YAEjCtsB,KAAK+rB,cAAgB/rB,KAAKusB,oBAAoBvc,EAAMhQ,KAAKksB,mBACzDlsB,KAAKgsB,aAAehsB,KAAKwsB,mBAAmBxsB,KAAK6rB,MAAO7b,EAAMhQ,KAAKksB,mBAE5DlsB,KAAK+rB,cAAgB/rB,KAAKgsB,eAG7BJ,EAAA1rB,UAAAusB,aAAR,SAAqBtqB,EAAOuqB,OACpBC,EAAYnP,GAAgBgC,SAASrd,GAASkY,OAAOlY,GAAS,GAIlE,OAHIuqB,EAAYE,KAAK,SAACC,GAAM,OAAAF,EAAUG,SAASD,OAC3CF,EAAY,IAAIA,EAAS,KAEtBA,EAAY3sB,KAAKssB,YAGpBV,EAAA1rB,UAAAqsB,oBAAR,SAA4Bvc,EAAM0c,WAC1BK,EAAa,OACjB,IAAsB,IAAAC,EAAAjd,EAAAC,GAAIid,EAAAD,EAAA9qB,QAAA+qB,EAAA7qB,KAAA6qB,EAAAD,EAAA9qB,OAAE,CAAvB,IAAMgrB,EAAOD,EAAA9qB,MACd4qB,GAAc/sB,KAAKysB,aAAaS,EAASltB,KAAKksB,wHAGlD,OAAOa,EAAWlV,MAAM,GAAI7X,KAAKmsB,kBAAoBnsB,KAAKisB,MAGtDL,EAAA1rB,UAAAitB,cAAR,SAAsBlM,EAAQjR,EAAM0c,WAC5BK,EAAa,OACjB,IAAsB,IAAAK,EAAArd,EAAAC,GAAIqd,EAAAD,EAAAlrB,QAAAmrB,EAAAjrB,KAAAirB,EAAAD,EAAAlrB,OAAE,CAAvB,IAAMgrB,EAAOG,EAAAlrB,MAERA,EAAS8e,EAAOiM,KAAalZ,UAAaiN,EAAOiM,GAAWltB,KAAKosB,eAAiBnL,EAAS,GACjG8L,GAAc/sB,KAAKysB,aAAatqB,EAAOnC,KAAKksB,wHAGhD,OAAOa,EAAWlV,MAAM,GAAI7X,KAAKmsB,kBAAoBnsB,KAAKisB,MAGtDL,EAAA1rB,UAAAssB,mBAAR,SAA2Bc,EAAatd,EAAM0c,WACtCa,EAAc,OAClB,IAAkB,IAAAC,EAAAzd,EAAAud,GAAWG,EAAAD,EAAAtrB,QAAAurB,EAAArrB,KAAAqrB,EAAAD,EAAAtrB,OAAE,CAA1B,IAAMmf,EAAGoM,EAAAtrB,MACVorB,GAAevtB,KAAKmtB,cAAc9L,EAAKrR,EAAM0c,wGAGjD,OAAOa,GAGH3B,EAAA1rB,UAAAmsB,aAAR,SAAqBlqB,GACjBnC,KAAKssB,WAAanqB,EAClBnC,KAAKmsB,iBAAmBhqB,EAAMxB,QAEtCirB,mBCpCI,SAAA8B,EAAYtP,EAA4BuP,GAAA3tB,KAAA2tB,eAAAA,EAhCjC3tB,KAAA8pB,yBAA0B,EAU1B9pB,KAAAwrB,iBAAkB,EAUlBxrB,KAAA+pB,oBAAqB,EAUrB/pB,KAAA0rB,eAAgB,EAGnB1rB,KAAK4tB,YAAYxP,GA6BzB,OA1BYsP,EAAAxtB,UAAA0tB,YAAR,SAAoBxP,GAChBpe,KAAK6tB,UAAYzP,IAAuD,IAA3CA,EAAS0P,SAAS9tB,KAAK2tB,gBAA4B3tB,KAAK2tB,eAAiB,KAU1GnuB,OAAAgC,eAAIksB,EAAAxtB,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK6tB,eAUhB,SAAa1rB,GACTnC,KAAK4tB,YAAYzrB,oCAGzBurB,oBC/DI,SAAAK,EAAY3P,EAAkB4P,GAA9B,IAAApZ,EACIkF,EAAAlZ,KAAAZ,KAAMoe,EAAU2P,EAAsBE,yBAAyBD,KAAUhuB,YACzE4U,EAAKsZ,YAAYF,GACjBpZ,EAAKyX,iBA6Fb,OArG2CrU,EAAAA,EAAAA,GAWxB+V,EAAAE,yBAAf,SAAwCE,OAChCC,EAAY,GAChB,OAAQD,GACJ,KAAKE,GAAaC,IACdF,EAAY,OACZ,MACJ,KAAKC,GAAaE,IACdH,EAAY,OACZ,MACJ,KAAKC,GAAaG,IACdJ,EAAY,OACZ,MACJ,QACI,MAAMve,MAAM,8BAEpB,OAAOue,GAUX5uB,OAAAgC,eAAIusB,EAAA7tB,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKyuB,qBAUhB,SAAmBtsB,GACfnC,KAAKqsB,aAAalqB,oCAUtB3C,OAAAgC,eAAIusB,EAAA7tB,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK0uB,eAUhB,SAAavsB,GACTnC,KAAKkuB,YAAY/rB,oCAGb4rB,EAAA7tB,UAAAguB,YAAR,SAAoB/rB,GAChB,GAAIA,IAAU6R,WAAuB,OAAV7R,GAAkBA,IAAUnC,KAAK0uB,UAAW,CACnE1uB,KAAK0uB,UAAYvsB,MACXisB,EAAYL,EAAsBE,yBAAyB9rB,GACjE,IAAKnC,KAAKoe,SAAS0P,SAASM,GAAY,KAC9BO,EAAS,IAAM3uB,KAAKoe,SAASrL,MAAM,KAAK6b,MACxCC,EAAU7uB,KAAKoe,SAAS0Q,QAAQH,EAAQP,GAC9CpuB,KAAK2tB,eAAiBS,EACtBpuB,KAAKoe,SAAWyQ,KAKpBd,EAAA7tB,UAAAmsB,aAAR,SAAqBlqB,GACjB,GAAIA,IAAU6R,WAAuB,KAAV7R,GAA0B,OAAVA,EACvCnC,KAAKyuB,gBAAkBtsB,OAEvB,OAAQnC,KAAKguB,UACT,KAAKK,GAAaC,IACdtuB,KAAKyuB,gBAAkB,IACvB,MACJ,KAAKJ,GAAaE,IAClB,KAAKF,GAAaG,IACdxuB,KAAKyuB,gBAAkB,OAK3CV,GArG2CL,QA+GvCY,IAAA,EAIAC,IAAA,EAIAC,IAAA,sDC3FJ,IAAAO,GAAA,SAAAjV,GAAA,SAAAiV,IAAA,IAAAna,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAcW4U,EAAAoa,cAAgB,IAAI7F,EAAAA,eA2B/B,OAxC2CnR,EAAAA,EAAAA,GAe7B+W,EAAA7uB,UAAA8qB,yBAAV,SAAmCxW,EAAa8U,GAC5C9U,EAAOA,EAAK8H,IAAI,SAACL,GAAS,OAAAA,EAAKqF,cACzB2N,EAAU,IAAIrD,GAAuBpX,EAAM8U,EAAQwC,gBACzD9rB,KAAKkvB,YAAcD,EAAQzE,cAE3BxqB,KAAKmvB,SAAS7F,GACdtpB,KAAKgvB,cAAczM,KAAK,CAAE0M,QAASjvB,KAAKkvB,eAGpCH,EAAA7uB,UAAAivB,SAAR,SAAiB7F,GACb,OAAQA,EAAQ0E,UACZ,KAAKK,GAAaC,IACdtuB,KAAKovB,WAAWpvB,KAAKkvB,YAAa5F,EAAQlL,SAAU,2BACpD,MACJ,KAAKiQ,GAAaE,IAClB,KAAKF,GAAaG,IACdxuB,KAAKovB,WAAWpvB,KAAKkvB,YAAa5F,EAAQlL,SAAU,8CAKxD2Q,EAAA7uB,UAAAkvB,WAAR,SAAmB5a,EAAc4J,EAAkB4P,OACzC7P,EAAO,IAAIkR,KAAK,CAAC,SAAU7a,GAAO,CAAEtC,KAAM8b,IAChDxQ,GAAgBU,eAAeC,EAAMC,wBAvC5CpM,EAAAA,oDAaI2Z,EAAAA,UA4BLoD,EAzCA,CAC2ClG,QC9BvCyG,gBAAA,EACAC,oBAAA,EACAC,oBAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,iBAAA,EACAC,sBAAA,EACAC,0BAAA,EACAC,kBAAA,kbAMAC,aAAA,EACAC,QAAA,EACAC,SAAA,EACAC,iBAAA,EACAC,UAAA,EACAC,cAAA,EACAC,UAAA,EACAC,aAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,kBAAA,GACAC,WAAA,4aC5BJ,IAAAC,GAAA,WAAA,SAAAA,KA+GA,OA1GkBA,EAAAC,QAAd,WACI,OAAOD,EAAaE,WAAa,uhBAGvBF,EAAAG,OAAd,WACI,OAAOH,EAAaE,WAAa,4tBAGvBF,EAAAI,QAAd,WACI,OAAOJ,EAAaE,WAAa,4hBAGvBF,EAAAK,SAAd,WACI,OAAOL,EAAaE,WAAa,2hNAGvBF,EAAAM,UAAd,SAAwBC,OAEdC,EAAcD,EAAqB,EAAI,EAC7C,OAAOP,EAAaE,WAAa,2xBAA6xBM,EAAc,0wBAGl0BR,EAAAS,YAAd,WACI,OAAOT,EAAaE,WAAa,m1BAGvBF,EAAAU,iBAAd,WACI,OAAOV,EAAaE,WAAa,gPAGvBF,EAAAW,gBAAd,SAA8BC,OACtBC,EAASb,EAAaE,WAAa,ueAQvC,OANIU,IACAC,GAAUb,EAAac,4BAG3BD,GAAU,oBAKAb,EAAAe,YAAd,SAA0BC,EAAmBC,EAAoBC,EAAcC,EAAmBC,EAAmBC,EAAwBC,QAAxB,IAAAD,IAAAA,GAAA,QAAwB,IAAAC,IAAAA,EAAA,OACnIC,EAAaH,EAAW,8DAAgE,GACxFI,EAAmBH,EAAiB,mDAAqD,GACzFI,EAAgBH,EAAe,EAAI,oBAAoBA,EAAY,IAAM,GAI/E,OAAUtB,EAAaE,WAAU,wUAEvCsB,EAAgB,qBACAR,EAAS,kEACiCC,EAAU,mEAC/BQ,EAAa,8BAClDP,EAAI,KACJC,EAAS,+FAETI,EAAU,gBAIMvB,EAAA0B,mBAAd,SAAiCC,EAAeC,EAAqBC,GACjE,OAAO7B,EAAaE,WAAa,iFAAmFyB,EAAQ,kBAAoBC,EAAc,KAAOC,EAAQ,UAGnK7B,EAAA8B,mBAAd,SAAiClB,EAA2BQ,OACpDW,EAAe/B,EAAaE,WAChC,0jCAiBA,OAPA6B,GAAgBnB,EAChB,6IAA8I,GAE9ImB,GAAgBX,EACZ,mIAAqI,GACzIW,GAAgB,YAKN/B,EAAAgC,aAAd,SAA2BhB,EAAmBiB,EAAsBre,GAChE,OAAUoc,EAAaE,WAAU,2HAA2Hc,EAAS,+CACtJA,EAAS,MAAMpd,EAAOqe,EAAY,wIAKvCjC,EAAAkC,eAAd,SAA6Blf,GAIzB,QADImf,EAAe,GACZnf,GAAS,GAAG,KACTof,EAAOpf,EAAQ,GACrBmf,EAAezY,OAAO2Y,aAAa,GAAKD,GAAQD,EAChDnf,EAAQ8H,KAAKmC,MAAMjK,EAAQ,IAAM,EAErC,OAAOmf,GA3GInC,EAAAE,WAAa,6CACbF,EAAAc,2BAA6B,iJA4GhDd,EA/GA,iBCQA,SAAAZ,KAIA,OAHWA,EAAA7vB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,QAASzC,GAAaC,YAE1Cb,mBAKA,SAAAC,KAIA,OAHWA,EAAA9vB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,UAAWzC,GAAaG,WAE5Cd,mBAKA,SAAAC,KAIA,OAHWA,EAAA/vB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,WAAYzC,GAAaI,YAE7Cd,mBAKA,SAAAC,KAKA,OAJWA,EAAAhwB,UAAA+yB,aAAP,SAAoBC,EAAeC,OACzB5B,GAA6C,IAA1B4B,EAAcE,QACvCH,EAAOE,KAAK,oBAAqBzC,GAAaW,gBAAgBC,KAEtErB,mBAKA,SAAAC,KAIA,OAHWA,EAAAjwB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,aAAczC,GAAaK,aAE/Cb,KAKAC,GAAA,WAAA,SAAAA,KA+GA,OA5GWA,EAAAlwB,UAAA+yB,aAAP,SAAoBC,EAAeC,OAG3BxB,EAFEG,EAAY,GACZD,EAAO,GAEPyB,EAAaH,EAAcI,eAC7B3B,EAAa,GACb4B,EAAkB,EAEtB,GAAIL,EAAcE,QACdvB,EAAUtvB,KAAK,gBACfmvB,EAAY,SACT,CACHG,EAAUtvB,KAAK,mBACT2K,EAAUgmB,EAAc7J,QAAQmK,UAChCA,EAAYtmB,EAAS,QAAUA,EAAS,qBAAuB,GAErE2kB,EAAUtvB,KAAK,aAAaixB,EAAS,KACrC,IAAK,IAAIjzB,EAAI,EAAGA,EAAI2yB,EAAcO,YAAalzB,IAAK,KAC1CohB,EAAS+O,GAAakC,eAAeryB,GAAK,EAC1C2B,EAAQmxB,EAAWK,UAAUR,EAAcnjB,KAAKxP,GAAIA,GAAG,GAC7DsxB,EAAUtvB,KAAK,SAASof,EAAM,cAAczf,EAAK,YAErD2vB,EAAUtvB,KAAK,UAEf,IAAShC,EAAI,EAAGA,EAAI2yB,EAAcS,SAAUpzB,IAAK,CAC7C,GAAK2yB,EAAcU,eAEZ,KACGvS,EAAU6R,EAAc3e,KAAKhU,EAAI,GAAG6qB,gBACpCyI,EAAexS,EAAQ/J,UAAuC,IAArB+J,EAAQ/J,SAAqB,GAAK,iBAAxC,GACnCwc,EAAWzS,EAAQ5K,QAAU1W,KAAKg0B,mBAAmB1S,GAAY,cAAgB,GACjF2S,EAAkB3S,EAAQ5N,MAAQ4N,EAAQ5N,MAAQ,EAClD0e,EAAgB6B,EAAkB,EAAI,kBAAkBA,EAAe,IAAM,GACnFT,EAAkBA,EAAkBS,EAAkBA,EAAkBT,EAExE1B,EAAUtvB,KAAK,YAAYhC,EAAI,GAAE,IAAIizB,EAAYrB,EAAgB0B,EAAaC,EAAO,UATrFjC,EAAUtvB,KAAK,YAAYhC,EAAI,GAAE,IAAIizB,EAAS,KAWlD,IAAK,IAAIvd,EAAI,EAAGA,EAAIid,EAAcO,YAAaxd,IAAK,KAC1Cge,EAAW9D,EAAc+D,YAAYhB,EAAe3yB,EAAG0V,GAC7D4b,EAAUtvB,KAAK0xB,GAEnBpC,EAAUtvB,KAAK,UAEnBsvB,EAAUtvB,KAAK,gBACfmvB,EAAY,MAAQhB,GAAakC,eAAeM,EAAcO,YAAc,GAAKP,EAAcS,SAE/F/B,EAAKrvB,KAAK,UAEV,IAAShC,EAAI,EAAGA,EAAI2yB,EAAcO,YAAalzB,IAAK,KAC1CyQ,EAAQqiB,EAAWc,aAAa5zB,GAEhC6zB,EAAelB,EAAc7J,QAAQgL,YACvBnB,EAAc7J,QAAQgL,YACtB7Y,KAAK4O,IAAMpZ,EAAQ,GAAM,KAAOmf,EAAcmE,WAElE1C,EAAKrvB,KAAK,cAAchC,EAAI,GAAE,WAAWA,EAAI,GAAE,YAAY6zB,EAAY,uBAK3E,GAFAxC,EAAKrvB,KAAK,YAEqC,IAA3C2wB,EAAcqB,0BACbrB,EAAc7J,QAAQmL,gBACtBtB,EAAc7J,QAAQS,mBAAoB,KACrC2K,EAAoBvB,EAAcqB,wBAA0B,EAElE5C,EAAa,iBAAiB8C,EAAiB,mBAD7B/D,GAAakC,eAAe6B,GAAqB,KACO,gDAG5E3C,GAAYoB,EAAcE,SAAWF,EAAc7J,QAAQqL,cAEjEzB,EAAOE,KAAK,aACAzC,GAAae,YAAYC,EAAWC,EAAYC,EAAK+C,KAAK,IAAK9C,EAAU8C,KAAK,IAAK7C,EACnFoB,EAAcU,eAAgBL,KAGtCpD,EAAAlwB,UAAA8zB,mBAAR,SAA2B1S,GAEvB,QADI9Q,GAAU8Q,EAAQ5K,OAAOa,SACtB+J,EAAQ5K,QACXlG,EAASA,IAAW8Q,EAAQ5K,OAAOa,SACnC+J,EAAUA,EAAQ5K,OAGtB,OAAOlG,GAGI4f,EAAA+D,YAAf,SAA2BhB,EAA8B9R,EAAaO,OAC5D0R,EAAaH,EAAcI,eAC3BsB,EAAalE,GAAakC,eAAejR,IAAWP,EAAM,GAC1DqI,EAAeyJ,EAAcnjB,KAAK4R,GAElCN,EAAU6R,EAAc3e,KAAK6M,EAAM,GAAGC,QAEtCwT,EAAY3B,EAAclV,cAAgBqD,EAAUA,EAAQoI,GAElE,GAAIoL,IAAc9gB,WAA2B,OAAd8gB,EAC3B,MAAO,SAASD,EAAU,gBAEpBE,EAAazB,EAAWK,UAAUmB,EAAWlT,GAAQ,GACrDoT,GAAkC,IAAhBD,EAMxB,MAAO,SAASF,EAAU,KAHbG,EAAkB,SAAW,KAC3BA,EAAkB,GAAK,UAEK,QAJ7BA,EAAkBD,EAAaD,GAIU,YA1GhD1E,EAAAmE,UAAY,KA8G/BnE,EA/GA,iBAoHA,SAAAC,KAIA,OAHWA,EAAAnwB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,aAAczC,GAAaM,UAAUkC,EAAcI,gBAAkBJ,EAAcI,eAAerC,sBAEtHb,mBAKA,SAAAC,KAIA,OAHWA,EAAApwB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,eAAgBzC,GAAaS,gBAEjDd,mBAKA,SAAAC,KAIA,OAHWA,EAAArwB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,sBAAuBzC,GAAa8B,oBAAoBU,EAAcE,QAASF,EAAc7J,QAAQqL,iBAEzHpE,mBAKA,SAAAC,KAgBA,OAfWA,EAAAtwB,UAAA+yB,aAAP,SAAoBC,EAAeC,WACzB8B,EAAO9B,EAAcI,eACrB2B,EAAeD,EAAKE,UACpBC,EAAgB,IAAIz1B,MAAcu1B,EAAav0B,YAErD,IAAoB,IAAA00B,EAAAtlB,EAAAmlB,GAAYI,EAAAD,EAAAnzB,QAAAozB,EAAAlzB,KAAAkzB,EAAAD,EAAAnzB,OAAE,CAA7B,IAAMC,EAAKmzB,EAAAnzB,MACZizB,EAAcH,EAAKM,kBAAkBpzB,IAAU,UAAYA,EAAQ,iHAGvE+wB,EAAOE,KAAK,oBAAqBzC,GAAa0B,mBAC9B4C,EAAKO,aACLN,EAAav0B,OACby0B,EAAcR,KAAK,OAG3CpE,mBAKA,SAAAE,KAyBA,OAxBWA,EAAAxwB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAQ/B,QAPMO,EAAcP,EAAcO,YAC5B+B,EAAa9E,GAAakC,eAAea,EAAc,GAAKP,EAAcS,SAC1EjC,EAAY,MAAQ8D,EACpBC,EAASvC,EAAcnjB,KACzB2lB,EAAa,GAEb/C,EAAe,wBAA0Bc,EAAc,KAClDlzB,EAAI,EAAGA,EAAIkzB,EAAalzB,IAAK,CAElCoyB,GAAgB,qBAAuBpyB,EAAI,GAAK,WADjCk1B,EAAOl1B,GAC+C,MAKzE,GAFAoyB,GAAgB,kBAEZO,EAAc5e,KAAM,KACdqhB,EAAoBzC,EAAc5e,KAClCshB,EAAKlF,GAAakC,eAAe6C,EAAOpkB,QAAQskB,EAAkBhiB,YAExE+hB,EAAa,sBAAsBF,EAAU,iCADjCG,EAAkBnhB,IAAM,GAC4C,UAAUohB,EAAE,KAAKA,EAAE,oBAGvG3C,EAAOE,KAAK,aAAczC,GAAagC,aAAahB,EAAWiB,EAAc+C,KAErFjF,mBAKA,SAAAD,KAIA,OAHWA,EAAAvwB,UAAA+yB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,kBAAmBzC,GAAaU,qBAEpDZ,mBCpPA,SAAAnB,KAgBA,OAfI9vB,OAAAgC,eAAW8tB,EAAApvB,UAAA,aAAU,KAArB,WACI,MAAQ,oCAGZovB,EAAApvB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAexF,mBAG3BjB,EAAApvB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,CACHyhB,GAAiB1G,oBACjB0G,GAAiBzG,oBACjByG,GAAiBxG,gBAG7BH,mBAGA,SAAAC,KAYA,OAXI/vB,OAAAgC,eAAW+tB,EAAArvB,UAAA,aAAU,KAArB,WACI,MAAQ,yCAGZqvB,EAAArvB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAehG,eAG3BR,EAAArvB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,IAEf+a,mBAGA,SAAAC,KAeA,OAdIhwB,OAAAgC,eAAWguB,EAAAtvB,UAAA,aAAU,KAArB,WACI,MAAQ,4CAGZsvB,EAAAtvB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CACHuhB,GAAe/F,QACf+F,GAAe9F,WAIvBT,EAAAtvB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,IAEfgb,mBAGA,SAAAC,KA+BA,OA9BIjwB,OAAAgC,eAAWiuB,EAAAvvB,UAAA,aAAU,KAArB,WACI,MAAQ,sCAGZuvB,EAAAvvB,UAAA41B,WAAA,SAAWthB,OACDgd,EAAS,CACXuE,GAAe1F,UACf0F,GAAezF,cAOnB,OAJK9b,EAAK6e,SACN7B,EAAOhvB,KAAKuzB,GAAevF,mBAGxBgB,GAGX/B,EAAAvvB,UAAA81B,aAAA,SAAaxhB,OACHgd,EAAS,CACXyE,GAAiBvG,kBACjBuG,GAAiBtG,iBACjBsG,GAAiBrG,uBAOrB,OAJKpb,EAAK6e,SAAW7e,EAAK8U,QAAQqL,eAC9BnD,EAAOhvB,KAAKyzB,GAAiBnG,mBAG1B0B,GAEf/B,mBAGA,SAAAC,KAYA,OAXIlwB,OAAAgC,eAAWkuB,EAAAxvB,UAAA,aAAU,KAArB,WACI,MAAQ,yCAGZwvB,EAAAxvB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAe7F,mBAG3BR,EAAAxvB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,IAEfkb,mBAGA,SAAAC,KAYA,OAXInwB,OAAAgC,eAAWmuB,EAAAzvB,UAAA,aAAU,KAArB,WACI,MAAQ,yCAGZyvB,EAAAzvB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAe5F,YAG3BR,EAAAzvB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,IAEfmb,mBAGA,SAAAC,KAYA,OAXIpwB,OAAAgC,eAAWouB,EAAA1vB,UAAA,aAAU,KAArB,WACI,MAAQ,8CAGZ0vB,EAAA1vB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAe3F,gBAG3BR,EAAA1vB,UAAA81B,aAAA,SAAaxhB,GACT,OAAOA,EAAK6e,UAAY7e,EAAK8U,QAAQqL,cAAgB,GAAK,CAACsB,GAAiBpG,4BAEpFD,mBAGA,SAAAE,KAYA,OAXItwB,OAAAgC,eAAWsuB,EAAA5vB,UAAA,aAAU,KAArB,WACI,MAAO,0CAGX4vB,EAAA5vB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAerF,aAG3BZ,EAAA5vB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,IAEfsb,mBAGA,SAAAD,KAYA,OAXIrwB,OAAAgC,eAAWquB,EAAA3vB,UAAA,aAAU,KAArB,WACI,MAAO,yCAGX2vB,EAAA3vB,UAAA41B,WAAA,SAAWthB,GACP,MAAO,CAACuhB,GAAetF,oBAG3BZ,EAAA3vB,UAAA81B,aAAA,SAAaxhB,GACT,MAAO,IAEfqb,mBCjIA,SAAAqG,KAyDA,OAvDkBA,EAAAC,eAAd,SAA6BjkB,GACzB,OAAQA,GACJ,KAAK+jB,GAAiB3G,gBAClB,OAAO,IAAIA,GACf,KAAK2G,GAAiB1G,oBAClB,OAAO,IAAIA,GACf,KAAK0G,GAAiBzG,oBAClB,OAAO,IAAIA,GACf,KAAKyG,GAAiBxG,cAClB,OAAO,IAAIA,GACf,KAAKwG,GAAiBvG,kBAClB,OAAO,IAAIA,GACf,KAAKuG,GAAiBtG,iBAClB,OAAO,IAAIA,GACf,KAAKsG,GAAiBrG,sBAClB,OAAQ,IAAIA,GAChB,KAAKqG,GAAiBpG,0BAClB,OAAO,IAAIA,GACf,KAAKoG,GAAiBnG,kBAClB,OAAO,IAAIA,GACf,QACI,MAAM,IAAIjgB,MAAM,gCAIdqmB,EAAAE,aAAd,SAA2BlkB,GACvB,OAAQA,GACJ,KAAK6jB,GAAehG,aAChB,OAAQ,IAAIA,GAChB,KAAKgG,GAAe/F,QAChB,OAAQ,IAAIA,GAChB,KAAK+F,GAAe9F,SAChB,OAAO,IAAIA,GACf,KAAK8F,GAAe7F,iBAChB,OAAO,IAAIA,GACf,KAAK6F,GAAe5F,UAChB,OAAO,IAAIA,GACf,KAAK4F,GAAe3F,cAChB,OAAO,IAAIA,GACf,KAAK2F,GAAe1F,UAChB,OAAO,IAAIA,GACf,KAAK0F,GAAezF,aAChB,OAAO,IAAIA,GACf,KAAKyF,GAAexF,iBAChB,OAAO,IAAIA,GACf,KAAKwF,GAAevF,kBAChB,OAAO,IAAIA,GACf,KAAKuF,GAAetF,kBAChB,OAAO,IAAIA,GACf,KAAKsF,GAAerF,WAChB,OAAO,IAAIA,GACf,QACI,MAAM7gB,MAAM,8BAG5BqmB,KC5FAG,GAAA,WAuBI,SAAAA,EAAY3C,EAAqBY,GAJ1Bt0B,KAAAkxB,oBAAqB,EAKxBlxB,KAAKs2B,YAAc,GACnBt2B,KAAKu2B,kBAAoB,GACzBv2B,KAAKw2B,SAAW,EAChBx2B,KAAKy2B,sBAELz2B,KAAK02B,uBAAyBpC,EAC9Bt0B,KAAK22B,cAAgB,IAAIh3B,MAAc+zB,GACvC1zB,KAAK42B,gBAAkB,IAAIj3B,MAAe+zB,GAErC1zB,KAAK02B,uBACN12B,KAAK22B,cAAcE,KAAKvC,GAG5Bt0B,KAAKw1B,aAAe,EA4F5B,OAzFIh2B,OAAAgC,eAAW60B,EAAAn2B,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK22B,+CAGTN,EAAAn2B,UAAAyzB,UAAP,SAAiBxxB,EAAYyf,EAAgBkV,GACrC92B,KAAK42B,gBAAgBhV,KAAY5N,YAA0B,IAAb8iB,IAC9C92B,KAAK42B,gBAAgBhV,GAA2B,iBAAVzf,GACW,kBAAVA,GACPA,aAAiBgO,UAGjD4mB,EAAiB,GACf/B,EAAkBh1B,KAAK42B,gBAAgBhV,IAAWkV,EAexD,GAbI9B,GACA+B,EAAiB/2B,KAAKg3B,cAAc70B,GAEhCnC,KAAKs2B,YAAYS,KAAoB/iB,YACrChU,KAAKs2B,YAAYS,GAAkB/2B,KAAKw2B,WACxCx2B,KAAKy2B,uBAGTz2B,KAAKw1B,gBAELx1B,KAAKkxB,oBAAqB,EAG1BlxB,KAAK02B,sBAAuB,KACtBzlB,EAAQjR,KAAKi3B,aAAa90B,GAC1B+0B,EAAWzb,KAAK4O,IAAIrqB,KAAK22B,cAAc/U,IAAW,EAAG3Q,GAC3DjR,KAAK22B,cAAc/U,GAAUsV,EAGjC,OAAOlC,EAAkBh1B,KAAKu1B,kBAAkBwB,IAAmB,GAGhEV,EAAAn2B,UAAAi3B,SAAP,SAAgBh1B,GACZ,OAAOnC,KAAKu1B,kBAAkBv1B,KAAKg3B,cAAc70B,KAG9Ck0B,EAAAn2B,UAAAq1B,kBAAP,SAAyBwB,GACrB,OAAO/2B,KAAKs2B,YAAYS,IAGrBV,EAAAn2B,UAAAi1B,QAAP,WAMI,OALKn1B,KAAKo3B,gBACNp3B,KAAKq3B,MAAQ73B,OAAOwQ,KAAKhQ,KAAKs2B,aAC9Bt2B,KAAKo3B,eAAgB,GAGlBp3B,KAAKq3B,OAGRhB,EAAAn2B,UAAA+2B,aAAR,SAAqB90B,GACjB,GAAInC,KAAKu2B,kBAAkBp0B,KAAW6R,UAAW,KAEvCsjB,EADUt3B,KAAKu3B,aACGC,YAAYr1B,GACpCnC,KAAKu2B,kBAAkBp0B,GAASm1B,EAAQrmB,MAAQolB,EAAwBoB,aAG5E,OAAOz3B,KAAKu2B,kBAAkBp0B,IAG1Bk0B,EAAAn2B,UAAAq3B,WAAR,WACI,IAAKv3B,KAAK03B,SAAU,KACVC,EAAStZ,SAASC,cAAc,UACtCte,KAAK03B,SAAWC,EAAOJ,WAAW,MAClCv3B,KAAK03B,SAASE,KAAOvB,EAAwBwB,aAGjD,OAAO73B,KAAK03B,UAGRrB,EAAAn2B,UAAA82B,cAAR,SAAsB70B,GAClB,OAAwC,IAApCqb,GAAgBgC,SAASrd,GAClB,GAEakY,OAAOlY,GACR2sB,QAAQ,KAAM,SAChBA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,WAI/BuH,EAAAn2B,UAAAu2B,oBAAR,WACIz2B,KAAKo3B,eAAgB,GA9HVf,EAAAwB,aAAe,eACfxB,EAAAoB,aAAe,EA+HlCpB,EAjIA,iBCSI,SAAAyB,EAAoBjM,EAAqBvC,EAAyCkL,EAC/DjgB,EAAkBsf,QAAA,IAAAA,IAAAA,GAAA,GADjB7zB,KAAA6rB,MAAAA,EAAqB7rB,KAAAspB,QAAAA,EAAyCtpB,KAAAw0B,wBAAAA,EAC/Dx0B,KAAAuU,KAAAA,EAAkBvU,KAAA6zB,eAAAA,EACjC7zB,KAAK+3B,iBAkDb,OA/CIv4B,OAAAgC,eAAWs2B,EAAA53B,UAAA,OAAI,KAAf,WACI,OAAOF,KAAK6rB,uCAGhBrsB,OAAAgC,eAAWs2B,EAAA53B,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKg4B,8CAGhBx4B,OAAAgC,eAAWs2B,EAAA53B,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKi4B,2CAGhBz4B,OAAAgC,eAAWs2B,EAAA53B,UAAA,UAAO,KAAlB,WACI,OAAQF,KAAK4zB,WAAa5zB,KAAKg4B,8CAGnCx4B,OAAAgC,eAAWs2B,EAAA53B,UAAA,OAAI,KAAf,WACI,OAAOF,KAAKq3B,uCAGhB73B,OAAAgC,eAAWs2B,EAAA53B,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKosB,gDAGhB5sB,OAAAgC,eAAWs2B,EAAA53B,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKk4B,iDAGRJ,EAAA53B,UAAA63B,eAAR,WACI,GAAK/3B,KAAK6rB,OAA+B,IAAtB7rB,KAAK6rB,MAAMlrB,OAA9B,KAIMw3B,EAAan4B,KAAK6rB,MAAMvP,IAAI,SAACL,GAAS,OAAAA,EAAKqF,UAEjDthB,KAAKq3B,MAAQ7Z,GAAgBC,gBAAgB0a,GACnB,IAAtBn4B,KAAKq3B,MAAM12B,SAIfX,KAAKosB,eAAiB5O,GAAgBS,cAAcka,GAEpDn4B,KAAKg4B,aAAeh4B,KAAKq3B,MAAM12B,OAC/BX,KAAKi4B,UAAYj4B,KAAK6rB,MAAMlrB,OAAS,EAErCX,KAAKk4B,gBAAkB,IAAI7B,GAAwBr2B,KAAKg4B,aAAch4B,KAAKspB,QAAQgL,gBAE3FwD,KC3BAM,GAAA,SAAAte,GAAA,SAAAse,IAAA,IAAAxjB,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAgBW4U,EAAAoa,cAAgB,IAAI7F,EAAAA,eA8C/B,OA7D6CnR,EAAAA,EAAAA,GAiB1BogB,EAAAC,eAAf,SAA8BnF,EAAsBoF,EAAYnF,mBAC5D,IAA0B,IAAAljB,EAAAF,EAAAmjB,EAAO8C,aAAa7C,IAAcoF,EAAAtoB,EAAA/N,QAAAq2B,EAAAn2B,KAAAm2B,EAAAtoB,EAAA/N,OAAE,CAAzD,IAAMs2B,EAAWD,EAAAp2B,MACZs2B,EAAgBvC,GAAqBC,eAAeqC,GACpDE,EAAYJ,EAAIpF,OAAOuF,EAAcE,YAC3CP,EAAwBC,eAAeI,EAAeC,EAAWvF,4GAGrE,IAAwB,IAAAyF,EAAA7oB,EAAAmjB,EAAO4C,WAAW3C,IAAc0F,EAAAD,EAAA12B,QAAA22B,EAAAz2B,KAAAy2B,EAAAD,EAAA12B,OAAE,CAArD,IAAM42B,EAASD,EAAA12B,MACK+zB,GAAqBE,aAAa0C,GAC1C7F,aAAaqF,EAAKnF,0GAI7BiF,EAAAl4B,UAAA8qB,yBAAV,SAAmCxW,EAAa8U,GAAhD,IAAA1U,EAAA5U,KACI,GAAIA,KAAK+oB,YAAa,KACdgQ,EAAW,EAIf,GAHAvkB,EAAK/B,QAAQ,SAACrR,GACV23B,EAAWtd,KAAK4O,IAAI0O,EAAU33B,EAAEiqB,gBAAgB3X,SAEhDqlB,EAAW,EACX,MAAMlpB,MAAM,oDAIdsjB,EAAgB,IAAI2E,GAActjB,EAAM8U,EAAStpB,KAAKgpB,yBAA0BhpB,KAAKipB,MAAOjpB,KAAK+oB,aACvG/oB,KAAKg5B,MAAQ,IAAIC,MAEXC,EAAahD,GAAqBC,eAAeF,GAAiB3G,iBACxE8I,EAAwBC,eAAea,EAAYl5B,KAAKg5B,MAAO7F,GAE/DnzB,KAAKg5B,MAAMG,cAAcf,EAAwBgB,aAAaC,KAAK,SAAC7oB,GAChEoE,EAAKua,SAAS3e,EAAQ8Y,EAAQlL,UAE9BxJ,EAAKoa,cAAczM,KAAK,CAAE+W,KAAM1kB,EAAKokB,WAIrCZ,EAAAl4B,UAAAivB,SAAR,SAAiB3a,EAAc4J,OACrBD,EAAO,IAAIkR,KAAK,CAAC7R,GAAgB0B,oBAAoBqa,KAAK/kB,KAAS,CACrEtC,KAAM,KAGVsL,GAAgBU,eAAeC,EAAMC,IAzD1Bga,EAAAgB,YAAW,CAAKI,YAAa,UAAWtnB,KAAM,8BAHhEF,EAAAA,oDAeI2Z,EAAAA,UA+CLyM,EA9DA,CAC6CvP,mBCRzC,SAAA4Q,EAAYrb,GAAZ,IAAAxJ,EACIkF,EAAAlZ,KAAAZ,KAAMoe,EAAU,UAAQpe,YAbrB4U,EAAA6f,eAAgB,EAUhB7f,EAAA+f,eAAgB,IA2D3B,OAlF6C3c,EAAAA,EAAAA,GAoCzCxY,OAAAgC,eAAWi4B,EAAAv5B,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK05B,kBAWhB,SAAuBv3B,GACnB,GAAIA,EAAQ,EACR,MAAM0N,MAAM,mCAGhB7P,KAAK05B,aAAev3B,mCAUxB3C,OAAAgC,eAAWi4B,EAAAv5B,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK25B,gBAWhB,SAAqBx3B,GACjB,GAAIA,EAAQ,EACR,MAAM0N,MAAM,iCAGhB7P,KAAK25B,WAAax3B,mCAE1Bs3B,GAlF6C/L,QCIzCkM,MAAA,EACAC,QAAA,GACAC,MAAA,0EAIAC,KAAA,EACAC,QAAA,GACAC,OAAA,kEAGJ,IAAAC,GAAA,WAEA,OADI,SAAmBpd,EAAkBqd,GAAlBn6B,KAAA8c,EAAAA,EAAkB9c,KAAAm6B,EAAAA,GADzC,iBAuFA,SAAAC,KAoEA,OA7DWA,EAAAC,cAAP,SAAqBC,OACbC,EAAyB,CACzBC,OAAQ,EACRrtB,OAAQ,EACRstB,KAAM,EACNC,MAAO,EACPC,IAAK,EACL1pB,MAAO,GAGX,GAAIqpB,EAASt5B,kBAAkB45B,YAC3BL,EAAcD,EAAe,OAAiBppB,6BAC3C,GAAIopB,EAASt5B,kBAAkBk5B,GAAO,KACnCW,EAAcP,EAAe,OACnCC,EAAa,CACTC,OAAQK,EAAYV,EACpBhtB,OAAQ,EACRstB,KAAMI,EAAY/d,EAClB4d,MAAOG,EAAY/d,EACnB6d,IAAKE,EAAYV,EACjBlpB,MAAO,GAIf,OAAOspB,GAIJH,EAAAU,gBAAP,SAAuBzc,OACbpN,EAAQoN,EAAS0c,gBAAgBC,YACjC7tB,EAASkR,EAAS0c,gBAAgBE,aAClCC,EAAiBd,EAAKe,0BAA0B9c,GAEtD,MAAO,CACHsc,IAAKO,EAAef,EACpBM,KAAMS,EAAepe,EACrB4d,MAAOQ,EAAepe,EAAI7L,EAC1BupB,OAAQU,EAAef,EAAIhtB,EAC3B8D,MAAOA,EACP9D,OAAQA,IAKTitB,EAAAe,0BAAP,SAAiC9c,OACvB0c,EAAkB1c,EAAS0c,gBAC3BK,EAAeL,EAAgB7pB,wBAE/BmqB,GACDD,EAAaX,MAAQpc,EAASQ,KAAKyc,YAAcvpB,OAAOwpB,SAAWR,EAAgBO,YAAc,EAChGE,GAA0BJ,EAAaT,KAAOtc,EAASQ,KAAK4c,WAAa1pB,OAAO2pB,SAAWX,EAAgBU,WAAa,EAE9H,OAAO,IAAIvB,GAAMmB,EAA0BG,IAIxCpB,EAAAuB,cAAP,SAAqBC,OACXC,EAAYr8B,OAAOa,OAAOb,OAAOW,OAAOX,OAAOs8B,eAAeF,IAAUA,GAE9E,OADAC,EAAUvB,SAAW9qB,GAAWqsB,EAAUvB,UACnCuB,GAEfzB,mBCzJI,SAAA2B,EAAYzB,GAbFt6B,KAAAg8B,iBAAqC,CAC3CC,oBAAqBC,GAAoBrC,OACzCsC,kBAAmBC,GAAkBpC,OACrCqC,qBAAsBH,GAAoBrC,OAC1CyC,mBAAoBF,GAAkBpC,OACtCuC,cAAex4B,EACfy4B,eAAgBt4B,EAChBu4B,QAAS,CAAExrB,MAAO,EAAG9D,OAAQ,IAO7BnN,KAAKs6B,SAAW96B,OAAOa,OAAO,GAAIL,KAAKg8B,iBAAkB1B,GA4CjE,OAxCIyB,EAAA77B,UAAAw8B,SAAA,SAASC,EAA6BC,EAAave,EAAqBwe,GACpEF,EAAeG,UAAUpvB,IAAI,kCAC7BivB,EAAeI,cAAcD,UAAUpvB,IAAI,8BAC3C1N,KAAKg9B,YAAYL,EAAgB38B,KAAKs6B,WAGhCyB,EAAA77B,UAAA88B,YAAV,SAAsBL,EAA6BrC,GAC/C,OAAQt6B,KAAKs6B,SAAS2B,qBAClB,KAAKC,GAAoBtC,KACrB+C,EAAeI,cAAc15B,MAAM45B,eAAiB,aACpD,MACJ,KAAKf,GAAoBrC,OACrB8C,EAAeI,cAAc15B,MAAM45B,eAAiB,SACpD,MACJ,KAAKf,GAAoBpC,MACrB6C,EAAeI,cAAc15B,MAAM45B,eAAiB,WAM5D,OAAQj9B,KAAKs6B,SAAS6B,mBAClB,KAAKC,GAAkBrC,IACnB4C,EAAeI,cAAc15B,MAAM65B,WAAa,aAChD,MACJ,KAAKd,GAAkBpC,OACnB2C,EAAeI,cAAc15B,MAAM65B,WAAa,SAChD,MACJ,KAAKd,GAAkBnC,OACnB0C,EAAeI,cAAc15B,MAAM65B,WAAa,aAQ5DnB,EAAA77B,UAAAi9B,MAAA,WACI,OAAO/C,GAAKuB,cAAc37B,OAElC+7B,mBCtDA,OATI,SAAYqB,uBCGZ,SAAAC,EAAYD,UACRtjB,EAAAlZ,KAAAZ,KAAMo9B,IAAgBp9B,KAU9B,OAZwCgY,EAAAA,EAAAA,GAK7BqlB,EAAAn9B,UAAAo9B,WAAP,SAAkBjf,EAAoBkf,EAAmC5vB,KAGzE0vB,EAAAn9B,UAAAs9B,OAAA,aAGAH,EAAAn9B,UAAAu9B,OAAA,aACJJ,GAZwCK,ICDxC,SAAgBC,GAAgBC,OACxBC,GAAiB,EAErB,OAAO,SAAU78B,EAAaC,EAAa68B,GACvC,GAAIA,GAAcA,EAAW37B,MAAO,KAC1B47B,EAAiBD,EAAW37B,MASlC,OAPA27B,EAAW37B,MAAQ,eACT67B,EAA+B,mBAAXh9B,EAAwBA,EAAOgf,KAAOhf,EAAOf,YAAY+f,KAGnF,OAFA6d,EAAiBI,GAAeD,EAAU,IAAI/8B,EAAG,KAAK28B,EAAWC,GAE1DE,EAAen9B,KAAKZ,KAAMU,YAG9Bo9B,IAQnB,SAAgBI,GAAkBN,GAC9B,OAAO,SAAS58B,EAAaC,OAOjBk9B,EAAQC,EANZP,GAAiB,EACfQ,EAAsBr9B,EAAOf,YAAY+f,KAAI,IAAI/e,EAAG,KAAK28B,EAGzDU,EAAqB9+B,OAAO6B,yBAAyBL,EAAQC,GACnE,GAAIq9B,EAmBA,OAjBAH,EAASG,EAAmBxwB,IAC5BswB,EAASE,EAAmB5V,IAExByV,IACAG,EAAmBxwB,IAAM,WAErB,OADA+vB,EAAiBI,GAAYI,EAAkBR,GACxCM,EAAOv9B,KAAKZ,QAIvBo+B,IACAE,EAAmB5V,IAAM,SAAUvmB,GAC/B07B,EAAiBI,GAAYI,EAAkBR,GAC/CO,EAAOx9B,KAAKZ,KAAMmC,KAInBm8B,MAKLC,EAmBd,SAA2Bv9B,EAAaC,OAChCs9B,EAAS,IAAMt9B,EACnB,KAAOD,EAAOnB,eAAe0+B,IACzBA,EAAS,IAAMA,EAGnB,OAAOA,EAzBYC,CAAkBx9B,EAAQC,GACzCzB,OAAOgC,eAAeR,EAAQC,EAAK,CAC/Bw9B,cAAc,EACdC,YAAY,EACZhW,IAAK,SAASvmB,GACV07B,EAAiBI,GAAYI,EAAkBR,GAC/C79B,KAAKu+B,GAAUp8B,GAEnB2L,IAAK,WAED,OADA+vB,EAAiBI,GAAYI,EAAkBR,GACxC79B,KAAKu+B,OAqB5B,SAAgBN,GAAYL,EAAiBC,GAKzC,OAJKA,GAAkBc,EAAAA,aACnBC,QAAQC,KAAKjB,IAGV,MC7DPkB,IAAe,EAMnBC,GAAA,WAiEI,SAAAA,EACYC,EACAC,EACAC,EACAC,EACkB9gB,EAClB+gB,GANZ,IAAAxqB,EAAA5U,KACYA,KAAAg/B,iBAAAA,EACAh/B,KAAAi/B,QAAAA,EACAj/B,KAAAk/B,UAAAA,EACAl/B,KAAAm/B,QAAAA,EACkBn/B,KAAAqe,SAAAA,EAClBre,KAAAo/B,MAAAA,EArEJp/B,KAAAq/B,aAAe,EACfr/B,KAAAs/B,cAA+B,GAG/Bt/B,KAAAu/B,SAAW,IAAIC,EAAAA,QAEfx/B,KAAAg8B,iBAAoC,CACxCyD,iBAAkB,IAAI1D,GACtB2D,eAAgB,IAAIrC,GACpBsC,OAAO,EACPC,qBAAqB,GAWlB5/B,KAAA6/B,UAAY,IAAI1W,EAAAA,aAUhBnpB,KAAA8/B,SAAW,IAAI3W,EAAAA,aAUfnpB,KAAA+/B,UAAY,IAAI5W,EAAAA,aAUhBnpB,KAAAggC,SAAW,IAAI7W,EAAAA,aAUfnpB,KAAAigC,YAAc,IAAI9W,EAAAA,aA8fjBnpB,KAAAkgC,gBAAkB,SAACC,GAOvB,IAAK,IAAI3/B,EAAIoU,EAAK0qB,cAAc3+B,OAAQH,KAAM,KACpC4/B,EAAOxrB,EAAK0qB,cAAc9+B,GAChC,GAAI4/B,EAAK9F,SAASqF,MACd,OAEJ,GAAIS,EAAK9F,SAASsF,oBAAqB,KAC7B5+B,EAASm/B,EAAS,OAExB,GAAKC,EAAKC,WAAWC,cAAcC,SAASv/B,GAgBxC,WAdMw/B,EAAiBJ,EAAK9F,SAASmF,iBAAiBnF,SAAe,OACjEmG,GAAwB,EACxBD,IACAC,EAAwBD,EAAeD,SAASv/B,IAG9Co/B,EAAK9F,SAASoG,uBAAyBD,GAEnCL,EAAKO,sBAAwBP,EAAKO,qBAAqBC,cACzDhsB,EAAKisB,MAAMT,EAAKzyB,GAAIwyB,MAgErCngC,KAAA8gC,cAAgB,WACnB,IAAK,IAAItgC,EAAIoU,EAAK0qB,cAAc3+B,OAAQH,KACpCoU,EAAKmsB,WAAWnsB,EAAK0qB,cAAc9+B,GAAGmN,KAjlB1C3N,KAAKghC,UAAsBhhC,KAAa,gBAoB5C++B,EAAA7+B,UAAAs9B,OAAA,SAAOyD,EAAmC3G,EACtC4G,OACId,EAIJ,OAHAA,EAAOpgC,KAAKmhC,eAAeF,EAAWC,KAOtCd,EAAKzyB,IAAM3N,KAAKq/B,gBAAgB5uB,WAChC6pB,EAAW96B,OAAOa,OAAO,GAAIL,KAAKg8B,iBAAkB1B,GACpD8F,EAAK9F,SAAWA,EAChBt6B,KAAKs/B,cAAc98B,KAAK49B,GACjBA,EAAKzyB,IAPD,MA4BfoxB,EAAA7+B,UAAAkhC,KAAA,SAAKC,EAA2C/G,OACxC8F,EACAzyB,EACJ,GAAwB,iBAAb0zB,GAGP,GAFA1zB,EAAK0zB,IACLjB,EAAOpgC,KAAKshC,eAAeD,IAGvB,OADAzC,QAAQC,KAAK,6CAA+CwC,GACrD,SAER,CASH,GARAvC,GAAeb,GACX,4IAEAa,IACJnxB,GAAM3N,KAAKq/B,gBAAgB5uB,aAC3B2vB,EAAOpgC,KAAKmhC,eAAeE,IAIvB,OAGJjB,EAAKzyB,GAAKA,EAOd,OAJA2sB,EAAW96B,OAAOa,OAAO,GAAIL,KAAKg8B,iBAAkBoE,EAAK9F,SAAUA,GACnE8F,EAAK9F,SAAWA,EAEhBt6B,KAAKuhC,MAAMnB,GACJzyB,GASXoxB,EAAA7+B,UAAAshC,KAAA,SAAK7zB,GACD3N,KAAK6gC,MAAMlzB,IASfoxB,EAAA7+B,UAAAuhC,QAAA,WAEI,IAAK,IAAIjhC,EAAIR,KAAKs/B,cAAc3+B,OAAQH,KACpCR,KAAKwhC,KAAKxhC,KAAKs/B,cAAc9+B,GAAGmN,KAUxCoxB,EAAA7+B,UAAA6gC,WAAA,SAAWpzB,OACD+zB,EAAc1hC,KAAKshC,eAAe3zB,GACxC,GAAK+zB,GAAgBA,EAAYpH,SAAjC,KAKMqC,EAAiB+E,EAAYrB,WAAWC,cAAcvD,cACtD4E,EAAqBhF,EAAezrB,wBAC1CwwB,EAAYpH,SAASmF,iBAAiB/C,SAClCC,EACA,CACI1rB,MAAO0wB,EAAmB1wB,MAC1B9D,OAAQw0B,EAAmBx0B,QAE/BnN,KAAKghC,WACL,QAbApC,QAAQn8B,MAAM,uDAAyDkL,IAgBvEoxB,EAAA7+B,UAAAqhC,MAAR,SAAcnB,OACJwB,EAAwC,CAAEj0B,GAAIyyB,EAAKzyB,GAAIk0B,aAAczB,EAAKyB,aAAczf,QAAQ,GAEtG,GADApiB,KAAK6/B,UAAUtd,KAAKqf,GAChBA,EAAUxf,OACNge,EAAKyB,eACL7hC,KAAKi/B,QAAQ6C,WAAW1B,EAAKyB,aAAaE,UAC1C3B,EAAKyB,aAAaG,eAH1B,CAYA,IAAK5B,EAAKO,sBAAyBP,EAAKO,uBAAyBP,EAAKO,qBAAqBC,aAAe,KAChGqB,EAAc7B,EAAKC,WAAWC,cAAcpvB,wBAClDkvB,EAAK8B,YAAc,CAAEjxB,MAAOgxB,EAAYhxB,MAAO9D,OAAQ80B,EAAY90B,QACnEizB,EAAK+B,KAAOniC,KAAKoiC,iBAAiBhC,EAAKC,WAAWC,eAElDtgC,KAAKqiC,qBAAqBjC,GACtBA,EAAKyB,cACLzB,EAAKyB,aAAaS,kBAAkBC,gBAExCviC,KAAKwiC,WAAWpC,IAC0B,IAAtCpgC,KAAKs/B,cAAchuB,QAAQ8uB,IAC3BpgC,KAAKs/B,cAAc98B,KAAK49B,GAG5BA,EAAK9F,SAASmF,iBAAiB/C,SAC3B0D,EAAKC,WAAWC,cAAcvD,cAC9B,CAAE9rB,MAAOmvB,EAAK8B,YAAYjxB,MAAO9D,OAAQizB,EAAK8B,YAAY/0B,QAC1DkR,UACA,GACJ+hB,EAAK9F,SAASoF,eAAepC,WAAWt9B,KAAKghC,UAAWhhC,KAAMogC,EAAKzyB,IACnEyyB,EAAK9F,SAASoF,eAAelC,SAGjCx9B,KAAKyiC,wBAAwBrC,GAC7BpgC,KAAK0iC,iBAAiBtC,EAAKzyB,IAEvByyB,EAAK9F,SAASqF,OACd3/B,KAAK2iC,kBAAkBvC,GAGvBA,EAAK9F,SAASmF,iBAAiBnF,SAASiC,cACxCv8B,KAAK4iC,kBAAkBxC,IAGvBA,EAAKC,WAAWC,cAAcvD,cAAc15B,MAAMw/B,WAAa,GAC/D7iC,KAAK8/B,SAASvd,KAAK,CAAE5U,GAAIyyB,EAAKzyB,GAAIk0B,aAAczB,EAAKyB,kBAIrD9C,EAAA7+B,UAAA2gC,MAAR,SAAclzB,EAAY2E,OAChB8tB,EAAoBpgC,KAAKshC,eAAe3zB,GAE9C,GAAKyyB,EAAL,KAKMwB,EAAY,CAAEj0B,GAAEA,EAAEk0B,aAAczB,EAAKyB,aAAczf,QAAQ,EAAO9P,MAAKA,GAE7E,GADAtS,KAAK+/B,UAAUxd,KAAKqf,IAChBA,EAAUxf,OAAd,CAKAge,EAAK9F,SAASoF,eAAejC,SAC7Bz9B,KAAK8iC,2BAA2B1C,GAChCpgC,KAAK+iC,oBAAoB3C,EAAKzyB,QAExBq1B,EAAqB5C,EAAKC,WAAWC,cAC3C,GAAIF,EAAK9F,SAASqF,MAAO,KACfjjB,EAASsmB,EAAMC,WAAqB,WAC1CjjC,KAAKkjC,qBAAqBxmB,EAAQ0jB,EAAK9F,SAASmF,iBAAiBnF,SAASkC,gBAC1E9f,EAAOogB,UAAUjvB,OAAO,+BACxB6O,EAAOogB,UAAUpvB,IAAI,wBAGrB0yB,EAAK9F,SAASmF,iBAAiBnF,SAASkC,eACxCx8B,KAAKmjC,mBAAmB/C,GAExBpgC,KAAKojC,YAAYhD,SA1BjBxB,QAAQC,KAAK,6CAA+ClxB,IA8B5DoxB,EAAA7+B,UAAAihC,eAAR,SAAuBF,EAAgBC,OAC7Bd,EAAoB,CAAEiD,OAAQrjC,KAAKo/B,OACzC,GAAI6B,aAAqBqC,EAAAA,WACrBlD,EAAKC,WAAU,MACZ,KACCkD,OAAc,EACZC,EAAkBtC,EAAYA,EAAUuC,yBAA2BzjC,KAAKg/B,iBAC9E,IACIuE,EAAiBC,EAAgBE,wBAAwBzC,GAC3D,MAAOx+B,GAEL,OADAm8B,QAAQn8B,MAAMA,GACP,SAGLkhC,EAAWzC,EAAYA,EAAUyC,SAAW3jC,KAAKk/B,UACjD0E,EAAqCL,EAAepjC,OAAOwjC,GACjE3jC,KAAKi/B,QAAQ4E,WAAWD,EAAiB7B,cAGnC+B,EAAUF,EAAiBG,SAASzD,cAC1CF,EAAKC,WAAU,CAAiBC,cAAewD,GAC/C1D,EAAKyB,aAAe+B,EAGxB,OAAOxD,GAGHrB,EAAA7+B,UAAAkiC,iBAAR,SAAyB0B,GACrB,IAAKA,EAAQ/G,cACT,OAAO,SAGLoF,EAAOniC,KAAKghC,UAAU1iB,cAAc,OAE1C,OADAwlB,EAAQ/G,cAAciH,aAAa7B,EAAM2B,GAClC3B,GAGHpD,EAAA7+B,UAAAmiC,qBAAR,SAA6BjC,OACnB6D,EAAiBjkC,KAAKkkC,oBACtBvH,EAAiB38B,KAAKmkC,kBAAkBF,EAAgB7D,EAAK9F,SAASqF,OAC5E3/B,KAAKokC,kBAAkBhE,GAAMthB,YAAYmlB,OACnCI,EAAmBjE,EAAKC,WAAWC,cAAc7E,UACvDkB,EAAe7d,YAAYshB,EAAKC,WAAWC,eAEvC+D,IACAjE,EAAKC,WAAWC,cAAc7E,UAAY4I,IAI1CtF,EAAA7+B,UAAAgkC,kBAAR,eACUI,EAAuBtkC,KAAKghC,UAAU1iB,cAAc,OAE1D,OADAgmB,EAAQxH,UAAUpvB,IAAI,wBACf42B,GAGHvF,EAAA7+B,UAAAikC,kBAAR,SAA0BF,EAA6BtE,OAC7C4E,EAAuBvkC,KAAKghC,UAAU1iB,cAAc,OAkB1D,OAjBIqhB,GACA4E,EAAQzH,UAAUpvB,IAAI,+BACtB62B,EAAQC,iBAAiB,QAAS,SAACrE,GAC/BA,EAAGsE,qBAGPF,EAAQzH,UAAUpvB,IAAI,wBAG1B62B,EAAQC,iBAAiB,SAAU,SAACrE,GAChCA,EAAGsE,oBAIPF,EAAQlhC,MAAMw/B,WAAa,SAE3BoB,EAAenlB,YAAYylB,GACpBA,GAGHxF,EAAA7+B,UAAAkkC,kBAAR,SAA0BhE,GACtB,OAAIA,EAAK9F,SAASoK,OACPtE,EAAK9F,SAASoK,OAAOpE,eAE3BtgC,KAAK2kC,kBACN3kC,KAAK2kC,gBAAkB3kC,KAAKghC,UAAU1iB,cAAc,OACpDte,KAAK2kC,gBAAgB7H,UAAUpvB,IAAI,eACnC1N,KAAKghC,UAAUniB,KAAKC,YAAY9e,KAAK2kC,kBAGlC3kC,KAAK2kC,kBAGR5F,EAAA7+B,UAAAsiC,WAAR,SAAmBpC,GACXA,EAAKyB,eAGLzB,EAAK8B,YAAc9B,EAAKC,WAAWC,cAAcpvB,yBAItB,IAA3BkvB,EAAK8B,YAAYjxB,QACjBmvB,EAAKC,WAAWC,cAAcvD,cAAc15B,MAAM4N,MAAQmvB,EAAK8B,YAAYjxB,MAAQ,OAInF8tB,EAAA7+B,UAAAyiC,kBAAR,SAA0BvC,GAA1B,IAAAxrB,EAAA5U,KACUikC,EAAiB7D,EAAKC,WAAWC,cAAcvD,cAAcA,cACnE6H,EAAAA,UAAUX,EAAgB,WAAWY,KACjC7qB,EAAAA,OAAO,SAACmmB,GAAsB,MAAW,WAAXA,EAAGl/B,KAA+B,QAAXk/B,EAAGl/B,MACxD6jC,EAAAA,UAAU9kC,KAAKu/B,WACjBwF,UAAU,WAAM,OAAAnwB,EAAK4sB,KAAKpB,EAAKzyB,MACjCs2B,EAAenH,UAAUjvB,OAAO,wBAChC7N,KAAKkjC,qBAAqBe,EAAgB7D,EAAK9F,SAASmF,iBAAiBnF,SAASiC,eAClF0H,EAAenH,UAAUpvB,IAAI,gCAGzBqxB,EAAA7+B,UAAAkjC,YAAR,SAAoBhD,GAChBpgC,KAAKglC,QAAQ5E,GACbpgC,KAAKggC,SAASzd,KAAK,CAAE5U,GAAIyyB,EAAKzyB,GAAIk0B,aAAczB,EAAKyB,gBAGjD9C,EAAA7+B,UAAA8kC,QAAR,SAAgB5E,OACN4C,EAAqB5C,EAAKC,WAAWC,cACrCoE,EAAS1kC,KAAKokC,kBAAkBhE,GACtC,GAAKsE,EAAOnE,SAASyC,GAArB,CAKA0B,EAAO1lB,YAAYgkB,EAAMC,WAAWA,YAChC7C,EAAKyB,eACL7hC,KAAKi/B,QAAQ6C,WAAW1B,EAAKyB,aAAaE,UAC1C3B,EAAKyB,aAAaG,WAGlB5B,EAAK+B,OACL/B,EAAK+B,KAAKpF,cAAciH,aAAa5D,EAAKC,WAAWC,cAAeF,EAAK+B,MACzE/B,EAAK+B,KAAKpF,cAAc/d,YAAYohB,EAAK+B,WAGvCxuB,EAAQ3T,KAAKs/B,cAAchuB,QAAQ8uB,GACzCpgC,KAAKs/B,cAAcpkB,OAAOvH,EAAO,GAGC,IAA9B3T,KAAKs/B,cAAc3+B,QAAgBX,KAAK2kC,iBAAmB3kC,KAAK2kC,gBAAgB5H,gBAChF/8B,KAAK2kC,gBAAgB5H,cAAc/d,YAAYhf,KAAK2kC,iBACpD3kC,KAAK2kC,gBAAkB,WArBvB/F,QAAQC,KAAK,qBAAuBuB,EAAKzyB,GAAK,yBAyB9CoxB,EAAA7+B,UAAA0iC,kBAAR,SAA0BxC,GAA1B,IAAAxrB,EAAA5U,KACI,IAAKogC,EAAK6E,oBAAqB,KACrBC,EAAmBllC,KAAKm/B,QAAQgG,MAAM/E,EAAK9F,SAASmF,iBAAiBnF,SAASiC,eACpF6D,EAAK6E,oBAAsBC,EAAiB/kC,OAAOigC,EAAKC,WAAWC,mBAM7D8E,EAAsBhF,EAAwB,oBAAEiF,UACtDjF,EAAKkF,yBAA2BF,EAAcG,OAAOC,QAAQJ,EAAcG,OAAOC,QAAQ7kC,OAAS,GACnGy/B,EAAK6E,oBAAoBQ,OAAO,WAC5B7wB,EAAKkrB,SAASvd,KAAK,CAAE5U,GAAIyyB,EAAKzyB,GAAIk0B,aAAczB,EAAKyB,eACjDzB,EAAK6E,sBACL7E,EAAK6E,oBAAoBS,QACzBtF,EAAK6E,oBAAsB,MAG3B7E,EAAKO,sBAAwBP,EAAKO,qBAAqBC,cACvDR,EAAKO,qBAAqB+E,UAMtC,IAAItF,EAAK6E,oBAAoBrE,aAA7B,CAMA,GAAIR,EAAKO,sBAAwBP,EAAKO,qBAAqBC,aAAc,KAK/DlE,EAAW,EAAI0D,EAAKuF,0BAA0BC,cACpDxF,EAAKO,qBAAqB+E,QAC1BtF,EAAKO,qBAAuB,KAC5BP,EAAK6E,oBAAoBY,OACzBzF,EAAK6E,oBAAoBjI,YAAYN,GAGzC18B,KAAKigC,YAAY1d,KAAK,CAAE5U,GAAIyyB,EAAKzyB,GAAIm4B,gBAAiB1F,EAAK6E,oBAAqBc,cAAe,SAG/F3F,EAAKC,WAAWC,cAAcvD,cAAc15B,MAAMw/B,WAAa,GAC/DzC,EAAK6E,oBAAoBe,SAGrBjH,EAAA7+B,UAAAijC,mBAAR,SAA2B/C,GAA3B,IAAAxrB,EAAA5U,KACI,IAAKogC,EAAKO,qBAAsB,KACtBuE,EAAmBllC,KAAKm/B,QAAQgG,MAAM/E,EAAK9F,SAASmF,iBAAiBnF,SAASkC,gBACpF4D,EAAKO,qBAAuBuE,EAAiB/kC,OAAOigC,EAAKC,WAAWC,mBAM9D8E,EAAsBhF,EAAyB,qBAAEiF,UACvDjF,EAAKuF,0BAA4BP,EAAcG,OAAOC,QAAQJ,EAAcG,OAAOC,QAAQ7kC,OAAS,GAEpGy/B,EAAKO,qBAAqB8E,OAAO,WACzBrF,EAAKO,uBACLP,EAAKO,qBAAqB+E,QAC1BtF,EAAKO,qBAAuB,MAG5BP,EAAK6E,qBAAuB7E,EAAK6E,oBAAoBrE,cACrDR,EAAK6E,oBAAoBS,QAE7B9wB,EAAKwuB,YAAYhD,KAKzB,IAAIA,EAAKO,qBAAqBC,aAA9B,CAMA,GAAIR,EAAK6E,qBAAuB7E,EAAK6E,oBAAoBrE,aAAc,KAK7DlE,EAAW,EAAI0D,EAAKkF,yBAAyBM,cACnDxF,EAAK6E,oBAAoBS,QACzBtF,EAAK6E,oBAAsB,KAC3B7E,EAAKO,qBAAqBkF,OAC1BzF,EAAKO,qBAAqB3D,YAAYN,GAG1C18B,KAAKigC,YAAY1d,KAAK,CAAE5U,GAAIyyB,EAAKzyB,GAAIm4B,gBAAiB1F,EAAKO,qBAAsBoF,cAAe,UAChG3F,EAAKO,qBAAqBqF,SAItBjH,EAAA7+B,UAAAgjC,qBAAR,SAA6Be,EAA6BgC,GACtD,GAAKA,GAOL,GAHyB,KAArBA,EAAiB/zB,OACjB+zB,EAAmB,EAAkDjiC,WAEpEiiC,EAAiB3c,SAAY2c,EAAiB3c,QAAQrlB,OAA3D,KAGMA,EAASgiC,EAAiB3c,QAAc,OAC1CrlB,EAAOP,WACPugC,EAAe5gC,MAAM6iC,mBAAqBjiC,EAAOP,UAEjDO,EAAON,SACPsgC,EAAe5gC,MAAM8iC,yBAA2BliC,EAAON,cAdvDsgC,EAAe5gC,MAAM6iC,mBAAqB,OAmB3CnH,EAAA7+B,UAAAohC,eAAP,SAAsB3zB,GAClB,OAAKA,EAIQ3N,KAAKs/B,cAAchoB,KAAK,SAAAhV,GAAK,OAAAA,EAAEqL,KAAOA,IAHxC,MA4CPoxB,EAAA7+B,UAAAuiC,wBAAR,SAAgCrC,GAAhC,IAAAxrB,EAAA5U,KACQogC,EAAK9F,SAASsF,sBACVQ,EAAK9F,SAASqF,MACdiF,EAAAA,UAAUxE,EAAKC,WAAWC,cAAcvD,cAAcA,cAAe,SAChE8H,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WACpBwF,UAAU,SAACziC,GAAa,OAAAsS,EAAKisB,MAAMT,EAAKzyB,GAAIrL,KAGjDtC,KAAKs/B,cAActlB,OAAO,SAAA8C,GAAK,OAAAA,EAAEwd,SAASsF,sBAAwB9iB,EAAEwd,SAASqF,QAAOh/B,OACpFX,KAAKs/B,cAActlB,OAAO,SAAA8C,GAAK,OAAAA,EAAEwd,SAASsF,sBAAwB9iB,EAAEwd,SAASqF,OACzE7iB,EAAE6jB,sBACF7jB,EAAE6jB,qBAAqBC,eAAcjgC,QAAW,GACpDX,KAAKghC,UAAUwD,iBAAiB,QAASxkC,KAAKkgC,iBAAiB,KAKnEnB,EAAA7+B,UAAA4iC,2BAAR,SAAmC1C,GAC/B,IAA4B,IAAxBA,EAAK9F,SAASqF,MAAiB,KAC3ByG,GAAiC,EACrCpmC,KAAKs/B,cAAc7sB,QAAQ,SAAA3Q,IACE,IAArBA,EAAEw4B,SAASqF,OAAmB79B,EAAE6L,KAAOyyB,EAAKzyB,KAC5Cy4B,GAAiC,KAIrCA,GACApmC,KAAKghC,UAAUqF,oBAAoB,QAASrmC,KAAKkgC,iBAAiB,KAKtEnB,EAAA7+B,UAAAwiC,iBAAR,SAAyB/0B,OACf24B,EACFtmC,KAAKs/B,cACAtlB,OAAO,SAAAlY,GAAK,OAAAA,EAAE6+B,sBAAwB7+B,EAAE6+B,qBAAqBC,eAC7DjgC,OACLX,KAAKs/B,cAAc3+B,OAAS2lC,GAAyB,GACrDtmC,KAAKghC,UAAUuF,YAAY/B,iBAAiB,SAAUxkC,KAAK8gC,gBAI3D/B,EAAA7+B,UAAA6iC,oBAAR,SAA4Bp1B,OAClB24B,EACFtmC,KAAKs/B,cACAtlB,OAAO,SAAAlY,GAAK,OAAAA,EAAE6+B,sBAAwB7+B,EAAE6+B,qBAAqBC,eAC7DjgC,OACLX,KAAKs/B,cAAc3+B,OAAS2lC,GAAyB,GACrDtmC,KAAKghC,UAAUuF,YAAYF,oBAAoB,SAAUrmC,KAAK8gC,gBAc/D/B,EAAA7+B,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,gCAlqBrBz0B,EAAAA,WAAUhE,KAAA,CAAC,CAAEiE,WAAY,oDAxBtBy0B,EAAAA,gCAFAC,EAAAA,sBAQAC,EAAAA,gBAMKC,EAAAA,oDAkFA10B,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBApFZC,EAAAA,wRAcJ,kBC/BI,SAAAC,EAAY1M,UACRxgB,EAAAlZ,KAAAZ,KAAMs6B,IAASt6B,KASvB,OAX+CgY,EAAAA,EAAAA,GAM3CgvB,EAAA9mC,UAAAw8B,SAAA,SAASC,EAA6BC,EAAave,EAAqBwe,GACpEF,EAAeG,UAAUpvB,IAAI,kCAC7BivB,EAAeI,cAAcD,UAAUpvB,IAAI,wCAC3C1N,KAAKg9B,YAAYL,EAAgB38B,KAAKs6B,WAE9C0M,GAX+CjL,kBCwB7C,SAAAkL,EAAY3M,GAfJt6B,KAAAg8B,iBAAqC,CAE3Ch7B,OAAQ,KACRi7B,oBAAqBC,GAAoBpC,MACzCqC,kBAAmBC,GAAkBnC,OACrCoC,qBAAsBH,GAAoBtC,KAC1C0C,mBAAoBF,GAAkBnC,OACtCsC,cAAelzB,GACfmzB,eAAgBryB,GAChBsyB,QAAS,CAAExrB,MAAO,EAAG9D,OAAQ,IAO7BnN,KAAKs6B,SAAW96B,OAAOa,OAAO,GAAIL,KAAKg8B,iBAAkB1B,GA+D7D,OA3DE2M,EAAA/mC,UAAAw8B,SAAA,SAASC,EAA6BC,EAAYve,EAAqBwe,OAC/DtC,EAAaH,GAAKC,cAAcr6B,KAAKs6B,UACrCqH,EAAqBhF,EAAezrB,wBAC1ClR,KAAKknC,SAASvK,EAAgBpC,EAAYoH,IAQ5CsF,EAAA/mC,UAAAi9B,MAAA,WACE,OAAO/C,GAAKuB,cAAc37B,OAUlBinC,EAAA/mC,UAAAgnC,SAAV,SAAmBpD,EAAsBvJ,EAAwB0H,OACzDkF,EACD5M,EAAWG,MAAQH,EAAWtpB,MAAQjR,KAAKs6B,SAAS+B,qBADnD8K,EAED5M,EAAWC,OAASD,EAAWptB,OAASnN,KAAKs6B,SAASgC,mBAErD8K,EAA0BtD,EAAQ/G,cAAc7rB,wBAQtD,OALA4yB,EAAQzgC,MAAMq3B,MAAQ,GACtBoJ,EAAQzgC,MAAMo3B,KAAO,GACrBqJ,EAAQzgC,MAAMm3B,OAAS,GACvBsJ,EAAQzgC,MAAMs3B,IAAM,GAEZ36B,KAAKs6B,SAAS2B,qBACpB,KAAKC,GAAoBtC,KACvBkK,EAAQzgC,MAAMq3B,MAAWjf,KAAK4rB,MAAMD,EAAY1M,MAAQyM,GAAa,KACrE,MACF,KAAKjL,GAAoBrC,OACvBiK,EAAQzgC,MAAMo3B,KAAUhf,KAAK4rB,MAAMF,EAAeC,EAAY3M,KAAOwH,EAAYhxB,MAAQ,GAAE,KAC3F,MACF,KAAKirB,GAAoBpC,MACvBgK,EAAQzgC,MAAMo3B,KAAUhf,KAAK4rB,MAAMF,EAAeC,EAAY3M,MAAK,KAIvE,OAAQz6B,KAAKs6B,SAAS6B,mBACpB,KAAKC,GAAkBrC,IACrB+J,EAAQzgC,MAAMm3B,OAAY/e,KAAK4rB,MAAMD,EAAY5M,OAAS2M,GAAa,KACvE,MACF,KAAK/K,GAAkBpC,OACrB8J,EAAQzgC,MAAMs3B,IAASlf,KAAK4rB,MAAMF,EAAeC,EAAYzM,IAAMsH,EAAY90B,OAAS,GAAE,KAC1F,MACF,KAAKivB,GAAkBnC,OACrB6J,EAAQzgC,MAAMs3B,IAASlf,KAAK4rB,MAAMF,EAAeC,EAAYzM,KAAI,OAIzEsM,oBC5FA,SAAAK,mDAkFA,OAlFsDtvB,EAAAA,EAAAA,GAKlDsvB,EAAApnC,UAAAw8B,SAAA,SAASC,EAA6BC,EAAYve,EAAqBwe,OAC7DtC,EAAaH,GAAKC,cAAcr6B,KAAKs6B,UACrCqH,EAAqBhF,EAAezrB,wBAC1C,GAAI2rB,EAAa,KACP0K,EAA6B,GACnCA,EAAahN,WAAaA,EAC1BgN,EAAa5F,mBAAqBA,EAClC3hC,KAAKwnC,iBAAmBxnC,KAAKwnC,kBAAoBhoC,OAAOa,OAAO,GAAIL,KAAKs6B,UACxEt6B,KAAKs6B,SAAW96B,OAAOa,OAAO,GAAIL,KAAKwnC,kBACvCD,EAAaE,aAAerN,GAAKU,gBAAgBzc,GACjDre,KAAK0nC,kBAAkBH,GAClBA,EAAaI,eAAkBJ,EAAaK,aAC7C5nC,KAAK6nC,cAAclL,EAAgB4K,GAG3CvnC,KAAKknC,SAASvK,EAAgBpC,EAAYoH,IAQpC2F,EAAApnC,UAAAwnC,kBAAV,SAA4BH,GACxBA,EAAa9M,KAAOz6B,KAAK8nC,cACrBP,EAAahN,WACbgN,EAAa5F,mBACb3hC,KAAKs6B,SAAS+B,qBACdr8B,KAAKs6B,SAAS2B,qBAClBsL,EAAa7M,MAAQ6M,EAAa9M,KAAO8M,EAAa5F,mBAAmB1wB,MACzEs2B,EAAaI,cACT,EAAIJ,EAAa9M,MAAQ8M,EAAa7M,MAAQ6M,EAAaE,aAAax2B,MAE5Es2B,EAAa5M,IAAM36B,KAAK+nC,aACpBR,EAAahN,WACbgN,EAAa5F,mBACb3hC,KAAKs6B,SAASgC,mBACdt8B,KAAKs6B,SAAS6B,mBAClBoL,EAAa/M,OAAS+M,EAAa5M,IAAM4M,EAAa5F,mBAAmBx0B,OACzEo6B,EAAaK,YACT,EAAIL,EAAa5M,KAAO4M,EAAa/M,OAAS+M,EAAaE,aAAat6B,QAWtEm6B,EAAApnC,UAAA4nC,cAAV,SACIvN,EAAwB0H,EAAyBkF,EAAiC3/B,GAClF,OAAO+yB,EAAWG,MAAQH,EAAWtpB,MAAQk2B,EAAalF,EAAYhxB,MAAQzJ,GAWxE8/B,EAAApnC,UAAA6nC,aAAV,SACIxN,EAAwB0H,EAAyBkF,EAA+B3/B,GAChF,OAAO+yB,EAAWC,OAASD,EAAWptB,OAASg6B,EAAalF,EAAY90B,OAAS3F,GAWzF8/B,GAlFsDL,mBCItD,SAAAe,mDAiJA,OAjJ0ChwB,EAAAA,EAAAA,GAG5BgwB,EAAA9nC,UAAA2nC,cAAV,SAAwB/D,EAAsByD,OACpCU,EAA4B,GAClC,IAAKV,EAAaI,cACd,GAAI3nC,KAAKkoC,kBAAkBX,GACvBvnC,KAAKmoC,qBACF,KACGC,EAAiBpoC,KAAKooC,eAAeb,GAC3CU,EAAgBzlC,KAAK,cAAc4lC,EAAc,OAIzD,IAAKb,EAAaK,YACd,GAAI5nC,KAAKqoC,gBAAgBd,GACrBvnC,KAAKsoC,mBACF,KACGC,EAAevoC,KAAKuoC,aAAahB,GACvCU,EAAgBzlC,KAAK,cAAc+lC,EAAY,OAIvDzE,EAAQzgC,MAAMmB,UAAYyjC,EAAgBrT,KAAK,KAAKlV,QAQhDsoB,EAAA9nC,UAAAgoC,kBAAR,SAA0BX,OAQhBiB,GAAsB,GAAMxoC,KAAKs6B,SAAS+B,qBAAuB,GACjEoM,GAAqB,GAAMzoC,KAAKs6B,SAAS2B,oBAAsB,GAE/DyM,EAAa1oC,KAAK8nC,cACpBP,EAAahN,WAAYgN,EAAa5F,mBAAoB6G,EAAmBC,GAC3EE,EAAcD,EAAanB,EAAa5F,mBAAmB1wB,MACjE,OAAO,EAAIy3B,GAAcC,EAAcpB,EAAaE,aAAax2B,OAQ7D+2B,EAAA9nC,UAAAmoC,gBAAR,SAAwBd,OACdiB,GAAsB,GAAMxoC,KAAKs6B,SAASgC,mBAAqB,GAC/DmM,GAAqB,GAAMzoC,KAAKs6B,SAAS6B,kBAAoB,GAE7DyM,EAAY5oC,KAAK+nC,aACnBR,EAAahN,WAAYgN,EAAa5F,mBAAoB6G,EAAmBC,GAC3EI,EAAeD,EAAYrB,EAAa5F,mBAAmBx0B,OACjE,OAAO,EAAIy7B,GAAaC,EAAetB,EAAaE,aAAat6B,QAM7D66B,EAAA9nC,UAAAioC,eAAR,WACI,OAAQnoC,KAAKs6B,SAAS2B,qBAClB,KAAKC,GAAoBtC,KACrB55B,KAAKs6B,SAAS2B,oBAAsBC,GAAoBpC,MACxD,MACJ,KAAKoC,GAAoBpC,MACrB95B,KAAKs6B,SAAS2B,oBAAsBC,GAAoBtC,KAGhE,OAAQ55B,KAAKs6B,SAAS+B,sBAClB,KAAKH,GAAoBtC,KACrB55B,KAAKs6B,SAAS+B,qBAAuBH,GAAoBpC,MACzD,MACJ,KAAKoC,GAAoBpC,MACrB95B,KAAKs6B,SAAS+B,qBAAuBH,GAAoBtC,OAQ7DoO,EAAA9nC,UAAAooC,aAAR,WACI,OAAQtoC,KAAKs6B,SAAS6B,mBAClB,KAAKC,GAAkBrC,IACnB/5B,KAAKs6B,SAAS6B,kBAAoBC,GAAkBnC,OACpD,MACJ,KAAKmC,GAAkBnC,OACnBj6B,KAAKs6B,SAAS6B,kBAAoBC,GAAkBrC,IAG5D,OAAQ/5B,KAAKs6B,SAASgC,oBAClB,KAAKF,GAAkBrC,IACnB/5B,KAAKs6B,SAASgC,mBAAqBF,GAAkBnC,OACrD,MACJ,KAAKmC,GAAkBnC,OACnBj6B,KAAKs6B,SAASgC,mBAAqBF,GAAkBrC,MAUzDiO,EAAA9nC,UAAAkoC,eAAR,SAAuBb,OACbuB,EAAavB,EAAa9M,KAC1BsO,EAAcxB,EAAa7M,MAAQ6M,EAAaE,aAAa/M,MAMnE,OAAIoO,EAAa,EACNrtB,KAAKutB,IAAIF,GACTC,EAAc,GACZttB,KAAKwtB,IAAIF,EAAaD,GAExB,GASPd,EAAA9nC,UAAAqoC,aAAR,SAAqBhB,OACX2B,EAAY3B,EAAa5M,IACzBwO,EAAe5B,EAAa/M,OAAS+M,EAAaE,aAAajN,OACrE,OAAI0O,EAAY,EACLztB,KAAKutB,IAAIE,GACTC,EAAe,GACb1tB,KAAKwtB,IAAIE,EAAcD,GAEzB,GAGnBlB,GAjJ0CV,mBCA1C,SAAA8B,mDAgDA,OAhD6CpxB,EAAAA,EAAAA,GAE/BoxB,EAAAlpC,UAAA2nC,cAAV,SAAwB/D,EAAsByD,GAC1CzD,EAAQhH,UAAUpvB,IAAI,qCAChBu6B,EAA4B,GAClC,IAAKV,EAAaI,cAAe,KACvB0B,EAAe5tB,KAAK4O,IAAI,EAAGkd,EAAa5F,mBAAmB1wB,MAAQjR,KAAKs6B,SAASmC,QAAQxrB,OACzF63B,EAAartB,KAAK4O,IAAI,EAAG,EAAIkd,EAAa9M,MAC1CsO,EAActtB,KAAK4O,IAAI,EAAGkd,EAAa7M,MAAQ6M,EAAaE,aAAax2B,OACzEq4B,EAAY7tB,KAAKwtB,IAAII,EAAcP,EAAaC,GAKtD,GAJAjF,EAAQzgC,MAAM4N,MAAWs2B,EAAa5F,mBAAmB1wB,MAAQq4B,EAAS,KAItEtpC,KAAKs6B,SAAS2B,sBAAwBC,GAAoBrC,QAKpD0P,EAAcT,EAAaQ,GAAaR,EAAaC,IACzC,GACdd,EAAgBzlC,KAAK,cAAc+mC,EAAW,OAK1D,IAAKhC,EAAaK,YAAa,CACrByB,EAAe5tB,KAAK4O,IAAI,EAAGkd,EAAa5F,mBAAmBx0B,OAASnN,KAAKs6B,SAASmC,QAAQtvB,YAatFo8B,EAZJL,EAAYztB,KAAK4O,IAAI,EAAG,EAAIkd,EAAa5M,KACzCwO,EAAe1tB,KAAK4O,IAAI,EAAGkd,EAAa/M,OAAS+M,EAAaE,aAAat6B,QAC3Em8B,EAAY7tB,KAAKwtB,IAAII,EAAcH,EAAYC,GAKrD,GAJArF,EAAQzgC,MAAM8J,OAAYo6B,EAAa5F,mBAAmBx0B,OAASm8B,EAAS,KAIxEtpC,KAAKs6B,SAAS6B,oBAAsBC,GAAkBpC,QAKhDuP,EAAcL,EAAYI,GAAaJ,EAAYC,IACvC,GACdlB,EAAgBzlC,KAAK,cAAc+mC,EAAW,OAI1DzF,EAAQzgC,MAAMmB,UAAYyjC,EAAgBrT,KAAK,KAAKlV,QAE5D0pB,GAhD6C9B,mBCQzC,SAAAkC,EAAYpM,GAAZ,IAAAxoB,EACIkF,EAAAlZ,KAAAZ,KAAMo9B,IAAgBp9B,YARlB4U,EAAA60B,cAAe,EAsDf70B,EAAA80B,SAAW,WACf90B,EAAK+0B,gBAAgB7I,iBA9CrBlsB,EAAKg1B,iBAAmBxM,IAgDhC,OA1D4CplB,EAAAA,EAAAA,GAcjCwxB,EAAAtpC,UAAAo9B,WAAP,SAAkBjf,EAAoBkf,EAAmC5vB,GACjE3N,KAAKypC,eAGTzpC,KAAK2pC,gBAAkBpM,EACvBv9B,KAAK6pC,IAAMl8B,EACX3N,KAAKghC,UAAY3iB,EACjBre,KAAKo/B,MAAQ7B,EAAe+D,eAAe3zB,GAAI01B,OAC/CrjC,KAAKypC,cAAe,IAIjBD,EAAAtpC,UAAAs9B,OAAP,WAAA,IAAA5oB,EAAA5U,KACQA,KAAKo/B,MACLp/B,KAAKo/B,MAAM0K,kBAAkB,WACzBl1B,EAAKm1B,2BAGT/pC,KAAK+pC,0BAKNP,EAAAtpC,UAAAu9B,OAAP,WACQz9B,KAAK4pC,iBACL5pC,KAAK4pC,iBAAiBvD,oBAAoB,SAAUrmC,KAAK0pC,UAAU,GAEnE1pC,KAAKghC,UAAUqF,oBAAoB,SAAUrmC,KAAK0pC,UAAU,GAGhE1pC,KAAKypC,cAAe,GAGhBD,EAAAtpC,UAAA6pC,uBAAR,WACQ/pC,KAAK4pC,iBACL5pC,KAAK4pC,iBAAiBpF,iBAAiB,SAAUxkC,KAAK0pC,UAAU,GAEhE1pC,KAAKghC,UAAUwD,iBAAiB,SAAUxkC,KAAK0pC,UAAU,IAOrEF,GA1D4C9L,mBCMxC,SAAAsM,EAAY5M,GAAZ,IAAAxoB,EACIkF,EAAAlZ,KAAAZ,KAAMo9B,IAAgBp9B,YAPlB4U,EAAA60B,cAAe,EAkCf70B,EAAA80B,SAAW,SAACvJ,GAChBA,EAAG8J,iBACEr1B,EAAKs1B,gBAAkBt1B,EAAKs1B,iBAAmB/J,EAAGn/B,SACnD4T,EAAKs1B,eAAiB/J,EAAS,OAC/BvrB,EAAKu1B,kBAAoBv1B,EAAKs1B,eAAezO,UAC7C7mB,EAAKw1B,mBAAqBx1B,EAAKs1B,eAAe5O,YAGlD1mB,EAAKs1B,eAAezO,UAAY7mB,EAAKu1B,kBACrCv1B,EAAKs1B,eAAe5O,WAAa1mB,EAAKw1B,sBAE9C,OA9CyCpyB,EAAAA,EAAAA,GAY9BgyB,EAAA9pC,UAAAo9B,WAAP,SAAkBjf,EAAoBkf,EAAmC5vB,GACjE3N,KAAKypC,eAITzpC,KAAKghC,UAAY3iB,EACjBre,KAAKypC,cAAe,IAIjBO,EAAA9pC,UAAAs9B,OAAP,WACIx9B,KAAKghC,UAAUwD,iBAAiB,SAAUxkC,KAAK0pC,UAAU,IAItDM,EAAA9pC,UAAAu9B,OAAP,WACIz9B,KAAKghC,UAAUqF,oBAAoB,SAAUrmC,KAAK0pC,UAAU,GAC5D1pC,KAAKkqC,eAAiB,KACtBlqC,KAAKmqC,kBAAoB,EACzBnqC,KAAKoqC,mBAAqB,EAC1BpqC,KAAKypC,cAAe,GAc5BO,GA9CyCtM,mBCarC,SAAA2M,EAAYjN,GAAZ,IAAAxoB,EACIkF,EAAAlZ,KAAAZ,KAAMo9B,IAAgBp9B,YALlB4U,EAAA60B,cAAe,EA+Df70B,EAAA80B,SAAW,SAACvJ,GACXvrB,EAAKs1B,iBAIVt1B,EAAK01B,qBAAuB11B,EAAKs1B,eAAezO,UAChD7mB,EAAK21B,sBAAwB31B,EAAKs1B,eAAe5O,YAE7C7f,KAAKutB,IAAIp0B,EAAK01B,oBAAsB11B,EAAK41B,kBAAoB51B,EAAK61B,YAClEhvB,KAAKutB,IAAIp0B,EAAK21B,qBAAuB31B,EAAK81B,mBAAqB91B,EAAK61B,cACpE71B,EAAKosB,UAAUqF,oBAAoB,SAAUzxB,EAAK80B,UAAU,GAC5D90B,EAAK+0B,gBAAgBnI,KAAK5sB,EAAKi1B,QApEnCj1B,EAAKg1B,iBAAmBxM,EACxBxoB,EAAK61B,WAAa,GAClB71B,EAAK01B,oBAAsB,EAC3B11B,EAAK21B,qBAAuB,IAoEpC,OAtFyCvyB,EAAAA,EAAAA,GAsB9BqyB,EAAAnqC,UAAAo9B,WAAP,SAAkBjf,EAAoBkf,EAAmC5vB,GACjE3N,KAAKypC,eAGTzpC,KAAK2pC,gBAAkBpM,EACvBv9B,KAAK6pC,IAAMl8B,EACX3N,KAAKghC,UAAY3iB,EACjBre,KAAKypC,cAAe,IAIjBY,EAAAnqC,UAAAs9B,OAAP,WACQx9B,KAAK4pC,kBACL5pC,KAAK4pC,iBAAiBpF,iBAAiB,SAAUxkC,KAAK0pC,UACtD1pC,KAAKkqC,eAAiBlqC,KAAK4pC,mBAE3B5pC,KAAKghC,UAAUwD,iBAAiB,SAAUxkC,KAAK0pC,UAC3CrrB,SAAS0c,gBAAgB4P,aAAetsB,SAAS0c,gBAAgBE,aACjEj7B,KAAKkqC,eAAiB7rB,SAAwB,gBACvCA,SAASQ,KAAK8rB,aAAetsB,SAASQ,KAAKoc,eAClDj7B,KAAKkqC,eAAiB7rB,SAAa,OAItCre,KAAKkqC,iBAIVlqC,KAAKsqC,oBAAsB,EAC3BtqC,KAAKuqC,qBAAuB,EAC5BvqC,KAAKwqC,iBAAmBxqC,KAAKkqC,eAAezO,UAC5Cz7B,KAAK0qC,kBAAoB1qC,KAAKkqC,eAAe5O,aAI1C+O,EAAAnqC,UAAAu9B,OAAP,WAEQz9B,KAAK4pC,iBACL5pC,KAAK4pC,iBAAiBvD,oBAAoB,SAAUrmC,KAAK0pC,UAEzD1pC,KAAKghC,UAAUqF,oBAAoB,SAAUrmC,KAAK0pC,UAEtD1pC,KAAKkqC,eAAiB,KACtBlqC,KAAKsqC,oBAAsB,EAC3BtqC,KAAKuqC,qBAAuB,EAC5BvqC,KAAKwqC,iBAAmB,EACxBxqC,KAAK0qC,kBAAoB,EACzB1qC,KAAKypC,cAAe,GAiB5BY,GAtFyC3M,ICFzCkN,GAAA,WAAA,SAAAA,IAEc5qC,KAAA6qC,YAAa,EACb7qC,KAAA8qC,qBAA4B,GAC5B9qC,KAAA+qC,eAA8B,IAAIz6B,IA0BrCtQ,KAAAgrC,cAAgB,IAAI7hB,EAAAA,aAsI/B,OA3JI3pB,OAAAgC,eAAWopC,EAAA1qC,UAAA,UAAO,KAAlB,WACI,OAAO,mCAMXV,OAAAgC,eAAWopC,EAAA1qC,UAAA,UAAO,KAAlB,WACI,OAAO,mCAMXV,OAAAgC,eAAWopC,EAAA1qC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK6qC,4CAWTD,EAAA1qC,UAAAwN,IAAP,SAAWyO,EAAgB2K,GACnB9mB,KAAK6qC,aACL7qC,KAAKirC,YAAYjrC,KAAK+qC,eAAgB5uB,EAAa2K,GACnD9mB,KAAK8qC,qBAAqBtoC,KAAK2Z,KAOvCyuB,EAAA1qC,UAAAsgB,kBAAA,SAAkB7S,GAAiB,MAAO,IAK1Ci9B,EAAA1qC,UAAAgrC,KAAA,aAKAN,EAAA1qC,UAAAirC,KAAA,aAKAP,EAAA1qC,UAAAqgB,qBAAA,SAAqB6qB,GAArB,IAAAx2B,EAAA5U,KACUwQ,EAAc,GAKpB,OAJAxQ,KAAK+qC,eAAet4B,QAAQ,SAAClE,EAAUtN,OAC7BkB,EAAQipC,EAAex2B,EAAK+O,mBAAmB1iB,EAAKmqC,GAAgB78B,EAAMpM,MAChFqO,EAAOhO,KAAI,CAAGmL,GAAI1M,EAAKob,SAAUla,EAAO+P,KAAM3D,EAAM2D,SAEjD1B,GAMJo6B,EAAA1qC,UAAA2jB,SAAP,SAAgBlW,GACZ,OAAO3N,KAAK+qC,eAAej9B,IAAIH,IAM5Bi9B,EAAA1qC,UAAAyjB,mBAAP,SAA0BhW,EAASy9B,OACzB78B,EAAQvO,KAAK+qC,eAAej9B,IAAIH,GACtC,OAAKY,EAGD68B,EACOprC,KAAKqrC,YAAY98B,GAErBA,EAAMpM,MALF,MAWfyoC,EAAA1qC,UAAAorC,OAAA,SAAO92B,EAAa7G,KAKpBi9B,EAAA1qC,UAAAqrC,MAAA,SAAM59B,GACF3N,KAAK+qC,eAAeQ,QACpBvrC,KAAK8qC,qBAAuB,IAMzBF,EAAA1qC,UAAAsrC,aAAP,WACIxrC,KAAK6qC,YAAa,GAMfD,EAAA1qC,UAAAikB,WAAP,SAAkBmnB,GACdtrC,KAAK6qC,YAAa,EAClB7qC,KAAK+qC,eAAeQ,QACpBvrC,KAAK8qC,qBAAuB,IAUtBF,EAAA1qC,UAAA+qC,YAAV,SAAsBQ,EAAqBtvB,EAAgB2K,OACnDvY,EAAQk9B,EAAO39B,IAAIqO,EAAYxO,IAC/BY,EACIqB,GAASrB,EAAMpM,OACfsN,GAAalB,EAAMpM,MAAOga,EAAYE,UAEtC9N,EAAMpM,MAAQga,EAAYE,UAG9B9N,EAAK,CAAKpM,MAAOqN,GAAW2M,EAAYE,UAAWyK,UAAWA,EAAW5U,KAAMiK,EAAYjK,MAC3Fu5B,EAAO/iB,IAAIvM,EAAYxO,GAAIY,KASzBq8B,EAAA1qC,UAAAmrC,YAAV,SAAsB98B,GAClB,OAAOvO,KAAK0rC,YAAYn9B,EAAMuY,UAAWvY,EAAMpM,QASzCyoC,EAAA1qC,UAAAwrC,YAAV,SAAyBC,EAAUC,GAO/B,OALIh8B,GAAS+7B,IAAU/7B,GAASg8B,GACnBn8B,GAAaA,GAAa,GAAIk8B,GAAQC,GAEtCA,GAAkBD,uBAhKtC35B,EAAAA,aAoKD44B,EApKA,GCCAiB,GAAA,SAAA/xB,GAAA,SAAA+xB,IAAA,IAAAj3B,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAEc4U,EAAAk3B,cAAqB,GACrBl3B,EAAAm3B,WAAqD,GACrDn3B,EAAAo3B,WAAqD,GACrDp3B,EAAAq3B,QAAuB,IAAI37B,IAmB9BsE,EAAAo2B,cAAgB,IAAI7hB,EAAAA,eA+T/B,OAtVmFnR,EAAAA,EAAAA,GAS/ExY,OAAAgC,eAAIqqC,EAAA3rC,UAAA,UAAO,KAAX,WACI,OAAOF,KAAKgsC,WAAWrrC,OAAS,mCAMpCnB,OAAAgC,eAAIqqC,EAAA3rC,UAAA,UAAO,KAAX,WACI,OAAOF,KAAK+rC,WAAWprC,OAAS,mCAW7BkrC,EAAA3rC,UAAAwN,IAAP,SAAWyO,EAAgB2K,OACjB2kB,EAASzrC,KAAK6qC,WAAa7qC,KAAK+qC,eAAiB/qC,KAAKisC,QAC5DjsC,KAAKksC,uBAAuBT,EAAQtvB,EAAa2K,GACjD9mB,KAAKmsC,eAAehwB,EAAasvB,EAAQ3kB,IAGnC+kB,EAAA3rC,UAAAisC,eAAV,SAAyBhwB,EAAgBsvB,EAAqB3kB,GAC1D9mB,KAAKirC,YAAYQ,EAAQtvB,EAAa2K,IAEjB9mB,KAAK6qC,WAAa7qC,KAAK8qC,qBAAuB9qC,KAAK8rC,eAC3DtpC,KAAK2Z,GAEbnc,KAAK6qC,aACN7qC,KAAKgsC,WAAWxpC,KAAK,CAAC,CAAE2Z,YAAWA,EAAE2K,UAASA,KAC9C9mB,KAAK+rC,WAAa,GAClB/rC,KAAKgrC,cAAczoB,SAOpBspB,EAAA3rC,UAAAsgB,kBAAP,SAAyB7S,GACrB,OAAIA,IAAOqG,UACAhU,KAAK8rC,cAAc9xB,OAAO,SAAA1Z,GAAK,OAAAA,EAAEqN,KAAOA,IAEnDjL,EAAW1C,KAAK8rC,gBAMbD,EAAA3rC,UAAAqgB,qBAAP,SAA4B6qB,GAA5B,IAAAx2B,EAAA5U,KACUwQ,EAAc,GAKpB,OAJAxQ,KAAKisC,QAAQx5B,QAAQ,SAAClE,EAAUtN,OACtBkB,EAAQipC,EAAex2B,EAAK82B,YAAYn9B,EAAMuY,UAAWvY,EAAMpM,OAASoM,EAAMpM,MACpFqO,EAAOhO,KAAI,CAAGmL,GAAI1M,EAAKob,SAAUla,EAAO+P,KAAM3D,EAAM2D,SAEjD1B,GAMJq7B,EAAA3rC,UAAA2jB,SAAP,SAAgBlW,EAASy+B,GACrB,YADqB,IAAAA,IAAAA,GAAA,GACdA,EAAUpsC,KAAK+qC,eAAej9B,IAAIH,GAAM3N,KAAKisC,QAAQn+B,IAAIH,IAMpEnO,OAAAgC,eAAWqqC,EAAA3rC,UAAA,UAAO,KAAlB,WACI,OAAO,mCAMJ2rC,EAAA3rC,UAAAyjB,mBAAP,SAA0BhW,EAASy9B,OACzB78B,EAAQvO,KAAKisC,QAAQn+B,IAAIH,GACzB0+B,EAAevyB,EAAA5Z,UAAM2jB,SAAQjjB,KAAAZ,KAAC2N,GAGpC,IAAKY,IAAU89B,EACX,OAAO,SAGLC,EAAgBxyB,EAAA5Z,UAAMyjB,mBAAkB/iB,KAAAZ,KAAC2N,GAAI,GAC7C4+B,EAASh+B,GAASA,EAAMpM,MAC1BqqC,EAAkBxsC,KAAK0rC,YAAYa,EAAQD,GAC/C,GAAIlB,EAAc,KACRqB,EAAgBl+B,EAAQA,EAAMuY,UAAYulB,EAAavlB,UAC7D0lB,EAAkBxsC,KAAK0rC,YAAYe,EAAeD,GAEtD,OAAOA,GAMJX,EAAA3rC,UAAAikB,WAAP,SAAkBmnB,WAEd,GADAtrC,KAAK6qC,YAAa,EACdS,EAAQ,KACFoB,EAAgD,OAEtD,IAA0B,IAAA58B,EAAAC,EAAA/P,KAAK8qC,sBAAoB76B,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAhD,IAAMia,EAAWlM,EAAA9N,MACZkqC,EAAersC,KAAK+qC,eAAej9B,IAAIqO,EAAYxO,IACzD3N,KAAK8rC,cAActpC,KAAK2Z,GACxBnc,KAAKirC,YAAYjrC,KAAKisC,QAAS9vB,EAAakwB,EAAavlB,WACzD4lB,EAAQlqC,KAAK,CAAE2Z,YAAWA,EAAE2K,UAAWulB,EAAavlB,iHAGxD9mB,KAAKgsC,WAAWxpC,KAAKkqC,GACrB1sC,KAAK+rC,WAAa,GAElB/rC,KAAKgrC,cAAczoB,OAEvBzI,EAAA5Z,UAAMikB,WAAUvjB,KAAAZ,KAACsrC,IAMdO,EAAA3rC,UAAAorC,OAAP,SAAc92B,EAAa7G,GAA3B,IAAAiH,EAAA5U,KACI,GAAI2N,IAAOqG,UAAW,KACZzF,EAAQvO,KAAK6jB,SAASlW,GACxBY,GACAvO,KAAK2sC,aAAan4B,EAAMjG,QAG5BvO,KAAKisC,QAAQx5B,QAAQ,SAAClS,GAClBqU,EAAK+3B,aAAan4B,EAAMjU,KAGhCP,KAAKurC,MAAM59B,IAMRk+B,EAAA3rC,UAAAqrC,MAAP,SAAa59B,GACLA,IAAOqG,WACPhU,KAAK8rC,cAAgB9rC,KAAK8rC,cAAc9xB,OAAO,SAAA1Z,GAAK,OAAAA,EAAEqN,KAAOA,IAC7D3N,KAAKisC,QAAQW,UAAOj/B,GAKpB3N,KAAKgsC,WAAahsC,KAAKgsC,WAAW1vB,IAAI,SAAApH,GAAK,OAAAA,EAAE8E,OAAO,SAAA1Z,GAAK,OAAAA,EAAE6b,YAAYxO,KAAOA,MAAKqM,OAAO,SAAA9E,GAAK,OAAAA,EAAEvU,OAAS,MAE1GX,KAAK8rC,cAAgB,GACrB9rC,KAAKisC,QAAQV,QACbvrC,KAAKgsC,WAAa,IAEtBhsC,KAAK+rC,WAAa,GAClB/rC,KAAKgrC,cAAczoB,QAMhBspB,EAAA3rC,UAAAgrC,KAAP,uBACI,KAAIlrC,KAAKgsC,WAAWrrC,QAAU,GAA9B,KAIMksC,EAAoD7sC,KAAKgsC,WAAWpd,MAC1E5uB,KAAK8rC,cAAc5wB,OAAOlb,KAAK8rC,cAAcnrC,OAASksC,EAAYlsC,QAClEX,KAAK+rC,WAAWvpC,KAAKqqC,GAErB7sC,KAAKisC,QAAQV,YACb,IAA6B,IAAAt7B,EAAAF,EAAA/P,KAAKgsC,YAAUzT,EAAAtoB,EAAA/N,QAAAq2B,EAAAn2B,KAAAm2B,EAAAtoB,EAAA/N,OAAE,CAAzC,IAAM4qC,EAAcvU,EAAAp2B,UACrB,IAA0B,IAAA4qC,EAAAh9B,EAAA+8B,GAAcE,EAAAD,EAAA7qC,QAAA8qC,EAAA5qC,KAAA4qC,EAAAD,EAAA7qC,OAAE,CAArC,IAAMia,EAAW6wB,EAAA7qC,MAClBnC,KAAKirC,YAAYjrC,KAAKisC,QAAS9vB,EAAYA,YAAaA,EAAY2K,sNAI5E9mB,KAAKgrC,cAAczoB,SAMhBspB,EAAA3rC,UAAAirC,KAAP,mBACI,GAAInrC,KAAK+rC,WAAWprC,OAAS,EAAG,KACxB+rC,EACJA,EAAU1sC,KAAK+rC,WAAWnd,UAC1B,IAAqB,IAAAqe,EAAAl9B,EAAA28B,GAAOQ,EAAAD,EAAA/qC,QAAAgrC,EAAA9qC,KAAA8qC,EAAAD,EAAA/qC,OAAE,CAAzB,IAAMirC,EAAMD,EAAA/qC,MACbnC,KAAKirC,YAAYjrC,KAAKisC,QAASkB,EAAOhxB,YAAagxB,EAAOrmB,WAC1D9mB,KAAK8rC,cAActpC,KAAK2qC,EAAOhxB,kHAGnCnc,KAAKgsC,WAAWxpC,KAAKkqC,GACrB1sC,KAAKgrC,cAAczoB,SAQjBspB,EAAA3rC,UAAAgsC,uBAAV,SAAiCT,EAAqBtvB,EAAgB2K,OAC5DvY,EAAQk9B,EAAO39B,IAAIqO,EAAYxO,IACrC,OAAQwO,EAAYjK,MAChB,KAAKkK,GAAgBlC,IACjB,GAAI3L,EAEA,MAAM,IAAIsB,MAAM,qDAAqDsM,EAAYxO,GAAE,4BAEvF,MACJ,KAAKyO,GAAgBjC,OACrB,KAAKiC,GAAgBhC,OACjB,GAAI7L,GAASA,EAAM2D,OAASkK,GAAgBjC,OAExC,MAAM,IAAItK,MAAM,qDAAqDsM,EAAYxO,GAAE,8BAEvF,IAAKY,IAAUuY,IAAc9mB,KAAK6qC,WAE9B,MAAM,IAAIh7B,MAAM,kEAAkEsM,EAAYjK,KAAI,WACpFiK,EAAYxO,GAAE,kEAYlCk+B,EAAA3rC,UAAA+qC,YAAV,SAAsBQ,EAAqBtvB,EAAgB2K,OACnDvY,EAAQk9B,EAAO39B,IAAIqO,EAAYxO,IAWnC,GAAIY,EACA,OAAQ4N,EAAYjK,MAChB,KAAKkK,GAAgBjC,OACb5L,EAAM2D,OAASkK,GAAgBlC,IAC/BuxB,EAAOmB,UAAOzwB,EAAYxO,IACnBY,EAAM2D,OAASkK,GAAgBhC,SACtC7L,EAAMpM,MAAQga,EAAYE,SAC1B9N,EAAM2D,KAAOkK,GAAgBjC,QAEjC,MACJ,KAAKiC,GAAgBhC,OACbxK,GAASrB,EAAMpM,QACXoM,EAAM2D,OAASkK,GAAgBlC,MAC/B3L,EAAMpM,MAAQnC,KAAK0rC,YAAYn9B,EAAMpM,MAAOga,EAAYE,WAExD9N,EAAM2D,OAASkK,GAAgBhC,QAC/B3K,GAAalB,EAAMpM,MAAOga,EAAYE,WAG1C9N,EAAMpM,MAAQga,EAAYE,cAItC9N,EAAK,CAAKpM,MAAOqN,GAAW2M,EAAYE,UAAWyK,UAAWA,EAAW5U,KAAMiK,EAAYjK,MAC3Fu5B,EAAO/iB,IAAIvM,EAAYxO,GAAIY,GAI1BvO,KAAK6qC,YACN7qC,KAAKotC,WAAWjxB,EAAYxO,GAAI89B,IAS9BI,EAAA3rC,UAAAktC,WAAV,SAAqBz/B,EAAS89B,WACpBl9B,EAAQk9B,EAAO39B,IAAIH,GAKzB,GAAIY,GAASA,EAAMpM,OAASoM,EAAMuY,UAK9B,GAAIlX,GAASrB,EAAMuY,WAAY,KAC3B,IAAkB,IAAAhX,EAAAC,EAAAvQ,OAAOwQ,KAAKzB,EAAMpM,QAAM8N,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAvC,IAAMjB,EAAGgP,EAAA9N,MACNkrC,KAAKC,UAAU/+B,EAAMuY,UAAU7lB,MAAUosC,KAAKC,UAAU/+B,EAAMpM,MAAMlB,YAC7DsN,EAAMpM,MAAMlB,wGAKvBsN,EAAM2D,OAASkK,GAAgBjC,QAA8C,IAApC3a,OAAOwQ,KAAKzB,EAAMpM,OAAOxB,QAClE8qC,EAAOmB,UAAOj/B,QAGdY,EAAMuY,YAAcvY,EAAMpM,OAC1BspC,EAAOmB,UAAOj/B,IAWpBk+B,EAAA3rC,UAAAysC,aAAV,SAAuBn4B,EAAajG,OAC1BoF,EAAQa,EAAKsE,UAAU,SAAAtY,GAAK,OAAA6sC,KAAKC,UAAU9sC,KAAO6sC,KAAKC,UAAU/+B,EAAMuY,WAAa,MAC1F,OAAQvY,EAAM2D,MACV,KAAKkK,GAAgBlC,IACjB1F,EAAKhS,KAAK+L,EAAMpM,OAChB,MACJ,KAAKia,GAAgBjC,OACb,GAAKxG,GAASA,EAAQa,EAAK7T,QAC3B6T,EAAK0G,OAAOvH,EAAO,GAEvB,MACJ,KAAKyI,GAAgBhC,OACb,GAAKzG,GAASA,EAAQa,EAAK7T,SAC3B6T,EAAKb,GAAS3T,KAAKqrC,YAAY98B,0BAlVlDyD,EAAAA,aAuVD65B,EAvVA,CACmFjB,ICCnF2C,GAAA,SAAAzzB,GAAA,SAAAyzB,mDA4EA,OA1EYv1B,EAAAA,EAAAA,GAEDu1B,EAAArtC,UAAAqgB,qBAAP,SAA4B6qB,GAA5B,IAAAx2B,EAAA5U,KACUwQ,EAAc,GAMpB,OALAxQ,KAAKisC,QAAQx5B,QAAQ,SAAClE,EAAUtN,OACtBkB,EAAQipC,EAAex2B,EAAK82B,YAAYn9B,EAAMuY,UAAWvY,EAAMpM,OAASqN,GAAWjB,EAAMpM,OAC/FyS,EAAK44B,sBAAsBrrC,GAC3BqO,EAAOhO,KAAI,CAAGmL,GAAI1M,EAAKwb,KAAMlO,EAAMkO,KAAMJ,SAAUla,EAAO+P,KAAM3D,EAAM2D,SAEnE1B,GAGD+8B,EAAArtC,UAAA+qC,YAAV,SAAsBQ,EAAqBtvB,EAAgB2K,GAIvD,GAHAhN,EAAA5Z,UAAM+qC,YAAWrqC,KAAAZ,KAACyrC,EAAQtvB,EAAa2K,GAGlC3K,EAAYM,KAAjB,KAIMgxB,EAAehC,EAAO39B,IAAIqO,EAAYxO,IACxC8/B,IACAA,EAAahxB,KAAON,EAAYM,MAMhCN,EAAYjK,OAASkK,GAAgBjC,QACrCsxB,EAAOh5B,QAAQ,SAACoa,EAAMnC,GAClB,GAAImC,EAAEpQ,OAA4C,IAApCoQ,EAAEpQ,KAAKnL,QAAQ6K,EAAYxO,IACrC,OAAQkf,EAAE3a,MACN,KAAKkK,GAAgBlC,IACjBuxB,EAAOmB,UAAOliB,GACd,MACJ,KAAKtO,GAAgBhC,OACjBqxB,EAAO39B,IAAI4c,GAAGxY,KAAOkK,GAAgBjC,OACrCsxB,EAAO39B,IAAI4c,GAAGvoB,MAAQ,UAcvCorC,EAAArtC,UAAAorC,OAAP,SAAc92B,EAAauH,EAAkBS,EAAoB7O,GAC7D,GAAI6O,IAAiBxI,UAAW,KACxB8H,EAAe9b,KAAKugB,sBAAqB,GACzC5S,IAAOqG,YACP8H,EAAeA,EAAa9B,OAAO,SAAA1Z,GAAK,OAAAA,EAAEqN,KAAOA,KAErD6M,GAAS+B,8BAA8B/H,EAAMsH,EAAcU,EAAcT,GAAY,QAErFjC,EAAA5Z,UAAMorC,OAAM1qC,KAAAZ,KAACwU,EAAM7G,GAEvB3N,KAAKurC,MAAM59B,IAIP4/B,EAAArtC,UAAAstC,sBAAR,SAA8B11B,WAC1B,GAAIA,MACA,IAAmB,IAAAhI,EAAAC,EAAAvQ,OAAOwQ,KAAK8H,IAAI7H,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAhC,IAAMwrC,EAAIz9B,EAAA9N,MACPxC,MAAM0Q,QAAQyH,EAAI41B,YACX51B,EAAI41B,8HAvE9B17B,EAAAA,aA4EDu7B,EA5EA,CAEY1B,kBCsJR,SAAA8B,EACYtN,EACAuN,EAC6BrQ,EACjBsQ,GAJxB,IAAAj5B,EAAA5U,KACYA,KAAAqgC,WAAAA,EACArgC,KAAA4tC,IAAAA,EAC6B5tC,KAAAu9B,eAAAA,EACjBv9B,KAAA6tC,kBAAAA,EAtIhB7tC,KAAAu/B,SAAW,IAAIC,EAAAA,QACfx/B,KAAA8tC,kBAA8G,CAClH9zB,EAAAA,OAAO,SAAA8C,GAAK,OAAAA,EAAEnP,KAAOiH,EAAKm5B,aAC1BjJ,EAAAA,UAAU9kC,KAAKu/B,WAuBZv/B,KAAA8/B,SAAW,IAAI3W,EAAAA,aAmBfnpB,KAAA6/B,UAAY,IAAI1W,EAAAA,aAmBhBnpB,KAAAggC,SAAW,IAAI7W,EAAAA,aAmBfnpB,KAAA+/B,UAAY,IAAI5W,EAAAA,aAEfnpB,KAAAguC,YAAa,EA4LbhuC,KAAAiuC,cAAgB,WACpBr5B,EAAKo5B,YAAa,EAClBp5B,EAAKg5B,IAAIrL,uBACF3tB,EAAKm5B,WACZn5B,EAAKs5B,cACLt5B,EAAKorB,SAASzd,QActB,OA3MI/iB,OAAAgC,eAAWmsC,EAAAztC,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKguC,4CAgBhBxuC,OAAAgC,eAAWmsC,EAAAztC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,WAAWC,+CAM3B9gC,OAAAgC,eAEWmsC,EAAAztC,UAAA,cAAW,KAFtB,WAGI,OAAOF,KAAKmuC,2CAMhB3uC,OAAAgC,eACWmsC,EAAAztC,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAKmuC,2CAoBVR,EAAAztC,UAAAiO,KAAP,SAAYigC,GAAZ,UAAAx5B,EAAA5U,KAGUogC,EAAOpgC,KAAKu9B,eAAe+D,eAAethC,KAAK+tC,YAC/CM,IAAmBjO,GAAOA,EAAK6E,oBAC/BqJ,IAAoBlO,GAAOA,EAAKO,qBACtC,IAAI0N,IAAsBruC,KAAKguC,YAAcM,GAA7C,CAIKlO,IACDpgC,KAAK+tC,WAAa/tC,KAAKu9B,eAAeC,OAAOx9B,KAAKqgC,WAAY+N,IAGlEpuC,KAAKguC,YAAa,EAClBhuC,KAAK4tC,IAAIrL,oBAEHgM,EAAqC,CAAEnsB,QAAQ,GAErD,GADApiB,KAAK6/B,UAAUtd,KAAKgsB,GAChBA,EAAcnsB,OAGd,OAFApiB,KAAKguC,YAAa,OAClBhuC,KAAK4tC,IAAIrL,gBAIbviC,KAAKu9B,eAAe6D,KAAKphC,KAAK+tC,WAAYK,GAE1CpuC,KAAKkuC,cACLluC,KAAKwuC,mBAAoBtgC,EAAAlO,KAAKu9B,eAAeuC,UAAS+E,KAAIhkC,MAAAqN,EAAAxL,EAAI1C,KAAK8tC,oBAAmB/I,UAAU,WAC5FnwB,EAAKkrB,SAASvd,SAGlBviB,KAAKyuC,oBAAqB3+B,EAAA9P,KAAKu9B,eAC1BwC,WACA8E,KAAIhkC,MAAAiP,EAAApN,EAAI1C,KAAK8tC,oBACb/I,UAAU,SAACziC,OACFs/B,EAAwC,CAAExf,QAAQ,EAAO9P,MAAOhQ,EAAEgQ,OACxEsC,EAAKmrB,UAAUxd,KAAKqf,GACpBt/B,EAAE8f,OAASwf,EAAUxf,OAKhB9f,EAAE8f,QACHxN,EAAK85B,kBAAkB95B,EAAK65B,sBAIxCzuC,KAAK2uC,mBAAoB1+B,EAAAjQ,KAAKu9B,eAAeyC,UACxC6E,KAAIhkC,MAAAoP,EAAAvN,EAAI1C,KAAK8tC,oBACb/I,UAAU/kC,KAAKiuC,iBAUjBN,EAAAztC,UAAAkO,MAAP,eAGUgyB,EAAOpgC,KAAKu9B,eAAe+D,eAAethC,KAAK+tC,YAC/CO,IAAoBlO,GAAOA,EAAKO,qBAClC3gC,KAAKguC,YAAcM,GAIvBtuC,KAAKu9B,eAAeiE,KAAKxhC,KAAK+tC,aAU3BJ,EAAAztC,UAAA6N,OAAP,SAAcqgC,GAGNpuC,KAAKmuC,WAAanuC,KAAK4uC,UACvB5uC,KAAKmO,KAAKigC,GAEVpuC,KAAKoO,SAKb5O,OAAAgC,eAAWmsC,EAAAztC,UAAA,YAAS,KAApB,eACUkgC,EAAOpgC,KAAKu9B,eAAe+D,eAAethC,KAAK+tC,YACrD,QAAO3N,GAAOA,EAAKO,sDAShBgN,EAAAztC,UAAA6gC,WAAP,WACI/gC,KAAKu9B,eAAewD,WAAW/gC,KAAK+tC,aAMjCJ,EAAAztC,UAAA2uC,SAAP,WACQ7uC,KAAK6tC,mBAAqB7tC,KAAK2N,IAC/B3N,KAAK6tC,kBAAkBngC,IAAI1N,KAAK2N,GAAI3N,OAOrC2tC,EAAAztC,UAAAsmC,YAAP,WACQxmC,KAAK6tC,mBAAqB7tC,KAAK2N,IAC/B3N,KAAK6tC,kBAAkBhgC,OAAO7N,KAAK2N,KAElC3N,KAAKmuC,WAAanuC,KAAK+tC,YACxB/tC,KAAKu9B,eAAeiE,KAAKxhC,KAAK+tC,YAElC/tC,KAAKkuC,cACLluC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAWVkH,EAAAztC,UAAAguC,YAAR,WACIluC,KAAK0uC,kBAAkB1uC,KAAKwuC,mBAC5BxuC,KAAK0uC,kBAAkB1uC,KAAKyuC,oBAC5BzuC,KAAK0uC,kBAAkB1uC,KAAK2uC,oBAGxBhB,EAAAztC,UAAAwuC,kBAAR,SAA0BI,GAClBA,IAAiBA,EAAaC,QAC9BD,EAAaZ,mCAvSxBz/B,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,SACVtgC,SAAU,2DAtBV40B,EAAAA,kBAFA2L,EAAAA,yBAeKlQ,GAAiBh+B,WAAA,CAAA,CAAAmR,KAkJjBC,EAAAA,OAAMnE,KAAA,CAAC+wB,aAnJPvxB,GAAoBzM,WAAA,CAAA,CAAAmR,KAoJpBg9B,EAAAA,gDA7GJvjB,EAAAA,0BAmBAA,EAAAA,yBAmBAA,EAAAA,0BAmBAA,EAAAA,mBAkBAhd,EAAAA,2BAaAwgC,EAAAA,YAAWnhC,KAAA,CAAC,6BAA0B,CAAAkE,KACtCi9B,EAAAA,YAAWnhC,KAAA,CAAC,0CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uBA0KjB2/B,mBA4DI,SAAAyB,EAAoBtL,EAAyC+J,GAAzC7tC,KAAA8jC,QAAAA,EAAyC9jC,KAAA6tC,kBAAAA,EA2CjE,OA9DIruC,OAAAgC,eACI4tC,EAAAlvC,UAAA,SAAM,KASV,WACI,MAA4B,iBAAjBF,KAAKqvC,QACLrvC,KAAK6tC,kBAAkB//B,IAAI9N,KAAKqvC,SAEpCrvC,KAAKqvC,aAdhB,SACWruC,GACQ,OAAXA,GAA8B,KAAXA,IACnBhB,KAAKqvC,QAAUruC,oCAqBhBouC,EAAAlvC,UAAA2uC,SAAP,WACI7uC,KAAKsvC,iBAAmB,CACpB7P,iBAAkB,IAAIwH,GAA6B,CAAEjmC,OAAQhB,KAAK8jC,QAAQxD,gBAC1EZ,eAAgB,IAAI8J,GACpB5J,qBAAqB,EACrBD,OAAO,EACPe,uBAAuB,IAQxB0O,EAAAlvC,UAAAqvC,QADP,WAEQvvC,KAAK0kC,SACL1kC,KAAKsvC,iBAAiB5K,OAAS1kC,KAAK0kC,YAGlC8K,EAAiBhwC,OAAOa,OAAO,GAAIL,KAAKsvC,iBAAkBtvC,KAAKouC,iBACrEpuC,KAAKyvC,sBAAsBD,GAC3BxvC,KAAKgB,OAAO+M,OAAOyhC,IAQbJ,EAAAlvC,UAAAuvC,sBAAV,SAAgCnV,GAC5B,GAAIA,GAAYA,EAASmF,iBAAkB,KACjCiQ,EAA2CpV,EAASmF,iBAAiBtC,QAC3EuS,EAAsBpV,SAASt5B,OAAShB,KAAK8jC,QAAQxD,cACrDhG,EAASmF,iBAAmBiQ,EAGhC,OAAOpV,uBAnGd7rB,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,gBACVtgC,SAAU,iEAlUV40B,EAAAA,kBAYK91B,GAAoBzM,WAAA,CAAA,CAAAmR,KA8WiBg9B,EAAAA,uDArCzCvgC,EAAAA,sBAYAA,EAAAA,MAAKX,KAAA,CAAC,mCAMNW,EAAAA,MAAKX,KAAA,CAAC,oCAqCNY,EAAAA,aAAYZ,KAAA,CAAC,YAyBlBohC,KASAO,GAAA,WAKI,SAAAA,EAAmB7L,GAAA9jC,KAAA8jC,QAAAA,EAMvB,OAHItkC,OAAAgC,eAAWmuC,EAAAzvC,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK8jC,QAAQxD,mEAT3B7xB,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,iBACVtgC,SAAU,kEAhbV40B,EAAAA,cAybJqM,EAXA,GAgBAC,GAAA,WAAA,SAAAA,KAK+B,2BAL9B5gC,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC0+B,GAAoByB,GAA0BO,IAC7DzgC,QAAS,CAACy+B,GAAoByB,GAA0BO,IACxDxgC,UAAW,CAAC3B,QAEeoiC,EAL/B,OCzbIC,IAAA,EACAC,KAAA,4CAKS,YACD,WACA,QCbZC,GAAA,WAAA,SAAAA,IAQc/vC,KAAAgwC,UAAoC,IAAI1/B,WAM3Cy/B,EAAA7vC,UAAA4N,IAAP,SAAWmiC,GACP,OAAOjwC,KAAKgwC,UAAUliC,IAAImiC,IAQvBF,EAAA7vC,UAAAwoB,IAAP,SAAWunB,EAAqBC,GAC5B,IAAKD,EACD,MAAMpgC,MAAM,mCAEhB7P,KAAKgwC,UAAUtnB,IAAIunB,EAAaC,IAO7BH,EAAA7vC,UAAAqrC,MAAP,SAAa0E,GACTjwC,KAAKgwC,UAAUtnB,IAAIunB,EAAajwC,KAAKmwC,cAOlCJ,EAAA7vC,UAAA08B,KAAP,SAAYqT,OACFG,EAAMpwC,KAAK8N,IAAImiC,GACrB,OAAOG,EAAMA,EAAIxT,KAAO,GAcrBmT,EAAA7vC,UAAAmwC,SAAP,SAAgBJ,EAAqBK,EAAQF,GAOzC,GANKA,IACDA,EAAM,IAAI7/B,IAAIvQ,KAAK8N,IAAImiC,KAEvBG,IAAQp8B,YACRo8B,EAAMpwC,KAAKmwC,cAEVG,GAAqB,IAAXA,EACX,MAAMzgC,MAAM,8BAGhB,OADAugC,EAAI1iC,IAAI4iC,GACDF,GAcJL,EAAA7vC,UAAAqwC,UAAP,SAAiBN,EAAqBO,EAAgBC,GAAtD,IACQT,EADRp7B,EAAA5U,KAQI,OANIywC,EACAT,EAAYhwC,KAAKmwC,YACVK,GAA8B,IAAnBA,EAAQ7vC,SAC1BqvC,EAAY,IAAIz/B,IAAIvQ,KAAK8N,IAAImiC,KAEjCO,EAAQ/9B,QAAQ,SAACwJ,GAAS,OAAA+zB,EAAYp7B,EAAKy7B,SAASJ,EAAah0B,EAAM+zB,KAChEA,GASJD,EAAA7vC,UAAAwwC,YAAP,SAAmBT,EAAqBK,EAAQF,GAC5CpwC,KAAK0oB,IAAIunB,EAAajwC,KAAKqwC,SAASJ,EAAaK,EAAQF,KAStDL,EAAA7vC,UAAAywC,aAAP,SAAoBV,EAAqBK,EAAeG,GACpDzwC,KAAK0oB,IAAIunB,EAAajwC,KAAKuwC,UAAUN,EAAaK,EAAQG,KAcvDV,EAAA7vC,UAAA0wC,YAAP,SAAmBX,EAAqBK,EAAQF,GAI5C,GAHKA,IACDA,EAAM,IAAI7/B,IAAIvQ,KAAK8N,IAAImiC,KAEvBG,IAAQp8B,UAIZ,OADAo8B,EAAIxD,UAAO0D,GACJF,GAaJL,EAAA7vC,UAAA2wC,aAAP,SAAoBZ,EAAqBO,GAAzC,IACQR,EADRp7B,EAAA5U,KAGI,OADAwwC,EAAQ/9B,QAAQ,SAACq+B,GAAmB,OAAAd,EAAYp7B,EAAKg8B,YAAYX,EAAaa,EAAgBd,KACvFA,GASJD,EAAA7vC,UAAA6wC,cAAP,SAAqBd,EAAqBK,EAAQF,GAC9CpwC,KAAK0oB,IAAIunB,EAAajwC,KAAK4wC,YAAYX,EAAaK,EAAQF,KAQzDL,EAAA7vC,UAAA8wC,eAAP,SAAsBf,EAAqBK,EAAeG,GACtDzwC,KAAK0oB,IAAIunB,EAAajwC,KAAK6wC,aAAaZ,EAAaK,KAUlDP,EAAA7vC,UAAA+wC,iBAAP,SAAwBhB,EAAqBK,OACnCF,EAAMpwC,KAAK8N,IAAImiC,GACrB,QAAKG,GAGEA,EAAIc,IAAIZ,IAWZP,EAAA7vC,UAAAixC,WAAP,SAAkBlB,OACRG,EAAMpwC,KAAK8N,IAAImiC,GACrB,GAAIG,GAAOA,EAAIxT,KAAO,EAClB,OAAOwT,EAAI1a,SAASxzB,OAAOC,OAW5B4tC,EAAA7vC,UAAAkxC,iBAAP,SAAwBnB,EAAqBoB,GACzC,OAAOA,EAAY,GAAKA,IAAcrxC,KAAK48B,KAAKqT,IAU7CF,EAAA7vC,UAAAoxC,kBAAP,SAAyBrB,GACrB,OAAkC,IAA3BjwC,KAAK48B,KAAKqT,IAUdF,EAAA7vC,UAAAqxC,YAAP,SAAmB/8B,EAAMuH,GAErB,OAAOA,IAAe/H,WAA4B,OAAf+H,EAAsBvH,EAAK8H,IAAI,SAACQ,GAAM,OAAAA,EAAEf,KAAevH,GAOvFu7B,EAAA7vC,UAAAiwC,UAAP,WACI,OAAO,IAAI5/B,yBAhPlByB,EAAAA,WAAUhE,KAAA,CAAC,CACRiE,WAAY,kHADhB,GCDIu/B,GAAU,EAKdC,GAAA,WAAA,SAAAA,IAQYzxC,KAAA6pC,IAAM2H,KAkBPxxC,KAAA0xC,KAAO,QAIP1xC,KAAA2xC,YAAa,EA6Bb3xC,KAAA4xC,UAAW,EAyBtB,OAvEIpyC,OAAAgC,eAAWiwC,EAAAvxC,UAAA,UAAO,KAAlB,WACI,MAAO,wBAAwBF,KAAK6pC,qCAGxCrqC,OAAAgC,eACWiwC,EAAAvxC,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK6xC,6DAnBnBC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,2BACVqjC,SAAU,qKAeT5C,EAAAA,YAAWnhC,KAAA,CAAC,sCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iCAIZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gDA2BZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCi9B,EAAAA,YAAWnhC,KAAA,CAAC,uDAwBZW,EAAAA,SAEL8iC,EApFA,GCDID,GAAU,EACV1S,IAAe,EASnBkT,GAAA,WAqSI,SAAAA,EACyCC,EAC3B5R,EACYtpB,EACgCi5B,GAHjBhwC,KAAAiyC,SAAAA,EAC3BjyC,KAAAqgC,WAAAA,EACYrgC,KAAA+W,MAAAA,EACgC/W,KAAAgwC,UAAAA,EArShDhwC,KAAAkyC,UAAW,EACXlyC,KAAAmyC,WAAY,EACZnyC,KAAAoyC,OAAS,KACTpyC,KAAAqyC,WAAY,EAiBfryC,KAAA2N,GAAK,sBAAsB6jC,KA6G3BxxC,KAAAsyC,eAAiB,IAAInpB,EAAAA,aAsIrBnpB,KAAA0xC,KAAO,SAoDlB,OAvTIlyC,OAAAgC,eAAcwwC,EAAA9xC,UAAA,WAAQ,KAAtB,WACI,OAAuB,OAAhBF,KAAKoyC,QAAmBpyC,KAAKoyC,SAAWp+B,2CAoBnDxU,OAAAgC,eAAWwwC,EAAA9xC,UAAA,SAAM,KAAjB,WACI,OAAA,sCAWJV,OAAAgC,eACWwwC,EAAA9xC,UAAA,QAAK,KADhB,WAEI,OAAoB,OAAhBF,KAAKoyC,QACLtT,GAAeb,GACX,oIAEAa,IACG9+B,KAAKuyC,WAETvyC,KAAKoyC,YAGhB,SAAiBjwC,GACbnC,KAAKoyC,OAASjwC,mCA0BlB3C,OAAAgC,eACIwwC,EAAA9xC,UAAA,YAAS,KADb,WAEI,OAAQF,KAAK82B,0CAMjBt3B,OAAAgC,eACWwwC,EAAA9xC,UAAA,gBAAa,KADxB,WAEI,MAAwC,SAAjCF,KAAKiyC,SAASO,iBAA8BxyC,KAAK82B,0CAM5Dt3B,OAAAgC,eACWwwC,EAAA9xC,UAAA,mBAAgB,KAD3B,WAEI,MAAwC,YAAjCF,KAAKiyC,SAASO,iBAAiCxyC,KAAK82B,0CAgB/Dt3B,OAAAgC,eAGIwwC,EAAA9xC,UAAA,WAAQ,KAHZ,WAII,OAAOF,KAAKmyC,eAGhB,SAAahwC,GACLnC,KAAK82B,WAGT92B,KAAKmyC,UAAYhwC,EACjBnC,KAAKsyC,eAAe/vB,KAAKviB,KAAKmyC,6CAelC3yC,OAAAgC,eAAIwwC,EAAA9xC,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK+jB,cAMhB,SAAe5hB,GACXnC,KAAK+jB,SAAW5hB,mCAUpB3C,OAAAgC,eACIwwC,EAAA9xC,UAAA,UAAO,KADX,WAEI,OAASF,KAAK82B,WAAa92B,KAAK4xC,UAAa5xC,KAAKkyC,cAYtD,SAAY/vC,GACRnC,KAAKkyC,SAAW/vC,mCAQpB3C,OAAAgC,eAAIwwC,EAAA9xC,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKyyC,aAKhB,SAActwC,GACVnC,KAAKyyC,QAAUtwC,mCA2BnB3C,OAAAgC,eACWwwC,EAAA9xC,UAAA,kBAAe,KAD1B,WAEI,OAAOF,KAAK82B,UAA6C,SAAjC92B,KAAKiyC,SAASO,gDAM1ChzC,OAAAgC,eACWwwC,EAAA9xC,UAAA,qBAAkB,KAD7B,WAEI,OAAOF,KAAK82B,UAA6C,YAAjC92B,KAAKiyC,SAASO,gDAqB1ChzC,OAAAgC,eAGWwwC,EAAA9xC,UAAA,WAAQ,KAHnB,WAII,OAAOF,KAAK+W,OAAQ/W,KAAK+W,MAAM66B,UAA6B5xC,KAAKqyC,eAGrE,SAAoBlwC,GAChBnC,KAAKqyC,UAAYlwC,mCAkBrB3C,OAAAgC,eAAWwwC,EAAA9xC,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKiyC,SAASS,MAAMphC,QAAQtR,uCAOvCR,OAAAgC,eAAWwwC,EAAA9xC,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKqgC,WAAWC,cAAcrF,8CAOzCz7B,OAAAgC,eAAWwwC,EAAA9xC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,4CAchB2R,EAAA9xC,UAAAyyC,QADA,SACQrgC,KAGR0/B,EAAA9xC,UAAA0yC,UAAA,WACI,GAAI5yC,KAAKmyC,UAAW,KACVU,EAAuB7yC,KAAKiyC,SAASa,aACtCD,GAEM7yC,KAAK+yC,SACV/yC,KAAKoyC,SAAWS,EAAqBl/B,OAAS3T,KAAKmC,QAAU0wC,EAAqB1wC,MACpFnC,OAAS6yC,IACT7yC,KAAKiyC,SAASe,WAAWhzC,MAJzBA,KAAKiyC,SAASe,WAAWhzC,6EAjBhCmS,EAAAA,OAAMnE,KAAA,CH7QkB,iCGxCUs1B,EAAAA,kBAGlCmO,GAAyB1wC,WAAA,CAAA,CAAAmR,KAoTzBg9B,EAAAA,kBAtTAa,GAAsBhvC,WAAA,CAAA,CAAAmR,KAuTtBg9B,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC+hC,qCAnRvBZ,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,qBAkBAA,EAAAA,qBAiCAA,EAAAA,yBAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,oDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,6DAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAkBZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCi9B,EAAAA,YAAWnhC,KAAA,CAAC,+DAgBZ2d,EAAAA,2BAMAhd,EAAAA,uBAqBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,wDAkDZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,wDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iEAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0DAuBZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCi9B,EAAAA,YAAWnhC,KAAA,CAAC,qDAgBZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,8BAqCZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cAlKxBilC,EAAAA,CAFC/U,GAAkB,+KA2CnB+U,EAAAA,CAFC/U,GAAkB,4KA2IvB8T,EA/TA,GCJAkB,GAAA,SAAAp5B,GAAA,SAAAo5B,mDAkFA,OA9E8Cl7B,EAAAA,EAAAA,GAI1CxY,OAAAgC,eAAI0xC,EAAAhzC,UAAA,UAAO,KAAX,eACQizC,EAAenzC,KAAKkyC,SACxB,GAAIlyC,KAAK+yC,SAAU,KACTK,EAAcpzC,KAAKgwC,UAAUmB,WAAcnxC,KAAKiyC,SAAStkC,GAAE,WAC3D0lC,EAAeD,EAAcA,EAAYz/B,OAAS,EACxDw/B,EAAenzC,KAAKoyC,SAAWiB,EAEnC,OAAQrzC,KAAK82B,WAAa92B,KAAK4xC,UAAYuB,OAM/C,SAAYhxC,GACRnC,KAAKkyC,SAAW/vC,mCAKpB3C,OAAAgC,eAAI0xC,EAAAhzC,UAAA,WAAQ,KAAZ,WACI,GAAIF,KAAK+yC,SAAU,KACT92B,EAAOjc,KAAKgwC,UAAUmB,WAAW,GAAGnxC,KAAKiyC,SAAStkC,IACxD,QAAOsO,IAAOA,EAAKtI,QAAU3T,KAAKoyC,QAAUn2B,EAAK9Z,QAAUnC,KAAKmC,OAEpE,OAAOnC,KAAKmyC,eAMhB,SAAahwC,GACLnC,KAAK82B,WAGT92B,KAAKmyC,UAAYhwC,EACjBnC,KAAKsyC,eAAe/vB,KAAKviB,KAAKmyC,6CAKlC3yC,OAAAgC,eACI0xC,EAAAhzC,UAAA,cAAW,KADf,WAGI,OAD0BF,KAAKiyC,SAASqB,mBAAqBtzC,KAAK4xC,UAAY5xC,KAAK82B,UAExE,EAEA,sCAQfoc,EAAAhzC,UAAAyyC,QADA,SACQrgC,GACJ,GAAItS,KAAK4xC,UAAY5xC,KAAK82B,SAA1B,KACUsc,EAAcpzC,KAAKiyC,SAASS,MAAMp7B,KAAK,SAAC2E,GAAS,OAAAA,EAAKw2B,UACxDzyC,KAAKiyC,SAASqB,iBAAmBF,GACjCA,EAAYtP,QAAQxD,cAAciT,MAAM,CAAEC,eAAe,SAI7DxzC,KAAKgwC,WACLhwC,KAAKiyC,SAASe,WAAWhzC,KAAMsS,IAQvC4gC,EAAAhzC,UAAAuzC,iBADA,SACiBnhC,GACbA,EAAM23B,sCAhFb6H,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,qBACVqjC,SAAA,qEA8CC5C,EAAAA,YAAWnhC,KAAA,CAAC,kCAaZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,qCAiBvBY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,cAIhCklC,EAlFA,CAI8ClB,QCR1C0B,YAAc,cACdC,KAAO,OACPC,QAAU,WAkBDC,GAAsB,IAAIC,EAAAA,eAAuC,kBAK9EC,GAAA,WA6CI,SAAAA,EAAsBC,GAAAh0C,KAAAg0C,sBAAAA,EALfh0C,KAAAi0C,iBAAmB,IAAI9qB,EAAAA,aAEpBnpB,KAAAk0C,yBAAmD,CAAE1B,eAAgB2B,GAAeT,aAI1Fl0C,OAAOa,OAAOL,KAAKk0C,yBAA0BF,GAqCrD,OAnEIx0C,OAAAgC,eACWuyC,EAAA7zC,UAAA,iBAAc,KADzB,WAEI,OAAOF,KAAKo0C,iBACNp0C,KAAKg0C,uBAAyBh0C,KAAKg0C,sBAAsBxB,gBAAmB2B,GAAeT,iBAMrG,SAA0Bp6B,OAChB+6B,EAAwBr0C,KAAKo0C,gBAGnC,GAFAp0C,KAAKo0C,gBAAe,EAEhBC,IAA0Br0C,KAAKo0C,gBAAiB,KAC1CE,EAA+C,CACjDC,WAAYF,EACZG,WAAYx0C,KAAKo0C,iBAGrBp0C,KAAKi0C,iBAAiB1xB,KAAK+xB,qCAiB5BP,EAAA7zC,UAAA2uC,SAAP,WACI7uC,KAAKy0C,eAAiBz0C,KAAKo0C,iBAGxBL,EAAA7zC,UAAA0yC,UAAP,WACI,IAAK5yC,KAAKo0C,iBAAmBp0C,KAAKg0C,uBAC1Bh0C,KAAKk0C,yBAAyB1B,iBAAmBxyC,KAAKg0C,sBAAsBxB,eAAgB,KAC1F8B,EAA+C,CACjDC,WAAYv0C,KAAKk0C,yBAAyB1B,eAC1CgC,WAAYx0C,KAAKg0C,sBAAsBxB,gBAG3CxyC,KAAKi0C,iBAAiB1xB,KAAK+xB,GAC3Bt0C,KAAKk0C,yBAA2B10C,OAAOa,OAAOL,KAAKk0C,yBAA0Bl0C,KAAKg0C,yBAQhFD,EAAA7zC,UAAAw0C,yBAAV,SAAmCC,GAC/B,OAAQ30C,KAAKwyC,gBACT,KAAK2B,GAAeR,KAChB,OAAUgB,EAAc,KAAKR,GAAeR,KAChD,KAAKQ,GAAeP,QAChB,OAAUe,EAAc,KAAKR,GAAeP,QAChD,QACI,OAAOe,4CAhElBhmC,EAAAA,gCAuBAgd,EAAAA,UA4CLooB,EAnFA,GCvBIvC,GAAU,EASdoD,GAAA,SAAA96B,GAwJI,SAAA86B,EACcvU,EACAuN,EACyCiH,GAHvD,IAAAjgC,EAIQkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAHvB4U,EAAAyrB,WAAAA,EACAzrB,EAAAg5B,IAAAA,EACyCh5B,EAAAigC,uBAAAA,EAxJ7CjgC,EAAAkgC,aAAoB,KACpBlgC,EAAAi1B,IAAM,iBAAiB2H,KAuB1B58B,EAAAmgC,YAAc,IAAI5rB,EAAAA,aA6DlBvU,EAAAogC,UAAY,KAMZpgC,EAAAqgC,UAAW,IAwLtB,OAtR8Cj9B,EAAAA,EAAAA,GAS1CxY,OAAAgC,eAAcozC,EAAA10C,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAK8jC,yCA6FhBtkC,OAAAgC,eAAWozC,EAAA10C,UAAA,QAAK,KAAhB,mBACUwyC,EAA+B,GACrC,GAAI1yC,KAAK2S,WAAaqB,cAClB,IAAoB,IAAAlE,EAAAC,EAAA/P,KAAK2S,SAASC,WAAS3C,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAxC,IAAM8gC,EAAK/yB,EAAA9N,MACP6gC,EAAMlM,UACP4b,EAAMlwC,KAAKwgC,wGAKvB,OAAO0P,mCAUXlzC,OAAAgC,eAAWozC,EAAA10C,UAAA,UAAO,KAAlB,mBACUg1C,EAAiC,GACvC,GAAIl1C,KAAK2S,WAAaqB,cAClB,IAAoB,IAAAlE,EAAAC,EAAA/P,KAAK2S,SAASC,WAAS3C,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAxC,IAAM8gC,EAAK/yB,EAAA9N,MACR6gC,EAAMlM,UACNoe,EAAQ1yC,KAAKwgC,wGAKzB,OAAOkS,mCAUX11C,OAAAgC,eAAWozC,EAAA10C,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,WAAWC,+CAgBpBsU,EAAA10C,UAAAi1C,gBAAP,SAAuBl0C,EAAwBqR,GAC3C,OAAQrR,GACJ,KAAKm0C,GACL,KAAKA,GACDp1C,KAAKgzC,WAAWhzC,KAAKozC,YAAa9gC,KAYvCsiC,EAAA10C,UAAA8yC,WAAP,SAAkB9C,EAAoC59B,GAClDtS,KAAK+0C,YAAYxyB,KAAK,CAClB2tB,aAAYA,EACZmF,aAAc,KACdjzB,QAAQ,KAOhB5iB,OAAAgC,eAAWozC,EAAA10C,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK80C,kBAMhB,SAAuB74B,GACnBjc,KAAK80C,aAAe74B,mCAGd24B,EAAA10C,UAAAo1C,SAAV,SAAmB9tC,EAAqB+tC,OAChC5hC,GAAS,EACT3T,KAAK80C,eACLnhC,EAAQ4hC,GAA8Bv1C,KAAKozC,YAAYb,eAErDiD,EAAWx1C,KAAKy1C,oCAAoC9hC,EAAOnM,GACjExH,KAAK01C,aAAaF,IAGZZ,EAAA10C,UAAAu1C,oCAAV,SAA8CE,EAAoBnuC,GAG9D,QAFImM,EAAQgiC,EACNjD,EAAQ1yC,KAAK0yC,MACZA,EAAM/+B,EAAQnM,IAAckrC,EAAM/+B,EAAQnM,GAAWoqC,UACxDj+B,GAASnM,EAIb,OADAmM,GAASnM,IACI,GAAKmM,EAAQ++B,EAAM/xC,OACrBgT,GAEC,GAQTihC,EAAA10C,UAAAw1C,aAAP,SAAoBF,GAChB,IAAkB,IAAdA,EAAiB,KACXI,EAAU51C,KAAK80C,aACfe,EAAU71C,KAAK0yC,MAAM8C,GACvBI,IACAA,EAAQnD,SAAU,GAEtBzyC,KAAKozC,YAAcyC,EACnB71C,KAAK81C,mBAAmBD,GACxB71C,KAAKozC,YAAYX,SAAU,IAO5BmC,EAAA10C,UAAA61C,cAAP,WACI/1C,KAAKs1C,SAASU,GAASlG,MAAO,IAM3B8E,EAAA10C,UAAA+1C,aAAP,WACIj2C,KAAKs1C,SAASU,GAASnG,GAAI7vC,KAAK0yC,MAAM/xC,SAMnCi0C,EAAA10C,UAAAg2C,aAAP,WACIl2C,KAAKs1C,SAASU,GAASlG,OAMpB8E,EAAA10C,UAAAi2C,aAAP,WACIn2C,KAAKs1C,SAASU,GAASnG,KAGjB+E,EAAA10C,UAAA41C,mBAAV,SAA6BD,OACnB5T,EAAc4T,EAAQ/R,QAAQxD,cAAcpvB,wBAC5CklC,EAAap2C,KAAKo9B,gBAAgBlsB,wBACpCklC,EAAWzb,IAAMsH,EAAYtH,MAC7B36B,KAAKo9B,gBAAgB3B,WAAc2a,EAAWzb,IAAMsH,EAAYtH,KAGhEyb,EAAW5b,OAASyH,EAAYzH,SAChCx6B,KAAKo9B,gBAAgB3B,WAAcwG,EAAYzH,OAAS4b,EAAW5b,kDArSvD8I,EAAAA,kBAA6C2L,EAAAA,qDA6K5DC,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,8CAjIvBloB,EAAAA,sBAeAhd,EAAAA,sBAeAA,EAAAA,kBAeAA,EAAAA,yBAeAA,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,qCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0BAyLjB4mC,EAtRA,CAA8Cb,ICnB9CsC,GAAA,WAiCI,SAAAA,EAAmBzI,EAA+B0I,GAA/Bt2C,KAAA4tC,IAAAA,EAA+B5tC,KAAAs2C,eAAAA,EAP3Ct2C,KAAAi1C,SAAW,wBAGXj1C,KAAAu2C,YAAa,EAKxB,2BA1BCzE,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,wBACVqjC,SAAU,+RATV9C,EAAAA,yBAIAuH,EAAAA,kDAeCC,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE0oC,KAAMF,EAAAA,iBAAkBG,UAAQ,sBAKjExH,EAAAA,YAAWnhC,KAAA,CAAC,6BAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAMjBqoC,EAlCA,GCAAO,GAAA,WAwBI,SAAAA,EAAmBvW,EAA+BuN,GAA/B5tC,KAAAqgC,WAAAA,EAA+BrgC,KAAA4tC,IAAAA,EAV3C5tC,KAAA62C,aAAe,EAEf72C,KAAA82C,MAAQ,EA6BnB,OAxBIF,EAAA12C,UAAAwpC,SADA,SACSp3B,GACLtS,KAAK62C,aAAevkC,EAAMtR,OAAOy6B,WAAanpB,EAAMtR,OAAOs6B,YAI/D97B,OAAAgC,eAAIo1C,EAAA12C,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKqgC,WAAWC,+CAGpBsW,EAAA12C,UAAAsmC,YAAP,WACIxmC,KAAK+2C,WAAY,GAGrBv3C,OAAAgC,eAAWo1C,EAAA12C,UAAA,OAAI,KAQf,WACI,OAAOF,KAAK82C,WAThB,SAAgB30C,GACRnC,KAAK+2C,YAGT/2C,KAAK82C,MAAQ30C,EACbnC,KAAK4tC,IAAIrL,sEA7BhB9zB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEAPV40B,EAAAA,kBACA2L,EAAAA,uDAeCrgC,EAAAA,aAAYZ,KAAA,CAAC,SAAU,CAAC,cAyB7B4oC,EA7CA,GCMAI,GAAA,SAAAl9B,GAUI,SAAAk9B,EAAmB3W,EAA+BuN,GAAlD,IAAAh5B,EACIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAYuN,IAAI5tC,YADP4U,EAAAyrB,WAAAA,EAA+BzrB,EAAAg5B,IAAAA,EAF3Ch5B,EAAAqiC,WAAa,4BAKxB,OAT6Cj/B,EAAAA,EAAAA,uBAJ5C85B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,gCACVqjC,SAAU,kJARMzO,EAAAA,kBAA6D2L,EAAAA,mDAW5EwH,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE0oC,KAAMF,EAAAA,iBAAkBG,UAAQ,mBACpEhoC,EAAAA,0BACAwgC,EAAAA,YAAWnhC,KAAA,CAAC,YAMjBgpC,EAbA,CAI6CJ,mBCQzC,SAAAM,EAAmB7W,EAA+BuN,GAAlD,IAAAh5B,EACIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAYuN,IAAI5tC,YADP4U,EAAAyrB,WAAAA,EAA+BzrB,EAAAg5B,IAAAA,EAF3Ch5B,EAAAqiC,WAAa,0BAMxB,OAf4Cj/B,EAAAA,EAAAA,uBAJ3C85B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,qBACVqjC,SAAU,wIALMzO,EAAAA,kBAA6D2L,EAAAA,wDAQ5EE,EAAAA,YAAWnhC,KAAA,CAAC,2BAGZyoC,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMF,EAAAA,iBAAkBG,UAAQ,yBACzDhoC,EAAAA,0BAGAwgC,EAAAA,YAAWnhC,KAAA,CAAC,YAOjBkpC,GAf4CN,ICD5CO,GAAA,WAGI,SAAAA,EAAoBrT,EAA6B1E,GAA7Bp/B,KAAA8jC,QAAAA,EAA6B9jC,KAAAo/B,MAAAA,EAW1Cp/B,KAAAo3C,UAAY,GAGZp3C,KAAAq3C,YAAc,IAGdr3C,KAAAs3C,gBAAkB,GAGlBt3C,KAAAu3C,cAAgB,EAGhBv3C,KAAAw3C,cAAgB,EAGhBx3C,KAAAy3C,gBAAkB,GAUjBz3C,KAAA03C,cAAgB,GAShB13C,KAAA23C,uBAA6E,mBAA7CC,QAAQ13C,UAA+B,oBAC/E,sBACA,oBACQF,KAAA63C,2BAAqF,mBAAjDD,QAAQ13C,UAAmC,wBACvF,0BACA,wBAkbJ,OA7aIi3C,EAAAj3C,UAAA2uC,SAAA,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKo/B,MAAM0K,kBAAkB,eACnBgO,EAAaljC,EAAKkvB,QAAQxD,cAAcvD,eAAiBnoB,EAAKkvB,QAAQxD,cAAc2C,WAC1F6U,EAAWtT,iBAAiB,QACpB,SAACuT,GAAUnjC,EAAKojC,QAAQD,KAChCD,EAAWtT,iBAAiB,aACpB,SAACuT,GAAUnjC,EAAKqjC,aAAaF,KACrCD,EAAWtT,iBAAiB,YACpB,SAACuT,GAAUnjC,EAAKsjC,YAAYH,KACpCD,EAAWtT,iBAAiB,WACpB,SAACuT,GAAUnjC,EAAKujC,WAAWJ,KACnCD,EAAWtT,iBAAiB,cACpB,SAACuT,GAAUnjC,EAAKwjC,cAAcL,KACtCD,EAAWtT,iBAAiB,YACnB,SAACuT,GAAUnjC,EAAKyjC,YAAYN,KACrCD,EAAWtT,iBAAiB,iBACpB,SAACuT,GAAUnjC,EAAK0jC,iBAAiBP,KACzCD,EAAWtT,iBAAiB,kBACpB,SAACuT,GAAUnjC,EAAK2jC,kBAAkBR,QAQxCZ,EAAAj3C,UAAA83C,QAAV,SAAkBD,GAEd,GAAK/3C,KAAKw4C,gCAAV,KAGIC,EACAC,EACEC,EAAa34C,KAAKo3C,UAClBwB,EAAe,EAAI54C,KAAKo3C,UA+B9B,GA7BAp3C,KAAK64C,QAAU74C,KAAKw4C,gCAAgCld,WACpDt7B,KAAK84C,QAAU94C,KAAKw4C,gCAAgC/c,UAEhDsc,EAAIgB,aAKCH,GAFLH,GAAgBV,EAAIgB,YAAc,MAEEN,EAAeG,IAC/CH,EAAeh9B,KAAKu9B,KAAKP,GAAgBG,GAEtCb,EAAIkB,SAEXR,EAAez4C,KAAKk5C,eAAenB,EAAIkB,QAAS,EAAG,IAInDlB,EAAIoB,aAKCP,GAFLF,GAAgBX,EAAIoB,YAAc,MAEET,EAAeE,IAC/CF,EAAej9B,KAAKu9B,KAAKN,GAAgBE,GAEtCb,EAAIqB,SAEXV,EAAe14C,KAAKk5C,eAAenB,EAAIqB,QAAS,EAAG,IAEnDX,GAAmD,eAAnCz4C,KAAKq5C,0BAA4C,CACjEr5C,KAAKs5C,WACDt5C,KAAK64C,QAAUJ,EAAeE,OAE5BY,EAAgBv5C,KAAKw4C,gCAAgCld,WACrDke,EAAgBC,SAASz5C,KAAKw4C,gCAAgC7lC,SAAS,GAAGtP,MAAM4N,MAAO,IACzF,EAAIsoC,GAAiBA,EAAgBC,GAErCzB,EAAI9N,sBAEDyO,GAAmD,aAAnC14C,KAAKq5C,4BAC5Br5C,KAAK05C,WACD15C,KAAK84C,QAAUJ,EAAeC,GAElC34C,KAAK25C,oBAAoB5B,GAAK,MAQ5BZ,EAAAj3C,UAAAy5C,oBAAV,SAA8B5B,EAAK9N,OACzB2P,EAAe55C,KAAKw4C,gCAAgC/c,UACpDoe,EAAe75C,KAAKw4C,gCAAgC7lC,SAAS,GAAGg4B,aAClE3qC,KAAKw4C,gCAAgCsB,aACrC,EAAIF,GAAgBA,EAAeC,IAC/B5P,GACC8N,EAAI9N,iBAEL8N,EAAItT,iBACJsT,EAAItT,oBASN0S,EAAAj3C,UAAA+3C,aAAV,SAAuB3lC,GACnB,GAAyB,mBAAdynC,YAA6B/5C,KAAKw4C,gCACzC,OAAO,EAIXwB,qBAAqBh6C,KAAKi6C,yBAEpBC,EAAQ5nC,EAAM6nC,QAAS,GAE7Bn6C,KAAK64C,QAAU74C,KAAKw4C,gCAAgCld,WAEpDt7B,KAAK84C,QAAU94C,KAAKw4C,gCAAgC/c,UAEpDz7B,KAAKo6C,aAAeF,EAAMG,MAC1Br6C,KAAKs6C,aAAeJ,EAAMK,MAE1Bv6C,KAAKw6C,eAAgB,IAAIrqC,MAAOC,UAChCpQ,KAAKy6C,YAAcP,EAAMG,MACzBr6C,KAAK06C,YAAcR,EAAMK,MACzBv6C,KAAK03C,cAAgB,GACrB13C,KAAK26C,cAAgB,GAGrB36C,KAAK46C,aAAe,EACpB56C,KAAK66C,iBAAkB,EACvB76C,KAAK86C,iBAAmB,EAExB96C,KAAK+6C,iBAAkB,EACgB,aAAnC/6C,KAAKq5C,2BACLr5C,KAAK25C,oBAAoBrnC,GAAO,IAQ9B6kC,EAAAj3C,UAAAg4C,YAAV,SAAsB5lC,GAClB,GAAyB,mBAAdynC,UAEP,OADA/5C,KAAK+6C,iBAAkB,GAChB,EAEX,GAAK/6C,KAAKw4C,gCAAV,KAyCIwC,EArCEd,EAAQ5nC,EAAM6nC,QAAS,GACvBc,EAAQj7C,KAAK64C,SAAW74C,KAAKo6C,aAAeF,EAAMG,OAAS5+B,KAAKu9B,KAAKh5C,KAAKq3C,aAC1E6D,EAAQl7C,KAAK84C,SAAW94C,KAAKs6C,aAAeJ,EAAMK,OAAS9+B,KAAKu9B,KAAKh5C,KAAKq3C,aAM1E8D,GAAqB,IAAIhrC,MAAOC,UAAapQ,KAAKw6C,cACxD,GAA0B,IAAtBW,GAA2BA,EAAoB,IAAK,KAC9CC,GAAUp7C,KAAKy6C,YAAcP,EAAMG,OAASc,EAC5CE,GAAUr7C,KAAK06C,YAAcR,EAAMK,OAASY,EAG9Cn7C,KAAK03C,cAAc/2C,OAAS,EAC5BX,KAAK03C,cAAcl1C,KAAK44C,IAExBp7C,KAAK03C,cAAc4D,QACnBt7C,KAAK03C,cAAcl1C,KAAK44C,IAIxBp7C,KAAK26C,cAAch6C,OAAS,EAC5BX,KAAK26C,cAAcn4C,KAAK64C,IAExBr7C,KAAK26C,cAAcW,QACnBt7C,KAAK26C,cAAcn4C,KAAK64C,IAGhCr7C,KAAKw6C,eAAgB,IAAIrqC,MAAOC,UAChCpQ,KAAKu7C,YAAcv7C,KAAKy6C,YAAcP,EAAMG,MAC5Cr6C,KAAKw7C,YAAcx7C,KAAK06C,YAAcR,EAAMK,MAC5Cv6C,KAAKy6C,YAAcP,EAAMG,MACzBr6C,KAAK06C,YAAcR,EAAMK,MAEzBv6C,KAAK46C,cAAgB56C,KAAKu7C,YAItB9/B,KAAKutB,IAAIhpC,KAAK46C,cAAgB56C,KAAKs3C,kBAAoBt3C,KAAK66C,gBAC5DG,EAAah7C,KAAKy7C,UAAUz7C,KAAK64C,QAASqC,IAIrCl7C,KAAK66C,kBACN76C,KAAK86C,iBAAmBr/B,KAAKu9B,KAAKiC,EAAQj7C,KAAK64C,SAC/C74C,KAAK66C,iBAAkB,GAK3BG,EAAah7C,KAAKy7C,UAAUR,EAAQj7C,KAAK86C,iBAAmB96C,KAAKs3C,gBAC7D4D,IAGa,IAAjBF,EAAWl+B,GAA4B,IAAjBk+B,EAAW7gB,IACjCn6B,KAAK+6C,iBAAkB,GAIY,aAAnC/6C,KAAKq5C,2BACLr5C,KAAK25C,oBAAoBrnC,GAAO,KAI9B6kC,EAAAj3C,UAAAi4C,WAAV,SAAqB7lC,GACjB,GAAyB,mBAAdynC,UAAX,CAOA,QAJIqB,EAAS,EACTC,EAAS,EAGJ76C,EAAI,EAAGA,EAAIR,KAAK03C,cAAc/2C,OAAQH,IAC3C46C,GAAUp7C,KAAK03C,cAAel3C,GAC9B66C,GAAUr7C,KAAK26C,cAAen6C,GAElC46C,EAASp7C,KAAK03C,cAAc/2C,OAASy6C,EAASp7C,KAAK03C,cAAc/2C,OAAS,EAC1E06C,EAASr7C,KAAK03C,cAAc/2C,OAAS06C,EAASr7C,KAAK26C,cAAch6C,OAAS,GAGrE8a,KAAKutB,IAAIoS,GAAU,IAAO3/B,KAAKutB,IAAIqS,GAAU,MACjC5/B,KAAKutB,IAAIhpC,KAAKu7C,aAAe,GAAK9/B,KAAKutB,IAAIhpC,KAAKw7C,aAAe,IACpEx7C,KAAK07C,aAAaN,EAAQC,GAEC,aAAnCr7C,KAAKq5C,2BACLr5C,KAAK25C,oBAAoBrnC,GAAO,KAQ9B6kC,EAAAj3C,UAAAk4C,cAAV,SAAwB9lC,GACpB,IAAKA,GAAgC,IAAtBA,EAAMqpC,aAA2C,UAAtBrpC,EAAMqpC,aACvB,mBAAd5B,UACP,OAAO,EAEN/5C,KAAKw4C,kCAIVlmC,EAAMtR,OAAOhB,KAAK23C,wBAAwB33C,KAAK47C,SAAWtpC,EAAMupC,WAG3D77C,KAAK87C,iBACN97C,KAAK87C,eAAiB,IAAI/B,UAC1B/5C,KAAK87C,eAAe96C,OAAShB,KAAK8jC,QAAQxD,cAAcvD,eAAiB/8B,KAAK8jC,QAAQxD,cAAc2C,YAExGjjC,KAAK87C,eAAeC,WAAW/7C,KAAK47C,YAO9BzE,EAAAj3C,UAAAm4C,YAAV,SAAsB/lC,GAClB,IAAKtS,KAAK47C,SACN,OAAO,EAEN57C,KAAKw4C,kCAIVlmC,EAAMtR,OAAQhB,KAAK63C,4BAA6B73C,KAAK47C,iBAE9C57C,KAAK47C,WAONzE,EAAAj3C,UAAAo4C,iBAAV,SAA2BhmC,GACvB,GAAKtS,KAAKw4C,gCAcV,OAXAx4C,KAAK64C,QAAU74C,KAAKw4C,gCAAgCld,WACpDt7B,KAAK84C,QAAU94C,KAAKw4C,gCAAgC/c,UAGpDz7B,KAAKo6C,aAAe9nC,EAAM0pC,QAC1Bh8C,KAAKs6C,aAAehoC,EAAM2pC,QAG1Bj8C,KAAK46C,aAAe,EACpB56C,KAAK66C,iBAAkB,EACvB76C,KAAK86C,iBAAmB,GACjB,GAOD3D,EAAAj3C,UAAAq4C,kBAAV,SAA4BjmC,GACxB,GAAKtS,KAAKw4C,gCAAV,KAGM0D,EAAW5pC,EACb2oC,EAAQj7C,KAAK64C,QAAU74C,KAAKo6C,aAAe8B,EAASF,QACpDd,EAAQl7C,KAAK84C,QAAU94C,KAAKs6C,aAAe4B,EAASD,QAexD,OAbAj8C,KAAK46C,aAAe56C,KAAKo6C,aAAe8B,EAASF,QAC7CvgC,KAAKutB,IAAIhpC,KAAK46C,cAAgB56C,KAAKs3C,kBAAoBt3C,KAAK66C,gBAE5D76C,KAAK05C,WAAWwB,IAEXl7C,KAAK66C,kBACN76C,KAAK86C,iBAAmBr/B,KAAKu9B,KAAKiC,EAAQj7C,KAAK64C,SAC/C74C,KAAK66C,iBAAkB,GAG3B76C,KAAKy7C,UAAUR,EAAQj7C,KAAK86C,iBAAmB96C,KAAKs3C,gBAAiB4D,KAGlE,IAGH/D,EAAAj3C,UAAAg5C,eAAR,SAAuBl4C,EAAQioC,EAAK5e,GAOhC,OANIrpB,IAAWgT,WAAahT,EAASioC,EACjCjoC,EAASioC,EACFjoC,EAASqpB,IAChBrpB,EAASqpB,GAGNrpB,GAGHm2C,EAAAj3C,UAAAu7C,UAAR,SAAkBR,EAAOC,GACLl7C,KAAKw4C,gCAAgCld,WACrCt7B,KAAKw4C,gCAAgC/c,UAMrD,MAAO,CAAE3e,EAHS9c,KAAKs5C,WAAW2B,GAGX9gB,EAFLn6B,KAAK05C,WAAWwB,KAI9B/D,EAAAj3C,UAAAo5C,WAAR,SAAmB6C,GACfn8C,KAAKw4C,gCAAgCld,WAAa6gB,GAE9ChF,EAAAj3C,UAAAw5C,WAAR,SAAmByC,GACfn8C,KAAKw4C,gCAAgC/c,UAAY0gB,GAG5ChF,EAAAj3C,UAAAw7C,aAAV,SAAuBN,EAAQC,GAA/B,IAAAzmC,EAAA5U,KACOo8C,EAAcp8C,KAAKq3C,YACrBI,EAAkBz3C,KAAKy3C,gBACvB36B,EAAI,EACR9c,KAAKq8C,OAASr8C,KAAKw4C,gCAAgCld,WACnDt7B,KAAKs8C,OAASt8C,KAAKw4C,gCAAgC/c,cAG7C4b,EAAc,WACZv6B,EAAI,EACJk9B,qBAAqBplC,EAAKqlC,sBAI1Bx+B,KAAKutB,IAAIoS,GAAU3/B,KAAKutB,IAAIqS,IAC5Bv+B,GAAK,KAAQ,EAAI26B,KAKZ,GAEDh8B,KAAKutB,IAAIqS,IAAW5/B,KAAKutB,IAAIoS,GAAUxmC,EAAK2iC,gBAC5C3iC,EAAKynC,QAAU,EAAIjB,EAAS,GAAKgB,GAEjC3gC,KAAKutB,IAAIqS,IAAW5/B,KAAKutB,IAAIoS,GAAUxmC,EAAK4iC,gBAC5C5iC,EAAK0nC,QAAU,EAAIjB,EAAS,GAAKe,KAIjC3gC,KAAKutB,IAAIqS,IAAW5/B,KAAKutB,IAAIoS,GAAUxmC,EAAK2iC,gBAC5C3iC,EAAKynC,QAAU5gC,KAAKutB,IAAI,GAAKlsB,EAAI,KAAQ,IAAOs+B,EAAS,GAAKgB,GAE9D3gC,KAAKutB,IAAIqS,IAAW5/B,KAAKutB,IAAIoS,GAAUxmC,EAAK4iC,gBAC5C5iC,EAAK0nC,QAAU7gC,KAAKutB,IAAI,GAAKlsB,EAAI,KAAQ,IAAOu+B,EAAS,GAAKe,IAKtExnC,EAAK6mC,UAAU7mC,EAAKynC,OAAQznC,EAAK0nC,QAEjC1nC,EAAKqlC,oBAAsBsC,sBAAsBlF,KAIrDr3C,KAAKi6C,oBAAsBsC,sBAAsBlF,IAGjDF,EAAAj3C,UAAAsmC,YAAA,WAAA,IAAA5xB,EAAA5U,KACIA,KAAKo/B,MAAM0K,kBAAkB,eACnBgO,EAAaljC,EAAKkvB,QAAQxD,cAAcvD,eAAiBnoB,EAAKkvB,QAAQxD,cAAc2C,WAC1F6U,EAAWzR,oBAAoB,QAC3B,SAAC0R,GAAUnjC,EAAKojC,QAAQD,KAC5BD,EAAWzR,oBAAoB,aAC3B,SAAC0R,GAAUnjC,EAAKqjC,aAAaF,KACjCD,EAAWzR,oBAAoB,YAC3B,SAAC0R,GAAUnjC,EAAKsjC,YAAYH,KAChCD,EAAWzR,oBAAoB,WAC3B,SAAC0R,GAAUnjC,EAAKujC,WAAWJ,KAC/BD,EAAWzR,oBAAoB,cAC3B,SAAC0R,GAAUnjC,EAAKwjC,cAAcL,KAClCD,EAAWzR,oBAAoB,YAC3B,SAAC0R,GAAUnjC,EAAKyjC,YAAYN,KAChCD,EAAWzR,oBAAoB,iBAC3B,SAAC0R,GAAUnjC,EAAK0jC,iBAAiBP,KACrCD,EAAWzR,oBAAoB,kBAC3B,SAAC0R,GAAUnjC,EAAK2jC,kBAAkBR,4BAnejDtpC,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,kEANI40B,EAAAA,kBAAYyD,EAAAA,6DAalCp4B,EAAAA,+CAGAA,EAAAA,yBAGAA,EAAAA,2BAGAA,EAAAA,+BAGAA,EAAAA,6BAGAA,EAAAA,6BAGAA,EAAAA,+BAGAA,EAAAA,SA2cLwoC,EAveA,GA4eAqF,GAAA,WAAA,SAAAA,KAOA,2BAPCxtC,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACkoC,IACfjoC,QAAS,CAACioC,IACVsF,QAAS,CAACC,EAAAA,kBAIdF,EAPA,GClfAG,GAAA,WAIA,SAAAA,IAKY38C,KAAA48C,QAAmD,IAAItsC,WAKxDqsC,EAAAz8C,UAAA28C,SAAP,SAAgBC,GACZ,OAAO98C,KAAK48C,QAAQ9uC,IAAIgvC,EAAUC,2BAA6BD,GAM5DH,EAAAz8C,UAAA88C,UAAP,SAAiBF,EAAuCG,QAAA,IAAAA,IAAAA,GAAA,OAC9CC,EAAcJ,EAAUC,yBAC1BG,IAAgBD,GAAWj9C,KAAK48C,QAAQ1L,IAAIgM,IAC5Cl9C,KAAK48C,QAAQl0B,IAAIw0B,EAAaJ,IAO/BH,EAAAz8C,UAAAi9C,YAAP,WACIn9C,KAAK48C,QAAQrR,SAMVoR,EAAAz8C,UAAAk9C,WAAP,SAAkB3oC,GACd,OAAOzU,KAAK48C,QAAQ9uC,IAAI2G,GAAK2oC,YAM1BT,EAAAz8C,UAAAm9C,UAAP,SAAiB5oC,GACb,OAAOzU,KAAK48C,QAAQ9uC,IAAI2G,GAAKlG,MAAM8uC,+BA1C1CrrC,EAAAA,WAAUhE,KAAA,CAAC,CACRiE,WAAY,kHALhB,iBAkDA,SAAAqrC,IAIYt9C,KAAAu9C,cAAyD,IAAIjtC,WAC9DgtC,EAAAp9C,UAAAs9C,gBAAP,SAAuB/oC,EAAagpC,GAChCz9C,KAAKu9C,cAAc70B,IAAIjU,EAAKgpC,IAGzBH,EAAAp9C,UAAAw9C,gBAAP,SAAuBjpC,GACnB,OAAOzU,KAAKu9C,cAAczvC,IAAI2G,wBAVrCzC,EAAAA,WAAUhE,KAAA,CAAC,CACRiE,WAAY,mICRZ,SAAA0rC,EACUC,EACAjqC,EACA2e,GAFAtyB,KAAA49C,UAAAA,EACA59C,KAAA2T,MAAAA,EACA3T,KAAAsyB,MAAAA,EAuBd,OAjBI9yB,OAAAgC,eAAIm8C,EAAAz9C,UAAA,QAAK,KAAT,WAAuB,OAAsB,IAAfF,KAAK2T,uCAKnCnU,OAAAgC,eAAIm8C,EAAAz9C,UAAA,OAAI,KAAR,WAAsB,OAAOF,KAAK2T,QAAU3T,KAAKsyB,MAAQ,mCAKzD9yB,OAAAgC,eAAIm8C,EAAAz9C,UAAA,OAAI,KAAR,WAAsB,OAAOF,KAAK2T,MAAQ,GAAM,mCAKhDnU,OAAAgC,eAAIm8C,EAAAz9C,UAAA,MAAG,KAAP,WAAqB,OAAQF,KAAK69C,sCAEtCF,KAEAG,GAAA,WAiOI,SAAAA,EACYxH,EACEyH,EACAC,EACFC,EACDrQ,EACGxO,EACA8e,GANFl+C,KAAAs2C,eAAAA,EACEt2C,KAAA+9C,UAAAA,EACA/9C,KAAAg+C,SAAAA,EACFh+C,KAAAi+C,SAAAA,EACDj+C,KAAA4tC,IAAAA,EACG5tC,KAAAo/B,MAAAA,EACAp/B,KAAAk+C,kBAAAA,EA9MPl+C,KAAA+8C,wBAA0B,WA4D1B/8C,KAAAuO,MAAqB,CACxBonC,WAAY,EACZ0H,UAAW,GAQRr9C,KAAAm+C,eAAyB,KAczBn+C,KAAAo+C,YAAc,IAAIj1B,EAAAA,aAOlBnpB,KAAAq+C,6BAA+B,IAAIl1B,EAAAA,aAMnCnpB,KAAAs+C,oBAAsB,IAAIn1B,EAAAA,aAc1BnpB,KAAAu+C,cAAgB,IAAIp1B,EAAAA,aAGpBnpB,KAAAw+C,sBAAwB,IAAIr1B,EAAAA,aAe5BnpB,KAAAy+C,eAAiB,IAAIt1B,EAAAA,aAElBnpB,KAAA0+C,YAAwB,GAExB1+C,KAAA2+C,QAAoC,KAEpC3+C,KAAA4+C,YAAc,GAEhB5+C,KAAA6+C,qBAAuB,EAqCrB7+C,KAAA8+C,YAAc,EAMhB9+C,KAAA++C,iBAAmB,EAGjB/+C,KAAAg/C,eAAiB,EAGjBh/C,KAAAi/C,kBAAmB,EAGnBj/C,KAAAk/C,eAA8C,GAE9Cl/C,KAAAm/C,oBAAsB,IAAI3f,EAAAA,QAM1Bx/B,KAAAu/B,SAAW,IAAIC,EAAAA,QAs/B7B,OA/iCIhgC,OAAAgC,eAAWs8C,EAAA59C,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,+CAGnD9gC,OAAAgC,eAAWs8C,EAAA59C,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKq/C,gBAAgB/e,+CAGhC9gC,OAAAgC,eAAcs8C,EAAA59C,UAAA,aAAU,KAAxB,WACI,OAAOF,KAAK0+C,iBAEhB,SAAyBv8C,GACrBnC,KAAK0+C,YAAcv8C,mCAGvB3C,OAAAgC,eAAYs8C,EAAA59C,UAAA,sBAAmB,KAA/B,WACI,IAAKF,KAAKs/C,YACN,OAAO,MAEL3U,EAAe3qC,KAAKs/C,YAAY3U,aAGtC,OAAOlvB,KAAK4rB,MAAMrnC,KAAKs/C,YAAY7jB,UAAYz7B,KAAKu/C,uBAAyB5U,mCAGjFnrC,OAAAgC,eAAYs8C,EAAA59C,UAAA,mBAAgB,KAA5B,WACI,OAAOF,KAAKw/C,UAAYx/C,KAAKuO,MAAMonC,WAAa31C,KAAKuO,MAAM8uC,UAAYr9C,KAAKw/C,SAAS7+C,wCA6CzFnB,OAAAgC,eAAcs8C,EAAA59C,UAAA,WAAQ,KAAtB,WACI,OAA+B,OAAxBF,KAAKm+C,gDAWhB3+C,OAAAgC,eAAWs8C,EAAA59C,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKq/C,gBAAgBxI,kBAEhC,SAA0Bv9B,GAClBA,IAAQtZ,KAAKq/C,gBAAgBxI,eAGI,eAAjC72C,KAAK+8C,yBAA4C/8C,KAAKq/C,gBACtDr/C,KAAKq/C,gBAAgB/e,cAAchF,WAAahiB,EACzCtZ,KAAKq/C,kBACZr/C,KAAKq/C,gBAAgB/e,cAAc7E,UAAYniB,qCAO7CwkC,EAAA59C,UAAAu/C,2BAAV,WAAA,IAAA7qC,EAAA5U,KACyC,eAAjCA,KAAK+8C,wBACL/8C,KAAKo/B,MAAM0K,kBAAkB,WACzB,OAAAl1B,EAAKyqC,gBAAgB/e,cAAc+F,oBAAoB,SAAUzxB,EAAK8qC,QAG1E1/C,KAAKo/B,MAAM0K,kBAAkB,WACzB,OAAAl1B,EAAKyqC,gBAAgB/e,cAAc+F,oBAAoB,SAAUzxB,EAAK+qC,0BAK3E7B,EAAA59C,UAAAy/C,sBAAP,SAA6BrtC,GACzBtS,KAAK0pC,SAASp3B,IAGXwrC,EAAA59C,UAAA0/C,aAAP,WACI,OAAO5/C,KAAKq/C,gBAAgBziB,KAAO6c,SAASz5C,KAAKu/C,oBAAqB,KAMnEzB,EAAA59C,UAAA2uC,SAAP,WAAA,IAAAj6B,EAAA5U,KACQ6/C,EAAY,EACVC,EAAK9/C,KAAK+/C,sBAAwB//C,KAAK+/C,sBAAsBzJ,eAAiBt2C,KAAKs2C,eACzFt2C,KAAKggD,mBAAqBhgD,KAAKggD,oBAAsB,YAE/CC,EAAyDjgD,KAAKi+C,SAASva,wBAAwB2S,IAOrG,GANAr2C,KAAKo/C,GAAKp/C,KAAKs2C,eAAe4J,gBAAgBD,EAAW,GACzDjgD,KAAKo/C,GAAG/qC,SAAS8rC,gBAAkBngD,KAAK+8C,wBACf,mBAAdhD,YAEP/5C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAM+8C,YAAc,QAE1EpgD,KAAKw/C,UAAYx/C,KAAKw/C,SAAS7+C,OAAQ,CACvCk/C,EAAY7/C,KAAKqgD,eAAergD,KAAKw/C,UACrCx/C,KAAKq/C,gBAAkBr/C,KAAKk+C,kBAAkBR,gBAAgB19C,KAAK+8C,yBACnE/8C,KAAKuO,MAAM8uC,UAAYr9C,KAAKsgD,sBAC5BtgD,KAAKo/C,GAAG/qC,SAASkiC,aAAev2C,KAAKu/C,qBAAuBv/C,KAAKuO,MAAM8uC,UAAYr9C,KAAKw/C,SAAS7+C,QAC7FX,KAAKq/C,kBAAoBr/C,KAAKq/C,gBAAgBtI,YAC9C/2C,KAAKuO,MAAMonC,WAAal6B,KAAKwtB,IAAIjpC,KAAKugD,WAAWvgD,KAAKk7B,eAAgBl7B,KAAKo9C,WAAY,GACnFp9C,KAAKw/C,SAAS7+C,OAASX,KAAKuO,MAAM8uC,YAE1C,IAAK,IAAI78C,EAAIR,KAAKuO,MAAMonC,WAAYn1C,EAAIR,KAAKuO,MAAMonC,WAAa31C,KAAKuO,MAAM8uC,WACnEr9C,KAAKw/C,SAASh/C,KAAOwT,UAAWxT,IAAK,KACnCggD,EAAQxgD,KAAKw/C,SAASh/C,GACtBigD,EAAezgD,KAAKo/C,GAAG/qC,SAASqsC,KAAKC,mBACvC3gD,KAAK+9C,UACL,IAAIJ,GAAmB6C,EAAOxgD,KAAK4gD,gBAAgBJ,GAAQxgD,KAAKw/C,SAAS7+C,SAE7EX,KAAKk/C,eAAe18C,KAAKi+C,IAIjC,GAAqC,aAAjCzgD,KAAK+8C,wBAAwC,CAC7C/8C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAM,UAC5DkmB,EAAoD7gD,KAAKi+C,SAASva,wBAAwBwT,IAChGl3C,KAAKq/C,gBAAkBS,EAAGI,gBAAgBW,GAASxsC,SACnDrU,KAAK8gD,WAAa9gD,KAAK+gD,wBACvB/gD,KAAKq/C,gBAAgBziB,KAAO58B,KAAKw/C,SAAWx/C,KAAKghD,cAAgB,EACjEhhD,KAAKk+C,kBAAkBV,gBAAgBx9C,KAAK+8C,wBAAyB/8C,KAAKq/C,iBAC1Er/C,KAAKo/B,MAAM0K,kBAAkB,WACzBl1B,EAAK+qC,sBAAwB/qC,EAAK+qC,sBAAsBsB,KAAKrsC,GAC7DA,EAAKyqC,gBAAgB/e,cAAckE,iBAAiB,SAAU5vB,EAAK+qC,uBACnE/qC,EAAKwqC,GAAG/qC,SAAS+oB,gBAAkBxoB,EAAKyqC,gBAAgB/e,oBAEtD4gB,EAAapc,EAAAA,UAAe9kC,KAAKu/B,UACvCv/B,KAAKm/C,oBAAoBta,KAAKqc,EAC9BlnC,EAAAA,OAAO,WAAM,OAAApF,EAAK2qC,qBAAuB3qC,EAAK4qC,UAAY5qC,EAAK4qC,SAAS7+C,OAAS,IAChFwgD,EAAAA,aAAa,GAAIntC,UAAW,CAACotC,SAAS,EAAMC,UAAU,KACtDtc,UAAU,WACPnwB,EAAKwqB,MAAMkiB,QAAQ,WACf1sC,EAAK2sC,kBAKjB,GAAqC,eAAjCvhD,KAAK+8C,wBAA0C,CAG/C,GAFA/8C,KAAK0/C,KAAO,SAAC3H,GAAUnjC,EAAK4sC,UAAUzJ,IACtC/3C,KAAKq/C,gBAAkBr/C,KAAKk+C,kBAAkBR,gBAAgB19C,KAAK+8C,yBAC9D/8C,KAAKq/C,gBAWNr/C,KAAKo/B,MAAM0K,kBAAkB,WACzBl1B,EAAKyqC,gBAAgB/e,cAAckE,iBAAiB,SAAU5vB,EAAK8qC,MACnE9qC,EAAKwqC,GAAG/qC,SAAS+oB,gBAAkBxoB,EAAKyqC,gBAAgB/e,oBAbrC,KACjBmhB,EACFzhD,KAAKi+C,SAASva,wBAAwBsT,IAC1Ch3C,KAAKq/C,gBAAkBS,EAAGI,gBAAgBuB,GAAWptC,SACrDrU,KAAKq/C,gBAAgBziB,KAAOijB,EAC5B7/C,KAAKk+C,kBAAkBV,gBAAgBx9C,KAAK+8C,wBAAyB/8C,KAAKq/C,iBAC1Er/C,KAAKo/B,MAAM0K,kBAAkB,WACzBl1B,EAAKyqC,gBAAgB/e,cAAckE,iBAAiB,SAAU5vB,EAAK8qC,MACnE9qC,EAAKwqC,GAAG/qC,SAAS+oB,gBAAkBxoB,EAAKyqC,gBAAgB/e,gBAQhEtgC,KAAK0hD,yBAIb5D,EAAA59C,UAAAyhD,gBAAA,WAAA,IAAA/sC,EAAA5U,KACyC,aAAjCA,KAAK+8C,yBACL/8C,KAAKo/B,MAAM0K,kBAAkB,WACzBl1B,EAAKgtC,gBAAkB,IAAIC,EAAe,WAAM,OAAAjtC,EAAKuqC,oBAAoBj9C,SACzE0S,EAAKgtC,gBAAgBE,QAAQltC,EAAKwqC,GAAG/qC,SAASiiC,eAAexS,QAAQxD,kBAQ1Ewd,EAAA59C,UAAAsmC,YAAP,WACIxmC,KAAKy/C,6BACLz/C,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,WACVzmC,KAAK4hD,iBACL5hD,KAAK4hD,gBAAgBG,cAOtBjE,EAAA59C,UAAA8hD,YAAP,SAAmBC,GAEf,GADc,aACDA,EAAS,KACZ9/C,EAAQ8/C,EAAa,SAAEC,aAC7B,IAAKliD,KAAK2+C,SAAWx8C,EACjB,IACInC,KAAK2+C,QAAU3+C,KAAKg+C,SAAS1mC,KAAKnV,GAAOhC,OAAOH,KAAKmiD,eACvD,MAAO7/C,GACL,MAAM,IAAIuN,MACN,2CAA2C1N,EAAK,cAAcigD,GAAwBjgD,GAAM,sFAKpF,mBACD8/C,IAAYA,EAAuB,eAAEI,aACvB,aAAjCriD,KAAK+8C,yBAA0C/8C,KAAKw/C,WAEpDx/C,KAAKqgD,eAAergD,KAAKw/C,UACzBx/C,KAAKsiD,iBAEa,wBACDL,IAAYA,EAAqB,oBAAEI,aAAeriD,KAAKw/C,UACxEx/C,KAAKuiD,yBAAyBN,IAO/BnE,EAAA59C,UAAA0yC,UAAP,WAAA,IAAAh+B,EAAA5U,KACQA,KAAK2+C,UACW3+C,KAAK2+C,QAAQ6D,KAAKxiD,KAAKw/C,YAG9Bx/C,KAAKw/C,WACNx/C,KAAKw/C,SAAW,IAEpBx/C,KAAKyiD,mBACLziD,KAAKo/B,MAAMsjB,IAAI,WACX9tC,EAAK0tC,gBACL1tC,EAAKg5B,IAAI+U,eACT/tC,EAAKguC,sBACLhuC,EAAK2pC,cAAch8B,YAa5Bu7B,EAAA59C,UAAA2iD,aAAP,SAAoBC,GAChB,GAAe,IAAXA,GAAiD,eAAjC9iD,KAAK+8C,wBACrB,OAAO,MAELgG,EAAwB/iD,KAAKg/C,eAC7BgE,EAAgBvJ,SAASz5C,KAAKu/C,oBAAqB,IACnD0D,EAAmBjjD,KAAK8+C,YAAckE,EAS5C,GAPAhjD,KAAKi/C,kBAAmB,EACxBj/C,KAAKg/C,gBAAkB8D,EACvB9iD,KAAKg/C,eAAiBh/C,KAAKg/C,eAAiB,EACvCh/C,KAAKg/C,eAAiBiE,EAAmBjjD,KAAKg/C,eAAiBiE,EAChE,EAEJjjD,KAAKk7B,gBAAkB4nB,EAAS9iD,KAAK++C,iBACjCtjC,KAAKutB,IAAI8Z,EAAS9iD,KAAK++C,kBAAoB,EAAG,KAExCmE,EAAeljD,KAAKmjD,uBAAuBnjD,KAAKg/C,gBAEtDh/C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,KAAM,EAAkB,SAGlFyoB,EAAmBpjD,KAAKq/C,gBAAgB/e,cAAcqK,aAAeqY,EAa3E,OAZKhjD,KAAKg/C,eAAiB,GAA6B,IAAxBh/C,KAAKk7B,gBAChCl7B,KAAKg/C,eAAiBiE,GAAoBjjD,KAAKk7B,iBAAmBkoB,EAGnEpjD,KAAKk7B,eAAiBl7B,KAAKg/C,eAAiBh/C,KAAK++C,iBAClB,IAAxB/+C,KAAKg/C,gBAAwBh/C,KAAKk7B,eAAiB,EAE1Dl7B,KAAKk7B,eAAiB,EACfl7B,KAAKg/C,iBAAmBiE,GAAoBjjD,KAAKk7B,eAAiBkoB,IAEzEpjD,KAAKk7B,eAAiBkoB,GAEnBpjD,KAAKg/C,iBAAmB+D,GAU5BjF,EAAA59C,UAAAmjD,SAAP,SAAgB1vC,GACZ,KAAIA,EAAQ,GAAKA,GAAS3T,KAAKsjD,SAAWtjD,KAAKm+C,eAAiBn+C,KAAKw/C,SAAS7+C,QAAU,GAAxF,KAGMqiD,EAAgBvJ,SAASz5C,KAAKu/C,oBAAqB,IACnDgE,EAAa5vC,EAAQ3T,KAAKuO,MAAMonC,YAAc31C,KAAKk7B,eAAiBl7B,KAAKo9C,WAAWzpC,GACtF6vC,EAAaD,EAAavjD,KAAKo9C,WAAWzpC,GAAS3T,KAAKo9C,WAAWzpC,EAAQ,GAAKqvC,EACpF,KAAIQ,EAAa,GAGjB,GAAqC,eAAjCxjD,KAAK+8C,wBACL/8C,KAAKk7B,eAAiBsoB,MACnB,KACGP,EAAmBjjD,KAAK8+C,YAAckE,EACxCQ,EAAaP,IACbO,EAAaP,GAEjBjjD,KAAKi/C,kBAAmB,EACxBj/C,KAAKg/C,eAAiBwE,EACtBxjD,KAAKk7B,eAAiBl7B,KAAKg/C,eAAiBh/C,KAAK++C,iBACjD/+C,KAAKyjD,eAAkBF,EAAqB,KAAR5vC,KAWrCmqC,EAAA59C,UAAAwjD,WAAP,eACUC,EAAMloC,KAAKC,KAAK1b,KAAKk7B,gBACrB0oB,EAAW5jD,KAAKugD,WAClBoD,EAAMlK,SAASz5C,KAAKu/C,oBAAqB,IACzCv/C,KAAKo9C,WACL,GAEJp9C,KAAKqjD,SAASO,IAUX9F,EAAA59C,UAAA2jD,WAAP,WACI7jD,KAAKqjD,SAASrjD,KAAKuO,MAAMonC,WAAa,IAUnCmI,EAAA59C,UAAA4jD,eAAP,WACyC,eAAjC9jD,KAAK+8C,wBACL/8C,KAAKk7B,gBAAkBue,SAASz5C,KAAKu/C,oBAAqB,IAE1Dv/C,KAAK6iD,aAAapJ,SAASz5C,KAAKu/C,oBAAqB,MAWtDzB,EAAA59C,UAAA6jD,eAAP,WACI,GAAqC,eAAjC/jD,KAAK+8C,wBACL/8C,KAAKk7B,gBAAkBue,SAASz5C,KAAKu/C,oBAAqB,QACvD,KACGyD,EAAiBvJ,SAASz5C,KAAKu/C,oBAAqB,IAC1Dv/C,KAAK6iD,cAAcG,KAOpBlF,EAAA59C,UAAA8jD,oBAAP,SAA2BC,GACvB,OAAOjkD,KAAKo9C,WAAW6G,IASpBnG,EAAA59C,UAAAgkD,mBAAP,eACQvO,EAAa31C,KAAKugD,WAClBvgD,KAAKk7B,eACLl7B,KAAKo9C,WACL,GAWJ,OATIp9C,KAAKk7B,eAAiBl7B,KAAKo9C,WAAWzH,GAAc,GAEpDA,IAEa31C,KAAKugD,WAClBvgD,KAAKk7B,eAAiBue,SAASz5C,KAAKu/C,oBAAqB,IACzDv/C,KAAKo9C,WACL,GAEczH,GAUfmI,EAAA59C,UAAAo/C,UAAP,WACI,OAAOt/C,KAAKq/C,gBAAgB/e,eAQzBwd,EAAA59C,UAAAikD,UAAP,SAAiBxwC,GACb,OAAO3T,KAAKo9C,WAAWzpC,EAAQ,GAAK3T,KAAKo9C,WAAWzpC,IASjDmqC,EAAA59C,UAAAkkD,kBAAP,SAAyBzwC,EAAe6mB,OAC9BwoB,EAAgBvJ,SAASz5C,KAAKu/C,oBAAqB,IAEzD,OADe/kB,EAAS/e,KAAK4O,IAAI,EAAGrqB,KAAKo9C,WAAWzpC,EAAQ,GAAKqvC,GAAiBhjD,KAAKo9C,WAAWzpC,IAQ5FmqC,EAAA59C,UAAAwpC,SAAV,SAAmBp3B,GAEf,GAAKmnC,SAASz5C,KAAKq/C,gBAAgB/e,cAAcj9B,MAAM8J,OAAQ,IAA/D,KAIM61C,EAAgBvJ,SAASz5C,KAAKu/C,oBAAqB,IACnD6D,EAAmB9wC,EAAMtR,OAAO2R,SAAS,GAAGg4B,aAAeqY,EAC3DqB,EAA2C,IAArBjB,EAA0B9wC,EAAMtR,OAAOy6B,UAAY2nB,EAAmB,EAClG,GAAKpjD,KAAKi/C,iBAINj/C,KAAKi/C,kBAAmB,MAJA,KAClBgE,EAAmBjjD,KAAK8+C,YAAckE,EAC5ChjD,KAAKg/C,eAAiBqF,EAAsBpB,MAI1CqB,EAAiBtkD,KAAKuO,MAAMonC,WAC5BuN,EAAeljD,KAAKmjD,uBAAuBnjD,KAAKg/C,gBAEtDh/C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,KAAM,EAAkB,KAEpF36B,KAAKo/C,GAAG9c,kBAAkBC,gBACtB+hB,IAAmBtkD,KAAKuO,MAAMonC,YAC9B31C,KAAKo+C,YAAY77B,KAAKviB,KAAKuO,SAIzBuvC,EAAA59C,UAAAqhD,YAAV,WACIvhD,KAAKukD,oBACLvkD,KAAKsiD,gBACLtiD,KAAK4iD,sBACL5iD,KAAKs+C,oBAAoB/7B,QAOtBu7B,EAAA59C,UAAAqkD,kBAAP,WAQI,QAPM5yB,EAA6C,eAAjC3xB,KAAK+8C,wBACnB/8C,KAAKggD,mBAAqB,SACxBwE,EAAQ,GACVC,EAAY,EACVC,EAAI1kD,KAAKk/C,eAAev+C,OACxBgkD,EAAS3kD,KAAKk/C,eAAe5iC,IAAI,SAAA+C,GACnC,OAAAA,EAAKulC,UAAUttC,KAAK,SAAAzG,GAAQ,OAAAA,EAAKg0C,WAAaC,KAAKC,gBAAiB1lC,EAAKulC,UAAU,GAAGI,qBACjFxkD,EAAI,EAAGA,EAAIkkD,EAAGlkD,IAAK,KAClBykD,EAAQN,EAAOnkD,GACrB,GAAIykD,EAAO,KACDC,EAAID,EAAMnL,cAAgBL,SAASz5C,KAAKmlD,eAAgB,IACxDxxC,EAAQ3T,KAAKuO,MAAMonC,WAAan1C,EACtC,IAAKR,KAAKsjD,WAAatjD,KAAKw/C,SAAS7rC,GACjC,aAEEyxC,EAAuB,WAAdzzB,EAAyB3xB,KAAK4+C,YAAYjrC,GAAS3T,KAAKw/C,SAAS7rC,GAAOge,GACjF0zB,EAAuB,WAAd1zB,EAAyBuzB,EAAID,EAAMjqB,YAChC,WAAdrJ,EACA3xB,KAAK4+C,YAAYjrC,GAAS0xC,EAE1BrlD,KAAKw/C,SAAS7rC,GAAOge,GAAa0zB,MAEhCC,EAAWD,EAASD,EAC1BZ,EAAMhiD,KAAK8iD,GACXb,GAAaa,EACbtlD,KAAKo9C,WAAWzpC,EAAQ,IAAM8wC,GAItC,GAAIhpC,KAAKutB,IAAIyb,GAAa,EAAG,CACzB,IAAK,IAAIvuC,EAAIlW,KAAKuO,MAAMonC,WAAa31C,KAAKuO,MAAM8uC,UAAY,EAAGnnC,EAAIlW,KAAKo9C,WAAWz8C,OAAQuV,IACvFlW,KAAKo9C,WAAWlnC,IAAMuuC,EAI1B,GAAqC,eAAjCzkD,KAAK+8C,wBAA0C,KACzCwI,EAAa9L,SAASz5C,KAAKq/C,gBAAgB/e,cAAc3tB,SAAS,GAAGtP,MAAM4N,MAAO,IAAMwzC,EAC9FzkD,KAAKq/C,gBAAgB/e,cAAc3tB,SAAS,GAAGtP,MAAM4N,MAAQs0C,EAAa,SAExEC,EAAU,SAACC,EAAKnsC,GAAQ,OAAAmsC,EAAMnsC,GACpC,GAAqC,aAAjCtZ,KAAK+8C,wBAAwC,KACvC2I,EAAc1lD,KAAK2lD,sBAAwB3lD,KAAKo/C,GAAG/qC,SAASkiC,WAC5DqP,EAAO5lD,KAAK4+C,YAAYzzB,OAAOq6B,GASrC,GARII,EAAO5lD,KAAK8gD,aACZ9gD,KAAK++C,iBAAmB6G,EAAO5lD,KAAK8gD,YAExC9gD,KAAKq/C,gBAAgBziB,KAAOnhB,KAAKwtB,IAAIjpC,KAAKq/C,gBAAgBziB,KAAO6nB,EAAWzkD,KAAK8gD,YACjF9gD,KAAK8+C,YAAc8G,EACd5lD,KAAKq/C,gBAAgBtI,WACtB/2C,KAAKq/C,gBAAgBzR,IAAIrL,gBAEzBmjB,IAAgB1lD,KAAK6lD,iBAAkB,KACjC7C,EAAgBvJ,SAASz5C,KAAKu/C,oBAAqB,IACnD0D,EAAmBjjD,KAAK8+C,YAAckE,EAI5C,OAHAhjD,KAAKi/C,kBAAmB,EACxBj/C,KAAKg/C,eAAiBiE,OACtBjjD,KAAKk7B,eAAiB+nB,GAG1B,GAAIjjD,KAAKyjD,eAAgB,KAGfqC,EAAiB9lD,KAAKyjD,eAAiBzjD,KAAKuO,MAAMonC,WAAa,EAC/DoQ,EAAWvB,EAAM3sC,MAAM,EAAGiuC,GAAgB36B,OAAOq6B,GACjDQ,EAAavM,SAASz5C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAK,IAC7F36B,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAOqrB,EAAaD,EAAY,KAC5F/lD,KAAKyjD,eAAiB,SAS5B3F,EAAA59C,UAAAijD,uBAAV,SAAiC8C,OACvB3zB,EAAQtyB,KAAKsjD,SAAWtjD,KAAKm+C,eAAiBn+C,KAAKw/C,SAAS7+C,OAC9DulD,EAAWlmD,KAAKugD,WAChB0F,EACAjmD,KAAKo9C,WACL,GAEA8I,EAAWlmD,KAAKuO,MAAM8uC,UAAY/qB,IAClC4zB,EAAW5zB,EAAQtyB,KAAKuO,MAAM8uC,eAE5B8I,EAAYnmD,KAAKuO,MAAMonC,WACvB6M,EAAO0D,EAAWlmD,KAAKuO,MAAMonC,WAenC,OAdA31C,KAAKuO,MAAMonC,WAAauQ,EACpB1D,IACAxiD,KAAKy+C,eAAel8B,KAAKviB,KAAKuO,OACzBvO,KAAKsjD,WAEFd,EAAO,GAAKA,GAAQxiD,KAAK6+C,qBACzB7+C,KAAKomD,oBAAoBD,GAClB3D,EAAO,GAAK/mC,KAAKutB,IAAIwZ,IAASxiD,KAAK6+C,qBAC1C7+C,KAAKqmD,oBAAoBF,GAEzBnmD,KAAKsmD,qBAIVL,EAAcjmD,KAAKo9C,WAAWp9C,KAAKuO,MAAMonC,aAO1CmI,EAAA59C,UAAAkmD,oBAAV,SAA8BG,GAE1B,QADMC,EAAQD,EAAYvmD,KAAKuO,MAAM8uC,UAC5B78C,EAAIgmD,EAAOhmD,EAAIgmD,EAAQxmD,KAAKuO,MAAMonC,WAAa4Q,GAAavmD,KAAKw/C,SAASh/C,KAAOwT,UAAWxT,IAAK,KAChGggD,EAAQxgD,KAAKw/C,SAASh/C,GACtBimD,EAAUzmD,KAAKk/C,eAAe5D,QAC9BoL,EAAOD,EAAQE,QACrBD,EAAK9I,UAAY4C,EACjBkG,EAAK/yC,MAAQ3T,KAAK4gD,gBAAgBJ,GAClCkG,EAAKp0B,MAAQtyB,KAAKw/C,SAAS7+C,WACrB0e,EAAgBrf,KAAKo/C,GAAG/qC,SAASqsC,KAAKjjB,OAAO,GACnDz9B,KAAKo/C,GAAG/qC,SAASqsC,KAAKkG,OAAOvnC,GAC7Brf,KAAKk/C,eAAe18C,KAAKikD,KAQvB3I,EAAA59C,UAAAmmD,oBAAV,SAA8BE,GAC1B,IAAK,IAAI/lD,EAAI+lD,EAAY,EAAG/lD,GAAKR,KAAKuO,MAAMonC,YAAc31C,KAAKw/C,SAASh/C,KAAOwT,UAAWxT,IAAK,KACrFggD,EAAQxgD,KAAKw/C,SAASh/C,GACtBimD,EAAUzmD,KAAKk/C,eAAetwB,MAC9B83B,EAAOD,EAAQE,QACrBD,EAAK9I,UAAY4C,EACjBkG,EAAK/yC,MAAQ3T,KAAK4gD,gBAAgBJ,OAC5BnhC,EAAgBrf,KAAKo/C,GAAG/qC,SAASqsC,KAAKjjB,OAAOz9B,KAAKo/C,GAAG/qC,SAASqsC,KAAK//C,OAAS,GAClFX,KAAKo/C,GAAG/qC,SAASqsC,KAAKkG,OAAOvnC,EAAM,GACnCrf,KAAKk/C,eAAe/qC,QAAQsyC,KAO1B3I,EAAA59C,UAAA0gD,gBAAV,SAA0BJ,GACtB,OAAOxgD,KAAKsjD,SAAWtjD,KAAKuO,MAAMonC,WAAa31C,KAAKw/C,SAASluC,QAAQkvC,GAASxgD,KAAKw/C,SAASluC,QAAQkvC,IAO9F1C,EAAA59C,UAAAomD,iBAAV,WAGI,QAFIpwC,EAAI,EACF0tC,EAAW5jD,KAAKuO,MAAMonC,WAAa31C,KAAKuO,MAAM8uC,UAC3C78C,EAAIR,KAAKuO,MAAMonC,WAAYn1C,EAAIojD,GAAY5jD,KAAKw/C,SAASh/C,KAAOwT,UAAWxT,IAAK,KAC/EggD,EAAQxgD,KAAKw/C,SAASh/C,GAEtBkmD,EADU1mD,KAAKk/C,eAAehpC,KACWywC,QAC/CD,EAAK9I,UAAY4C,EACjBkG,EAAK/yC,MAAQ3T,KAAK4gD,gBAAgBJ,GAClCkG,EAAKp0B,MAAQtyB,KAAKw/C,SAAS7+C,SAQzBm9C,EAAA59C,UAAAshD,UAAV,SAAoBlvC,GAEhB,GAAKmnC,SAASz5C,KAAKq/C,gBAAgB/e,cAAc3tB,SAAS,GAAGtP,MAAM4N,MAAO,IAA1E,KAGMqzC,EAAiBtkD,KAAKuO,MAAMonC,WAE5BuN,EAAeljD,KAAKmjD,uBAAuB7wC,EAAMtR,OAAOs6B,YAC9Dt7B,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMo3B,MAAQyoB,EAAe,KAEnFljD,KAAKo/C,GAAG9c,kBAAkBC,gBACtB+hB,IAAmBtkD,KAAKuO,MAAMonC,YAC9B31C,KAAKo+C,YAAY77B,KAAKviB,KAAKuO,SAcnC/O,OAAAgC,eACIs8C,EAAA59C,UAAA,gBAAa,KADjB,WAC0C,OAAOF,KAAK6mD,gBAatD,SAAkBC,GAA0B9mD,KAAK6mD,WAAaC,mCAKpDhJ,EAAA59C,UAAAoiD,cAAV,eACUyE,EAAgB/mD,KAAKuO,MAAM8uC,UAGjC,GAFAr9C,KAAKgnD,uBACLhnD,KAAKinD,uBACDjnD,KAAKw/C,UAAYx/C,KAAKw/C,SAAS7+C,QAAUX,KAAKo/C,GAAI,KAC5C8H,EAAmB1nD,OAAOa,OAAO,GAAIL,KAAKk/C,gBAC5CvJ,EAAa31C,KAAKuO,MAAMonC,WACxBiO,EAAW5jD,KAAKuO,MAAM8uC,UAAYr9C,KAAKuO,MAAMonC,WAC7C31C,KAAKsjD,WACL3N,EAAa,EACbiO,EAAW5jD,KAAKw/C,SAAS7+C,QAE7B,IAAK,IAAIH,EAAIm1C,EAAYn1C,EAAIojD,GAAY5jD,KAAKw/C,SAASh/C,KAAOwT,UAAWxT,IAAK,KACpEggD,EAAQxgD,KAAKw/C,SAASh/C,GAEtBkmD,EADUQ,EAAiB5L,QACcqL,QAC/CD,EAAK9I,UAAY4C,EACjBkG,EAAK/yC,MAAQ3T,KAAK4gD,gBAAgBJ,GAClCkG,EAAKp0B,MAAQtyB,KAAKw/C,SAAS7+C,OAE3BomD,IAAkB/mD,KAAKuO,MAAM8uC,WAC7Br9C,KAAKo+C,YAAY77B,KAAKviB,KAAKuO,SAQ7BuvC,EAAA59C,UAAA6gD,sBAAV,eACUoG,EAAM9oC,SAASC,cAAc,OAC7Bjb,EAAQ8jD,EAAI9jD,MAClBA,EAAMq5B,SAAW,WACjBr5B,EAAMs3B,IAAM,qBACZtc,SAASQ,KAAKC,YAAYqoC,OACpBvqB,EAAOnhB,KAAKutB,IAAIme,EAAIj2C,wBAA6B,KAEvD,OADAmN,SAASQ,KAAKG,YAAYmoC,GACnBvqB,GAQDkhB,EAAA59C,UAAAogD,oBAAV,eACQjD,EAAY,EAchB,OAbiC,OAA7Br9C,KAAKu/C,qBAAgCv/C,KAAKu/C,sBAAwBvrC,WAC7DhU,KAAKo9C,YACNp9C,KAAKqgD,eAAergD,KAAKw/C,UAE7BnC,EAAYr9C,KAAKonD,oBACbpnD,KAAKw/C,UAAYnC,EAAYr9C,KAAKw/C,SAAS7+C,SAC3C08C,EAAYr9C,KAAKw/C,SAAS7+C,SAG1BX,KAAKw/C,WACLnC,EAAYr9C,KAAKw/C,SAAS7+C,QAG3B08C,GAMDS,EAAA59C,UAAAmnD,WAAV,SAAqBC,EAASC,OACpBC,EAAOF,EAAQxjB,QAAQxD,cAAc2C,WAAWwkB,qBAAqBF,GAC3E,OAAOC,EAAK7mD,OAAS,EAAI6mD,EAAK,GAAK,MAM7B1J,EAAA59C,UAAAmgD,eAAV,SAAyB3N,OACjBmN,EAAY,EACZjjB,EAAO,EACLjL,EAA6C,eAAjC3xB,KAAK+8C,wBACnB/8C,KAAKggD,mBAAqB,SAC1Bx/C,EAAI,EACRR,KAAKo9C,WAAa,GAClBp9C,KAAK4+C,YAAc,GACnB5+C,KAAKo9C,WAAW56C,KAAK,GAErB,QADM8vB,EAAQtyB,KAAKsjD,SAAWtjD,KAAKm+C,eAAiBzL,EAAM/xC,OAClDH,EAAI8xB,EAAO9xB,IACG,WAAdmxB,GAEAiL,EAAO6c,SAASz5C,KAAKmlD,eAAgB,KAAO,EAC5CnlD,KAAK4+C,YAAYp8C,KAAKo6B,IAEtBA,EAAO58B,KAAK0nD,aAAahV,EAAMlyC,GAAImxB,GAEvCkuB,GAAajjB,EACb58B,KAAKo9C,WAAW56C,KAAKq9C,GAEzB,OAAOA,GAGD/B,EAAA59C,UAAAuiD,iBAAV,WACI,GAAqC,eAAjCziD,KAAK+8C,wBAAT,KAOMyF,GAHYxiD,KAAK4+C,YAAYj+C,OAAS,EAAIX,KAAK4+C,YAAYzzB,OAAO,SAACs6B,EAAKnsC,GAAQ,OAAAmsC,EAAMnsC,IAAO,GACjFtZ,KAAKqgD,eAAergD,KAAKw/C,UAM3C,GAAI/jC,KAAKutB,IAAIwZ,GAAQ,GAAKxiD,KAAKk7B,eAAiB,EAAG,CAC/Cl7B,KAAKukD,wBACChgD,EAASk1C,SAASz5C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAK,IACzF36B,KAAKk7B,eAAiBl7B,KAAKo9C,WAAWp9C,KAAKuO,MAAMonC,YAAcpxC,QAb/DvE,KAAKqgD,eAAergD,KAAKw/C,WAoBvB1B,EAAA59C,UAAAknD,kBAAV,WAAA,IAAAxyC,EAAA5U,KACQQ,EAAI,EACJG,EAAS,EACTgnD,EAAY,EACVp4C,EAAM,GACRq4C,EAAM,EACJC,EAAgBpO,SAASz5C,KAAKu/C,oBAAqB,IACzD,IAAKsI,EACD,OAAO,EAKX,QAHMl2B,EAA6C,eAAjC3xB,KAAK+8C,wBACnB/8C,KAAKggD,mBAAqB,SACxBwF,EAAU,SAACsC,EAAaC,GAAgB,OAAAD,EAAclzC,EAAK8yC,aAAaK,EAAap2B,IACnFnxB,EAAIR,KAAKw/C,SAAS7+C,OAAQH,IAAK,KAC/Byb,EAAOjc,KAAKw/C,SAASh/C,GACP,WAAdmxB,IACA1V,EAAO,CAAE9Z,MAAOnC,KAAKw/C,SAASh/C,GAAI2M,OAAQnN,KAAK4+C,YAAYp+C,SAEzDo8B,EAAqB,WAAdjL,EACT3xB,KAAK4+C,YAAYp+C,GACjBR,KAAK0nD,aAAazrC,EAAM0V,GAE5B,IADAi2B,EAAMr4C,EAAI4b,OAAOq6B,EAAS5oB,IAChBirB,GAGN,GAFAt4C,EAAI/M,KAAKyZ,GACTtb,EAAS4O,EAAI5O,OACTH,IAAMR,KAAKw/C,SAAS7+C,OAAS,EAK7B,QAFIqnD,EAAwB,WAAdr2B,EAAyBpiB,EAAI,GAAGpN,MAAQoN,EAAI,GACtDg3C,EAAYvmD,KAAKw/C,SAASluC,QAAQ02C,GAAW,EAC1CzB,GAAa,GAAKqB,GAAOC,GAAe,CAC3CG,EAAwB,WAAdr2B,EAAyBpiB,EAAI,GAAGpN,MAAQoN,EAAI,GACtDg3C,EAAYvmD,KAAKw/C,SAASluC,QAAQ02C,GAAW,MACvCC,EAAWjoD,KAAKw/C,SAAS+G,GACzB2B,EAAyB,WAAdv2B,EACb3xB,KAAK4+C,YAAY2H,GACjB9M,SAASwO,EAASt2B,GAAY,IAClCi2B,EAAMr4C,EAAI4b,OAAOq6B,EAAS0C,GAC1B34C,EAAI4E,QAAQ8zC,GACZtnD,EAAS4O,EAAI5O,aAIrB4O,EAAI/M,KAAKyZ,GACTtb,EAAS4O,EAAI5O,OAAS,EACtB4O,EAAI+rC,QAEJ36C,EAASgnD,IACTA,EAAYhnD,GAGpB,OAAOgnD,GAMD7J,EAAA59C,UAAAqgD,WAAV,SAAqB9lB,EAAM/R,EAAK/U,OACxB6yC,EAAQ,EACR1lC,EAAM4H,EAAI/nB,OAAS,EACvB,GAAa,IAAT85B,EACA,OAAO,EAEX,KAAO+rB,GAAS1lC,GAAK,KACXqnC,EAAS1sC,KAAKmC,OAAO4oC,EAAQ1lC,GAAO,GAEpCsnC,EAAM3tB,EADI/R,EAAIy/B,GAEpB,GAAIC,EAAM,EACN5B,EAAQ2B,EAAS,MACd,CAAA,KAAIC,EAAM,GAGb,OAAOD,EAFPrnC,EAAMqnC,EAAS,GAKvB,OAAOrnC,GAGDg9B,EAAA59C,UAAA+mD,qBAAV,eACU30B,EAAQtyB,KAAKsjD,SAAWtjD,KAAKm+C,eAAkBn+C,KAAKw/C,SAAWx/C,KAAKw/C,SAAS7+C,OAAS,EAC5FX,KAAKo/C,GAAG/qC,SAASkiC,aAAev2C,KAAKu/C,qBAAuBv/C,KAAKo/C,IAAMp/C,KAAKuO,MAAM8uC,UAAY/qB,OACxF+1B,EAAaroD,KAAK4/C,eACxB,GAAqC,eAAjC5/C,KAAK+8C,wBAA0C,KACzCwI,EAAavlD,KAAKu/C,oBAAsBv/C,KAAKqgD,eAAergD,KAAKw/C,UAAY,EACnFx/C,KAAKq/C,gBAAgB/e,cAAcj9B,MAAM4N,MAAQjR,KAAKu/C,oBAAsB,KAC5Ev/C,KAAKq/C,gBAAgBziB,KAAO2oB,EACxBA,GAAc9L,SAASz5C,KAAKu/C,oBAAqB,MACjDv/C,KAAKk7B,eAAiB,EAGtBl7B,KAAKq/C,gBAAgBxI,aAAe,GAGP,aAAjC72C,KAAK+8C,0BACL/8C,KAAKq/C,gBAAgB/e,cAAcj9B,MAAM8J,OAASssC,SAASz5C,KAAKu/C,oBAAqB,IAAM,KAC3Fv/C,KAAKq/C,gBAAgBziB,KAAO58B,KAAKghD,cAC5BhhD,KAAKq/C,gBAAgBziB,MAAQ6c,SAASz5C,KAAKu/C,oBAAqB,MACjEv/C,KAAKk7B,eAAiB,EAGtBl7B,KAAKq/C,gBAAgBxI,aAAe,IAGxCwR,IAAeroD,KAAK4/C,gBAEpB5/C,KAAKq+C,6BAA6B97B,QAIhCu7B,EAAA59C,UAAA8gD,YAAV,eACQ7zC,EAWJ,OATIA,EADAnN,KAAK4+C,YACI5+C,KAAK4+C,YAAYzzB,OAAO,SAACs6B,EAAKnsC,GAAQ,OAAAmsC,EAAMnsC,GAAK,GAEjDtZ,KAAKqgD,eAAergD,KAAKw/C,UAEtCx/C,KAAK8+C,YAAc3xC,EACfA,EAASnN,KAAK8gD,aACd9gD,KAAK++C,iBAAmB5xC,EAASnN,KAAK8gD,WACtC3zC,EAASnN,KAAK8gD,YAEX3zC,GAGD2wC,EAAA59C,UAAAqiD,yBAAV,SAAmCN,GAC/BjiD,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAM,MAClE36B,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMo3B,KAAO,UAC7DssB,EAAgB/mD,KAAKuO,MAAM8uC,UAMjC,GALAr9C,KAAKgnD,uBACLhnD,KAAKinD,uBACDF,IAAkB/mD,KAAKuO,MAAM8uC,WAC7Br9C,KAAKo+C,YAAY77B,KAAKviB,KAAKuO,OAE3BvO,KAAKo9C,YAA+C,eAAjCp9C,KAAK+8C,wBAA0C,KAE5DmG,EAAeljD,KAAKmjD,uBAAuBnjD,KAAKk7B,gBACtDl7B,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMo3B,MAAQyoB,EAAe,OAQjFpF,EAAA59C,UAAAooD,eAAV,eACUC,EAAUvoD,KAAKk/C,eAAetwB,MACpC5uB,KAAKw+C,sBAAsBj8B,KAAKgmC,GAChCA,EAAQvmB,UAERhiC,KAAKuO,MAAM8uC,aAOLS,EAAA59C,UAAAsoD,YAAV,WAAA,IAAA5zC,EAAA5U,KACQyoD,EAAYzoD,KAAKuO,MAAMonC,WAAa31C,KAAKuO,MAAM8uC,UACnD,GAAKr9C,KAAKsjD,UAAatjD,KAAKw/C,SAA5B,CAIIiJ,GAAazoD,KAAKw/C,SAAS7+C,SAC3B8nD,EAAYzoD,KAAKw/C,SAAS7+C,OAASX,KAAKuO,MAAM8uC,eAE5CmD,EAAQxgD,KAAKw/C,SAASiJ,GACtBhI,EAAezgD,KAAKo/C,GAAG/qC,SAASqsC,KAAKC,mBACvC3gD,KAAK+9C,UACL,IAAIJ,GAAmB6C,EAAOxgD,KAAK4gD,gBAAgBJ,GAAQxgD,KAAKw/C,SAAS7+C,SAG7EX,KAAKk/C,eAAe18C,KAAKi+C,GACzBzgD,KAAKuO,MAAM8uC,YAEXr9C,KAAKo/B,MAAMsjB,IAAI,WACX9tC,EAAKg5B,IAAI+U,mBAQP7E,EAAA59C,UAAA8mD,qBAAV,eACU3J,EAAYr9C,KAAKsjD,SAAYtjD,KAAKw/C,SAAWx/C,KAAKw/C,SAAS7+C,OAAS,EAAKX,KAAKsgD,sBACpF,GAAIjD,EAAYr9C,KAAKuO,MAAM8uC,UAEvB,QADMmF,EAAOnF,EAAYr9C,KAAKuO,MAAM8uC,UAC3B78C,EAAI,EAAGA,EAAIgiD,EAAMhiD,IACtBR,KAAKwoD,mBAEN,GAAInL,EAAYr9C,KAAKuO,MAAM8uC,UAE9B,IADMmF,EAAOxiD,KAAKuO,MAAM8uC,UAAYA,EAC3B78C,EAAI,EAAGA,EAAIgiD,EAAMhiD,IACtBR,KAAKsoD,kBAKPxK,EAAA59C,UAAA0iD,oBAAV,WACyC,eAAjC5iD,KAAK+8C,wBACL/8C,KAAK0hD,uBAEL1hD,KAAK0oD,wBAGL5K,EAAA59C,UAAAwoD,qBAAR,eACQxF,EAEJA,EADiBljD,KAAKq/C,gBAAgB/e,eACZtgC,KAAKq/C,gBAAgBziB,KAC3C58B,KAAKk7B,eAAiBl7B,KAAKo9C,WAAWp9C,KAAKuO,MAAMonC,YAAc,EACnE31C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,KAAM,EAAkB,MAEhFmjB,EAAA59C,UAAAwhD,qBAAR,eACQwB,EACJA,EAAgBljD,KAAKq/C,gBAAgB/e,eACjCtgC,KAAKq/C,gBAAgBziB,KACrB58B,KAAKk7B,eAAiBl7B,KAAKo9C,WAAWp9C,KAAKuO,MAAMonC,YAAc,EACnE31C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMo3B,MAAQyoB,EAAe,MAG/EpF,EAAA59C,UAAAwnD,aAAR,SAAqBzrC,EAAM0V,OACjBg3B,EAAM1sC,EAAK0V,GACjB,MAAsB,iBAARg3B,EAAmBA,EAAMlP,SAASz5C,KAAKmlD,eAAgB,KAAO,uBAntCnF12C,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,kEAhDnB8nC,EAAAA,wBAFAoS,EAAAA,mBARAC,EAAAA,uBATAniB,EAAAA,gCAFAuI,EAAAA,yBAaAlI,EAAAA,cAiB0BuW,wCAgDzB3uC,EAAAA,kCAMAA,EAAAA,uCAUAA,EAAAA,qCAsBAA,EAAAA,mCAYAA,EAAAA,8BAUAA,EAAAA,2BAwCAgd,EAAAA,6CAOAA,EAAAA,oCAMAA,EAAAA,8BAcAA,EAAAA,sCAGAA,EAAAA,+BAeAA,EAAAA,8BAgtBAhd,EAAAA,SA2WLmvC,EArtCA,GAutCA,SAAgBsE,GAAwBlwC,GAEpC,OAAOA,EAAS,aAAYA,EAYhC,IAAA42C,GAAA,SAAAhvC,GAKI,SAAAgvC,EACIxS,EACAyH,EACAC,EACAC,EACArQ,EACAxO,EACU8e,EACA6K,GARd,IAAAn0C,EASIkF,EAAAlZ,KAAAZ,KAAMs2C,EAAgByH,EAAWC,EAAUC,EAAUrQ,EAAKxO,EAAO8e,IAAkBl+C,YAFzE4U,EAAAspC,kBAAAA,EACAtpC,EAAAm0C,YAAAA,EAkBPn0C,EAAAo0C,eAAiB,IAAI7/B,EAAAA,eAsThC,OAlV8CnR,EAAAA,EAAAA,GAc1CxY,OAAAgC,eACIsnD,EAAA5oD,UAAA,eAAY,KAIhB,WACI,OAAOF,KAAKw/C,cANhB,SACiBr9C,GACbnC,KAAKw/C,SAAWr9C,mCAcpB2mD,EAAA5oD,UAAA2uC,SAAA,WACI7uC,KAAK+oD,YAAY/L,UAAUh9C,MAC3B8Z,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,MACdA,KAAKy/C,8BAGTqJ,EAAA5oD,UAAA8hD,YAAA,SAAYC,GAGR,GADAjiD,KAAK+oD,YAAY/L,UAAUh9C,MADb,iBAEDiiD,EAAS,KACZ9/C,EAAQ8/C,EAAa,aAAEC,aAC7B,IAAKliD,KAAK2+C,SAAWx8C,EACjB,IACInC,KAAK2+C,QAAU3+C,KAAKg+C,SAAS1mC,KAAKnV,GAAOhC,OAAOH,KAAKmiD,eACvD,MAAO7/C,GACL,MAAM,IAAIuN,MACN,2CAA2C1N,EAAK,cAAcigD,GAAwBjgD,GAAM,sFAKpF,mBACD8/C,IAAYA,EAAuB,eAAEI,aACtB,aAAjCriD,KAAK+8C,yBAA0C/8C,KAAKw/C,UAErDx/C,KAAKqgD,eAAergD,KAAKw/C,UAEP,wBACDyC,IAAYA,EAAqB,oBAAEI,aAAeriD,KAAKw/C,UACxEx/C,KAAKuiD,yBAAyBN,IAQtCziD,OAAAgC,eAAWsnD,EAAA5oD,UAAA,aAAU,KAArB,WACI,OAAIF,KAAK+oD,YAAYlM,SAAS78C,MACnBA,KAAK0+C,YAET1+C,KAAK+oD,YAAY3L,WAAWp9C,KAAK+8C,8BAM5C,SAAsB56C,GAClBnC,KAAK0+C,YAAcv8C,mCAGvB3C,OAAAgC,eAAcsnD,EAAA5oD,UAAA,iBAAc,KAA5B,WACI,MAAwC,eAAjCF,KAAK+8C,wBAA2C/8C,KAAKggD,mBAAqB,0CAG3E8I,EAAA5oD,UAAA+oD,YAAV,SAAsBhtC,OACd2gB,EAAO,EACLjL,EAA6C,eAAjC3xB,KAAK+8C,wBACnB/8C,KAAKggD,mBAAqB,SAW9B,MAVkB,WAAdruB,GACAiL,EAAO6c,SAASz5C,KAAKmlD,eAAgB,KAAO,EACxClpC,GAAQA,EAAKitC,UACbtsB,EAAO3gB,EAAKoO,IACLpO,GAAQA,EAAK9E,QAAU8E,EAAK9O,SACnCyvB,EAAO3gB,EAAK9O,SAGhByvB,EAAO6c,SAASx9B,EAAK0V,GAAY,KAAO,EAErCiL,GAGDksB,EAAA5oD,UAAAmgD,eAAV,SAAyB3N,GACrB,IAAK1yC,KAAK+oD,YAAYlM,SAAS78C,MAAO,KAC5BmpD,EAAmBnpD,KAAK+oD,YAAY3L,WAAWp9C,KAAK+8C,yBAC1D,OAAOoM,EAAiBA,EAAiBxoD,OAAS,OAElDk/C,EAAY,EACZjjB,EAAO,EACPp8B,EAAI,EACRR,KAAKo9C,WAAa,GAClBp9C,KAAK4+C,YAAc,GACnB5+C,KAAKo9C,WAAW56C,KAAK,GAErB,QADM8vB,EAAQtyB,KAAKsjD,SAAWtjD,KAAKm+C,eAAiBzL,EAAM/xC,OAClDH,EAAI8xB,EAAO9xB,IACfo8B,EAAO58B,KAAKipD,YAAYvW,EAAMlyC,IACF,WAAxBR,KAAKopD,gBACLppD,KAAK4+C,YAAYp8C,KAAKo6B,GAE1BijB,GAAajjB,EACb58B,KAAKo9C,WAAW56C,KAAKq9C,GAEzB,OAAOA,GAGDiJ,EAAA5oD,UAAAuiD,iBAAV,SAA2BR,GAA3B,IAAArtC,EAAA5U,KACI,QADuB,IAAAiiD,IAAAA,EAAA,MACc,eAAjCjiD,KAAK+8C,wBAAT,KAKMsM,EAAYrpD,KAAK4+C,YAAYj+C,OAAS,EAAIX,KAAK4+C,YAAYzzB,OAAO,SAACs6B,EAAKnsC,GAAQ,OAAAmsC,EAAMnsC,IAAO,EAQ7FkpC,EAAO6G,GANTpH,IAAYjiD,KAAKsjD,SACLtjD,KAAKspD,mBAAmBrH,GAExBjiD,KAAKqgD,eAAergD,KAAKw/C,WAOrC/jC,KAAKutB,IAAIwZ,GAAQ,GAGjBjG,sBAAsB,WAClB3nC,EAAK2vC,wBACChgD,EAASk1C,SAAS7kC,EAAKwqC,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAK,IAC7D,IAAxB/lB,EAAKsmB,eACLtmB,EAAKsmB,eAAiBtmB,EAAKwoC,WAAWxoC,EAAKrG,MAAMonC,YAAcpxC,EAE/DqQ,EAAKguC,6BAzBb5iD,KAAKqgD,eAAergD,KAAKw/C,WA+BvBsJ,EAAA5oD,UAAAopD,mBAAV,SAA6BrH,GAA7B,IAAArtC,EAAA5U,KACUupD,EAAkB,GAClBC,EAAiB,GACjBC,EAAgB,GACtBA,EAAcjnD,KAAK,OACfknD,EAAY,EAGZC,EAAkB,EA4BtB,OA3BA1H,EAAQ2H,mBAAmB,WAAM,OAAAD,MAGjC1H,EAAQ4H,sBAAsB,SAAC5tC,GACvBA,EAAKs5B,eAAiBt5B,EAAK6tC,gBAE3BP,EAAgBttC,EAAKs5B,cAAgBt5B,KAK7CgmC,EAAQ8H,YAAY,SAAC9tC,GACU,OAAvBA,EAAK6tC,gBACJH,EAAkB,IAAMJ,EAAgB5oD,QAAU4oD,EAAgBttC,EAAKs5B,eAIxEiU,EAAevtC,EAAKs5B,cAAgB3gC,EAAKgqC,YAAY3iC,EAAK6tC,eAG1DN,EAAevtC,EAAKs5B,cAAgB3gC,EAAKq0C,YAAYhtC,EAAKA,MAE9DwtC,EAAcxtC,EAAKs5B,aAAe,GAAKkU,EAAcxtC,EAAKs5B,cAAgBiU,EAAevtC,EAAKs5B,cAC9FmU,GAAaF,EAAevtC,EAAKs5B,gBAErCv1C,KAAK4+C,YAAc4K,EACnBxpD,KAAKo9C,WAAaqM,EACXC,GAOJZ,EAAA5oD,UAAA8pD,aAAP,WACIhqD,KAAK0+C,YAAc1+C,KAAK+oD,YAAY3L,WAAWp9C,KAAK+8C,yBACpD/8C,KAAK+oD,YAAY/L,UAAUh9C,MAAM,IAGrC8oD,EAAA5oD,UAAA0yC,UAAA,WACI,GAAI5yC,KAAK2+C,QAAS,KACRsD,EAAUjiD,KAAK2+C,QAAQ6D,KAAKxiD,KAAKw/C,UACvC,GAAIyC,EAAS,KACHj0C,EAAoC,CACtCg1C,cAAehjD,KAAKu/C,qBAExBv/C,KAAKgpD,eAAezmC,KAAKvU,GAEpBhO,KAAKw/C,WACNx/C,KAAKw/C,SAAW,IAKfx/C,KAAKw/C,SAAS7+C,QACkB,aAAjCX,KAAK+8C,yBACL/8C,KAAK+oD,YAAY5L,cAErBn9C,KAAK+oD,YAAY/L,UAAUh9C,MAC3BA,KAAKu/C,oBAAsBvxC,EAAKg1C,cAChChjD,KAAKyiD,iBAAiBR,GACtBjiD,KAAKsiD,gBACLtiD,KAAK4iD,sBACL5iD,KAAKu+C,cAAch8B,UAK/BumC,EAAA5oD,UAAAwpC,SAAA,SAASp3B,GAAT,IAAAsC,EAAA5U,KACI,GAAKy5C,SAASz5C,KAAKq/C,gBAAgB/e,cAAcj9B,MAAM8J,OAAQ,IAA/D,KAIM61C,EAAgBvJ,SAASz5C,KAAKu/C,oBAAqB,IACnD6D,EAAmB9wC,EAAMtR,OAAO2R,SAAS,GAAGg4B,aAAeqY,EAC3DqB,EAA2C,IAArBjB,EAA0B9wC,EAAMtR,OAAOy6B,UAAY2nB,EAAmB,EAClG,GAAKpjD,KAAKi/C,iBAINj/C,KAAKi/C,kBAAmB,MAJA,KAClBgE,EAAmBjjD,KAAK8+C,YAAckE,EAC5ChjD,KAAKg/C,eAAiBqF,EAAsBpB,MAI1CC,EAAeljD,KAAKmjD,uBAAuBnjD,KAAKg/C,gBAEtDh/C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,KAAM,EAAkB,KAEpF36B,KAAKo/B,MAAM6qB,SAASplB,KAAK8G,EAAAA,SAAS5G,UAAW,WACzCnwB,EAAK2vC,sBAETvkD,KAAK4tC,IAAI+U,iBAGbmG,EAAA5oD,UAAAshD,UAAA,SAAU3K,GAEN,GAAK72C,KAAKq/C,iBAAoB5F,SAASz5C,KAAKq/C,gBAAgB/e,cAAc3tB,SAAS,GAAGtP,MAAM4N,MAAO,IAAnG,KAIMiyC,EAAeljD,KAAKmjD,uBAAuBtM,GACjD72C,KAAKo/C,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMo3B,MAAQyoB,EAAe,OAG7E4F,EAAA5oD,UAAAsoD,YAAV,eACQC,EAAYzoD,KAAKuO,MAAMonC,WAAa31C,KAAKuO,MAAM8uC,UACnD,GAAKr9C,KAAKsjD,UAAatjD,KAAKw/C,SAA5B,CAIIiJ,GAAazoD,KAAKw/C,SAAS7+C,SAC3B8nD,EAAYzoD,KAAKw/C,SAAS7+C,OAASX,KAAKuO,MAAM8uC,eAE5CmD,EAAQxgD,KAAKw/C,SAASiJ,GACtBhI,EAAezgD,KAAKo/C,GAAG/qC,SAASqsC,KAAKC,mBACvC3gD,KAAK+9C,UACL,IAAIJ,GAAmB6C,EAAOxgD,KAAK4gD,gBAAgBJ,GAAQxgD,KAAKw/C,SAAS7+C,SAG7EX,KAAKk/C,eAAe18C,KAAKi+C,GACzBzgD,KAAKuO,MAAM8uC,cAGLyL,EAAA5oD,UAAAgqD,aAAV,SAAuBnD,GACnB,GAAI/mD,KAAKw/C,UAAYx/C,KAAKw/C,SAAS7+C,QAAUX,KAAKo/C,GAAI,KAC5C8H,EAAmB1nD,OAAOa,OAAO,GAAIL,KAAKk/C,gBAC5CvJ,OAAU,EACViO,OAAQ,EACR5jD,KAAKsjD,UACL3N,EAAa,EACbiO,EAAW5jD,KAAKw/C,SAAS7+C,UAEzBg1C,EAAa31C,KAAKugD,WACdvgD,KAAKk7B,eACLl7B,KAAKo9C,WACL,IAEap9C,KAAKuO,MAAM8uC,UAAYr9C,KAAKw/C,SAAS7+C,SAClDg1C,EAAa31C,KAAKw/C,SAAS7+C,OAASX,KAAKuO,MAAM8uC,WAEnDr9C,KAAKuO,MAAMonC,WAAaA,EACxBiO,EAAW5jD,KAAKuO,MAAM8uC,UAAYr9C,KAAKuO,MAAMonC,YAGjD,IAAK,IAAIn1C,EAAIm1C,EAAYn1C,EAAIojD,GAAY5jD,KAAKw/C,SAASh/C,KAAOwT,UAAWxT,IAAK,KACpEggD,EAAQxgD,KAAKw/C,SAASh/C,GAEtBkmD,EADUQ,EAAiB5L,QACcqL,QAC/CD,EAAK9I,UAAY4C,EACjBkG,EAAK/yC,MAAQ3T,KAAK4gD,gBAAgBJ,GAClCkG,EAAKp0B,MAAQtyB,KAAKw/C,SAAS7+C,OAE3BomD,IAAkB/mD,KAAKuO,MAAM8uC,WAC7Br9C,KAAKo+C,YAAY77B,KAAKviB,KAAKuO,SAI7Bu6C,EAAA5oD,UAAAoiD,cAAV,eACUyE,EAAgB/mD,KAAKuO,MAAM8uC,UACjCr9C,KAAKgnD,uBACLhnD,KAAKinD,uBACLjnD,KAAKkqD,aAAanD,IAMZ+B,EAAA5oD,UAAAknD,kBAAV,WACI,OAAIpnD,KAAK+oD,YAAYlM,SAAS78C,MACnB8Z,EAAA5Z,UAAMknD,kBAAiBxmD,KAAAZ,MAE3BA,KAAK+oD,YAAY1L,UAAUr9C,KAAK+8C,8CAnV9CtuC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0EAtxCV8nC,EAAAA,wBAFAoS,EAAAA,mBARAC,EAAAA,uBATAniB,EAAAA,gCAFAuI,EAAAA,yBAaAlI,EAAAA,cAiB0BuW,UAArBX,4CA6xCJhuC,EAAAA,8BAaAgd,EAAAA,UAuTLm9B,EArVA,CAG8ChL,IAuV9CqM,GAAA,WAAA,SAAAA,KASA,2BATCn7C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC6uC,GAAmBgL,GAAuBzS,GAA2Ba,GAC/EF,GAAyBJ,IAC9BwT,gBAAiB,CAAC/T,GAA2Ba,GAAwBF,IACrE9nC,QAAS,CAAC4uC,GAAmBgL,IAC7BrM,QAAS,CAACD,GAAwBE,EAAAA,kBAItCyN,EATA,GCrlDAE,GAAA,SAAAvwC,GAqKI,SAAAuwC,EACchqB,EACAuN,EACAoC,EACyC6E,GAJvD,IAAAjgC,EAKIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAYuN,EAAKiH,IAAuB70C,YAJpC4U,EAAAyrB,WAAAA,EACAzrB,EAAAg5B,IAAAA,EACAh5B,EAAAo7B,UAAAA,EACyCp7B,EAAAigC,uBAAAA,EAnK7CjgC,EAAA2qB,SAAW,IAAIC,EAAAA,QAwBlB5qB,EAAAirB,UAAY,IAAI1W,EAAAA,aAUhBvU,EAAAkrB,SAAW,IAAI3W,EAAAA,aAUfvU,EAAAmrB,UAAY,IAAI5W,EAAAA,aAUhBvU,EAAAorB,SAAW,IAAI7W,EAAAA,aAqBfvU,EAAA0+B,iBAAkB,IAwb7B,OApgB0Ct7B,EAAAA,EAAAA,GAiFtCxY,OAAAgC,eAAW6oD,EAAAnqD,UAAA,cAAW,KAAtB,WAAA,IAAA0U,EAAA5U,KACI,OAAIA,KAAKsqD,QACEtqD,KAAK80C,eAA6C,IAA7B90C,KAAK80C,aAAanhC,OACzC3T,KAAK2S,SAAS2E,KAAK,SAAAhV,GAAK,OAAAA,EAAEqR,QAAUiB,EAAKkgC,aAAanhC,SACvD,KAED3T,KAAK80C,kBAGhB,SAAuB3yC,GACnB,IAAKA,EAGD,OAFAnC,KAAKgwC,UAAUzE,MAASvrC,KAAK2N,GAAE,gBAC/B3N,KAAK80C,aAAe,MAGxB90C,KAAK80C,aAAe3yC,EAChBnC,KAAKsqD,UACLtqD,KAAK80C,aAAY,CACb3yC,MAAOA,EAAMA,MACbwR,MAAOxR,EAAMwR,QAGrB3T,KAAKgwC,UAAUtnB,IAAO1oB,KAAK2N,GAAE,UAAW,IAAI4C,IAAI,CAACvQ,KAAK80C,iDAG1Dt1C,OAAAgC,eACI6oD,EAAAnqD,UAAA,KAAE,KADN,WAEI,OAAOF,KAAK6pC,SAEhB,SAAO1nC,GACHnC,KAAKuqD,gBAAgB58C,GAAKxL,EAC1BnC,KAAKgwC,UAAUtnB,IAAIvmB,EAAOnC,KAAKgwC,UAAUliC,IAAI9N,KAAK2N,KAClD3N,KAAKgwC,UAAUzE,MAAMvrC,KAAK2N,IAC1B3N,KAAKgwC,UAAUtnB,IAAIvmB,EAAOnC,KAAKgwC,UAAUliC,IAAO9N,KAAK2N,GAAE,YACvD3N,KAAKgwC,UAAUzE,MAASvrC,KAAK2N,GAAE,WAC/B3N,KAAK6pC,IAAM1nC,mCAIf3C,OAAAgC,eAAW6oD,EAAAnqD,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAK2N,GAAK,yCAUrBnO,OAAAgC,eAAW6oD,EAAAnqD,UAAA,eAAY,KAAvB,eACU4yC,EAAe9yC,KAAKgwC,UAAUmB,WAAWnxC,KAAK2N,IACpD,OAAImlC,GAGG,sCAUXtzC,OAAAgC,eAAW6oD,EAAAnqD,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKuqD,gBAAgBpc,2CAGhC3uC,OAAAgC,eAAc6oD,EAAAnqD,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKuqD,gBAAgBzmB,yCAGhCtkC,OAAAgC,eAAc6oD,EAAAnqD,UAAA,mBAAgB,KAA9B,WACI,GAAIF,KAAKsqD,QACL,OAAOtqD,KAAKsqD,QAAQnM,gBAAkBn+C,KAAKsqD,QAAQ9K,SAAS7+C,wCAmB7D0pD,EAAAnqD,UAAAiO,KAAP,SAAYigC,GACRpuC,KAAKuqD,gBAAgBp8C,KAAKigC,GAC1BpuC,KAAKwqD,wBAUFH,EAAAnqD,UAAAkO,MAAP,WACIpO,KAAKuqD,gBAAgBn8C,SAUlBi8C,EAAAnqD,UAAA6N,OAAP,SAAcqgC,GACNpuC,KAAKmuC,WAAanuC,KAAKuqD,gBAAgB3b,UACvC5uC,KAAKmO,KAAKigC,GAEVpuC,KAAKoO,SAQNi8C,EAAAnqD,UAAAuqD,gBAAP,SAAuB92C,OAIfu8B,EAHAv8B,EAAQ,GAAKA,GAAS3T,KAAK0yC,MAAM/xC,SAKjCuvC,EADAlwC,KAAKsqD,QACO,CACRnoD,MAAOnC,KAAKsqD,QAAQ9K,SAAS7rC,GAC7BA,MAAKA,GAGM3T,KAAK0yC,MAAM/+B,GAE9B3T,KAAKgzC,WAAW9C,KAQbma,EAAAnqD,UAAAw1C,aAAP,SAAoB/hC,GAApB,IAAAiB,EAAA5U,KACI,GAAIA,KAAKsqD,QAAS,CACd,IAAe,IAAX32C,GAAgBA,GAAS3T,KAAK0qD,iBAC9B,WAEEC,EAAYh3C,GAAS3T,KAAKozC,YAAcpzC,KAAKozC,YAAYz/B,OAAS,GAAKqiC,GAASlG,KAAOkG,GAASnG,GAChG+a,EAAc5qD,KAAK6qD,mBAAmBl3C,EAAOg3C,GACnD3qD,KAAKozC,YAAW,CACZjxC,MAAOnC,KAAKsqD,QAAQ9K,SAAS7rC,GAC7BA,MAAOA,GAEPi3C,GACA5qD,KAAKsqD,QAAQjH,SAAS1vC,GAEtBi3C,EACA5qD,KAAKsqD,QAAQlM,YAAYvZ,KAAKimB,EAAAA,KAAK,IAAI/lB,UAAU,WAC7CnwB,EAAKm2C,WAAWJ,KAGpB3qD,KAAK+qD,WAAWJ,QAGpB7wC,EAAA5Z,UAAMw1C,aAAY90C,KAAAZ,KAAC2T,GAEnB3T,KAAKszC,iBAAmBtzC,KAAKozC,cAC7BpzC,KAAKozC,YAAYtP,QAAQxD,cAAciT,QACvCvzC,KAAK4tC,IAAI+U,iBAIT0H,EAAAnqD,UAAA2qD,mBAAR,SAA2Bl3C,EAAenM,OAChCwjD,EAAYhrD,KAAKsqD,QAAQ/7C,MACzB08C,EAAkBjrD,KAAKsqD,QAAQhL,YAAY7jB,UAC3CyvB,EAAelrD,KAAKsqD,QAAQlG,kBAAkBzwC,EAAOnM,IAAcwuC,GAASlG,MAC5Eqb,EAAkBx3C,EAAQq3C,EAAUrV,YAAchiC,EAAQq3C,EAAU3N,UAAY2N,EAAUrV,WAC1FyV,EAAe5jD,IAAcwuC,GAASlG,KAAOmb,EAAkBC,EAAeD,EAAkBC,EAEtG,OADoBC,GAAmBC,GAIjCf,EAAAnqD,UAAA6qD,WAAV,SAAqBvjD,GACZxH,KAAKozC,cAGNpzC,KAAKozC,YAAYtc,UAAY92B,KAAKozC,YAAYxB,YAC1CpqC,IAAcwuC,GAASnG,GACvB7vC,KAAKm2C,eAELn2C,KAAKk2C,iBAQjBmU,EAAAnqD,UAAAsqD,qBAAA,WACI,GAAKxqD,KAAKsqD,QAGV,GAAKtqD,KAAK8yC,aAAV,KAIIuY,EAAerrD,KAAKsqD,QAAQlG,kBAAkBpkD,KAAK8yC,aAAan/B,OAEpE03C,IADoBrrD,KAAKsqD,QAAQ/K,oBAAsBv/C,KAAKsqD,QAAQnF,eACrC,EAAI,GAAKnlD,KAAKsqD,QAAQnF,eACrDnlD,KAAKsqD,QAAQhL,YAAY7jB,UAAY4vB,OANjCrrD,KAAKsqD,QAAQjH,SAAS,IAYvBgH,EAAAnqD,UAAAorD,gBAAP,SAAuBhpD,GACnBtC,KAAK6/B,UAAUtd,KAAKjgB,GAChBA,EAAE8f,UAGDpiB,KAAKsqD,SAAWtqD,KAAK8yC,cACtB9yC,KAAKurD,aAAavrD,KAAK8yC,cAEvB9yC,KAAKsqD,UACLtqD,KAAKsqD,QAAQpvB,eAAiBl7B,KAAKwrD,mBAOpCnB,EAAAnqD,UAAAurD,eAAP,WACQzrD,KAAK8yC,cACL9yC,KAAKozC,YAAcpzC,KAAK8yC,aACxB9yC,KAAK80C,aAAarC,SAAU,GACrBzyC,KAAKszC,iBACZtzC,KAAK+1C,gBAET/1C,KAAK8/B,SAASvd,QAMX8nC,EAAAnqD,UAAAwrD,gBAAP,SAAuBppD,GACnBtC,KAAK+/B,UAAUxd,KAAKjgB,GAChBtC,KAAKsqD,UACLtqD,KAAKwrD,gBAAkBxrD,KAAKsqD,QAAQpvB,iBAOrCmvB,EAAAnqD,UAAAyrD,eAAP,WACQ3rD,KAAK80C,eACL90C,KAAK80C,aAAarC,SAAU,GAEhCzyC,KAAKggC,SAASzd,QAMX8nC,EAAAnqD,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,WACdzmC,KAAKgwC,UAAUzE,MAAMvrC,KAAK2N,IAC1B3N,KAAKgwC,UAAUzE,MAASvrC,KAAK2N,GAAE,YAGzB08C,EAAAnqD,UAAAqrD,aAAV,SAAuBtvC,GAAvB,IAAArH,EAAA5U,KACUkrD,EAAelrD,KAAK4rD,wBAAwB3vC,GAM9C9K,KACA06C,WAAW,WACPj3C,EAAKwoB,gBAAgB3B,UAAS,GAC/B,GAEHz7B,KAAKo9B,gBAAgB3B,UAAS,GAK/B4uB,EAAAnqD,UAAA0rD,wBAAP,SAA+B3vC,GAC3B,IAAKA,EACD,OAAO,MAGLgmB,EAAchmB,EAAK6nB,QAAQxD,cAAcpvB,wBAEzC46C,EADa9rD,KAAKo9B,gBAAgBlsB,wBACTypB,IAAMsH,EAAYtH,IAC7CO,EAAiBl7B,KAAKo9B,gBAAgB3B,UAAYqwB,EAMtD,OAHA5wB,GADuBl7B,KAAKo9B,gBAAgBnC,aACT,EACnCC,GAAkBjf,EAAK8vC,cAAgB,EAEhCtwC,KAAKmC,MAAMsd,IAMtBmvB,EAAAnqD,UAAA2uC,SAAA,WACI7uC,KAAKuqD,gBAAgB58C,GAAK3N,KAAK2N,IAGnC08C,EAAAnqD,UAAAyhD,gBAAA,WACQ3hD,KAAKsqD,UACLtqD,KAAKsqD,QAAQnF,eAAiB,KAK/BkF,EAAAnqD,UAAAi1C,gBAAP,SAAuBl0C,EAAwBqR,GAC3CwH,EAAA5Z,UAAMi1C,gBAAev0C,KAAAZ,KAACiB,EAAKqR,GAC3BtS,KAAKoO,SAOFi8C,EAAAnqD,UAAA61C,cAAP,WACQ/1C,KAAKsqD,QACLtqD,KAAK01C,aAAa,GAElB57B,EAAA5Z,UAAM61C,cAAan1C,KAAAZ,OAOpBqqD,EAAAnqD,UAAA+1C,aAAP,WACQj2C,KAAKsqD,QACLtqD,KAAK01C,aAAa11C,KAAKsqD,QAAQnM,eAAiBn+C,KAAKsqD,QAAQnM,eAAiB,EAAIn+C,KAAKsqD,QAAQ9K,SAAS7+C,OAAS,GAEjHmZ,EAAA5Z,UAAM+1C,aAAYr1C,KAAAZ,OAOnBqqD,EAAAnqD,UAAAg2C,aAAP,WACQl2C,KAAKsqD,QACLtqD,KAAK01C,aAAa11C,KAAK80C,aAAe90C,KAAK80C,aAAanhC,MAAQ,EAAI,GAEpEmG,EAAA5Z,UAAMg2C,aAAYt1C,KAAAZ,OAOnBqqD,EAAAnqD,UAAAi2C,aAAP,WACQn2C,KAAKsqD,QACLtqD,KAAK01C,aAAa11C,KAAK80C,aAAe90C,KAAK80C,aAAanhC,MAAQ,EAAI,GAEpEmG,EAAA5Z,UAAMi2C,aAAYv1C,KAAAZ,OAWnBqqD,EAAAnqD,UAAA8yC,WAAP,SAAkB9C,EAAoC59B,OAC5C+iC,EAAer1C,KAAK8yC,aAI1B,GAHK5C,IACDA,EAAelwC,KAAKozC,aAEH,OAAjBlD,KAGAA,aAAwB8B,IAAuB9B,EAAapZ,UAAhE,CAGI92B,KAAKsqD,UACLpa,EAAY,CACR/tC,MAAO+tC,EAAa/tC,MACpBwR,MAAOu8B,EAAav8B,YAGtB3F,EAA4B,CAAEqnC,aAAYA,EAAEnF,aAAYA,EAAE9tB,QAAQ,GAGxE,GAFApiB,KAAK+0C,YAAYxyB,KAAKvU,IAEjBA,EAAKoU,OAAQ,CACd,IAAIpiB,KAAKgsD,iBAAiBh+C,EAAKkiC,cAc3B,MAAM,IAAIrgC,MAAM,4DAbhB7P,KAAKgwC,UAAUtnB,IAAI1oB,KAAK2N,GAAI,IAAI4C,IAAI,CAACvC,EAAKkiC,gBACrClwC,KAAKsqD,UACFjV,IACAA,EAAatxB,UAAW,GAExB/V,EAAKkiC,eACLliC,EAAKkiC,aAAansB,UAAW,IAGjCzR,GACAtS,KAAKuqD,gBAAgBn8C,WAc3Bi8C,EAAAnqD,UAAA8rD,iBAAV,SAA2Bhc,GACvB,OAAqB,OAAdA,GACHhwC,KAAKsqD,SAAWta,EAAUnwC,eAAe,UAAYmwC,EAAUnwC,eAAe,UAC9EmwC,aAAqBkD,KAA6BlD,EAAUlZ,8BAvgBvEgb,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,gBACVqjC,SAAA,6ZACA5iC,UAAW,CAAC,CAAE88C,QdXe,uBcWaC,YAAa7B,iDAhDvD/mB,EAAAA,kBAHA2L,EAAAA,yBAwBKc,sCAiMAb,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,0CAhKvBsY,EAAAA,aAAYn+C,KAAA,CAAC8vC,GAAmB,CAAEpH,KAAMoH,GAAmBnH,UAAQ,6BAGnEF,EAAAA,UAASzoC,KAAA,CAAC2/B,GAAoB,CAAEgJ,UAAQ,sBAOxCyV,EAAAA,gBAAep+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAAnZ,KAA2B,CAAEoZ,aAAa,uBAU3E3gC,EAAAA,yBAUAA,EAAAA,0BAUAA,EAAAA,yBAUAA,EAAAA,gCAqBAhd,EAAAA,kBA+BAA,EAAAA,SA0ZL07C,EAzgBA,CAK0CzV,IC7C1C2X,GAAA,WAOI,SAAAA,EAAkEC,GAAAxsD,KAAAwsD,SAAAA,EAFxDxsD,KAAAqvC,QAA2B,KAsHzC,OApGI7vC,OAAAgC,eAAI+qD,EAAArsD,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKqvC,aAgBhB,SACWruC,GACPhB,KAAKqvC,QAAUruC,GAAkBhB,KAAKwsD,0CAO1CD,EAAArsD,UAAAusD,cADA,SACcn6C,GACV,GAAIA,EAAO,KACDrR,EAAMqR,EAAMrR,IAAIoU,cACtB,GAAKrV,KAAKgB,OAAOmtC,UASb,OANA,IAA8B,IAFd,CAAC,MAAO,SAAU,QAAS,QAAS,WAAY,IACpE,UAAW,KAAM,YAAa,OAAQ,OAAQ,OAC9B78B,QAAQrQ,GAChB,OAOR,OALIqR,EAAM23B,iBACN33B,EAAMmyB,kBAIFxjC,GACJ,IAAK,MACL,IAAK,SACDjB,KAAKgB,OAAOm0C,gBAAgBC,GAA0B9iC,GACtD,MACJ,IAAK,QACDtS,KAAKgB,OAAOm0C,gBAAgBC,GAAyB9iC,GACrD,MACJ,IAAK,QACL,IAAK,WACL,IAAK,IACDtS,KAAKgB,OAAOm0C,gBAAgBC,GAAyB9iC,GACrD,MACJ,IAAK,UACL,IAAK,KACDtS,KAAK0sD,mBACL,MACJ,IAAK,YACL,IAAK,OACD1sD,KAAK2sD,qBACL,MACJ,IAAK,OACD3sD,KAAK4sD,gBACL,MACJ,IAAK,MACD5sD,KAAK6sD,eACL,MACJ,QACI,UAQhBN,EAAArsD,UAAAysD,mBAAA,WACI3sD,KAAKgB,OAAOk1C,gBAMhBqW,EAAArsD,UAAAwsD,iBAAA,WACI1sD,KAAKgB,OAAOm1C,gBAMhBoW,EAAArsD,UAAA2sD,aAAA,WACI7sD,KAAKgB,OAAOi1C,gBAMhBsW,EAAArsD,UAAA0sD,cAAA,WACI5sD,KAAKgB,OAAO+0C,qCAzHnBtnC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2EAPLkmC,GAAe7zC,WAAA,CAAA,CAAAmR,KAaP46C,EAAAA,MAAI,CAAA56C,KAAIg9B,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CfyBV,6DeQ5BW,EAAAA,MAAKX,KAAA,CAAC,oDAQNY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cA2E9Bu+C,EA3HA,GCWAQ,GAAA,WAAA,SAAAA,KAQiC,2BARhC/9C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACo7C,GAAsBnX,GAA0BzB,GAC3D8a,IACJr9C,QAAS,CAACm7C,GAAsBnX,GAA0BzB,GACtD8a,IACJ9P,QAAS,CAACC,EAAAA,aAAc9M,IACxBzgC,UAAW,CAAC4gC,QAEiBgd,EARjC,OCjBIC,MAAA,EACAC,IAAA,yCAGJ,IAAAC,GAAA,WAoCI,SAAAA,EAAoBC,GAAAntD,KAAAmtD,SAAAA,EAhCZntD,KAAAotD,UAA6BC,GAAgBL,MAe9ChtD,KAAAstD,iBAAkB,EAelBttD,KAAAutD,eAAgB,EAqD3B,OAvCI/tD,OAAAgC,eACI0rD,EAAAhtD,UAAA,WAAQ,KAgBZ,WACI,OAAOF,KAAKotD,UAAU38C,gBAlB1B,SACatO,OACHu6B,EAA4B,GAAyBv6B,EAAMqrD,eAC7D9wB,IAAa1oB,YACbhU,KAAKotD,UAAY1wB,EACjB18B,KAAKytD,eAAeztD,KAAKotD,6CAkBjCF,EAAAhtD,UAAA2uC,SAAA,WACI7uC,KAAKytD,eAAeztD,KAAKotD,YAGrBF,EAAAhtD,UAAAutD,eAAR,SAAuB/wB,GAEnB,OADA18B,KAAKstD,gBAAkBttD,KAAKutD,eAAgB,EACpC7wB,GACJ,KAAK2wB,GAAgBL,MACjBhtD,KAAKstD,iBAAkB,EACvB,MACJ,KAAKD,GAAgBJ,IACjBjtD,KAAKutD,eAAgB,wBAlFpC9+C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEARM40B,EAAAA,uDAyBf6L,EAAAA,YAAWnhC,KAAA,CAAC,kEAeZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2DAeZW,EAAAA,MAAKX,KAAA,CAAC,eAuCXk/C,EAvFA,iBCDA,OALA,gBCgBMQ,GAA6B,CAAC,WAAY,UAAW,YAAa,YAAa,MAAO,MAAO,YAG/FC,QAAA,EACAC,MAAA,EACAC,QAAA,0EAGJ,IAAAC,GAAA,WAQI,SAAAA,EACWC,EACwCC,EACQC,EAC7CnqB,EACA8J,GAJH5tC,KAAA+tD,WAAAA,EACwC/tD,KAAAguD,QAAAA,EACQhuD,KAAAiuD,YAAAA,EAC7CjuD,KAAA8jC,QAAAA,EACA9jC,KAAA4tC,IAAAA,EARN5tC,KAAAkuD,OAASC,GAAcR,QA+GxB3tD,KAAAouD,SAAU,EAaVpuD,KAAAquD,YAAa,EA6LxB,OA/SI7uD,OAAAgC,eAAYssD,EAAA5tD,UAAA,YAAS,KAArB,WACI,OAAOF,KAAKguD,QAAUhuD,KAAKguD,QAAUhuD,KAAKiuD,6CAW9CzuD,OAAAgC,eACIssD,EAAA5tD,UAAA,QAAK,KAaT,WACI,OAAOF,KAAKsgC,cAAcn+B,WAf9B,SACUA,GACNnC,KAAKsgC,cAAcn+B,MAAQA,EAC3BnC,KAAKsuD,iDAuBT9uD,OAAAgC,eACWssD,EAAA5tD,UAAA,WAAQ,KAanB,WACI,OAAOF,KAAKsgC,cAAciuB,aAAa,iBAf3C,SACoBpsD,GAChBnC,KAAKsgC,cAAcsR,SAAWzvC,EAC9BnC,KAAK+tD,WAAWnc,SAAWzvC,mCAwB/B3C,OAAAgC,eACWssD,EAAA5tD,UAAA,WAAQ,KAmBnB,WACI,OAAOF,KAAKsgC,cAAciuB,aAAa,iBArB3C,SACoBpsD,GACK,kBAAVA,IACPnC,KAAKsgC,cAAckuB,SAAWxuD,KAAK+tD,WAAWU,WAAatsD,EAEvDA,IAAUnC,KAAKsgC,cAAcguB,gBAC7BtuD,KAAKkuD,OAASC,GAAcN,QAE5B7tD,KAAKkuD,OAASC,GAAcR,0CA8CjCG,EAAA5tD,UAAAwuD,QADP,SACep8C,GACXtS,KAAK+tD,WAAWY,WAAY,GAMzBb,EAAA5tD,UAAA0uD,OADP,SACct8C,GACVtS,KAAK+tD,WAAWY,WAAY,EAC5B3uD,KAAKkuD,OAASC,GAAcR,QACxB3tD,KAAK6uD,UACA7uD,KAAK6uD,UAAUC,QAChB9uD,KAAKkuD,OAASC,GAAcN,SAEzB7tD,KAAK+uD,mBAAqB/uD,KAAKsgC,cAAcguB,kBACpDtuD,KAAKkuD,OAASC,GAAcN,UAO7BC,EAAA5tD,UAAA8uD,QADP,WAEIhvD,KAAKsuD,iBAKTR,EAAA5tD,UAAAyhD,gBAAA,WAUI,GATA3hD,KAAK+tD,WAAWkB,eAAiBjvD,KAAKsgC,cAAciuB,aAAa,eACjEvuD,KAAK+tD,WAAWnc,SAAW5xC,KAAK+tD,WAAWnc,UAAY5xC,KAAKsgC,cAAciuB,aAAa,YACvFvuD,KAAK+tD,WAAWU,WAAazuD,KAAKsgC,cAAciuB,aAAa,YAGxDvuD,KAAK6uD,YACN7uD,KAAKkuD,OAASC,GAAcR,UAG3B3tD,KAAK+tD,WAAWU,YAAczuD,KAAK6uD,WAAa7uD,KAAK6uD,UAAUK,QAAQC,UAAW,KAC7EC,EAAapvD,KAAK6uD,UAAUK,QAAQC,UAAS,IACnDnvD,KAAK+tD,WAAWU,WAAaW,GAAcA,EAAWZ,SAK5C,aADAxuD,KAAKsgC,cAAc+uB,QAAQh6C,cAErCrV,KAAKquD,YAAa,EAElBruD,KAAKouD,SAAU,EAGfpuD,KAAK6uD,YACL7uD,KAAKsvD,gBAAkBtvD,KAAK6uD,UAAUU,cAAcxqB,UAAU/kC,KAAKwvD,gBAAgBvO,KAAKjhD,QAG5FA,KAAK4tC,IAAIrL,iBAKburB,EAAA5tD,UAAAsmC,YAAA,WACQxmC,KAAKsvD,iBACLtvD,KAAKsvD,gBAAgBphB,eAUtB4f,EAAA5tD,UAAAqzC,MAAP,WACIvzC,KAAKsgC,cAAciT,SASvB/zC,OAAAgC,eAAWssD,EAAA5tD,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAKdwtB,EAAA5tD,UAAAsvD,gBAAV,YACQxvD,KAAK6uD,UAAUK,QAAQC,WAAanvD,KAAK6uD,UAAUK,QAAQO,kBACvDzvD,KAAK6uD,UAAUK,QAAQQ,SAAW1vD,KAAK6uD,UAAUK,QAAQS,MAErD3vD,KAAK+tD,WAAWY,UAEhB3uD,KAAKkuD,OAASluD,KAAK6uD,UAAUC,MAAQX,GAAcP,MAAQO,GAAcN,QAGzE7tD,KAAKkuD,OAASluD,KAAK6uD,UAAUC,MAAQX,GAAcR,QAAUQ,GAAcN,QAK/E7tD,KAAKkuD,OAASC,GAAcR,UAWxCnuD,OAAAgC,eAAWssD,EAAA5tD,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKsgC,cAAciuB,aAAa,gDAS3C/uD,OAAAgC,eAAWssD,EAAA5tD,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKsgC,cAAcsvB,6CAGtB9B,EAAA5tD,UAAA6uD,eAAR,uBACI,IAAwC,IAAAc,EAAA9/C,EAAA29C,IAA0BoC,EAAAD,EAAA3tD,QAAA4tD,EAAA1tD,KAAA0tD,EAAAD,EAAA3tD,OAAE,CAA/D,IAAM6tD,EAAyBD,EAAA3tD,MAChC,GAAInC,KAAKsgC,cAAciuB,aAAawB,GAChC,OAAO,uGAIf,SAAS/vD,KAAK6uD,YAAgB7uD,KAAK6uD,UAAUK,QAAQC,YAAenvD,KAAK6uD,UAAUK,QAAQO,iBAS/FjwD,OAAAgC,eAAWssD,EAAA5tD,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK+tD,WAAWY,2CAS3BnvD,OAAAgC,eAAWssD,EAAA5tD,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAKkuD,YAqBhB,SAAiB/rD,GACbnC,KAAKkuD,OAAS/rD,mCAZlB3C,OAAAgC,eAAWssD,EAAA5tD,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK8uD,QAAUX,GAAcN,yCAchCC,EAAA5tD,UAAAouD,cAAR,YACStuD,KAAK6uD,WAAa7uD,KAAK+uD,mBACxB/uD,KAAKkuD,OAASluD,KAAKsgC,cAAcguB,gBAAkBH,GAAcP,MAAQO,GAAcN,8BA3TlGp/C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,aACVsgC,SAAU,wDAZLghB,UAF6CC,EAAAA,QAAOlvD,WAAA,CAAA,CAAAmR,KAsBpDg9B,EAAAA,UAAQ,CAAAh9B,KAAI46C,EAAAA,MAAI,CAAA56C,KAAIC,EAAAA,OAAMnE,KAAA,CAACiiD,EAAAA,kBAtBVC,EAAAA,gBAAenvD,WAAA,CAAA,CAAAmR,KAuBhCg9B,EAAAA,UAAQ,CAAAh9B,KAAI46C,EAAAA,MAAI,CAAA56C,KAAIC,EAAAA,OAAMnE,KAAA,CAACkiD,EAAAA,0BAhChC5sB,EAAAA,kBAFA2L,EAAAA,oDAkDCtgC,EAAAA,MAAKX,KAAA,CAAC,2BA0BNW,EAAAA,wBA2BAA,EAAAA,uBAmCAwgC,EAAAA,YAAWnhC,KAAA,CAAC,oDAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,2BAOvBY,EAAAA,aAAYZ,KAAA,CAAC,OAAQ,CAAC,4BAetBY,EAAAA,aAAYZ,KAAA,CAAC,YAmKlB8/C,EA9TA,GCvBItc,GAAU,EAEd2e,GAAA,WAAA,SAAAA,IAKWnwD,KAAAowD,cAAe,EAOfpwD,KAAA2N,GAAK,aAAa6jC,KAC7B,2BAbC/iC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uDAGTygC,EAAAA,YAAWnhC,KAAA,CAAC,4CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,SAELwhD,EAbA,GCCAE,GAAA,WAAA,SAAAA,KAGkC,2BAHjC5hD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6BAEoB2hD,EAHlC,GAQAC,GAAA,WAAA,SAAAA,KAI+B,2BAJ9BthD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACohD,IACfnhD,QAAS,CAACmhD,QAEiBC,EAJ/B,GCRAC,GAAA,WAAA,SAAAA,KAGkC,2BAHjC9hD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6BAEoB6hD,EAHlC,GAQAC,GAAA,WAAA,SAAAA,KAI+B,2BAJ9BxhD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACshD,IACfrhD,QAAS,CAACqhD,QAEiBC,EAJ/B,GCSIhf,GAAU,MAGVif,KAAA,EACAC,IAAA,EACAC,OAAA,EACAC,OAAA,EACAC,OAAA,EACAC,cAAA,iJAGJ,IAAAC,GAAA,SAAAj3C,GAqPI,SAAAi3C,EAAoB5D,EACiCtY,GADrD,IAAAjgC,EAEIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAFb4U,EAAAu4C,SAAAA,EACiCv4C,EAAAigC,uBAAAA,EAhP7CjgC,EAAAo8C,MAAQC,GAAkBR,KAC1B77C,EAAAs8C,SAAU,EACVt8C,EAAAu8C,wBAAyB,EAe1Bv8C,EAAAjH,GAAK,mBAAmB6jC,KAcxB58B,EAAAw7C,cAAe,EAMfx7C,EAAAq6C,gBAAiB,EAMjBr6C,EAAA65C,YAAa,EAMb75C,EAAA+5C,WAAY,EAOZ/5C,EAAAw8C,OAAQ,EAMRx8C,EAAAy8C,UAAW,EAMXz8C,EAAA08C,UAAW,EAMX18C,EAAA28C,gBAAiB,EAMjB38C,EAAA48C,UAAW,EAUX58C,EAAAg9B,UAAW,EAsBXh9B,EAAA68C,YAAa,EAkIhB78C,EAAKkvB,QAAUqpB,IA2HvB,OA9W4Cn1C,EAAAA,EAAAA,GAgGxCxY,OAAAgC,eACWuvD,EAAA7wD,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKwgD,MAAMsO,QAAUX,GAAcP,uCAM9CpuD,OAAAgC,eACWuvD,EAAA7wD,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKwgD,MAAMsO,QAAUX,GAAcN,yCAyBvCkD,EAAA7wD,UAAAqvC,QADP,SACej9B,GACNtS,KAAKmxD,wBACNnxD,KAAKwgD,MAAMjN,SAWnB/zC,OAAAgC,eACIuvD,EAAA7wD,UAAA,OAAI,KA2FR,WACI,OAAOF,KAAKgxD,MAAMvgD,gBA7FtB,SACStO,OACC+P,EAA0B,GAA2B/P,EAAMqrD,eACjE,GAAIt7C,IAAS8B,UAAW,CAEpB,OADAhU,KAAKoxD,MAAQpxD,KAAKwxD,SAAWxxD,KAAKuxD,eAAiBvxD,KAAKqxD,SAAWrxD,KAAKsxD,UAAW,EAC3Ep/C,GACJ,KAAK++C,GAAkBP,IACnB1wD,KAAKoxD,OAAQ,EACb,MACJ,KAAKH,GAAkBN,OACnB3wD,KAAKqxD,UAAW,EAChB,MACJ,KAAKJ,GAAkBL,OACnB5wD,KAAKwxD,UAAW,EAChB,MACJ,KAAKP,GAAkBH,cACnB9wD,KAAKuxD,gBAAiB,EACtB,MACJ,KAAKN,GAAkBJ,OACnB7wD,KAAKsxD,UAAW,EAKxBtxD,KAAKgxD,MAAQ9+C,oCAUrB1S,OAAAgC,eACWuvD,EAAA7wD,UAAA,wBAAqB,KADhC,WAEI,OAAOF,KAAKmxD,4BAShB,SAAiChvD,GAC7BnC,KAAKmxD,uBAAyBhvD,mCAMlC3C,OAAAgC,eACIuvD,EAAA7wD,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAKkxD,SAAYlxD,KAAKwgD,OAASxgD,KAAKwgD,MAAMr+C,uCAMrD3C,OAAAgC,eACIuvD,EAAA7wD,UAAA,uBAAoB,KADxB,WAEI,OAAOF,KAAKwyC,iBAAmB2B,GAAeR,sCAMlDn0C,OAAAgC,eACIuvD,EAAA7wD,UAAA,8BAA2B,KAD/B,WAEI,OAAOF,KAAKwyC,iBAAmB2B,GAAeT,6CAMlDl0C,OAAAgC,eACIuvD,EAAA7wD,UAAA,0BAAuB,KAD3B,WAEI,OAAOF,KAAKwyC,iBAAmB2B,GAAeP,yCAkClDp0C,OAAAgC,eAAIuvD,EAAA7wD,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK0xD,MAAM/wD,OAAS,mCAa/BnB,OAAAgC,eAAIuvD,EAAA7wD,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKgxD,QAAUC,GAAkBR,MACpCzwD,KAAKgxD,QAAUC,GAAkBP,qCAazClxD,OAAAgC,eAAWuvD,EAAA7wD,UAAA,aAAU,KAArB,WACI,OAAQF,KAAKgxD,QAAUC,GAAkBR,sCAa7CjxD,OAAAgC,eAAIuvD,EAAA7wD,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKgxD,QAAUC,GAAkBP,qCAa5ClxD,OAAAgC,eAAIuvD,EAAA7wD,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKgxD,QAAUC,GAAkBN,wCAa5CnxD,OAAAgC,eAAIuvD,EAAA7wD,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKgxD,QAAUC,GAAkBL,wCAa5CpxD,OAAAgC,eAAIuvD,EAAA7wD,UAAA,eAAY,KAAhB,WACI,OAAQF,KAAKgxD,QAAUC,GAAkBJ,wCAa7CrxD,OAAAgC,eAAIuvD,EAAA7wD,UAAA,qBAAkB,KAAtB,WACI,OAAQF,KAAKgxD,QAAUC,GAAkBH,+CAG7CtxD,OAAAgC,eAAIuvD,EAAA7wD,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKkxD,aAGhB,SAAW53C,GACPtZ,KAAKkxD,QAAU53C,uDAjXtBw4B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,kBACVqjC,SAAA,ouCACA5iC,UAAW,CAAC,CAAE88C,QAAS+D,GAAmB9D,YAAa6E,iDA/BvDztB,EAAAA,8CAkRK4L,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,qCAjOvB1E,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,4BAcAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0DAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iDAOZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0DAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mDASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oCAAiC,CAAAkE,KAC7CvD,EAAAA,0BAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,sDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iDAMZo+C,EAAAA,gBAAep+C,KAAA,CAACk/C,GAAkB,CAAExW,KAAMwW,oBAM1Cf,EAAAA,aAAYn+C,KAAA,CAAC8/C,GAAmB,CAAEpX,KAAMoX,GAAmBnX,UAAQ,qBAMnE/nC,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,yBAcvBW,EAAAA,MAAKX,KAAA,CAAC,uCAkCNW,EAAAA,wBAkBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,+DAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oEAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uEAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qCAkJjB+iD,EAnXA,CAK4Chd,IAmX5C4d,GAAA,WAAA,SAAAA,KAKmC,2BALlC3iD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC8hD,GAAwB7D,GAAkBY,GAAmBqC,IAC5EjhD,QAAS,CAAC6hD,GAAyB7D,GAAkBY,GAAmBqC,GAAmBE,GAAoBE,IAC/G9T,QAAS,CAACC,EAAAA,aAAc4T,GAAiBE,QAEVmB,EALnC,GCvWAC,GAAA,SAAA93C,GAKI,SAAA83C,EAA2D5D,EACQC,EACjCl3C,EACZspB,EACAuN,GAJtB,IAAAh5B,EAKIkF,EAAAlZ,KAAAZ,KAAM,OAAKA,YAL4C4U,EAAAo5C,QAAAA,EACQp5C,EAAAq5C,YAAAA,EACjCr5C,EAAAmC,MAAAA,EACZnC,EAAAyrB,WAAAA,EACAzrB,EAAAg5B,IAAAA,EAIdh5B,EAAAi9C,gBAAmC,CACvClyB,OAAO,EACPD,eAAgB,IAAI8J,GACpB/J,iBAAkB,IAAIuI,GAAqB,CAAEhnC,OAAQ4T,EAAKmoB,gBAC1D2D,uBAAuB,GAIjB9rB,EAAAk9C,gBAAkB,IAAItyB,EAAAA,QAyDzB5qB,EAAAg9B,UAAW,EAkClBh9B,EAAAm9C,eAAiB,IAAI5oC,EAAAA,aAIdvU,EAAAo9C,SAAW,MAIXp9C,EAAA88B,KAAO,WAyHN98B,EAAAq9C,OAAS,SAAC9vD,GACd,GAAKA,EAAM+tC,aAAX,CAGA/tC,EAAMigB,QAAS,MACT/F,EAAWla,EAAM+tC,aAAa/tC,MAC9B6L,EAA2C,CAAE7L,MAAOka,EAAU+F,QAAQ,GAC5ExN,EAAKm9C,eAAexvC,KAAKvU,GACrBA,EAAKoU,SAGTxN,EAAKxG,QACLwG,EAAK0rB,cAAciT,QAInB3+B,EAAKs9C,MAAQt9C,EAAKs9C,MAAMhD,QAAQiD,SAAS91C,GAAYzH,EAAK0rB,cAAcn+B,MAAQka,KAG5EzH,EAAAw9C,mBAAqB,WACrBx9C,EAAK5T,OAAOoyC,cACZx+B,EAAK5T,OAAOoyC,YAAYX,SAAU,EAClC79B,EAAK5T,OAAOoyC,YAAc,MAE9Bx+B,EAAK5T,OAAO+0C,gBACZnhC,EAAKg5B,IAAIrL,mBAOjB,OA9Q8CvqB,EAAAA,EAAAA,GAmB1CxY,OAAAgC,eAAcowD,EAAA1xD,UAAA,QAAK,KAAnB,WACI,OAAOF,KAAKguD,SAAWhuD,KAAKiuD,6CAIhCzuD,OAAAgC,eAAIowD,EAAA1xD,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKqgC,WAAWC,+CAI3B9gC,OAAAgC,eAAIowD,EAAA1xD,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK+W,MAAQ/W,KAAK+W,MAAM+sB,QAAQxD,cAAgBtgC,KAAKsgC,+CAGhE9gC,OAAAgC,eAAYowD,EAAA1xD,UAAA,WAAQ,KAApB,eACUo6B,EAAW96B,OAAOa,OAAO,GAAIL,KAAK6xD,gBAAiB7xD,KAAKqyD,sBAC9D,IAAK/3B,EAASmF,iBAAiBnF,SAASt5B,OAAQ,KACtC0uC,EAA2CpV,EAASmF,iBAAiBtC,QAC3EuS,EAAsBpV,SAASt5B,OAAShB,KAAK+8B,cAC7CzC,EAASmF,iBAAmBiQ,EAEhC,OAAOpV,mCAgFX96B,OAAAgC,eACWowD,EAAA1xD,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAKmuC,2CAIjB3uC,OAAAgC,eACWowD,EAAA1xD,UAAA,WAAQ,KADnB,WAEI,MAAO,2CAIXV,OAAAgC,eACWowD,EAAA1xD,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKgB,OAAOsxD,wCAIvB9yD,OAAAgC,eACWowD,EAAA1xD,UAAA,uBAAoB,KAD/B,WAEI,OAAQF,KAAKgB,OAAOmtC,WAAanuC,KAAKgB,OAAOoyC,YAAcpzC,KAAKgB,OAAOoyC,YAAYzlC,GAAK,sCAI5FnO,OAAAgC,eACWowD,EAAA1xD,UAAA,mBAAgB,KAD3B,WAEI,MAAO,wCAKX0xD,EAAA1xD,UAAA8uD,QADA,WAEIhvD,KAAKmO,QAQTyjD,EAAA1xD,UAAAqyD,YAJA,SAIYjgD,GACRA,EAAM23B,iBACNjqC,KAAKmO,QAMTyjD,EAAA1xD,UAAAsyD,MAFA,WAGIxyD,KAAKoO,SAITwjD,EAAA1xD,UAAAusD,cAAA,SAAcn6C,GACV,IAAKtS,KAAKmuC,UACN,OAAQ77B,EAAMrR,IAAIoU,eACd,IAAK,QACL,IAAK,WACL,IAAK,IACL,IAAK,OACL,IAAK,MACD,OACJ,QACIyE,EAAA5Z,UAAMusD,cAAa7rD,KAAAZ,KAACsS,KAMpCs/C,EAAA1xD,UAAAysD,mBAAA,WACI7yC,EAAA5Z,UAAMysD,mBAAkB/rD,KAAAZ,OAI5B4xD,EAAA1xD,UAAAwsD,iBAAA,WACI5yC,EAAA5Z,UAAMwsD,iBAAgB9rD,KAAAZ,OAI1B4xD,EAAA1xD,UAAA2sD,aAAA,WACI/yC,EAAA5Z,UAAM2sD,aAAYjsD,KAAAZ,OAItB4xD,EAAA1xD,UAAA0sD,cAAA,WACI9yC,EAAA5Z,UAAM0sD,cAAahsD,KAAAZ,OAMhB4xD,EAAA1xD,UAAAkO,MAAP,WACQpO,KAAKmuC,YAGTnuC,KAAKgB,OAAOoN,QACZpO,KAAK8xD,gBAAgB5vD,SAMlB0vD,EAAA1xD,UAAAiO,KAAP,YACQnO,KAAK4xC,UAAa5xC,KAAKmuC,YAI3BnuC,KAAKgB,OAAOiQ,MAAQjR,KAAKgB,OAAOiQ,OAAUjR,KAAK+8B,cAAc/B,YAAc,KAC3Eh7B,KAAKgB,OAAOmN,KAAKnO,KAAKs6B,UACtBt6B,KAAKgB,OAAO+zC,YAAYlQ,KAAKC,EAAAA,UAAU9kC,KAAK8xD,kBAAkB/sB,UAAU/kC,KAAKiyD,QAC7EjyD,KAAKgB,OAAO8+B,SAAS+E,KAAK8G,EAAAA,SAAS5G,UAAU/kC,KAAKoyD,oBAClDpyD,KAAKgB,OAAO2R,SAASsvC,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAK8xD,kBAAkB/sB,UAAU/kC,KAAKoyD,sBAGtF5yD,OAAAgC,eAAYowD,EAAA1xD,UAAA,YAAS,KAArB,WACI,OAAOF,KAAKgB,QAAShB,KAAKgB,OAAOmtC,2CAgC9ByjB,EAAA1xD,UAAAsmC,YAAP,WACIxmC,KAAK8xD,gBAAgBrrB,gCA/Q5Bh4B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iEAhDLuhD,EAAAA,QAAOlvD,WAAA,CAAA,CAAAmR,KAoDC46C,EAAAA,MAAI,CAAA56C,KAAIg9B,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAACiiD,EAAAA,kBApD1BC,EAAAA,gBAAenvD,WAAA,CAAA,CAAAmR,KAqDhB46C,EAAAA,MAAI,CAAA56C,KAAIg9B,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAACkiD,EAAAA,0BA9CnCa,GAAsBhwD,WAAA,CAAA,CAAAmR,KA+Cdg9B,EAAAA,kBAvDH5L,EAAAA,kBAA0B2L,EAAAA,qDA0GnCtgC,EAAAA,MAAKX,KAAA,CAAC,qCAmBNW,EAAAA,MAAKX,KAAA,CAAC,yDAwBNW,EAAAA,MAAKX,KAAA,CAAC,mDAUN2d,EAAAA,yBAIAwjB,EAAAA,YAAWnhC,KAAA,CAAC,mCAIZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mCAIZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAMZY,EAAAA,aAAYZ,KAAA,CAAC,8BAMbY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAkE,KAC5CtD,EAAAA,aAAYZ,KAAA,CAAC,wBAAyB,CAAC,YAAS,CAAAkE,KAChDtD,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,YAAS,CAAAkE,KAC1CtD,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,0BAOrCY,EAAAA,aAAYZ,KAAA,CAAC,gBAAa,CAAAkE,KAC1BtD,EAAAA,aAAYZ,KAAA,CAAC,wBAuGlB4jD,EAjRA,CAG8CrF,IAiR9CkG,GAAA,WAAA,SAAAA,KAKqC,2BALpCzjD,EAAAA,SAAQhB,KAAA,CAAC,CACNyuC,QAAS,CAACsQ,GAAmBrQ,EAAAA,cAC7BztC,aAAc,CAAC2iD,IACf1iD,QAAS,CAAC0iD,QAEuBa,EALrC,kBC/QI,SAAAC,EAAmB5uB,EAA6BuB,EACOwP,GADvD,IAAAjgC,EAEIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAFd4U,EAAAkvB,QAAAA,EAA6BlvB,EAAAywB,UAAAA,EACOzwB,EAAAigC,uBAAAA,EA5B/CjgC,EAAA+9C,aAAe,OAKf/9C,EAAAg+C,gBAAkB,aAsCnBh+C,EAAAi+C,YAAc,IAAI1pC,EAAAA,aAalBvU,EAAA88B,KAAO,SA0HE98B,EAAAmP,UAAW,IAS/B,OArMwC/L,EAAAA,EAAAA,GA6CpCxY,OAAAgC,eAAWkxD,EAAAxyD,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK8jC,QAAQxD,+CA6BxB9gC,OAAAgC,eACIkxD,EAAAxyD,UAAA,OAAI,KADR,SACSiC,OACCka,EAAWla,GAAgBnC,KAAK2yD,aAClC3yD,KAAKgxD,QAAU30C,IACfrc,KAAKqlC,UAAUytB,YAAY9yD,KAAKsgC,cAAkBtgC,KAAK4yD,gBAAe,KAAK5yD,KAAKgxD,OAChFhxD,KAAKgxD,MAAQ30C,EACbrc,KAAKqlC,UAAU0tB,SAAS/yD,KAAKsgC,cAAkBtgC,KAAK4yD,gBAAe,KAAK5yD,KAAKgxD,yCAWrFxxD,OAAAgC,eAA6BkxD,EAAAxyD,UAAA,QAAK,KAAlC,SAAmCiC,GAC/BnC,KAAKgzD,OAAS7wD,GAASnC,KAAKsgC,cAAcj9B,MAAM4vD,MAChDjzD,KAAKqlC,UAAU6B,SAASlnC,KAAKsgC,cAAe,QAAStgC,KAAKgzD,yCAU9DxzD,OAAAgC,eAAkCkxD,EAAAxyD,UAAA,aAAU,KAA5C,SAA6CiC,GACzCnC,KAAKkzD,iBAAmB/wD,GAASnC,KAAKkzD,iBACtClzD,KAAKqlC,UAAU6B,SAASlnC,KAAKsgC,cAAe,aAActgC,KAAKkzD,mDAUnE1zD,OAAAgC,eAAuBkxD,EAAAxyD,UAAA,QAAK,KAA5B,SAA6BiC,GACzBnC,KAAKmzD,OAAShxD,GAASnC,KAAKmzD,OAC5BnzD,KAAKqlC,UAAU+tB,aAAapzD,KAAKsgC,cAAe,aAActgC,KAAKmzD,yCAUvE3zD,OAAAgC,eAAakxD,EAAAxyD,UAAA,WAAQ,KAArB,SAAsBoZ,GAClBA,IAAQA,EACRtZ,KAAKqyC,UAAY/4B,EACbA,EACAtZ,KAAKqlC,UAAU0tB,SAAS/yD,KAAKsgC,cAAkBtgC,KAAK4yD,gBAAe,cAEnE5yD,KAAKqlC,UAAUytB,YAAY9yD,KAAKsgC,cAAkBtgC,KAAK4yD,gBAAe,+CAO9EpzD,OAAAgC,eACWkxD,EAAAxyD,UAAA,eAAY,KADvB,WAEI,OAAuB,SAAfF,KAAKgxD,OAAmC,WAAfhxD,KAAKgxD,OAAqC,aAAfhxD,KAAKgxD,QAC7DhxD,KAAKwyC,iBAAmB2B,GAAeR,sCAM/Cn0C,OAAAgC,eACWkxD,EAAAxyD,UAAA,kBAAe,KAD1B,WAEI,OAAuB,SAAfF,KAAKgxD,OAAmC,WAAfhxD,KAAKgxD,OAAqC,aAAfhxD,KAAKgxD,QAC7DhxD,KAAKwyC,iBAAmB2B,GAAeP,yCAM/Cp0C,OAAAgC,eACWkxD,EAAAxyD,UAAA,kBAAe,KAD1B,WAEI,MAAsB,QAAfF,KAAKgxD,OAAmBhxD,KAAKwyC,iBAAmB2B,GAAeR,sCAM1En0C,OAAAgC,eACWkxD,EAAAxyD,UAAA,qBAAkB,KAD7B,WAEI,MAAsB,QAAfF,KAAKgxD,OAAmBhxD,KAAKwyC,iBAAmB2B,GAAeP,yCAM1Ep0C,OAAAgC,eACWkxD,EAAAxyD,UAAA,oBAAiB,KAD5B,WAEI,OAAOF,KAAKqyC,UAAYryC,KAAKqyC,UAAY,sCAiBtCqgB,EAAAxyD,UAAAqvC,QADP,SACepP,GACXngC,KAAK6yD,YAAYtwC,KAAK4d,wBAtM7B1xB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAdV40B,EAAAA,kBAMA+vB,EAAAA,6CAgDKnkB,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,8CAcvBloB,EAAAA,qBAaAwjB,EAAAA,YAAWnhC,KAAA,CAAC,2BAUZW,EAAAA,MAAKX,KAAA,CAAC,4BAiBNW,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,8BAYNW,EAAAA,4BAaAwgC,EAAAA,YAAWnhC,KAAA,CAAC,mDASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0DAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4DAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mCAaZW,EAAAA,uBAKAC,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cAI5B0kD,GArMwC3e,IA0MxCuf,GAAA,WAAA,SAAAA,KAI+B,2BAJ9BtkD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACyjD,IACfxjD,QAAS,CAACwjD,QAEiBY,EAJ/B,OCzNIC,QAAU,UACVC,OAAS,UAGThiB,GAAU,EAEdiiB,GAAA,WAAA,SAAAA,IAiBWzzD,KAAA2N,GAAK,eAAe6jC,KAWnBxxC,KAAA0zD,OAAS,IAQV1zD,KAAA0xC,KAAO,YAWP1xC,KAAAkS,KAAgCyhD,GAAeJ,QAiB/CvzD,KAAA4zD,QAAS,EAoBT5zD,KAAA6zD,UAAW,EAqCtB,OAxEIr0D,OAAAgC,eACIiyD,EAAAvzD,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAKkS,OAASyhD,GAAeH,wCAqBxCh0D,OAAAgC,eAAIiyD,EAAAvzD,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKkS,OAASyhD,GAAeJ,yCAqBxC/zD,OAAAgC,eACIiyD,EAAAvzD,UAAA,QAAK,KAWT,WAGI,OAAIF,KAAK4zD,OACD5zD,KAAK6zD,SACK7zD,KAAK0zD,OAAM,KAEfI,KAAc9zD,KAAK0zD,OAEzB1zD,KAAK6zD,SACK7zD,KAAK0zD,OAAM,SAEfI,SAA8B9zD,KAAK0zD,YAxBrD,SACUvxD,GACNnC,KAAK0zD,OAASvxD,uDAhGrBsM,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,8CAaTygC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,sBAWAA,EAAAA,MAAKX,KAAA,CAAC,uBAONmhC,EAAAA,YAAWnhC,KAAA,CAAC,cAAW,CAAAkE,KACvBvD,EAAAA,oBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,sBAAmB,CAAAkE,KAC/BvD,EAAAA,wBAGAwgC,EAAAA,YAAWnhC,KAAA,CAAC,6CAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,6BAA0B,CAAAkE,KACtCvD,EAAAA,wBAmBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gCAA6B,CAAAkE,KACzCvD,EAAAA,qBAWAwgC,EAAAA,YAAWnhC,KAAA,CAAC,mBA2BjBylD,EAzHA,iBA2HA,SAAAM,KAIgC,2BAJ/B/kD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACwkD,IACfvkD,QAAS,CAACukD,QAEkBM,mBC/HhC,SAAAC,KAGA,OADIA,EAAA9zD,UAAA+zD,WAAA,SAAWC,EAAwBC,EAAwBC,KAC/DJ,mBAKI,SAAAK,EAAoBhvB,GAAArlC,KAAAqlC,UAAAA,EAQxB,OANIgvB,EAAAn0D,UAAA+zD,WAAA,SAAWC,EAAwBC,EAAwBC,OACjDE,EAAcJ,EAAKpwB,QAAQxD,cAC3Bi0B,EAAkBJ,EAAKrwB,QAAQxD,cACrCtgC,KAAKqlC,UAAUrmB,YAAYs1C,EAAYrxB,WAAYqxB,GACnDt0D,KAAKqlC,UAAUvmB,YAAYy1C,EAAiBD,IAEpDD,mBAKI,SAAAG,EAAoBnvB,GAAArlC,KAAAqlC,UAAAA,EAYxB,OAVImvB,EAAAt0D,UAAA+zD,WAAA,SAAWC,EAAwBC,EAAwBC,OACjDE,EAAcJ,EAAKpwB,QAAQxD,cAC3Bi0B,EAAkBJ,EAAKrwB,QAAQxD,cACrCtgC,KAAKqlC,UAAUrmB,YAAYs1C,EAAYrxB,WAAYqxB,GAC/CC,EAAgB5hD,SAAShS,OACzBX,KAAKqlC,UAAUrB,aAAauwB,EAAiBD,EAAaC,EAAgB5hD,SAAS,IAEnF3S,KAAKqlC,UAAUvmB,YAAYy1C,EAAiBD,IAGxDE,mBAKI,SAAAC,EAAoBpvB,GAAArlC,KAAAqlC,UAAAA,EAgBxB,OAdIovB,EAAAv0D,UAAA+zD,WAAA,SAAWC,EAAwBC,EAAwBC,GACvD,GAAIF,EAAKpwB,QAAQxD,cAAcvD,gBAAkBo3B,EAAKrwB,QAAQxD,gBAA8B,IAAb8zB,EAA/E,KAIME,EAAcJ,EAAKpwB,QAAQxD,cAC3Bi0B,EAAkBJ,EAAKrwB,QAAQxD,cACrCtgC,KAAKqlC,UAAUrmB,YAAYs1C,EAAYrxB,WAAYqxB,IAClC,IAAbF,GAAkBG,EAAgB5hD,SAAShS,OAASyzD,EACpDp0D,KAAKqlC,UAAUrB,aAAauwB,EAAiBD,EAAaC,EAAgB5hD,SAASyhD,IAEnFp0D,KAAKqlC,UAAUvmB,YAAYy1C,EAAiBD,KAGxDG,KC/DAC,GAAA,WAUI,SAAAA,EAAmB5wB,GAAA9jC,KAAA8jC,QAAAA,EAFZ9jC,KAAA20D,WAAY,EAGvB,2BATClmD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+DAHM40B,EAAAA,iDAOf6L,EAAAA,YAAWnhC,KAAA,CAAC,6BAIjB0mD,EAXA,OC4BIE,WAAA,EACAC,aAAA,EACAC,KAAA,0GAmHJ,OAJI,SAAoBC,EAAgBC,GAAhBh1D,KAAA+0D,OAAAA,EAAgB/0D,KAAAg1D,OAAAA,EAChCh1D,KAAKq6C,MAAQh9B,WAAW03C,GACxB/0D,KAAKu6C,MAAQl9B,WAAW23C,qBAif5B,SAAAC,EACWrnB,EACA9J,EACAoxB,EACAC,EACAC,GAJAp1D,KAAA4tC,IAAAA,EACA5tC,KAAA8jC,QAAAA,EACA9jC,KAAAk1D,cAAAA,EACAl1D,KAAAm1D,KAAAA,EACAn1D,KAAAo1D,SAAAA,EA5eDp1D,KAAAq1D,aAAoB,KAuBvBr1D,KAAAs1D,cAAgB,EA8BhBt1D,KAAAu1D,OAAQ,EAYRv1D,KAAAw1D,WAAa,GAgBbx1D,KAAAy1D,gBAAiB,EAiBjBz1D,KAAA01D,kBAAmB,EAyFnB11D,KAAA21D,UAAY,IAAIxsC,EAAAA,aAiBhBnpB,KAAA41D,SAAW,IAAIzsC,EAAAA,aAiBfnpB,KAAA61D,QAAU,IAAI1sC,EAAAA,aAiBdnpB,KAAA81D,UAAY,IAAI3sC,EAAAA,aAiBhBnpB,KAAA+1D,YAAc,IAAI5sC,EAAAA,aAiBlBnpB,KAAAg2D,aAAe,IAAI7sC,EAAAA,aAiBnBnpB,KAAAi2D,aAAe,IAAI9sC,EAAAA,aAYnBnpB,KAAAk2D,YAAc,UAMdl2D,KAAA20D,WAAY,EAMZ30D,KAAAm2D,gBAAiB,EAuIjBn2D,KAAAo2D,sBAAwB,OAUxBp2D,KAAAq2D,gBAAiB,EAEdr2D,KAAAs2D,gBAAkB,EAClBt2D,KAAAu2D,eAAiB,EAGjBv2D,KAAA64C,QAAU,EACV74C,KAAA84C,QAAU,EACV94C,KAAAw2D,OAAS,EACTx2D,KAAAy2D,OAAS,EACTz2D,KAAA02D,cAAe,EASf12D,KAAA22D,YAAc,EACd32D,KAAA42D,YAAc,EAEd52D,KAAA62D,eAAiB,KACjB72D,KAAA82D,UAAW,EACX92D,KAAA+2D,cAAgB,KAEhB/2D,KAAAg3D,SAAW,IAAIx3B,EAAAA,QACfx/B,KAAAi3D,kBAAmB,EAqxBjC,OA3mCIz3D,OAAAgC,eACWyzD,EAAA/0D,UAAA,eAAY,KAIvB,WACI,OAAOF,KAAKk3D,WAAaljD,UAAYhU,KAAKk3D,SAAWl3D,KAAKm3D,qBAN9D,SACwBh1D,GACpBnC,KAAKk3D,SAAWzd,SAASt3C,EAAO,qCAkBpC3C,OAAAgC,eACWyzD,EAAA/0D,UAAA,eAAY,KAIvB,WACI,OAAOF,KAAKo3D,WAAapjD,UAAYhU,KAAKo3D,SAAWp3D,KAAKq3D,qBAN9D,SACwBl1D,GACpBnC,KAAKo3D,SAAW3d,SAASt3C,EAAO,qCAmKpC3C,OAAAgC,eAAWyzD,EAAA/0D,UAAA,UAAO,KAelB,WACI,MAA4B,YAArBF,KAAKk2D,iBAhBhB,SAAmBoB,GACft3D,KAAKk2D,YAAcoB,EAAW,UAAY,SAC1Ct3D,KAAK4tC,IAAIrL,iDAoBb/iC,OAAAgC,eAAWyzD,EAAA/0D,UAAA,WAAQ,KAAnB,WACI,OAAO,IAAIq3D,GAAgBv3D,KAAKq6C,MAAOr6C,KAAKu6C,wCAMhD/6C,OAAAgC,eAAWyzD,EAAA/0D,UAAA,iBAAc,KAAzB,WACI,OAAO,IAAIq3D,GAAgBv3D,KAAKw3D,eAAgBx3D,KAAKy3D,gDAMzDj4D,OAAAgC,eAAWyzD,EAAA/0D,UAAA,uBAAoB,KAA/B,WACI,MAA+B,oBAAjBw3D,8CAMlBl4D,OAAAgC,eAAWyzD,EAAA/0D,UAAA,qBAAkB,KAA7B,WACI,MAAO,iBAAkB6R,wCAM7BvS,OAAAgC,eAAWyzD,EAAA/0D,UAAA,QAAK,KAAhB,WACI,OAAIF,KAAKu1D,OAASv1D,KAAK23D,aACZ33D,KAAK43D,UAET53D,KAAK63D,0CAMhBr4D,OAAAgC,eAAWyzD,EAAA/0D,UAAA,QAAK,KAAhB,WACI,OAAIF,KAAKu1D,OAASv1D,KAAK23D,aACZ33D,KAAK83D,SAET93D,KAAK+3D,yCAGhBv4D,OAAAgC,eAAcyzD,EAAA/0D,UAAA,WAAQ,KAAtB,WACI,OAAOF,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBupB,sCAG9Dj7B,OAAAgC,eAAcyzD,EAAA/0D,UAAA,UAAO,KAArB,WACI,OAAOF,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBypB,qCAG9Dn7B,OAAAgC,eAAcyzD,EAAA/0D,UAAA,iBAAc,KAA5B,WACI,OAAOF,KAAK63D,SAAW73D,KAAKg4D,cAAch4D,KAAK8jC,QAAQxD,gDAG3D9gC,OAAAgC,eAAcyzD,EAAA/0D,UAAA,gBAAa,KAA3B,WACI,OAAOF,KAAK+3D,QAAU/3D,KAAKi4D,cAAcj4D,KAAK8jC,QAAQxD,gDAG1D9gC,OAAAgC,eAAcyzD,EAAA/0D,UAAA,YAAS,KAavB,WACI,OAAOu5C,SAASz5C,KAAK23D,aAAat0D,MAAMo3B,KAAM,IAAMz6B,KAAK22D,iBAd7D,SAAwBtc,GAAxB,IAAAzlC,EAAA5U,KAGIu8C,sBAAsB,WAClB,GAAI3nC,EAAK+iD,aAAc,KAEbO,EAAkBze,SAASp7B,SAASkoB,YAAY4xB,iBAAiBvjD,EAAK+iD,cAAc,eAAgB,IAE1G/iD,EAAK+iD,aAAat0D,MAAMo3B,KAAQ4f,EAAQ6d,EAAkBtjD,EAAK+hD,YAAe,yCAS1Fn3D,OAAAgC,eAAcyzD,EAAA/0D,UAAA,WAAQ,KAatB,WACI,OAAOu5C,SAASz5C,KAAK23D,aAAat0D,MAAMs3B,IAAK,IAAM36B,KAAK42D,iBAd5D,SAAuBrc,GAAvB,IAAA3lC,EAAA5U,KAGIu8C,sBAAsB,WAClB,GAAI3nC,EAAK+iD,aAAc,KAEbS,EAAiB3e,SAASp7B,SAASkoB,YAAY4xB,iBAAiBvjD,EAAK+iD,cAAc,cAAe,IAExG/iD,EAAK+iD,aAAat0D,MAAMs3B,IAAO4f,EAAQ6d,EAAiBxjD,EAAKgiD,YAAe,yCA+DjF3B,EAAA/0D,UAAAm4D,mBAAP,WAAA,IAAAzjD,EAAA5U,KACSA,KAAKs4D,aAAgBt4D,KAAKs4D,YAAY33D,SAEvCX,KAAKm2D,gBAAiB,GAI1Bn2D,KAAKm1D,KAAKrrB,kBAAkB,YACDl1B,EAAK0jD,aAAe1jD,EAAK0jD,YAAY33D,OACxDiU,EAAK0jD,YAAYh8C,IAAI,SAACL,GAAS,OAAAA,EAAK6nB,QAAQxD,gBAAiB,CAAC1rB,EAAKkvB,QAAQxD,gBAChE7tB,QAAQ,SAACqxB,GAChBlvB,EAAK2jD,sBACL3zB,EAAAA,UAAUd,EAAS,eAAee,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WACrDjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKwjC,cAAcxiC,KAEvCgvB,EAAAA,UAAUd,EAAS,eAAee,KAC9B2zB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B5zB,EAAAA,UAAUlwB,EAAKoiD,WACjBjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAK+jD,cAAc/iD,KAExCgvB,EAAAA,UAAUd,EAAS,aAAae,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAC/CjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKyjC,YAAYziC,KAEpChB,EAAK2gD,OAEN3wB,EAAAA,UAAUd,EAAS,sBAAsBe,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAC5DjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKgkD,cAAchjD,MAEpChB,EAAKikD,mBACZj0B,EAAAA,UAAUd,EAAS,cAAce,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WACpDjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKwjC,cAAcxiC,KAGvCgvB,EAAAA,UAAUd,EAAS,aAAae,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WACnDjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKwjC,cAAcxiC,QAK1ChB,EAAK2jD,sBAAwB3jD,EAAKikD,oBACnCj0B,EAAAA,UAAUvmB,SAASkoB,YAAa,aAAa1B,KACzC2zB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B5zB,EAAAA,UAAUlwB,EAAKoiD,WACjBjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAK+jD,cAAc/iD,KAExCgvB,EAAAA,UAAUvmB,SAASkoB,YAAa,YAAY1B,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAC3DjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKyjC,YAAYziC,MACjChB,EAAK2jD,uBACb3zB,EAAAA,UAAUvmB,SAASkoB,YAAa,aAAa1B,KACzC2zB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B5zB,EAAAA,UAAUlwB,EAAKoiD,WACjBjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAK+jD,cAAc/iD,KAExCgvB,EAAAA,UAAUvmB,SAASkoB,YAAa,WAAW1B,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAC1DjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKyjC,YAAYziC,MAG7ChB,EAAKkvB,QAAQxD,cAAckE,iBAAiB,gBAAiB,SAACx2B,GAC1D4G,EAAKkkD,gBAAgB9qD,OAI7BhO,KAAKs2D,gBAAkB7c,SAASp7B,SAASkoB,YAAY4xB,iBAAiBn4D,KAAK8jC,QAAQxD,eAAe,eAAgB,IAClHtgC,KAAKu2D,eAAiB9c,SAASp7B,SAASkoB,YAAY4xB,iBAAiBn4D,KAAK8jC,QAAQxD,eAAe,cAAe,IAChHtgC,KAAK+4D,aAAe/4D,KAAK63D,SACzB73D,KAAKg5D,aAAeh5D,KAAK+3D,QACzB/3D,KAAKi5D,aAAej5D,KAAK63D,SACzB73D,KAAKk5D,aAAel5D,KAAK+3D,QAEzB/3D,KAAK8jC,QAAQxD,cAAcj9B,MAAM6iC,mBAAqB,QAMnD+uB,EAAA/0D,UAAAsmC,YAAP,WACIxmC,KAAKg3D,SAAS90D,MAAK,GACnBlC,KAAKg3D,SAASvwB,WAEVzmC,KAAKu1D,OAASv1D,KAAK23D,cAAgB33D,KAAKi3D,mBACxCj3D,KAAK23D,aAAa10B,WAAWjkB,YAAYhf,KAAK23D,cAC9C33D,KAAK23D,aAAe,OAQrB1C,EAAA/0D,UAAAi5D,YAAP,SAAmBC,GAEf,GAAIp5D,KAAKu1D,OAASv1D,KAAK23D,aAAc,KAC3B0B,EAAcr5D,KAAKs5D,UAAYt5D,KAAKu5D,oBAAoBv5D,KAAKs5D,WAAa,EAC1EE,EAAcx5D,KAAKs5D,UAAYt5D,KAAKy5D,mBAAmBz5D,KAAKs5D,WAAa,EAC/Et5D,KAAK43D,UAAYwB,EAAY/e,MAAQgf,EAAcr5D,KAAK05D,sBACxD15D,KAAK83D,SAAWsB,EAAY7e,MAAQif,EAAcx5D,KAAK25D,0BACpD,IAAK35D,KAAKu1D,MAAO,KACdtc,EAASmgB,EAAY/e,MAAQr6C,KAAKq6C,MAClCjB,EAASggB,EAAY7e,MAAQv6C,KAAKu6C,MAClCqf,EAAa55D,KAAKg4D,cAAch4D,KAAK8jC,QAAQxD,eAC7Cu5B,EAAa75D,KAAKi4D,cAAcj4D,KAAK8jC,QAAQxD,eACnDtgC,KAAK85D,eAAeF,EAAa3gB,EAAQ4gB,EAAazgB,GAG1Dp5C,KAAK64C,QAAU74C,KAAK63D,SACpB73D,KAAK84C,QAAU94C,KAAK+3D,SAUjB9C,EAAA/0D,UAAA65D,mBAAP,SAA0BC,EAA4CC,GAAtE,IAAArlD,EAAA5U,KACWi6D,GAAiBA,EAAc5f,QAAUr6C,KAAKw3D,gBAAkByC,EAAc1f,QAAUv6C,KAAKw3D,iBAC9FyC,GAAiBj6D,KAAKu1D,QAAUv1D,KAAK23D,eAIrCsC,GAAiBA,EAAc5f,QAAUr6C,KAAKq6C,OAAS4f,EAAc1f,QAAUv6C,KAAKu6C,QAClFv6C,KAAKu1D,QAAUv1D,KAAK23D,eACpB33D,KAAK64C,QAAUohB,EAAc5f,MAC7Br6C,KAAK84C,QAAUmhB,EAAc1f,MAC7Bv6C,KAAKi5D,aAAej5D,KAAK64C,QACzB74C,KAAKk5D,aAAel5D,KAAK84C,QACzB94C,KAAKk6D,YAAYl6D,KAAK64C,QAAS74C,KAAK84C,UAGxC94C,KAAKm5D,YAAYc,IAGrBj6D,KAAKq2D,gBAAiB,EAEtBxK,WAAW,WACHj3C,EAAK2gD,OACL3gD,EAAK+iD,aAAat0D,MAAM82D,mBAAqB,YAC7CvlD,EAAK+iD,aAAat0D,MAAM6iC,mBACpB8zB,GAAkBA,EAAet2D,SAAWs2D,EAAet2D,SAAW,IAAMkR,EAAKwhD,sBACrFxhD,EAAK+iD,aAAat0D,MAAM8iC,yBACpB6zB,GAAkBA,EAAeI,eAAiBJ,EAAeI,eAAiB,GACtFxlD,EAAK+iD,aAAat0D,MAAMg3D,gBAAkBL,GAAkBA,EAAev2D,MAAQu2D,EAAev2D,MAAQ,IAAM,GAChHmR,EAAKukD,YAAY,IAAI5B,GAAgB3iD,EAAKijD,SAAUjjD,EAAKmjD,WACjDnjD,EAAK2gD,QACb3gD,EAAKkvB,QAAQxD,cAAcj9B,MAAM82D,mBAAqB,YACtDvlD,EAAKkvB,QAAQxD,cAAcj9B,MAAM6iC,mBAC7B8zB,GAAkBA,EAAet2D,SAAWs2D,EAAet2D,SAAW,IAAMkR,EAAKwhD,sBACrFxhD,EAAKkvB,QAAQxD,cAAcj9B,MAAM8iC,yBAC7B6zB,GAAkBA,EAAeI,eAAiBJ,EAAeI,eAAiB,GACtFxlD,EAAKkvB,QAAQxD,cAAcj9B,MAAMg3D,gBAAkBL,GAAkBA,EAAev2D,MAAQu2D,EAAev2D,MAAQ,IAAM,GACzHmR,EAAKikC,QAAUjkC,EAAKijD,SACpBjjD,EAAKkkC,QAAUlkC,EAAKmjD,QACpBnjD,EAAKklD,eAAe,EAAG,KAE5B,KAWA7E,EAAA/0D,UAAAo6D,aAAP,SAAoBt5D,EAAsCg5D,EAA4CC,GAAtG,IAAArlD,EAAA5U,KACUi6D,GAAiBj6D,KAAKu1D,QAAUv1D,KAAK23D,cACvC33D,KAAK64C,QAAUohB,EAAc5f,MAC7Br6C,KAAK84C,QAAUmhB,EAAc1f,MAC7Bv6C,KAAKi5D,aAAej5D,KAAK64C,QACzB74C,KAAKk5D,aAAel5D,KAAK84C,UAChBmhB,GAAmBj6D,KAAKu1D,QAASv1D,KAAK23D,aAExC33D,KAAKu1D,QAAUv1D,KAAK23D,eAC3B33D,KAAK64C,QAAU74C,KAAK63D,SACpB73D,KAAK84C,QAAU94C,KAAK+3D,QACpB/3D,KAAKi5D,aAAej5D,KAAK64C,QAAU74C,KAAK05D,sBACxC15D,KAAKk5D,aAAel5D,KAAK84C,QAAU94C,KAAK25D,sBALxC35D,KAAKm5D,YAAYc,GAQjBj6D,KAAKu1D,QAAUv1D,KAAK23D,cACpB33D,KAAKk6D,YAAYl6D,KAAK64C,QAAS74C,KAAK84C,SAGxC94C,KAAKq2D,gBAAiB,EAEtBxK,WAAW,eACD0O,EAAY3lD,EAAK2gD,MAAQ3gD,EAAK+iD,aAAe/iD,EAAKkvB,QAAQxD,cAQhE,GAPAi6B,EAAUl3D,MAAM82D,mBAAqBvlD,EAAK2gD,OAAS3gD,EAAK+iD,aAAe,YAAc,YACrF4C,EAAUl3D,MAAM6iC,mBACZ8zB,GAAkBA,EAAet2D,SAAWs2D,EAAet2D,SAAW,IAAMkR,EAAKwhD,sBACrFmE,EAAUl3D,MAAM8iC,yBACZ6zB,GAAkBA,EAAeI,eAAiBJ,EAAeI,eAAiB,GACtFG,EAAUl3D,MAAMg3D,gBAAkBL,GAAkBA,EAAev2D,MAAQu2D,EAAev2D,MAAQ,IAAM,GAEpGzC,aAAkBu2D,GAClB3iD,EAAKukD,YAAY,IAAI5B,GAAiBv2D,EAAOq5C,MAAOr5C,EAAOu5C,YACxD,KACGigB,EAAcx5D,EAAOs/B,cAAcpvB,wBACzC0D,EAAKukD,YAAY,IAAI5B,GACjBiD,EAAY//B,KAAQ7lB,EAAK8kD,sBACzBc,EAAY7/B,IAAM/lB,EAAK+kD,yBAGhC,IAQA1E,EAAA/0D,UAAAk4C,cAAP,SAAqB9lC,GACjBtS,KAAK82D,UAAW,EAChB92D,KAAK62D,eAAiBvkD,EAAMupC,cAGtB4e,EAAcz6D,KAAKs4D,YAAYhhD,KAAK,SAAAojD,GAAU,OAAAA,EAAO52B,QAAQxD,gBAAkBhuB,EAAMqoD,gBACrFC,EAAgBH,EAAcA,EAAY32B,QAAQxD,cAAgBtgC,KAAK8jC,QAAQxD,cACjFtgC,KAAKu4D,qBACLqC,EAAcC,kBAAkB76D,KAAK62D,iBAErC+D,EAAcrnB,QACdjhC,EAAM23B,kBAGLjqC,KAAK+4D,cAAiB/4D,KAAKg5D,eAC5Bh5D,KAAK+4D,aAAe/4D,KAAK63D,SACzB73D,KAAKg5D,aAAeh5D,KAAK+3D,SAGzB/3D,KAAKu4D,uBAAyBv4D,KAAK64D,oBAEnC74D,KAAK64C,QAAUvmC,EAAM+nC,MACrBr6C,KAAK84C,QAAUxmC,EAAMioC,OACdv6C,KAAK64D,qBACZ74D,KAAK64C,QAAUvmC,EAAM6nC,QAAQ,GAAGE,MAChCr6C,KAAK84C,QAAUxmC,EAAM6nC,QAAQ,GAAGI,OAGpCv6C,KAAKm3D,gBAAkBn3D,KAAK63D,SAAW73D,KAAK64C,QAAU74C,KAAK05D,sBAC3D15D,KAAKq3D,gBAAkBr3D,KAAK+3D,QAAU/3D,KAAK84C,QAAU94C,KAAK25D,qBAC1D35D,KAAKi5D,aAAej5D,KAAK64C,QAAU74C,KAAK86D,aACxC96D,KAAKk5D,aAAel5D,KAAK84C,QAAU94C,KAAK+6D,aACxC/6D,KAAKw2D,OAASx2D,KAAK64C,QACnB74C,KAAKy2D,OAASz2D,KAAK84C,SAUhBmc,EAAA/0D,UAAAy4D,cAAP,SAAqBrmD,GAArB,IAAAsC,EAAA5U,KACI,GAAIA,KAAK82D,SAAU,KACXzc,OAAK,EAAEE,OAAK,EACZv6C,KAAKu4D,uBAAyBv4D,KAAK64D,oBAEnCxe,EAAQ/nC,EAAM+nC,MACdE,EAAQjoC,EAAMioC,OACPv6C,KAAK64D,qBACZxe,EAAQ/nC,EAAM6nC,QAAQ,GAAGE,MACzBE,EAAQjoC,EAAM6nC,QAAQ,GAAGI,MAGzBjoC,EAAM23B,sBAGJ+wB,EAAc3gB,EAAQr6C,KAAK64C,QAC3BoiB,EAAc1gB,EAAQv6C,KAAK84C,QACjC,IAAK94C,KAAK02D,eACLj7C,KAAKutB,IAAIgyB,GAAeh7D,KAAKs1D,eAAiB75C,KAAKutB,IAAIiyB,GAAej7D,KAAKs1D,eAAgB,KACtF4F,EAAqC,CACvCC,cAAe7oD,EACf8oD,MAAOp7D,KACPq7D,OAAQhhB,EAAQ2gB,EAChBM,OAAQ/gB,EAAQ0gB,EAChB5gB,MAAOA,EACPE,MAAOA,EACPn4B,QAAQ,GAMZ,GAJApiB,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAK+gD,UAAUpzC,KAAK24C,KAGnBA,EAAc94C,OAef,OAbA,GADApiB,KAAK02D,cAAe,EAChB12D,KAAKu1D,MAGLv1D,KAAKk6D,YAAY7f,EAAOE,QACrB,GAAIv6C,KAAKk3D,WAAaljD,WAAahU,KAAKo3D,WAAapjD,UAAW,KAE7D4lD,GAAc55D,KAAKk3D,WAAaljD,UAAYhU,KAAKk3D,SAAWl3D,KAAKm3D,gBAAkB,GACrFn3D,KAAKg4D,cAAch4D,KAAK8jC,QAAQxD,eAC9Bu5B,GAAc75D,KAAKo3D,WAAapjD,UAAYhU,KAAKo3D,SAAWp3D,KAAKq3D,gBAAkB,GACrFr3D,KAAKi4D,cAAcj4D,KAAK8jC,QAAQxD,eACpCtgC,KAAK85D,eAAeF,EAAYC,SAKrC,IAAK75D,KAAK02D,aACb,WAGE6E,EAA+B,CACjCJ,cAAe7oD,EACf8oD,MAAOp7D,KACPq7D,OAAQr7D,KAAK64C,QACbyiB,OAAQt7D,KAAK84C,QACbuB,MAAOr6C,KAAKw2D,OACZjc,MAAOv6C,KAAKy2D,OACZ+E,UAAWnhB,EACXohB,UAAWlhB,EACXn4B,QAAQ,GAEZpiB,KAAK41D,SAASrzC,KAAKg5C,OAEbG,EAAWH,EAASC,UACpBG,EAAWJ,EAASE,UACpBG,EAAgBF,EAAW17D,KAAK64C,QAChCgjB,EAAgBF,EAAW37D,KAAK84C,QAEtC,IAAKyiB,EAASn5C,OAAQ,CAClB,GAAIpiB,KAAKu1D,MACLv1D,KAAK43D,UAAY53D,KAAKi5D,aAAe2C,EACrC57D,KAAK83D,SAAW93D,KAAKk5D,aAAe2C,MACjC,KACGC,EAAaJ,EAAW17D,KAAKw2D,OAC7BuF,EAAaJ,EAAW37D,KAAKy2D,OAC7BuF,EAAah8D,KAAKg4D,cAAch4D,KAAK8jC,QAAQxD,eAAiBw7B,EAC9DG,EAAaj8D,KAAKi4D,cAAcj4D,KAAK8jC,QAAQxD,eAAiBy7B,EACpE/7D,KAAK85D,eAAekC,EAAYC,GAEpCj8D,KAAKk8D,mBAAmB7hB,EAAOE,EAAOjoC,GAG1CtS,KAAKw2D,OAASkF,EACd17D,KAAKy2D,OAASkF,IAWf1G,EAAA/0D,UAAAm4C,YAAP,SAAmB/lC,GAAnB,IAAAsC,EAAA5U,KACI,GAAKA,KAAK82D,SAAV,KAIIzc,EAAOE,EACPv6C,KAAKu4D,uBAAyBv4D,KAAK64D,oBAEnCxe,EAAQ/nC,EAAM+nC,MACdE,EAAQjoC,EAAMioC,OACPv6C,KAAK64D,qBACZxe,EAAQ/nC,EAAM6nC,QAAQ,GAAGE,MACzBE,EAAQjoC,EAAM6nC,QAAQ,GAAGI,MAGzBjoC,EAAM23B,sBAGJrI,EAAgC,CAClCu5B,cAAe7oD,EACf8oD,MAAOp7D,KACPq7D,OAAQr7D,KAAK64C,QACbyiB,OAAQt7D,KAAK84C,QACbuB,MAAOA,EACPE,MAAOA,GAEXv6C,KAAK62D,eAAiB,KACtB72D,KAAK82D,UAAW,EACZ92D,KAAK02D,cACD12D,KAAK+2D,eAAiB/2D,KAAK+2D,gBAAkB/2D,KAAK8jC,QAAQxD,cAC1DtgC,KAAKm8D,kBAAkB7pD,EAAM+nC,MAAO/nC,EAAMioC,MAAOjoC,GAC1CtS,KAAK01D,kBACZ11D,KAAK+5D,qBAGT/5D,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAKihD,QAAQtzC,KAAKqf,KAGjB5hC,KAAKq2D,gBACNr2D,KAAK84D,gBAAgB,OAIzB94D,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAKkhD,UAAUvzC,KAAKqf,OAYzBqzB,EAAA/0D,UAAA04D,cAAP,SAAqBtmD,GAArB,IAAAsC,EAAA5U,KACI,GAAKA,KAAK82D,SAAV,KAIMl1B,EAAY,CACdu5B,cAAe7oD,EACf8oD,MAAOp7D,KACPq7D,OAAQr7D,KAAK64C,QACbyiB,OAAQt7D,KAAK84C,QACbuB,MAAO/nC,EAAM+nC,MACbE,MAAOjoC,EAAMioC,OAEjBv6C,KAAK62D,eAAiB,KACtB72D,KAAK82D,UAAW,EACZ92D,KAAK02D,eACL12D,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAKihD,QAAQtzC,KAAKqf,KAElB5hC,KAAK01D,iBACL11D,KAAK+5D,qBACG/5D,KAAKq2D,gBACbr2D,KAAK84D,gBAAgB,SAcvB7D,EAAA/0D,UAAAg6D,YAAV,SAAsB7f,EAAOE,EAAO1pC,GAApC,IAAA+D,EAAA5U,KACI,QADgC,IAAA6Q,IAAAA,EAAA,MAC3B7Q,KAAKu1D,MAAV,KAII6G,EACAp8D,KAAKq8D,eACLD,EAAkBp8D,KAAKk1D,cAAcvU,mBAAmB3gD,KAAKq8D,cAAer8D,KAAKq1D,cACjFr1D,KAAK23D,aAAeyE,EAAgBxX,UAAU,IAE9C5kD,KAAK23D,aAAe9mD,EAAOA,EAAKyrD,WAAU,GAAQt8D,KAAK8jC,QAAQxD,cAAcg8B,WAAU,OAGrFtB,EAAc3gB,EAAQr6C,KAAK64C,QAC3BoiB,EAAc1gB,EAAQv6C,KAAK84C,QACjC94C,KAAK22D,YAAc32D,KAAKs5D,UAAYt5D,KAAKu5D,oBAAoBv5D,KAAKs5D,WAAa,EAC/Et5D,KAAK42D,YAAc52D,KAAKs5D,UAAYt5D,KAAKy5D,mBAAmBz5D,KAAKs5D,WAAa,EAE9Et5D,KAAK23D,aAAat0D,MAAM6iC,mBAAqB,OAC7ClmC,KAAK23D,aAAat0D,MAAMq5B,SAAW,WAG/B18B,KAAKw1D,YACLx1D,KAAKo1D,SAASrC,SAAS/yD,KAAK23D,aAAc33D,KAAKw1D,gBAG7C+G,EAAkB,CACpBnB,MAAOp7D,KACP23D,aAAc33D,KAAK23D,aACnBv1C,QAAQ,GAGZ,GADApiB,KAAK+1D,YAAYxzC,KAAKg6C,GAClBA,EAAgBn6C,OAKhB,OAJApiB,KAAK23D,aAAe,UAChB33D,KAAKq8D,eAAiBD,GACtBA,EAAgBp6B,WAKpBhiC,KAAKs5D,UACLt5D,KAAKs5D,UAAUx6C,YAAY9e,KAAK23D,cAEhCt5C,SAASQ,KAAKC,YAAY9e,KAAK23D,kBAG7BO,EAAkBze,SAASp7B,SAASkoB,YAAY4xB,iBAAiBn4D,KAAK23D,cAAc,eAAgB,IACpGS,EAAiB3e,SAASp7B,SAASkoB,YAAY4xB,iBAAiBn4D,KAAK23D,cAAc,cAAe,IACxG33D,KAAK23D,aAAat0D,MAAMo3B,KAAQz6B,KAAKi5D,aAAef,EAAkB8C,EAAch7D,KAAK22D,YAAe,KACxG32D,KAAK23D,aAAat0D,MAAMs3B,IAAO36B,KAAKk5D,aAAed,EAAiB6C,EAAcj7D,KAAK22D,YAAe,KAElG32D,KAAKu4D,uBAEuB,OAAxBv4D,KAAK62D,gBACL72D,KAAK23D,aAAakD,kBAAkB76D,KAAK62D,gBAE7C72D,KAAK23D,aAAanzB,iBAAiB,cAAe,SAACx2B,GAC/C4G,EAAK+jD,cAAc3qD,KAEvBhO,KAAK23D,aAAanzB,iBAAiB,YAAa,SAACx2B,GAC7C4G,EAAKyjC,YAAYrqC,KAErBhO,KAAK23D,aAAanzB,iBAAiB,qBAAsB,SAACx2B,GACtD4G,EAAKgkD,cAAc5qD,MAK3BhO,KAAK23D,aAAanzB,iBAAiB,gBAAiB,SAACx2B,GACjD4G,EAAKkkD,gBAAgB9qD,KAIrBhO,KAAKy1D,iBACLz1D,KAAKw8D,SAAU,GAGnBx8D,KAAK4tC,IAAIrL,kBAOH0yB,EAAA/0D,UAAAg8D,mBAAV,SAA6B7hB,EAAeE,EAAe4gB,GAYvD,QAXIsB,EACEC,EAA6C,CAC/CrB,OAAQr7D,KAAK64C,QACbyiB,OAAQt7D,KAAK84C,QACbuB,MAAOA,EACPE,MAAOA,EACP6gB,MAAOp7D,KACPm7D,cAAeA,GAGbwB,EAAoB38D,KAAK48D,mBAAmBviB,EAAOE,GAChD/5C,EAAI,EAAGA,EAAIm8D,EAAkBh8D,OAAQH,IAC1C,GAAuD,SAAnDm8D,EAAkBn8D,GAAGq8D,aAAa,cAClCF,EAAkBn8D,KAAOR,KAAK23D,cAAgBgF,EAAkBn8D,KAAOR,KAAK8jC,QAAQxD,cAAe,CACnGm8B,EAAcE,EAAkBn8D,GAChC,MAIR,GAAIi8D,KACEz8D,KAAK+2D,eAAkB/2D,KAAK+2D,eAAiB/2D,KAAK+2D,gBAAkB0F,GAC9Dz8D,KAAK+2D,eACL/2D,KAAK88D,cAAc98D,KAAK+2D,cAAe,eAAgB2F,GAG3D18D,KAAK+2D,cAAgB0F,EACrBz8D,KAAK88D,cAAc98D,KAAK+2D,cAAe,eAAgB2F,QACpD,IAAKD,GAAez8D,KAAK+2D,cAG5B,OAFA/2D,KAAK88D,cAAc98D,KAAK+2D,cAAe,eAAgB2F,QACvD18D,KAAK+2D,cAAgB,MAIzB0F,GACAz8D,KAAK88D,cAAcL,EAAa,cAAeC,IAS7CzH,EAAA/0D,UAAAi8D,kBAAV,SAA4B9hB,EAAeE,EAAe4gB,OAChDv5B,EAAuC,CACzCy5B,OAAQr7D,KAAK64C,QACbyiB,OAAQt7D,KAAK84C,QACbuB,MAAOA,EACPE,MAAOA,EACP6gB,MAAOp7D,KACPm7D,cAAeA,GAGnBn7D,KAAK88D,cAAc98D,KAAK+2D,cAAe,UAAWn1B,GAClD5hC,KAAK88D,cAAc98D,KAAK+2D,cAAe,eAAgBn1B,GACvD5hC,KAAK+2D,cAAgB,MAOlB9B,EAAA/0D,UAAA68D,sBAAP,eACQC,EAASC,EACb,GAAIj9D,KAAKu1D,OAASv1D,KAAK23D,aAAc,KAE3BuF,EAAgBl9D,KAAK43D,UAAY53D,KAAKi5D,aACtCkE,EAAgBn9D,KAAK83D,SAAW93D,KAAKk5D,aAC3C8D,EAAUh9D,KAAK63D,SACfoF,EAAUj9D,KAAK+3D,YACTqF,EAAap9D,KAAKi5D,aAAe+D,EACjCK,EAAar9D,KAAKk5D,aAAe+D,EACvCj9D,KAAK83D,SAAWkF,EAAUE,EAAgBE,EAC1Cp9D,KAAK43D,UAAYqF,EAAUE,EAAgBE,OACxC,IAAKr9D,KAAKu1D,MAAO,CACd2H,EAAgBl9D,KAAKg4D,cAAch4D,KAAK8jC,QAAQxD,eAChD68B,EAAgBn9D,KAAKi4D,cAAcj4D,KAAK8jC,QAAQxD,eACtD08B,EAAUh9D,KAAK63D,SAAWqF,EAC1BD,EAAUj9D,KAAK+3D,QAAUoF,MACnBlkB,EAASj5C,KAAK+4D,aAAeiE,EAC7B5jB,EAASp5C,KAAKg5D,aAAeiE,EACnCj9D,KAAK85D,eAAeoD,EAAgBjkB,EAAQkkB,EAAgB/jB,GAEhEp5C,KAAK+4D,aAAeiE,IAAYhpD,UAAYgpD,EAAUh9D,KAAK+4D,aAC3D/4D,KAAKg5D,aAAeiE,IAAYjpD,UAAYipD,EAAUj9D,KAAKg5D,cAkBxD/D,EAAA/0D,UAAAo9D,aAAP,WACIt9D,KAAK+8D,wBACD/8D,KAAK01D,kBAAoB11D,KAAK23D,cAC9B33D,KAAK+5D,sBAON9E,EAAA/0D,UAAA44D,gBAAP,SAAuBxmD,GAAvB,IAAAsC,EAAA5U,KACI,IAAMA,KAAK02D,cAAiB12D,KAAKq2D,kBAAmBr2D,KAAK82D,SAAzD,CAKA,GAAI92D,KAAKu1D,OAASv1D,KAAK23D,aAAc,CACjC33D,KAAKi5D,aAAej5D,KAAK63D,SAAW73D,KAAK05D,sBACzC15D,KAAKk5D,aAAel5D,KAAK+3D,QAAU/3D,KAAK25D,yBAElC4D,EAA4C,CAC9CnC,MAAOp7D,KACP23D,aAAc33D,KAAK23D,aACnBv1C,QAAQ,GAGZ,GADApiB,KAAKg2D,aAAazzC,KAAKg7C,GACnBA,EAAiBn7C,OACjB,OAGApiB,KAAKy1D,iBACLz1D,KAAKw8D,SAAU,GAEnBx8D,KAAK23D,aAAa10B,WAAWjkB,YAAYhf,KAAK23D,cAC9C33D,KAAK23D,aAAe,UACZ33D,KAAKu1D,QACbv1D,KAAK8jC,QAAQxD,cAAcj9B,MAAM82D,mBAAqB,GACtDn6D,KAAK8jC,QAAQxD,cAAcj9B,MAAM6iC,mBAAqB,OACtDlmC,KAAK8jC,QAAQxD,cAAcj9B,MAAM8iC,yBAA2B,GAC5DnmC,KAAK8jC,QAAQxD,cAAcj9B,MAAMg3D,gBAAkB,IAEvDr6D,KAAKq2D,gBAAiB,EACtBr2D,KAAK02D,cAAe,EAGpB12D,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAKqhD,aAAa1zC,KAAK,CACnB44C,cAAe7oD,EACf8oD,MAAOxmD,EACPymD,OAAQzmD,EAAKikC,QACbyiB,OAAQ1mD,EAAKkkC,QACbuB,MAAOzlC,EAAKikC,QACZ0B,MAAO3lC,EAAKkkC,cAQdmc,EAAA/0D,UAAA08D,mBAAV,SAA6BviB,EAAeE,OAKlCijB,EAAYnjB,EAAQtoC,OAAO0rD,YAC3BC,EAAYnjB,EAAQxoC,OAAO4rD,YACjC,GAAIt/C,SAA8B,oBAAG,KAE3Bu/C,EAAWv/C,SAA8B,oBAAEm/C,EAAWE,GAC5D,OAAoB,OAAbE,EAAoB,GAAKA,EAGhC,OAAOv/C,SAASs+C,kBAAkBa,EAAWE,IAO3CzI,EAAA/0D,UAAA48D,cAAV,SAAwB97D,EAAQ68D,EAAmBj8B,OAEzCk8B,EAAiBz/C,SAAS0/C,YAAY,eAC5CD,EAAeE,gBAAgBH,GAAW,GAAO,EAAOj8B,GACxD5gC,EAAO87D,cAAcgB,IAIf7I,EAAA/0D,UAAA83D,cAAV,SAAwBxQ,OAChByW,EAAO,EACX,GAAIzW,EAAKnkD,MAAMmB,UAAW,KAChB05D,EAAS1W,EAAKnkD,MAAMmB,UACpBkxB,EAASwoC,EAASA,EAAOC,MAAM,cAAgBnqD,UACrDiqD,EAAOvoC,EAASpb,OAAOob,EAAQ,IAAO,EAG1C,OAAOuoC,GAGDhJ,EAAA/0D,UAAA+3D,cAAV,SAAwBzQ,OAChB4W,EAAO,EACX,GAAI5W,EAAKnkD,MAAMmB,UAAW,KAChB05D,EAAS1W,EAAKnkD,MAAMmB,UACpBkxB,EAASwoC,EAASA,EAAOC,MAAM,cAAgBnqD,UACrDoqD,EAAO1oC,EAASpb,OAAOob,EAAQ,IAAO,EAG1C,OAAO0oC,GAIDnJ,EAAA/0D,UAAA45D,eAAV,SAAyBh9C,EAAWqd,GAChCn6B,KAAK8jC,QAAQxD,cAAcj9B,MAAMmB,UAAY,eAAiBsY,EAAI,OAASqd,EAAI,YAGzE86B,EAAA/0D,UAAAy5D,mBAAV,WACI,OAAO5nD,OAAO2pB,QAAU3pB,OAAO2pB,QAAW3pB,OAAO4rD,YAAc5rD,OAAO4rD,YAAc,GAG9E1I,EAAA/0D,UAAAw5D,oBAAV,WACI,OAAO3nD,OAAOwpB,QAAUxpB,OAAOwpB,QAAWxpB,OAAO0rD,YAAc1rD,OAAO0rD,YAAc,GAG9ExI,EAAA/0D,UAAAq5D,oBAAV,SAA8BD,OACpB+E,EAAgBhgD,SAASkoB,YAAY4xB,iBAAiBmB,GAAWgF,iBAAiB,YACxF,MAAsB,WAAlBD,GAA8B/E,EAAUiF,cAAgBjF,EAAUiF,eAAiBlgD,SAASQ,KACrF,EACkB,WAAlBw/C,GAA8B/E,EAAUiF,aACxCjF,EAAUiF,aAAartD,wBAAwBupB,KAAOz6B,KAAK05D,sBAE/DJ,EAAUpoD,wBAAwBupB,KAAOz6B,KAAK05D,uBAG/CzE,EAAA/0D,UAAAu5D,mBAAV,SAA6BH,OACnB+E,EAAgBhgD,SAASkoB,YAAY4xB,iBAAiBmB,GAAWgF,iBAAiB,YACxF,MAAsB,WAAlBD,GAA8B/E,EAAUiF,cAAgBjF,EAAUiF,eAAiBlgD,SAASQ,KACrF,EACkB,WAAlBw/C,GAA8B/E,EAAUiF,aACxCjF,EAAUiF,aAAartD,wBAAwBypB,IAAM36B,KAAK25D,qBAE9DL,EAAUpoD,wBAAwBypB,IAAM36B,KAAK25D,0CA9vC3DlrD,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,OACVtgC,SAAU,yDAxIVugC,EAAAA,yBAXA3L,EAAAA,kBAYAkT,EAAAA,wBANAzP,EAAAA,cAIAssB,EAAAA,2CAsJC1kD,EAAAA,MAAKX,KAAA,CAAC,kCAaNW,EAAAA,2BAgBAA,EAAAA,qBAcAA,EAAAA,0BAYAA,EAAAA,8BAgBAA,EAAAA,gCAiBAA,EAAAA,6BAkBAA,EAAAA,yBAcAA,EAAAA,4BAcAA,EAAAA,4BAoBAA,EAAAA,yBAuBAgd,EAAAA,yBAiBAA,EAAAA,wBAiBAA,EAAAA,0BAiBAA,EAAAA,4BAiBAA,EAAAA,6BAiBAA,EAAAA,6BAiBAA,EAAAA,4BAMAygC,EAAAA,gBAAep+C,KAAA,CAAC0mD,yBAMhBvlB,EAAAA,YAAWnhC,KAAA,CAAC,uCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAvObilC,EAAAA,CAHC/U,GAAkB,uPAoBnB+U,EAAAA,CAHC/U,GAAkB,8OAyOnB+U,EAAAA,CAFC/U,GAAkB,gQAo7BvB+2B,mBAoJI,SAAAuJ,EAAmB16B,EAA6BuB,EAA8BjG,GAA3Dp/B,KAAA8jC,QAAAA,EAA6B9jC,KAAAqlC,UAAAA,EAA8BrlC,KAAAo/B,MAAAA,EAnEvEp/B,KAAAy+D,MAAQ,IAAIt1C,EAAAA,aAeZnpB,KAAA0+D,KAAO,IAAIv1C,EAAAA,aAeXnpB,KAAA2+D,MAAQ,IAAIx1C,EAAAA,aAiBZnpB,KAAA4+D,QAAU,IAAIz1C,EAAAA,aAMdnpB,KAAA6+D,WAAY,EAMZ7+D,KAAA8+D,UAAW,EAKR9+D,KAAAg3D,SAAW,IAAIx3B,EAAAA,QAIrBx/B,KAAK++D,cAAgB,IAAI/K,GAoNjC,OA9SIx0D,OAAAgC,eACWg9D,EAAAt+D,UAAA,eAAY,KAIvB,WACI,OAAOF,KAAK++D,mBANhB,SACwBC,GACpBh/D,KAAK++D,cAAgB,IAAIC,EAASh/D,KAAKqlC,4CA8FpCm5B,EAAAt+D,UAAA2uC,SAAP,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKo/B,MAAM0K,kBAAkB,WACzBlF,EAAAA,UAAUhwB,EAAKkvB,QAAQxD,cAAe,gBAAgBuE,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WACrEjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKqqD,YAAW,KAExCr6B,EAAAA,UAAUhwB,EAAKkvB,QAAQxD,cAAe,gBAAgBuE,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAAWjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKsqD,YAAYtpD,KACzHgvB,EAAAA,UAAUhwB,EAAKkvB,QAAQxD,cAAe,eAAeuE,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAAWjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKuqD,WAAWvpD,QAOxH4oD,EAAAt+D,UAAAsmC,YAAP,WACIxmC,KAAKg3D,SAAS90D,MAAK,GACnBlC,KAAKg3D,SAASvwB,YAMX+3B,EAAAt+D,UAAAi/D,WAAP,SAAkB7sD,OACR8sD,EAAcp/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBupB,KAAOz6B,KAAK05D,sBAC7E2F,EAAcr/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBypB,IAAM36B,KAAK25D,qBAC5E2F,EAAUhtD,EAAMitD,OAAOllB,MAAQ+kB,EAC/BI,EAAUltD,EAAMitD,OAAOhlB,MAAQ8kB,EAC/Bz9B,EAAgC,CAClCu5B,cAAe7oD,EAAMitD,OAAOpE,cAC5BC,MAAOp7D,KACPk0D,KAAM5hD,EAAMitD,OAAOnE,MACnBqE,SAAUntD,EAAMitD,OAAOnE,MAAM5mD,KAC7B6mD,OAAQ/oD,EAAMitD,OAAOlE,OACrBC,OAAQhpD,EAAMitD,OAAOjE,OACrBjhB,MAAO/nC,EAAMitD,OAAOllB,MACpBE,MAAOjoC,EAAMitD,OAAOhlB,MACpB+kB,QAASA,EACTE,QAASA,GAGbx/D,KAAK0+D,KAAKn8C,KAAKqf,IAMZ48B,EAAAt+D,UAAA++D,YAAP,SAAmB3sD,GAAnB,IAAAsC,EAAA5U,KACI,GAAKA,KAAK0/D,aAAaptD,EAAMitD,OAAOnE,OAApC,CAIAp7D,KAAK8+D,UAAW,MACVM,EAAcp/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBupB,KAAOz6B,KAAK05D,sBAC7E2F,EAAcr/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBypB,IAAM36B,KAAK25D,qBAC5E2F,EAAUhtD,EAAMitD,OAAOllB,MAAQ+kB,EAC/BI,EAAUltD,EAAMitD,OAAOhlB,MAAQ8kB,EAC/Bz9B,EAAgC,CAClCu5B,cAAe7oD,EAAMitD,OAAOpE,cAC5BC,MAAOp7D,KACPk0D,KAAM5hD,EAAMitD,OAAOnE,MACnBqE,SAAUntD,EAAMitD,OAAOnE,MAAM5mD,KAC7B6mD,OAAQ/oD,EAAMitD,OAAOlE,OACrBC,OAAQhpD,EAAMitD,OAAOjE,OACrBjhB,MAAO/nC,EAAMitD,OAAOllB,MACpBE,MAAOjoC,EAAMitD,OAAOhlB,MACpB+kB,QAASA,EACTE,QAASA,GAEbx/D,KAAKo/B,MAAMsjB,IAAI,WACX9tC,EAAK6pD,MAAMl8C,KAAKqf,OAOjB48B,EAAAt+D,UAAAg/D,YAAP,SAAmB5sD,GAAnB,IAAAsC,EAAA5U,KACI,GAAKA,KAAK0/D,aAAaptD,EAAMitD,OAAOnE,OAApC,CAIAp7D,KAAK8+D,UAAW,MACVM,EAAcp/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBupB,KAAOz6B,KAAK05D,sBAC7E2F,EAAcr/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBypB,IAAM36B,KAAK25D,qBAC5E2F,EAAUhtD,EAAMitD,OAAOllB,MAAQ+kB,EAC/BI,EAAUltD,EAAMitD,OAAOhlB,MAAQ8kB,EAC/Bz9B,EAAgC,CAClCu5B,cAAe7oD,EAAMitD,OAAOpE,cAC5BC,MAAOp7D,KACPk0D,KAAM5hD,EAAMitD,OAAOnE,MACnBqE,SAAUntD,EAAMitD,OAAOnE,MAAM5mD,KAC7B6mD,OAAQ/oD,EAAMitD,OAAOlE,OACrBC,OAAQhpD,EAAMitD,OAAOjE,OACrBjhB,MAAO/nC,EAAMitD,OAAOllB,MACpBE,MAAOjoC,EAAMitD,OAAOhlB,MACpB+kB,QAASA,EACTE,QAASA,GAEbx/D,KAAKo/B,MAAMsjB,IAAI,WACX9tC,EAAK+pD,MAAMp8C,KAAKqf,OAQjB48B,EAAAt+D,UAAAy/D,WADP,SACkBrtD,GADlB,IAAAsC,EAAA5U,KAEI,GAAKA,KAAK0/D,aAAaptD,EAAMitD,OAAOnE,OAApC,KAIMgE,EAAcp/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBupB,KAAOz6B,KAAK05D,sBAC7E2F,EAAcr/D,KAAK8jC,QAAQxD,cAAcpvB,wBAAwBypB,IAAM36B,KAAK25D,qBAC5E2F,EAAUhtD,EAAMitD,OAAOllB,MAAQ+kB,EAC/BI,EAAUltD,EAAMitD,OAAOhlB,MAAQ8kB,EAC/BrxD,EAA8B,CAChCotD,MAAOp7D,KACPm7D,cAAe7oD,EAAMitD,OAAOpE,cAC5BjH,KAAM5hD,EAAMitD,OAAOnE,MACnBqE,SAAUntD,EAAMitD,OAAOnE,MAAM5mD,KAC7B6mD,OAAQ/oD,EAAMitD,OAAOlE,OACrBC,OAAQhpD,EAAMitD,OAAOjE,OACrBjhB,MAAO/nC,EAAMitD,OAAOllB,MACpBE,MAAOjoC,EAAMitD,OAAOhlB,MACpB+kB,QAASA,EACTE,QAASA,EACTp9C,QAAQ,GAMZ,GAJApiB,KAAKo/B,MAAMsjB,IAAI,WACX9tC,EAAKgqD,QAAQr8C,KAAKvU,KAGlBhO,KAAK++D,gBAAkB/wD,EAAKoU,OAAQ,KAC9Bw9C,EAAkBttD,EAAMitD,OAAOnE,MAAMwB,mBAAmBtqD,EAAMitD,OAAOllB,MAAO/nC,EAAMitD,OAAOhlB,OACzFslB,EAAc7/D,KAAK8/D,iBAAiBxtD,EAAMitD,OAAOnE,MAAOwE,GAC9D5/D,KAAK++D,cAAc9K,WAAW3hD,EAAMitD,OAAOnE,MAAOp7D,KAAM6/D,MAItDrB,EAAAt+D,UAAAy5D,mBAAV,WACI,OAAO5nD,OAAO2pB,QAAU3pB,OAAO2pB,QAAW3pB,OAAO4rD,YAAc5rD,OAAO4rD,YAAc,GAG9Ea,EAAAt+D,UAAAw5D,oBAAV,WACI,OAAO3nD,OAAOwpB,QAAUxpB,OAAOwpB,QAAWxpB,OAAO0rD,YAAc1rD,OAAO0rD,YAAc,GAG9Ee,EAAAt+D,UAAAw/D,aAAV,SAAuBxL,OACb6L,EAAgB7L,EAAK8L,uBAAuBrgE,MAC5CsgE,EAAgBjgE,KAAKkgE,uBAAuBvgE,MAElD,IAAKogE,IAAkBE,EACnB,OAAOjgE,KAAKkgE,cAAgBhM,EAAK8L,YAC9B,IAAKD,GAAiBE,GAEzB,QADME,EAAwBngE,KAAgB,YACrCQ,EAAI,EAAGA,EAAI2/D,EAAUx/D,OAAQH,IAClC,GAAI2/D,EAAU3/D,KAAO0zD,EAAK8L,YACtB,OAAO,OAGZ,GAAID,IAAkBE,OACnBG,EAAwBlM,EAAgB,YAC9C,IAAS1zD,EAAI,EAAGA,EAAI4/D,EAAUz/D,OAAQH,IAClC,GAAI4/D,EAAU5/D,KAAOR,KAAKkgE,YACtB,OAAO,OAMf,IAFME,EAAwBlM,EAAgB,YACxCiM,EAAwBngE,KAAgB,YACrCQ,EAAI,EAAGA,EAAI4/D,EAAUz/D,OAAQH,IAClC,IAAK,IAAI0V,EAAI,EAAGA,EAAIiqD,EAAUx/D,OAAQuV,IAClC,GAAIkqD,EAAU5/D,KAAO2/D,EAAUjqD,GAC3B,OAAO,EAMvB,OAAO,GAGDsoD,EAAAt+D,UAAA4/D,iBAAV,SAA2BO,EAA8BT,OACjDC,GAAe,EACbS,EAAe3gE,MAAMO,UAAU2X,MAAMjX,KAAKZ,KAAK8jC,QAAQxD,cAAc3tB,UAC3E,IAAK2tD,EAAa3/D,OACd,OAAOk/D,EAKX,QAFIr/D,EAAI,EACJ+/D,EAAa,MACTA,GAAc//D,EAAIo/D,EAAgBj/D,QAClCi/D,EAAgBp/D,GAAGu8B,gBAAkB/8B,KAAK8jC,QAAQxD,gBAClDigC,EAAaX,EAAgBp/D,IAEjCA,QAGEggE,EAAmBF,EAAahvD,QAAQ+uD,EAAWv8B,QAAQxD,eAMjE,OALAu/B,EAAcS,EAAahvD,QAAQivD,IACT,IAAtBC,GAA2BA,EAAmBX,GAC9CA,IAGGA,uBArWdpxD,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,OACVtgC,SAAU,yDAr5CV40B,EAAAA,kBAUA+vB,EAAAA,iBAJAtsB,EAAAA,wCA05CCp4B,EAAAA,MAAKX,KAAA,CAAC,gCAgBNW,EAAAA,4BA4BAA,EAAAA,qBAqBAgd,EAAAA,qBAeAA,EAAAA,sBAeAA,EAAAA,wBAiBAA,EAAAA,0BAMAwjB,EAAAA,YAAWnhC,KAAA,CAAC,oCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAyHZY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAqG9BwwD,KAMAiC,GAAA,WAAA,SAAAA,KAIiC,2BAJhCzxD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACgmD,GAAkBuJ,GAAkB9J,IACnDxlD,QAAS,CAAC+lD,GAAkBuJ,GAAkB9J,QAEjB+L,EAJjC,GClwDAC,GAAA,WAeA,SAAAA,IAEW1gE,KAAA2gE,WAAa,GA2DxB,OA9CWD,EAAAxgE,UAAA0gE,UAAP,SAAiB3kD,EAAWhb,OACpBuP,EAAS,GAab,OAXIvP,GAAOgb,EAAKhb,GACZuP,EAASyL,EAAKhb,GAAKwP,WACZwL,EAAK6nB,UACR7nB,EAAK6nB,QAAQxD,cACb9vB,EAASyL,EAAK6nB,QAAQxD,cAAcugC,YAAYnhD,OAEzCzD,EAAK6nB,QAAQ+8B,cACpBrwD,EAASyL,EAAK6nB,QAAQ+8B,YAAYnhD,SAInClP,GAKJkwD,EAAAxgE,UAAAiqB,UAAP,SAAiB22C,GACb,OAAOA,EAAYzrD,eAOhBqrD,EAAAxgE,UAAA6gE,QAAP,SAAeD,EAAqBH,GAChC,OAAOG,EAAYxvD,QAAQqvD,GAAcA,EAAWtrD,eAAiB,KAAO,GAKzEqrD,EAAAxgE,UAAA8gE,eAAP,SAAsB/kD,GACdA,EAAKpc,eAAe,YACpBoc,EAAK4N,QAAS,IAMf62C,EAAAxgE,UAAA+gE,mBAAP,SAA0BhlD,GAClBA,EAAKpc,eAAe,YACpBoc,EAAK4N,QAAS,IAG1B62C,EA5EA,iBAwFI,SAAAQ,EAAoBp9B,EAAqBsxB,GAArBp1D,KAAA8jC,QAAAA,EALH9jC,KAAAmhE,UAAY,IAAIh4C,EAAAA,cAAa,GAC7BnpB,KAAAohE,SAAW,IAAIj4C,EAAAA,aAmCpC,OA5BW+3C,EAAAhhE,UAAA8hD,YAAP,SAAmBC,GAEXA,EAAQof,eACRpf,EAAQof,cAAcnf,cACtBD,EAAQof,cAAcnf,aAAaye,aAAe3sD,WAClDiuC,EAAQof,cAAcC,eACtBrf,EAAQof,cAAcnf,aAAaye,aAAe1e,EAAQof,cAAcC,cAAcX,YACtF3gE,KAAKga,UAILknD,EAAAhhE,UAAA8Z,OAAR,WACI,GAAKha,KAAKqhE,cAAc3uB,MAAxB,KAIM1kC,EAAO,CAAEoU,QAAQ,EAAOswB,MAAO1yC,KAAKqhE,cAAc3uB,OAGxD,GAFA1yC,KAAKmhE,UAAU5+C,KAAKvU,IAEhBA,EAAKoU,OAAT,KAMMg/C,GAFO,IAAIG,IAEK/8D,UAAUxE,KAAKqhE,cAAc3uB,MAAO1yC,KAAKqhE,eAC/DrhE,KAAKohE,SAAS7+C,KAAK,CAAEi/C,cAAeJ,2BAtC3C3yD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DA7EV40B,EAAAA,kBAQA+vB,EAAAA,gDAwEC1nC,EAAAA,yBACAA,EAAAA,8BAEAhd,EAAAA,MAAKX,KAAA,CAAC,gBAiCXkzD,mBAEA,SAAAK,KAsCA,OAhCWA,EAAArhE,UAAAsE,UAAP,SAAiBkuC,EAEAppB,GAIb,GAAKopB,GAAUA,EAAM/xC,QAAW2oB,EAwBhC,OApBIA,EAAQopB,QACRA,EAAQppB,EAAQopB,OAGXA,EAAM14B,OAAO,SAACiC,OACbkiD,EAAQ70C,EAAQy3C,QAAQz3C,EAAQa,UAAUb,EAAQs3C,UAAU3kD,EAAMqN,EAAQroB,MAAOqoB,EAAQq3C,YAY/F,OAVIxC,EACI70C,EAAQ03C,gBACR13C,EAAQ03C,eAAe/kD,GAGvBqN,EAAQ23C,oBACR33C,EAAQ23C,mBAAmBhlD,GAI5BkiD,yBAjClBx1C,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,YACN4I,MAAM,MAoCV24C,KAKAE,GAAA,WAAA,SAAAA,KAMA,2BANCzyD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACiyD,GAAoBK,IACnCryD,QAAS,CAACgyD,GAAoBK,IAC9B9kB,QAAS,CAACC,EAAAA,kBAGd+kB,EANA,GCpKAC,GAAA,WAqDI,SAAAA,EAAoB59B,EAA4E69B,GAA5E3hE,KAAA8jC,QAAAA,EAA4E9jC,KAAA2hE,KAAAA,EA3CxF3hE,KAAA4hE,YAAa,EA0DzB,OAhDIpiE,OAAAgC,eACIkgE,EAAAxhE,UAAA,UAAO,KADX,WAEI,OAAOF,KAAK4hE,gBAWhB,SAAYtoD,GACRtZ,KAAK4hE,WAAatoD,EAClBtZ,KAAK6hE,2CAWTriE,OAAAgC,eAAIkgE,EAAAxhE,UAAA,gBAAa,KAAjB,WACI,OAAIF,KAAK2hE,MAAQ3hE,KAAK2hE,KAAK,IAAM3hE,KAAK2hE,KAAK,GAAGG,eAClC9hE,KAAK2hE,KAAK,GAAsBG,iBAErC9hE,KAAK8jC,QAAQxD,+CAaxBohC,EAAAxhE,UAAA2hE,QAAA,WAAA,IAAAjtD,EAAA5U,KACQA,KAAK4hE,YACLrlB,sBAAsB,WAAM,OAAA3nC,EAAK0rB,cAAciT,+BA7D1D9kC,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,WACVtgC,SAAU,0DANM40B,EAAAA,0CAqD0BnxB,EAAAA,OAAMnE,KAAA,CAAC+zD,EAAAA,oBAAiB,CAAA7vD,KAAG46C,EAAAA,MAAI,CAAA56C,KAAIg9B,EAAAA,+CAjC5EvgC,EAAAA,MAAKX,KAAA,CAAC,eAgDX0zD,EApEA,GAyEAM,GAAA,WAAA,SAAAA,KAI8B,2BAJ7BhzD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACyyD,IACfxyD,QAAS,CAACwyD,QAEgBM,EAJ9B,GCzEAC,GAAA,WAEA,SAAAA,IAmBkCjiE,KAAAyU,IAAM,MAiBFzU,KAAA6U,SAAU,EAoBb7U,KAAAkiE,KAAO,SAoBJliE,KAAAmiE,QAAU,aAoBRniE,KAAAoiE,UAAY,UAKXpiE,KAAAqiE,QAAU,OA2BnD,OAtBI7iE,OAAAgC,eAAoCygE,EAAA/hE,UAAA,WAAQ,KAA5C,WAAiD,OAAOF,KAAKkiE,sCAK7D1iE,OAAAgC,eAA0CygE,EAAA/hE,UAAA,iBAAc,KAAxD,WAA6D,OAAOF,KAAKmiE,yCAKzE3iE,OAAAgC,eAAsCygE,EAAA/hE,UAAA,QAAK,KAA3C,WAAgD,OAAOF,KAAKoiE,2CAK5D5iE,OAAAgC,eACIygE,EAAA/hE,UAAA,YAAS,KADb,WAEI,OAAIF,KAAK6U,QACgB,QAAb7U,KAAKyU,IAAiB,cAAgB,iBAE7B,QAAbzU,KAAKyU,IAAiB,MAAQ,8DA9H7ChG,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+CAkBTC,EAAAA,MAAKX,KAAA,CAAC,iCAiBNW,EAAAA,MAAKX,KAAA,CAAC,kCAoBNW,EAAAA,MAAKX,KAAA,CAAC,kCAoBNW,EAAAA,MAAKX,KAAA,CAAC,uCAoBNW,EAAAA,MAAKX,KAAA,CAAC,uCAKNmhC,EAAAA,YAAWnhC,KAAA,CAAC,mCAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2BAOjBi0D,EAlIA,iBAoIA,SAAAK,IAkBiCtiE,KAAAuiE,KAAO,EAeLviE,KAAAwiE,OAAS,EAWfxiE,KAAAyiE,KAAO,GAeFziE,KAAA0iE,MAAQ,EAaR1iE,KAAA2iE,MAAQ,OAoB1C,OAfInjE,OAAAgC,eACI8gE,EAAApiE,UAAA,QAAK,KADT,WAEI,OAAIF,KAAKyiE,KACE,GAAGziE,KAAKyiE,KAETziE,KAAKuiE,KAAI,IAAIviE,KAAKwiE,OAAM,IAAIxiE,KAAK2iE,uCAM/CnjE,OAAAgC,eACI8gE,EAAApiE,UAAA,YAAS,KADb,WAEI,OAAOF,KAAK0iE,OAAS,uDA1F5Bj0D,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8CAiBTC,EAAAA,MAAKX,KAAA,CAAC,+BAeNW,EAAAA,MAAKX,KAAA,CAAC,+BAWNW,EAAAA,MAAKX,KAAA,CAAC,0BAeNW,EAAAA,MAAKX,KAAA,CAAC,+BAaNW,EAAAA,MAAKX,KAAA,CAAC,+BAKNmhC,EAAAA,YAAWnhC,KAAA,CAAC,iCAWZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kBAIjBs0D,KAKAM,GAAA,WAAA,SAAAA,KAI+B,2BAJ9B5zD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACqzD,GAAkBL,IACjC/yD,QAAS,CAACozD,GAAkBL,QAEDW,EAJ/B,GClOaC,GAAa,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAKvDC,GACF,GADEA,GAEL,GAFKA,GAGL,GAHKA,GAKG,EALHA,GAMA,iBAOb,SAAAC,KA2XA,OAzXIvjE,OAAAgC,eAAWuhE,EAAA7iE,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKgjE,yCAITD,EAAA7iE,UAAA+iE,iBAAP,SAAwB9gE,EAAO+gE,EAAaC,OACpCxC,EAAqBx+D,EACnBihE,EAAeF,EAAYG,OAC3BC,EAAgCtjE,KAAKujE,gBAAgBH,GACrDI,EAAwB7jE,MAAMuT,KAAKowD,EAAStzD,QAC5CyzD,EAA8BzjE,KAAK0jE,qBAAqBN,EAAMI,GAEpE,GAAI7C,EAAWhgE,OAASyiE,EAAKziE,OAAQ,CACjC,GAAmB,KAAfggE,IAAiC,IAAZwC,EAErB,OADAnjE,KAAKgjE,QAAU,EACRhjE,KAAK2jE,uBAAuBxhE,EAAO+gE,GAG9C,IAA+C,IAA3CO,EAAkBnyD,QAAQ6xD,EAAS,GACnCxC,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAS,EAAGD,EAAYW,YACnE7jE,KAAKgjE,QAAUG,EAAS,MACrB,CACHxC,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAS,EAAGC,EAAKD,EAAS,IACrEnjE,KAAKgjE,QAAUG,EAAS,EACxB,IAAK,IAAI3iE,EAAIR,KAAKgjE,QAASxiE,EAAI,IACgB,IAAvCgjE,EAAYlyD,QAAQtR,KAAKgjE,SADCxiE,IAE1BR,KAAKgjE,eAMd,KACGjwC,EAAO4tC,EAAWwC,GACpBW,EAAc9jE,KAAK+jE,sBAAsBhxC,EAAMowC,EAAQC,GAC3D,IAA2C,IAAvCK,EAAkBnyD,QAAQ6xD,GAC1BxC,EAAa3gE,KAAKgkE,cAAcrD,EAAYwC,EAAQ,IAChDW,GACAnD,EAAa3gE,KAAKgkE,cAAcrD,EAAYwC,EAAQpwC,GACpD/yB,KAAKgjE,QAAUG,EAAS,GAExBnjE,KAAKgjE,QAAUG,MAEhB,CACHxC,EAAa3gE,KAAKgkE,cAAcrD,EAAYwC,EAAQ,IACpDnjE,KAAKgjE,UAAYG,EACjB,IAAS3iE,EAAI2iE,EAAQ3iE,EAAI4iE,EAAKziE,OAAQH,IAAK,CACvC,IAA2C,IAAvCgjE,EAAYlyD,QAAQtR,KAAKgjE,SAEtB,CAEH,GADAc,EAAc9jE,KAAK+jE,sBAAsBhxC,EAAMowC,EAAQC,GACtC,CACbzC,EAAa3gE,KAAKgkE,cAAcrD,EAAYwC,EAAQpwC,GACpD/yB,KAAKgjE,UAAYG,EACjB,MAEA,MARJnjE,KAAKgjE,UAAYG,IAejC,OAAOxC,GAGJoC,EAAA7iE,UAAA+jE,UAAP,SAAiBf,GAAjB,QAAAtuD,EAAA5U,KACQkkE,EAAY,GACVd,EAAeF,EAAYG,OAC3BC,EAAgCtjE,KAAKujE,gBAAgBH,OAE3D,IAAsB,IAAAe,EAAAp0D,EAAAqzD,GAAIgB,EAAAD,EAAAjiE,QAAAkiE,EAAAhiE,KAAAgiE,EAAAD,EAAAjiE,OAAE,CAAVkiE,EAAAjiE,MACd+hE,GAAahB,EAAYW,gHAO7B,OAJAP,EAAS7wD,QAAQ,SAAC6G,EAAarY,GAC3BijE,EAAYtvD,EAAKovD,cAAcE,EAAWjjE,EAAKqY,KAG5C4qD,GAGJnB,EAAA7iE,UAAAyjE,uBAAP,SAA8BU,EAAUnB,GAAxC,YAAAtuD,EAAA5U,KACQkkE,EAAY,GACZ/hE,EAAQ,GACNihE,EAAeF,EAAYG,OAC3BC,EAAgCtjE,KAAKujE,gBAAgBH,GACrDI,EAAwB7jE,MAAMuT,KAAKowD,EAAStzD,QAC5CyzD,EAA8BzjE,KAAK0jE,qBAAqBN,EAAMI,GAC9Dc,EAA0B3kE,MAAMuT,KAAKowD,EAAS5tC,UAEpC,MAAZ2uC,IACAliE,EAAQkiE,EAAS5zD,gBAGrB,IAAsB,IAAA8zD,EAAAx0D,EAAAqzD,GAAIoB,EAAAD,EAAAriE,QAAAsiE,EAAApiE,KAAAoiE,EAAAD,EAAAriE,OAAE,CAAVsiE,EAAAriE,MACd+hE,GAAahB,EAAYW,gHAO7B,GAJAP,EAAS7wD,QAAQ,SAAC6G,EAAarY,GAC3BijE,EAAYtvD,EAAKovD,cAAcE,EAAWjjE,EAAKqY,MAG9CnX,EACD,OAAO+hE,EAKX,QAFMO,EAA6BzkE,KAAK0kE,oBAAoBviE,EAAOmiE,GAE1D9jE,EAAI,EAAGA,EAAIikE,EAAiB9jE,OAAQH,IAAK,KACxCuyB,EAAO0xC,EAAiBjkE,GACVR,KAAK+jE,sBAAsBhxC,EAAM0wC,EAAkBjjE,GAAI4iE,IAEvDrwC,IAASmwC,EAAYW,aACrCY,EAAiBjkE,GAAK0iE,EAAYW,YAItCY,EAAiB9jE,OAAS8iE,EAAkB9iE,QAC5C8jE,EAAiBvpD,OAAOuoD,EAAkB9iE,YAG1CgkE,EAAM,MACV,IAA8B,IAAAC,EAAA70D,EAAA00D,GAAgBI,EAAAD,EAAA1iE,QAAA2iE,EAAAziE,KAAAyiE,EAAAD,EAAA1iE,OAAE,CACtC6wB,EADgB8xC,EAAA1iE,MAEtB+hE,EAAYlkE,KAAKgkE,cAAcE,EAAWT,EAAkBkB,KAAQ5xC,wGAGxE,OAAOmxC,GAGJnB,EAAA7iE,UAAA4kE,qBAAP,SAA4B3iE,EAAO+gE,WAC3BgB,EAAY,GACVd,EAAeF,EAAYG,OAC3BC,EAAgCtjE,KAAKujE,gBAAgBH,GACrDkB,EAA0B3kE,MAAMuT,KAAKowD,EAAS5tC,cAEpD,IAAkB,IAAAqvC,EAAAh1D,EAAA5N,GAAK6iE,EAAAD,EAAA7iE,QAAA8iE,EAAA5iE,KAAA4iE,EAAAD,EAAA7iE,OAAE,CAApB,IAAMoX,EAAG0rD,EAAA7iE,OAC0B,IAAhCmiE,EAAchzD,QAAQgI,IAClBA,IAAQ4pD,EAAYW,aACpBK,GAAa5qD,wGAKzB,OAAO4qD,GAGJnB,EAAA7iE,UAAA+kE,8BAAP,SAAqC9iE,EAAO+gE,EAAaC,EAAQnzB,OAEzD2wB,EAAqBx+D,EACnB4wB,EAAe4tC,EAAWwC,GAC1BC,EAAeF,EAAYG,OAC3BC,EAAgCtjE,KAAKujE,gBAAgBH,GACrDI,EAAwB7jE,MAAMuT,KAAKowD,EAAStzD,QAC5CyzD,EAA8BzjE,KAAK0jE,qBAAqBN,EAAMI,GAEpE,GAAKxjE,KAAKwU,KA4CH,CACH,GAAmB,KAAfmsD,IAAiC,IAAZwC,EAErB,OADAnjE,KAAKgjE,QAAU,EACRhjE,KAAK2jE,uBAAuBxhE,EAAO+gE,GAG1CljE,KAAKgjE,QAAU,IACfhjE,KAAKgjE,UACLG,KAEJA,IACAnjE,KAAKgjE,QAAUG,EACf,IAAS3iE,EAAI,EAAGA,EAAIwvC,EAAWxvC,KACgB,IAAvCijE,EAAkBnyD,QAAQ6xD,IAC1BxC,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAQD,EAAYW,YAC/DV,MAEAxC,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAQC,EAAKD,IACxDA,UA5DR,GADAnjE,KAAKgjE,QAAUG,EAAS,IAAMA,EAASA,GACU,IAA7CM,EAAkBnyD,QAAQtR,KAAKgjE,UAK/B,GAHArC,EADc3gE,KAAK+jE,sBAAsBhxC,EAAM/yB,KAAKgjE,QAASI,GAClCpjE,KAAKgkE,cAAcrD,EAAY3gE,KAAKgjE,UAAWjwC,GACtE4tC,EAAa3gE,KAAKgkE,cAAcrD,EAAY3gE,KAAKgjE,UAAWE,EAAYW,cAC5E7zB,EACgB,EACZ,IAAK,IAAIxvC,EAAI,EAAGA,EAAIwvC,EAAWxvC,IAC3B2iE,IACAxC,GAAoD,IAAvC8C,EAAkBnyD,QAAQ6xD,GACnCnjE,KAAK4jE,aAAajD,EAAYwC,EAAQD,EAAYW,YAClD7jE,KAAK4jE,aAAajD,EAAYwC,EAAQC,EAAKD,QAGpD,CACHxC,EAAa3gE,KAAKgkE,cAAcrD,EAAY3gE,KAAKgjE,QAASI,EAAKpjE,KAAKgjE,UACpEhjE,KAAKgjE,cAEDkC,GAAW,EACf,KAFAl1B,EAEgB,EAAG,CACfmzB,EAASnjE,KAAKgjE,QACd,IAAK,IAAIxiE,EAAI,EAAGA,EAAIwvC,EAAWxvC,KACgB,IAAvCijE,EAAkBnyD,QAAQ6xD,GACZnjE,KAAK+jE,sBAAsBhxC,EAAMowC,EAAQC,KACnC8B,GAChBvE,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAQpwC,GACnDowC,IACAnjE,KAAKgjE,UACLkC,GAAW,IAEXvE,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAQD,EAAYW,YAC/DV,MAGJxC,EAAa3gE,KAAK4jE,aAAajD,EAAYwC,EAAQC,EAAKD,IACpDA,IAAWnjE,KAAKgjE,SAChBhjE,KAAKgjE,UAETG,MA4BpB,OAAOxC,GAGJoC,EAAA7iE,UAAAilE,8BAAP,SAAqChjE,EAAO+gE,EAAaC,EAAQiC,EAAep1B,WACxE2wB,EAAqBx+D,EACnBihE,EAAeF,EAAYG,OAC3BC,EAAgCtjE,KAAKujE,gBAAgBH,GACrDI,EAAwB7jE,MAAMuT,KAAKowD,EAAStzD,QAC5CyzD,EAA8BzjE,KAAK0jE,qBAAqBN,EAAMI,GAE9D6B,EAAelC,EAASnzB,EAE9BhwC,KAAKgjE,QAAUG,MACf,IAA2B,IAAAmC,EAAAv1D,EAAAq1D,GAAaG,EAAAD,EAAApjE,QAAAqjE,EAAAnjE,KAAAmjE,EAAAD,EAAApjE,OAAE,CAArC,IACK6wB,EADawyC,EAAApjE,MAGnB,GAAInC,KAAKgjE,QAAUI,EAAKziE,OACpB,OAAOggE,EAGX,IAAiD,IAA7C8C,EAAkBnyD,QAAQtR,KAAKgjE,SACXhjE,KAAK+jE,sBAAsBhxC,EAAM/yB,KAAKgjE,QAASI,KAE/DzC,EAAa3gE,KAAKgkE,cAAcrD,EAAY3gE,KAAKgjE,UAAWjwC,SAGhE,IAAK,IAAIvyB,EAAI2iE,EAAQ3iE,EAAI4iE,EAAKziE,OAAQH,IAAK,CACvC,IAA2C,IAAvCgjE,EAAYlyD,QAAQtR,KAAKgjE,SAEtB,CACiBhjE,KAAK+jE,sBAAsBhxC,EAAM/yB,KAAKgjE,QAASI,KAE/DzC,EAAa3gE,KAAKgkE,cAAcrD,EAAY3gE,KAAKgjE,UAAWjwC,IAEhE,MANA/yB,KAAKgjE,UAWjBhzB,yGAGJ,GAAIA,EAAY,EACZ,IAASxvC,EAAIR,KAAKgjE,QAASxiE,EAAI6kE,EAAc7kE,KACE,IAAvCgjE,EAAYlyD,QAAQtR,KAAKgjE,SACzBhjE,KAAKgjE,UAELrC,EAAa3gE,KAAKgkE,cAAcrD,EAAY3gE,KAAKgjE,UAAWE,EAAYW,YAKpF,OAAOlD,GAGHoC,EAAA7iE,UAAA6jE,sBAAR,SAA8ByB,EAAmB9oC,EAAkB0mC,OAE3DqC,EASJ,OAAQrC,EAAKsC,OAAOhpC,IAChB,IAAK,IACD+oC,EAAwB,KAAdD,EACV,MACJ,IAAK,IAEDC,GADQ,IAAIE,OAAO,aACFn0D,KAAKg0D,GACtB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAhBY,oDAiBRn0D,KAAKg0D,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OArBO,6CAsBHn0D,KAAKg0D,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAtBI,iDAuBAn0D,KAAKg0D,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OA3BA,0CA4BIn0D,KAAKg0D,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OA7BD,SA8BKn0D,KAAKg0D,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAhCI,gBAiCAn0D,KAAKg0D,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAnCM,aAoCFn0D,KAAKg0D,GACrB,MACJ,QACIC,EAAU,KAIlB,OAAOA,GAEH1C,EAAA7iE,UAAA8jE,cAAR,SAAsB4B,EAAkBjyD,EAAeof,GACnD,GAAI6yC,IAAa5xD,UACb,OAAO4xD,EAASC,UAAU,EAAGlyD,GAASof,EAAO6yC,EAASC,UAAUlyD,EAAQ,IAGxEovD,EAAA7iE,UAAA0jE,aAAR,SAAqBgC,EAAkBjyD,EAAeof,GAClD,GAAI6yC,IAAa5xD,UACb,OAAO4xD,EAASC,UAAU,EAAGlyD,GAASof,EAAO6yC,EAASC,UAAUlyD,IAGhEovD,EAAA7iE,UAAAqjE,gBAAR,SAAwBH,GAGpB,QAFME,EAAW,IAAIhzD,IAEZ9P,EAAI,EAAGA,EAAI4iE,EAAKziE,OAAQH,IAAK,KAC5BuyB,EAAOqwC,EAAKsC,OAAOllE,IACS,IAA9BqiE,GAAWvxD,QAAQyhB,IACnBuwC,EAAS56C,IAAIloB,EAAGuyB,GAIxB,OAAOuwC,GAEHP,EAAA7iE,UAAAwjE,qBAAR,SAA6BN,EAAcI,GAGvC,QAFMsC,EAA+B,IAAInmE,MAEhCa,EAAI,EAAGA,EAAI4iE,EAAKziE,OAAQH,KACG,IAA5BgjE,EAAYlyD,QAAQ9Q,IACpBslE,EAAmBtjE,KAAKhC,GAIhC,OAAOslE,GAEH/C,EAAA7iE,UAAAwkE,oBAAR,SAA4BviE,EAAemiE,WACjCG,EAA6B,IAAI9kE,UAEvC,IAAkB,IAAAomE,EAAAh2D,EAAA5N,GAAK6jE,EAAAD,EAAA7jE,QAAA8jE,EAAA5jE,KAAA4jE,EAAAD,EAAA7jE,OAAE,CAApB,IAAMoX,EAAG0sD,EAAA7jE,OAC0B,IAAhCmiE,EAAchzD,QAAQgI,IACtBmrD,EAAiBjiE,KAAK8W,wGAI9B,OAAOmrD,GAEf1B,KChYMkD,GAAO,2BA0LT,SAAAC,EAAoB7lC,GAAArgC,KAAAqgC,WAAAA,EAjGbrgC,KAAAmmE,cAAgB,IAAIh9C,EAAAA,aA4DnBnpB,KAAAomE,aAAe,CACnB/C,OAAQ,GACRQ,WAAY,IA4BR7jE,KAAAqmE,mBAAiCJ,GAKjCjmE,KAAAsmE,kBAAsCL,GAG1CjmE,KAAKumE,WAAa,IAAIxD,GAyK9B,OAvTIvjE,OAAAgC,eACW0kE,EAAAhmE,UAAA,cAAW,KAKtB,WACI,OAAOF,KAAKwmE,kBAPhB,SACuBltD,GACnBtZ,KAAKwmE,aAAeltD,EACpBtZ,KAAKsgC,cAAc8yB,aAAa,cAAepzD,KAAKwmE,+CA8CxDhnE,OAAAgC,eAAY0kE,EAAAhmE,UAAA,QAAK,KAAjB,WACI,OAAOF,KAAKsgC,cAAcn+B,WAM9B,SAAkBmX,GACdtZ,KAAKsgC,cAAcn+B,MAAQmX,mCAM/B9Z,OAAAgC,eAAY0kE,EAAAhmE,UAAA,gBAAa,KAAzB,WACI,OAAOF,KAAKqgC,WAAWC,+CAM3B9gC,OAAAgC,eAAY0kE,EAAAhmE,UAAA,iBAAc,KAA1B,WACI,OAAOF,KAAKsgC,cAAcmmC,gDAM9BjnE,OAAAgC,eAAY0kE,EAAAhmE,UAAA,eAAY,KAAxB,WACI,OAAOF,KAAKsgC,cAAc+kC,8CAsEvBa,EAAAhmE,UAAA2uC,SAAP,WACQ7uC,KAAK6jE,YAAc7jE,KAAK6jE,WAAWljE,OAAS,IAC5CX,KAAKomE,aAAavC,WAAa7jE,KAAK6jE,WAAa7jE,KAAK6jE,WAAWgC,UAAU,EAAG,IAGlF7lE,KAAKomE,aAAa/C,OAASrjE,KAAKojE,KAAOpjE,KAAKojE,KAAO,aACnDpjE,KAAKomE,aAAavC,WAAa7jE,KAAK6jE,WAAa7jE,KAAK6jE,WAAa,IACnE7jE,KAAKsgC,cAAc8yB,aAAa,cAAepzD,KAAK4vD,YAAc5vD,KAAK4vD,YAAc5vD,KAAKomE,aAAa/C,SAOpG6C,EAAAhmE,UAAAwmE,UADP,SACiBp0D,OACPrR,EAAMqR,EAAMq0D,SAAWr0D,EAAMs0D,SAE/Bz1D,MAAUnR,KAAK6mE,mBACf7mE,KAAK6mE,kBAAmB,GAGxB5lE,IAAQ6hE,KACR9iE,KAAK8mE,WAAY,IAGhB9mE,KAAK8mE,WAAa7lE,IAAQ6hE,IAAY9iE,KAAK8mE,WAAa7lE,IAAQ6hE,KACjExwD,EAAM23B,iBAGVjqC,KAAK+mE,KAAO9lE,EACZjB,KAAKgnE,WAAavrD,KAAKutB,IAAIhpC,KAAKqlE,aAAerlE,KAAKymE,iBAOjDP,EAAAhmE,UAAA+mE,QADP,SACe30D,IACCA,EAAMq0D,SAAWr0D,EAAMs0D,YAEvB9D,KACR9iE,KAAK8mE,WAAY,IAQlBZ,EAAAhmE,UAAAgnE,QADP,SACe50D,GACXtS,KAAKmnE,QAAS,EAEdnnE,KAAKonE,YAAcpnE,KAAKmC,MACxBnC,KAAKqnE,eAAiBrnE,KAAKsnE,qBAOxBpB,EAAAhmE,UAAAqnE,eADP,SACsBj1D,GAClB,GAAInB,MAAUnR,KAAK6mE,iBACf7mE,KAAK6mE,kBAAmB,MAD5B,CAKA,GAAI7mE,KAAKmnE,OAAQ,CACbnnE,KAAKmnE,QAAS,MAER/B,EAAgBplE,KAAKmC,MAAM0jE,UAAU7lE,KAAKqnE,eAAgBrnE,KAAKsnE,qBACrEtnE,KAAKmC,MAAQnC,KAAKumE,WAAWpB,8BACzBnlE,KAAKonE,YAAapnE,KAAKomE,aAAcpmE,KAAKqnE,eAAgBjC,EAAeplE,KAAKgnE,YAElFhnE,KAAKwnE,kBAAkBxnE,KAAKumE,WAAWpD,YACpC,KACGsE,EAAmBznE,KAAKsnE,oBAE9BtnE,KAAKumE,WAAW/xD,KAAQxU,KAAK+mE,OAASjE,IAAoB9iE,KAAK+mE,OAASjE,GAExE9iE,KAAKmC,MAAQnC,KAAKgnE,YAAkC,IAApBhnE,KAAKgnE,WACjChnE,KAAKumE,WAAWtB,8BAA8BjlE,KAAKmC,MAAOnC,KAAKomE,aAAcqB,EAAmB,EAAGznE,KAAKgnE,YACxGhnE,KAAKumE,WAAWtD,iBAAiBjjE,KAAKmC,MAAOnC,KAAKomE,aAAcqB,EAAmB,GAEvFznE,KAAKwnE,kBAAkBxnE,KAAKumE,WAAWpD,YAGrCuE,EAAS1nE,KAAKumE,WAAWzB,qBAAqB9kE,KAAKmC,MAAOnC,KAAKomE,cAErEpmE,KAAK2nE,UAAY3nE,KAAK4nE,gBAAkB5nE,KAAKmC,MAAQulE,EACrD1nE,KAAKsmE,kBAAkBtmE,KAAK2nE,WAE5B3nE,KAAKmmE,cAAc5jD,KAAK,CAAE6I,SAAUs8C,EAAQG,eAAgB7nE,KAAKmC,UAO9D+jE,EAAAhmE,UAAAwuD,QADP,SACevsD,GACPnC,KAAK8nE,kBACD32D,OACAnR,KAAK6mE,kBAAmB,GAE5B7mE,KAAKmC,MAAQnC,KAAK8nE,iBAAiBtjE,UAAUrC,IAE7CnC,KAAKmC,MAAQnC,KAAKumE,WAAW5C,uBAAuB3jE,KAAKmC,MAAOnC,KAAKomE,eAQtEF,EAAAhmE,UAAA0uD,OADP,SACczsD,GACNnC,KAAK+nE,iBACL/nE,KAAKmC,MAAQnC,KAAK+nE,iBAAiBvjE,UAAUrC,GACtCA,IAAUnC,KAAKumE,WAAWtC,UAAUjkE,KAAKomE,gBAChDpmE,KAAKmC,MAAQ,KAOb+jE,EAAAhmE,UAAAonE,kBAAR,WACI,OAAOtnE,KAAKsgC,cAAcmmC,gBAMtBP,EAAAhmE,UAAAsnE,kBAAR,SAA0BhhB,EAAe1lC,QAAA,IAAAA,IAAAA,EAAA0lC,GACrCxmD,KAAKsgC,cAAc0nC,kBAAkBxhB,EAAO1lC,IAMzColD,EAAAhmE,UAAA+nE,WAAP,SAAkB9lE,GACVnC,KAAK6jE,YAAc7jE,KAAK6jE,WAAWljE,OAAS,IAC5CX,KAAKomE,aAAavC,WAAa7jE,KAAK6jE,WAAWgC,UAAU,EAAG,IAGhE7lE,KAAKmC,MAAQA,EAAQnC,KAAKumE,WAAW5C,uBAAuBxhE,EAAOnC,KAAKomE,cAAgB,GACpFpmE,KAAK+nE,mBACL/nE,KAAKmC,MAAQnC,KAAK+nE,iBAAiBvjE,UAAUxE,KAAKmC,QAGtDnC,KAAK2nE,UAAY3nE,KAAK4nE,gBAAkB5nE,KAAKmC,MAAQA,EACrDnC,KAAKsmE,kBAAkBtmE,KAAK2nE,WAE5B3nE,KAAKmmE,cAAc5jD,KAAK,CAAE6I,SAAUjpB,EAAO0lE,eAAgB7nE,KAAKmC,SAM7D+jE,EAAAhmE,UAAAgoE,iBAAP,SAAwBphB,GAAwB9mD,KAAKsmE,kBAAoBxf,GAKlEof,EAAAhmE,UAAAioE,kBAAP,SAAyBrhB,GAAkB9mD,KAAKqmE,mBAAqBvf,uBAjWxEr4C,EAAAA,UAAST,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE88C,QAAS8V,EAAAA,kBAAmB7V,YAAaga,EAAkBkC,OAAO,IAChF15D,SAAU,yDAjBV40B,EAAAA,4CA2BC30B,EAAAA,MAAKX,KAAA,CAAC,+BAWNW,EAAAA,+BAUAA,EAAAA,2BAUAA,EAAAA,gCAiBAA,EAAAA,gCAUAA,EAAAA,yBAMAA,EAAAA,6BAUAgd,EAAAA,0BAsHA/c,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,4BAuBzBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,4BAYvBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,mCAWvBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,4BAsCvBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,wCAevBY,EAAAA,aAAYZ,KAAA,CAAC,OAAQ,CAAC,2BAmD3Bk4D,KAaAmC,GAAA,WAAA,SAAAA,KAK6B,2BAL5Br5D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACi3D,IACfh3D,QAAS,CAACg3D,IACVzpB,QAAS,CAACC,EAAAA,kBAEe2rB,EAL7B,OC9WIC,OAAS,SACTC,MAAQ,SAGRC,GAAS,EACPvC,GAAO,aAcbwC,GAAA,WAuNI,SAAAA,IA3KgBzoE,KAAA2N,GAAK,aAAa66D,KAYlBxoE,KAAA6xC,QAAa7xC,KAAK2N,GAAE,SAYpB3N,KAAA0oE,cAA6C,QAiC7C1oE,KAAA2oE,SAAmB,KAYnB3oE,KAAA4oE,eAAgB,EAYhB5oE,KAAAwuD,UAAW,EAapBxuD,KAAA6oE,eAAiB7oE,KAAK6xC,QAYtB7xC,KAAA8oE,UAA2B,KAOzB9oE,KAAAusC,OAA8C,IAAIpjB,EAAAA,aASpDnpB,KAAAi1C,SAAW,YAaFj1C,KAAA+oE,SAAU,EAaV/oE,KAAA4xC,UAAW,EAapB5xC,KAAAyyC,SAAU,EAIVzyC,KAAAgpE,QAAahpE,KAAK2N,GAAE,SAIjB3N,KAAAipE,OAAc,KAMhBjpE,KAAAqmE,mBAAiCJ,GAIjCjmE,KAAAsmE,kBAAsCL,GAyFlD,OArFWwC,EAAAvoE,UAAAgpE,eAAP,SAAsB52D,GAClBA,EAAMmyB,mBAKHgkC,EAAAvoE,UAAAipE,cAAP,SAAqB72D,GACjBA,EAAMmyB,kBACNzkC,KAAKiyD,SAED9gD,MACAnR,KAAKopE,YAAY9oC,cAAc+oC,QAMhCZ,EAAAvoE,UAAAopE,cAAP,WACItpE,KAAKiyD,UASFwW,EAAAvoE,UAAA+xD,OAAP,WACQjyD,KAAK4xC,WAIT5xC,KAAK+oE,SAAU,EACf/oE,KAAKyyC,SAAU,EACfzyC,KAAKusC,OAAOhqB,KAAK,CAAEpgB,MAAOnC,KAAKmC,MAAOonE,MAAOvpE,OAC7CA,KAAKsmE,kBAAkBtmE,KAAKmC,SASzBsmE,EAAAvoE,UAAA+nE,WAAP,SAAkB9lE,GACdnC,KAAKipE,OAAS9mE,EACdnC,KAAK+oE,QAAW/oE,KAAKipE,SAAWjpE,KAAKmC,OAGzCsmE,EAAAvoE,UAAA4hE,eAAA,WACI,OAAO9hE,KAAKopE,YAAY9oC,eAK5B9gC,OAAAgC,eAAWinE,EAAAvoE,UAAA,aAAU,KAArB,WACI,OAAQF,KAAK0oE,eACT,KAAKc,GAAmBlB,OACpB,OAAUtoE,KAAKi1C,SAAQ,kBAC3B,KAAKu0B,GAAmBjB,MACxB,QACI,OAAUvoE,KAAKi1C,SAAQ,4CAM5BwzB,EAAAvoE,UAAAwuD,QAAP,WACI1uD,KAAKyyC,SAAU,GAKZg2B,EAAAvoE,UAAA0uD,OAAP,WACI5uD,KAAKyyC,SAAU,EACfzyC,KAAKqmE,sBAKFoC,EAAAvoE,UAAAgoE,iBAAP,SAAwBphB,GAAwB9mD,KAAKsmE,kBAAoBxf,GAIlE2hB,EAAAvoE,UAAAioE,kBAAP,SAAyBrhB,GAAkB9mD,KAAKqmE,mBAAqBvf,uBAvTxEhV,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE88C,QAAS8V,EAAAA,kBAAmB7V,YAAauc,EAAmBL,OAAO,IACjF15D,SAAU,YACVqjC,SAAA,w9BAWC0E,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,yBAQ7BF,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE2oC,UAAQ,8BAQnCF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE2oC,UAAQ,gBAaxCxH,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,uBAYAA,EAAAA,6BAYAA,EAAAA,qBAWAA,EAAAA,oBAWAA,EAAAA,wBAWAA,EAAAA,6BAYAA,EAAAA,wBAYAA,EAAAA,8BAYAA,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,8BAON2d,EAAAA,yBASAwjB,EAAAA,YAAWnhC,KAAA,CAAC,oCAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,6BAA0B,CAAAkE,KACtCvD,EAAAA,wBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,8BAA2B,CAAAkE,KACvCvD,EAAAA,uBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,+BA4GjBy6D,EAxTA,GCtCAgB,GAAA,WA2FI,SAAAA,EACctqC,EACAkB,EACA+0B,EACFD,GAHEn1D,KAAAm/B,QAAAA,EACAn/B,KAAAqgC,WAAAA,EACArgC,KAAAo1D,SAAAA,EACFp1D,KAAAm1D,KAAAA,EArELn1D,KAAA0pE,aAAe,GA6Bf1pE,KAAA2pE,eAAiB,IAyBjB3pE,KAAA4pE,gBAAiB,EAMhB5pE,KAAA6pE,mBAAqB,oBACrB7pE,KAAA8pE,gBAAkB,aAClB9pE,KAAA+pE,WAAY,EACZ/pE,KAAAgqE,eAAiB,GAwE7B,OAlGIxqE,OAAAgC,eAAgCioE,EAAAvpE,UAAA,WAAQ,KAAxC,SAAyCiC,GACrCnC,KAAK+pE,UAAY5nE,GAASnC,KAAKiqE,0CAkBnCzqE,OAAAgC,eAAcioE,EAAAvpE,UAAA,gBAAa,KAA3B,WACI,OAAOF,KAAKqgC,WAAWC,+CAiBpBmpC,EAAAvpE,UAAAgqE,YADP,SACmB53D,GADnB,IAAAsC,EAAA5U,KAEIA,KAAKm1D,KAAKrrB,kBAAkB,WAAM,OAAAl1B,EAAKu1D,QAAQ73D,MAG3Cm3D,EAAAvpE,UAAAkqE,UAAR,SAAkBC,EAA4BC,GAC1CtqE,KAAKo1D,SAASrC,SAASsX,EAAerqE,KAAK6pE,oBAC3C7pE,KAAKo1D,SAASluB,SAASmjC,EAAe,QAAYC,EAAYC,OAAM,MACpEvqE,KAAKo1D,SAASluB,SAASmjC,EAAe,SAAaC,EAAYC,OAAM,MACrEvqE,KAAKo1D,SAASluB,SAASmjC,EAAe,MAAUC,EAAY3vC,IAAG,MAC/D36B,KAAKo1D,SAASluB,SAASmjC,EAAe,OAAWC,EAAY7vC,KAAI,MAC7Dz6B,KAAKwqE,aACLxqE,KAAKo1D,SAASluB,SAASmjC,EAAe,aAAcrqE,KAAKwqE,cAIzDf,EAAAvpE,UAAAiqE,QAAR,SAAgB73D,GAAhB,IAAAsC,EAAA5U,KACI,IAAIA,KAAK4pE,eAAT,KAIM5oE,EAAUhB,KAAK0pE,cAAe1pE,KAAKsgC,cAAcmqC,cAAczqE,KAAK0pE,eAAsC1pE,KAAKsgC,cAE/GoqC,EAAa1pE,EAAOkQ,wBACpBq5D,EAAS9uD,KAAK4O,IAAIqgD,EAAWz5D,MAAOy5D,EAAWv9D,QACjDstB,EAAOnoB,EAAMq4D,QAAUD,EAAWjwC,KAAO8vC,EAAS,EAClD5vC,EAAMroB,EAAMs4D,QAAUF,EAAW/vC,IAAM4vC,EAAS,EAEhDvqE,KAAK+pE,YACLtvC,EAAOE,EAAM,OAGXkwC,EAAa,CACfN,OAAMA,EACN5vC,IAAGA,EACHF,KAAIA,GAGF4vC,EAAgBrqE,KAAKo1D,SAAS92C,cAAc,QAElDte,KAAKoqE,UAAUC,EAAeQ,GAC9B7qE,KAAKo1D,SAASrC,SAAS/xD,EAAQhB,KAAK8pE,iBACpC9pE,KAAKo1D,SAASt2C,YAAY9d,EAAQqpE,OAE5BrmE,EAAYhE,KAAKm/B,QAAQgG,MAAM,CACjC9hC,EAAAA,MAAM,CAAEC,QAAS,GAAKkB,UAAW,cACjCjB,EAAAA,QAAQvD,KAAK2pE,eAAgBtmE,EAAAA,MAAM,CAAEC,QAAS,EAAGkB,UAAW,gBAC7DrE,OAAOkqE,GAEVrqE,KAAKgqE,eAAexnE,KAAKwB,GAEzBA,EAAUyhC,OAAO,WACb7wB,EAAKo1D,eAAe9uD,OAAOtG,EAAKo1D,eAAe14D,QAAQtN,GAAY,GACnEhD,EAAOge,YAAYqrD,GACfz1D,EAAKo1D,eAAerpE,OAAS,GAC7BiU,EAAKwgD,SAAStC,YAAY9xD,EAAQ4T,EAAKk1D,mBAI/C9lE,EAAUgiC,6BA3JjBv3B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAHLm4B,EAAAA,wBADWvD,EAAAA,kBAAmD+vB,EAAAA,iBAARtsB,EAAAA,gDAyB1Dp4B,EAAAA,MAAKX,KAAA,CAAC,wCAcNW,EAAAA,MAAKX,KAAA,CAAC,qCAeNW,EAAAA,MAAKX,KAAA,CAAC,uCASNW,EAAAA,MAAKX,KAAA,CAAC,6CAgBNW,EAAAA,MAAKX,KAAA,CAAC,0CAoBNY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,cA8DhCy7D,EAjKA,GAsKAqB,GAAA,WAAA,SAAAA,KAI+B,2BAJ9B97D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACw6D,IACfv6D,QAAS,CAACu6D,QAEiBqB,EAJ/B,GCpJM7E,GAAO,aACTuC,GAAS,EAiBbuC,GAAA,WAAA,SAAAA,IAoIa/qE,KAAAusC,OAA8C,IAAIpjB,EAAAA,aAMpDnpB,KAAAi1C,SAAW,kBAKVj1C,KAAAsmE,kBAAsCL,GAItCjmE,KAAAgrE,MAAQ,mBAAmBxC,KAI3BxoE,KAAAipE,OAAc,KAIdjpE,KAAAmyC,UAAsC,KAItCnyC,KAAAirE,gBAAiB,EAIjBjrE,KAAAkrE,eAA8C,QAI9ClrE,KAAAqyC,WAAY,EAIZryC,KAAAmrE,WAAY,EAIZnrE,KAAAu/B,SAAW,IAAIC,EAAAA,QA8J3B,OApTIhgC,OAAAgC,eACIupE,EAAA7qE,UAAA,QAAK,KADT,WACmB,OAAOF,KAAKipE,YAC/B,SAAU5sD,GACFrc,KAAKipE,SAAW5sD,IAChBrc,KAAKipE,OAAS5sD,EACdrc,KAAKorE,uDAcb5rE,OAAAgC,eACIupE,EAAA7qE,UAAA,OAAI,KADR,WACqB,OAAOF,KAAKgrE,WACjC,SAAS3uD,GACDrc,KAAKgrE,QAAU3uD,IACfrc,KAAKgrE,MAAQ3uD,EACbrc,KAAKqrE,yDAeb7rE,OAAAgC,eACIupE,EAAA7qE,UAAA,WAAQ,KADZ,WAC0B,OAAOF,KAAKmrE,eACtC,SAAa9uD,GACLrc,KAAKmrE,YAAc9uD,IACnBrc,KAAKmrE,UAAY9uD,EACjBrc,KAAKsrE,6DAWb9rE,OAAAgC,eACIupE,EAAA7qE,UAAA,WAAQ,KADZ,WAC0B,OAAOF,KAAKqyC,eACtC,SAAah2B,GACLrc,KAAKqyC,YAAch2B,IACnBrc,KAAKqyC,UAAYh2B,EACjBrc,KAAKurE,yDAeb/rE,OAAAgC,eACIupE,EAAA7qE,UAAA,gBAAa,KADjB,WACmD,OAAOF,KAAKkrE,oBAC/D,SAAkB7uD,GACVrc,KAAKkrE,iBAAmB7uD,IACxBrc,KAAKkrE,eAAiB7uD,IAAamtD,GAAmBlB,OAASkB,GAAmBlB,OAASkB,GAAmBjB,MAC9GvoE,KAAKwrE,iEAYbhsE,OAAAgC,eACIupE,EAAA7qE,UAAA,WAAQ,KADZ,WACiB,OAAOF,KAAKmyC,eAC7B,SAAapuB,GACL/jB,KAAKmyC,YAAcpuB,IACnB/jB,KAAKmyC,UAAYpuB,EACjB/jB,KAAKmC,MAAQ4hB,EAAWA,EAAS5hB,MAAQ,uCAuDjD4oE,EAAA7qE,UAAAm4D,mBAAA,WAAA,IAAAzjD,EAAA5U,KAGIA,KAAKirE,gBAAiB,EAEtBpf,WAAW,WAAQj3C,EAAK62D,uBAUrBV,EAAA7qE,UAAA+nE,WAAP,SAAkB9lE,GACdnC,KAAKmC,MAAQA,GAMV4oE,EAAA7qE,UAAAgoE,iBAAP,SAAwBphB,GAAwB9mD,KAAKsmE,kBAAoBxf,GAKlEikB,EAAA7qE,UAAAioE,kBAAP,SAAyBrhB,GACjB9mD,KAAK0rE,cACL1rE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GACvBA,EAAO41D,kBAAkBrhB,MAQ9BikB,EAAA7qE,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAMVskC,EAAA7qE,UAAAurE,kBAAR,WAAA,IAAA72D,EAAA5U,KACI,GAAIA,KAAK0rE,aAAc,KACbC,EAAQ,CAAE3rD,KAAMhgB,KAAKgrE,MAAOtC,cAAe1oE,KAAKkrE,eAAgBt5B,SAAU5xC,KAAKqyC,UAAWmc,SAAUxuD,KAAKmrE,WAC/GnrE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GACvB/S,OAAOa,OAAOkS,EAAQo5D,GAElBp5D,EAAOpQ,QAAUyS,EAAKq0D,SACtB12D,EAAOw2D,SAAU,EACjBn0D,EAAKu9B,UAAY5/B,GAGrBA,EAAOg6B,OAAO1H,KAAKC,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,SAAC5E,GAAO,OAAAvrB,EAAKg3D,4BAA4BzrC,SAQpG4qC,EAAA7qE,UAAA0rE,4BAAR,SAAoC59D,GAC5BhO,KAAKmyC,YAAcnkC,EAAKu7D,QACpBvpE,KAAKmyC,YACLnyC,KAAKmyC,UAAU42B,SAAU,GAE7B/oE,KAAKmyC,UAAYnkC,EAAKu7D,OAG1BvpE,KAAKipE,OAASj7D,EAAK7L,MAEfnC,KAAKirE,iBACLjrE,KAAKusC,OAAOhqB,KAAKvU,GACjBhO,KAAKsmE,kBAAkBtmE,KAAKmC,SAO5B4oE,EAAA7qE,UAAAmrE,qBAAR,WAAA,IAAAz2D,EAAA5U,KACQA,KAAK0rE,cACL1rE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GACvBA,EAAOyN,KAAOpL,EAAKo2D,SAQvBD,EAAA7qE,UAAAkrE,mBAAR,WAAA,IAAAx2D,EAAA5U,KACQA,KAAK0rE,cACL1rE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GAClBqC,EAAKq0D,QAMFr0D,EAAKq0D,SAAW12D,EAAOpQ,OAEnByS,EAAKu9B,YAAc5/B,IACnBqC,EAAKu9B,UAAY5/B,GAGhBA,EAAOw2D,SACRx2D,EAAO0/C,UAXX1/C,EAAOw2D,UACPx2D,EAAOw2D,SAAU,MA0B7BgC,EAAA7qE,UAAAsrE,6BAAR,WAAA,IAAA52D,EAAA5U,KACQA,KAAK0rE,cACL1rE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GACvBA,EAAOm2D,cAAgB9zD,EAAKs2D,kBAQhCH,EAAA7qE,UAAAqrE,qBAAR,WAAA,IAAA32D,EAAA5U,KACQA,KAAK0rE,cACL1rE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GACvBA,EAAOq/B,SAAWh9B,EAAKy9B,aAQ3B04B,EAAA7qE,UAAAorE,yBAAR,WAAA,IAAA12D,EAAA5U,KACQA,KAAK0rE,cACL1rE,KAAK0rE,aAAaj5D,QAAQ,SAACF,GACvBA,EAAOi8C,SAAW55C,EAAKu2D,iCAzUtC18D,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,gBACVtgC,SAAU,mCACVS,UAAW,CAAC,CAAE88C,QAAS8V,EAAAA,kBAAmB7V,YAAa6e,EAAwB3C,OAAO,8CAUrFhc,EAAAA,gBAAep+C,KAAA,CAACy6D,GAAmB,CAAEnc,aAAa,mBAYlD39C,EAAAA,oBAmBAA,EAAAA,wBAoBAA,EAAAA,wBAgBAA,EAAAA,6BAoBAA,EAAAA,wBAiBAA,EAAAA,sBAcAgd,EAAAA,yBAMAwjB,EAAAA,YAAWnhC,KAAA,CAAC,4BAoMjB+8D,EA7UA,GAkVAc,GAAA,WAAA,SAAAA,KAK8B,2BAL7B78D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC87D,GAAwBtC,IACvCv5D,QAAS,CAAC67D,GAAwBtC,IAClChsB,QAAS,CAACquB,QAEgBe,EAL9B,iBC9JI,SAAAC,EAAoBhoC,EAA4BsxB,GAAhD,IAAAxgD,EAAA5U,KAAoBA,KAAA8jC,QAAAA,EAA4B9jC,KAAAo1D,SAAAA,EAzJxCp1D,KAAA+rE,KAAO,KACP/rE,KAAAgsE,UAA8B,KAC9BhsE,KAAAisE,iBAAkB,EAClBjsE,KAAAksE,kBAAmB,EACnBlsE,KAAAmsE,qBAAuB,EAEvBnsE,KAAAosE,iBAAmB,gBACnBpsE,KAAAqsE,uBAAyB,wBAiD1BrsE,KAAAssE,UAAY,GAEXtsE,KAAAipE,OAAS,GA0ETjpE,KAAAu/B,SAAW,IAAIC,EAAAA,QAsBnBssC,EAA0BS,uBAAuB1nC,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAACunC,GACnF13D,EAAK03D,YAAcA,KACe,IAA9B13D,EAAKu3D,qBACLv3D,EAAK43D,aAET53D,EAAK63D,yBAsRrB,OAzWIjtE,OAAAgC,eACWsqE,EAAA5rE,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKipE,YAEhB,SAAiB9mE,GACTA,IAAU6R,WAAuB,OAAV7R,EACvBnC,KAAKipE,OAAS,GAEdjpE,KAAKipE,OAAS9mE,mCAqCtB3C,OAAAgC,eAAWsqE,EAAA5rE,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAK0sE,iDAgBFZ,EAAAa,mBAAd,SAAiCL,EAAmBM,GAChDd,EAA0Be,mBAAmBnkD,IAAI4jD,EAAWM,GAC5Dd,EAA0BS,uBAAuBhqD,KAAK+pD,IAM5CR,EAAAgB,qBAAd,SAAmCR,GAC/BR,EAA0Be,mBAAmBnkD,IAAI4jD,EAAW,CACxD34D,OAAQ,IAEZm4D,EAA0BS,uBAAuBhqD,KAAK+pD,IAiB1DR,EAAA5rE,UAAAsmC,YAAA,WACIxmC,KAAK+sE,iBAEkB,OAAnB/sE,KAAKgsE,WACLhsE,KAAKgsE,UAAUjqB,aAEnB/hD,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAMlBqlC,EAAA5rE,UAAA8hD,YAAA,SAAYC,GACJA,EAAQ9/C,QAAU8/C,EAAQ9/C,MAAMkgD,YAChCriD,KAAKgtE,eAAgB,GACb/qB,EAAQ5gC,MAAQrN,YAAciuC,EAAQ5gC,IAAIghC,aACjDJ,EAAQrgC,SAAW5N,YAAciuC,EAAQrgC,OAAOygC,aAChDJ,EAAQ9mC,OAASnH,YAAciuC,EAAQ9mC,KAAKknC,gBACX,IAA9BriD,KAAKmsE,qBACLnsE,KAAKwsE,aAETxsE,KAAKysE,wBAObX,EAAA5rE,UAAAyhD,gBAAA,WACI3hD,KAAK+8B,cAAgB/8B,KAAKo1D,SAASnyB,WAAWjjC,KAAK8jC,QAAQxD,gBAEc,IAArEwrC,EAA0Be,mBAAmB37B,IAAIlxC,KAAKssE,YACtDR,EAA0Be,mBAAmBnkD,IAAI1oB,KAAKssE,UAAW,CAC7D34D,OAAQ,IAIhB3T,KAAK0sE,gBAAkB,CACnBO,aAAc,GACd1oC,QAASvkC,KAAKmC,MACd+qE,WAAY,EACZC,eAAe,EACfC,YAAY,GAGhBptE,KAAKqtE,WAAartE,KAAK+8B,cAAcuwC,mBAMzCxB,EAAA5rE,UAAAqtE,mBAAA,WACQvtE,KAAKgtE,gBACLhtE,KAAK4sE,UAAU5sE,KAAK0sE,gBAAgBO,aAAcjtE,KAAK0sE,gBAAgBS,cAAentE,KAAK0sE,gBAAgBU,YAC3GptE,KAAKysE,sBACLzsE,KAAKgtE,eAAgB,IAQtBlB,EAAA5rE,UAAA0sE,UAAP,SAAiBY,EAAcL,EAAyBC,OAC9CK,IAAwBN,EACxBO,IAAqBN,EAoB3B,OAlBIptE,KAAK2tE,sBAAsBH,EAAMC,EAAuBC,IACxD1tE,KAAK0sE,gBAAgBO,aAAeO,EACpCxtE,KAAK0sE,gBAAgBS,cAAgBM,EACrCztE,KAAK0sE,gBAAgBU,WAAaM,EAClC1tE,KAAK0sE,gBAAgBnoC,QAAUvkC,KAAKmC,MAEvB,KAATqrE,GAAeA,IAASx5D,WAAsB,OAATw5D,EACrCxtE,KAAK+sE,kBAEL/sE,KAAK4tE,oBAAmB,GACxB5tE,KAAK0sE,gBAAgBQ,WAAaltE,KAAK6tE,mBAAmBL,EAAML,EAAeC,KAE5EptE,KAAKisE,kBACZjsE,KAAK0sE,gBAAgBO,aAAeO,EACpCxtE,KAAK0sE,gBAAgBS,cAAgBM,EACrCztE,KAAK0sE,gBAAgBU,WAAaM,GAG/B1tE,KAAK0sE,gBAAgBQ,YAMzBpB,EAAA5rE,UAAA6sE,eAAP,WACI/sE,KAAK4tE,oBAAmB,GAExB5tE,KAAK0sE,gBAAgBO,aAAe,GACpCjtE,KAAK0sE,gBAAgBQ,WAAa,GAM/BpB,EAAA5rE,UAAAusE,oBAAP,eACU11D,EAAQ+0D,EAA0Be,mBAAmB/+D,IAAI9N,KAAKssE,WAC9D1qD,EAAS7K,EAAM+K,cAAgB9N,UAAY+C,EAAM6K,OAAS7K,EAAM+K,YAChET,EAAMtK,EAAMyK,WAAaxN,UAAY+C,EAAMsK,IAAMtK,EAAMyK,SAEzDI,IAAW5hB,KAAK4hB,QAAUP,IAAQrhB,KAAKqhB,KAAOtK,EAAMoE,OAASnb,KAAKmb,MAClEnb,KAAK8tE,SAAS/2D,EAAMpD,QAQrBm4D,EAAA5rE,UAAA4hD,QAAP,WAAA,IAAAltC,EAAA5U,KACI,GAAuB,OAAnBA,KAAKgsE,UAAoB,CA+BzBhsE,KAAKgsE,UAAY,IAAI+B,iBA9BJ,SAACC,GACdA,EAAav7D,QAAQ,SAACw7D,GACGtuE,MAAMuT,KAAK+6D,EAASC,cAC5Bz7D,QAAQ,SAAChS,GACdA,IAAMmU,EAAKy4D,aACXz4D,EAAKq3D,iBAAkB,EACvBr3D,EAAKg5D,oBAAmB,MAIbjuE,MAAMuT,KAAK+6D,EAASE,YAC5B17D,QAAQ,SAAChS,GACZA,IAAMmU,EAAKmoB,cAAcuwC,mBAAqB14D,EAAKq3D,kBACnDr3D,EAAKy4D,WAAaz4D,EAAKmoB,cAAcuwC,kBACrC14D,EAAKq3D,iBAAkB,EAEvBr3D,EAAKs3D,kBAAmB,EACxBt3D,EAAKg4D,UAAUh4D,EAAK83D,gBAAgBO,aAChCr4D,EAAK83D,gBAAgBS,cACrBv4D,EAAK83D,gBAAgBU,YACzBx4D,EAAKs3D,kBAAmB,EAExBt3D,EAAK63D,sBACL73D,EAAKo3D,UAAUjqB,aACfntC,EAAKo3D,UAAY,YAOjChsE,KAAKgsE,UAAUlqB,QAAQ9hD,KAAK+8B,cAAe,CAACqxC,WAAW,MAIvDtC,EAAA5rE,UAAA4tE,SAAR,SAAiBn6D,GAGb,GAFA3T,KAAKwsE,aAEa,OAAdxsE,KAAK+rE,KAAe,KACdsC,EAAQruE,KAAK+rE,KAAKuC,iBAAiB,QAGzC,GAFAtuE,KAAKmsE,oBAAsBx4D,EAEvB06D,EAAM1tE,QAAUgT,EAChB,WAGE46D,EAAoBF,EAAM16D,GAChC3T,KAAKo1D,SAASrC,SAASwb,EAAmBvuE,KAAKqsE,wBAC/CrsE,KAAKo1D,SAASrC,SAASwb,EAAmBvuE,KAAKwuE,kBAI/C1C,EAAA5rE,UAAAssE,WAAR,WACI,IAAkC,IAA9BxsE,KAAKmsE,oBAAT,KAIMkC,EAAQruE,KAAK+rE,KAAKuC,iBAAiB,QAEzC,GAAID,EAAM1tE,QAAUX,KAAKmsE,oBACrBnsE,KAAKmsE,qBAAuB,MADhC,KAKMsC,EAAsBJ,EAAMruE,KAAKmsE,qBACvCnsE,KAAKo1D,SAAStC,YAAY2b,EAAqBzuE,KAAKqsE,wBACpDrsE,KAAKo1D,SAAStC,YAAY2b,EAAqBzuE,KAAKwuE,gBACpDxuE,KAAKmsE,qBAAuB,KAGxBL,EAAA5rE,UAAA0tE,mBAAR,SAA2Bc,GACvB1uE,KAAKo1D,SAASuZ,YAAY3uE,KAAK8jC,QAAQxD,cAAe,SAAUouC,GAE9C,OAAd1uE,KAAK+rE,OACL/rE,KAAKo1D,SAASp2C,YAAYhf,KAAK+8B,cAAe/8B,KAAK+rE,MAEnD/rE,KAAK+rE,KAAO,KACZ/rE,KAAKmsE,qBAAuB,IAI5BL,EAAA5rE,UAAA2tE,mBAAR,SAA2Be,EAAoBzB,EAAwBC,GACnEptE,KAAK6uE,gBAECC,EAAcz0D,OAAOra,KAAKmC,OAC1B4sE,EAAyB5B,EAA4C2B,EAA5BA,EAAYz5D,cACrD25D,EAAsB7B,EAA2CyB,EAA3BA,EAAWv5D,cAEnD63D,EAAa,EAEjB,GAAIE,EACI2B,IAA0BC,GAE1BhvE,KAAKivE,WAAW,gBAAgBjvE,KAAKosE,iBAAgB,KAAIpsE,KAAKi1C,SAAWj1C,KAAKi1C,SAAW,IAAE,KAAK65B,EAAW,WAC3G5B,KAEAltE,KAAKkvE,WAAWJ,OAEjB,CAIH,QAHIK,EAAaJ,EAAsBz9D,QAAQ09D,EAAoB,GAC/DI,EAAmB,GAEA,IAAhBD,GAAmB,KAChB3oB,EAAQ2oB,EACRruD,EAAMquD,EAAaH,EAAmBruE,OAE5CX,KAAKkvE,WAAWJ,EAAYjJ,UAAUuJ,EAAkB5oB,IAExDxmD,KAAKivE,WAAW,gBAAgBjvE,KAAKosE,iBAAgB,KAAIpsE,KAAKi1C,SAAWj1C,KAAKi1C,SAAW,IAAE,KAAK65B,EAAYjJ,UAAUrf,EAAO1lC,GAAI,WAEjIsuD,EAAmBtuD,EACnBosD,IAEAiC,EAAaJ,EAAsBz9D,QAAQ09D,EAAoBluD,GAGnE9gB,KAAKkvE,WAAWJ,EAAYjJ,UAAUuJ,EAAkBN,EAAYnuE,SAGxE,OAAOusE,GAGHpB,EAAA5rE,UAAAgvE,WAAR,SAAmB1B,OACT6B,EAAcrvE,KAAKo1D,SAASka,WAAW9B,GAC7CxtE,KAAKo1D,SAASt2C,YAAY9e,KAAK+rE,KAAMsD,IAGjCvD,EAAA5rE,UAAA+uE,WAAR,SAAmBM,OACTC,EAAOxvE,KAAKo1D,SAAS92C,cAAc,QACzCte,KAAKo1D,SAASt2C,YAAY9e,KAAK+rE,KAAMyD,GACrCxvE,KAAKo1D,SAASuZ,YAAYa,EAAM,YAAaD,IAGzCzD,EAAA5rE,UAAA2uE,UAAR,WACI7uE,KAAK+rE,KAAO/rE,KAAKo1D,SAAS92C,cAAc,OACnCte,KAAKyvE,gBACNzvE,KAAKo1D,SAASrC,SAAS/yD,KAAK+rE,KAAM/rE,KAAKyvE,gBAE3CzvE,KAAKo1D,SAASt2C,YAAY9e,KAAK+8B,cAAe/8B,KAAK+rE,OAG/CD,EAAA5rE,UAAAytE,sBAAR,SAA8BH,EAAcL,EAAwBC,OAC1DH,EAAejtE,KAAK0sE,gBAAgBO,aAE1C,OAAQjtE,KAAKisE,kBACS,OAAjBgB,GACGA,IAAiBO,GACjBxtE,KAAK0sE,gBAAgBnoC,UAAYvkC,KAAKmC,OACtCnC,KAAK0sE,gBAAgBS,gBAAkBA,GACvCntE,KAAK0sE,gBAAgBU,aAAeA,GACpCptE,KAAKksE,mBAvbFJ,EAAAS,uBAAyB,IAAIpjD,EAAAA,aAC9B2iD,EAAAe,mBAAqB,IAAIv8D,wBAL1C7B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEArDV40B,EAAAA,kBAMA+vB,EAAAA,+CA0EC1kD,EAAAA,MAAKX,KAAA,CAAC,oCAcNW,EAAAA,MAAKX,KAAA,CAAC,0CAMNW,EAAAA,MAAKX,KAAA,CAAC,qCAeNW,EAAAA,MAAKX,KAAA,CAAC,4BAqBNW,EAAAA,MAAKX,KAAA,CAAC,sBAsBNW,EAAAA,MAAKX,KAAA,CAAC,uBAaNW,EAAAA,MAAKX,KAAA,CAAC,wBAGNW,EAAAA,MAAKX,KAAA,CAAC,WAEPilC,EAAAA,CADC/U,GAAkB,sHAkUvB4tC,KAKA4D,GAAA,WAAA,SAAAA,KAIsC,2BAJrC1gE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC68D,IACf58D,QAAS,CAAC48D,QAEwB4D,EAJtC,GCzfAC,GAAA,WAqFI,SAAAA,EAAoB7rC,GAAA9jC,KAAA8jC,QAAAA,EA7EZ9jC,KAAA4vE,gBAAiB,EAyG7B,OAzFIpwE,OAAAgC,eACImuE,EAAAzvE,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK4vE,oBAsBhB,SAAat2D,GACTtZ,KAAK4vE,eAAiBt2D,mCAwB1B9Z,OAAAgC,eAAImuE,EAAAzvE,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAOxBqvC,EAAAzvE,UAAAwuD,QADA,WAEI1uD,KAAK6hE,WA0BT8N,EAAAzvE,UAAA2hE,QAAA,WAAA,IAAAjtD,EAAA5U,KACQA,KAAK+jB,UAAY/jB,KAAKsgC,cAAcn+B,MAAMxB,QAC1C47C,sBAAsB,WAAM,OAAA3nC,EAAK0rB,cAAc0nC,kBAAkB,EAAGpzD,EAAK0rB,cAAcn+B,MAAMxB,+BA5GxG8N,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,mBACVtgC,SAAU,kEAJM40B,EAAAA,gDAwBf30B,EAAAA,MAAKX,KAAA,CAAC,qCAwDNY,EAAAA,aAAYZ,KAAA,CAAC,YAiClB2hE,EAjHA,GAsHAE,GAAA,WAAA,SAAAA,KAIsC,2BAJrC7gE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC0gE,IACfzgE,QAAS,CAACygE,QAEwBE,EAJtC,GC/EAC,GAAA,SAAAh2D,GA0II,SAAAg2D,EAAoB3iB,EACI4iB,GADxB,IAAAn7D,EAEIkF,EAAAlZ,KAAAZ,KAAMmtD,EAAU4iB,IAAmB/vE,YAFnB4U,EAAAu4C,SAAAA,EACIv4C,EAAAm7D,mBAAAA,EAvHjBn7D,EAAAo7D,UAAY,IAiBZp7D,EAAAq7D,UAAY,IAmBZr7D,EAAAs7D,iBAAkB,EA6DlBt7D,EAAAu7D,cAAgB,IAAIhnD,EAAAA,aAmBpBvU,EAAAw7D,cAAgB,IAAIjnD,EAAAA,eAqQ/B,OAzY+CnR,EAAAA,EAAAA,GAyD3CxY,OAAAgC,eACIsuE,EAAA5vE,UAAA,SAAM,KASV,WACI,MAA4B,iBAAjBF,KAAKqvC,QACLrvC,KAAK+vE,mBAAmBjiE,IAAI9N,KAAKqvC,SAErCrvC,KAAKqvC,aAdhB,SACWruC,GACQ,OAAXA,GAA8B,KAAXA,IACnBhB,KAAKqvC,QAAUruC,oCAqBvBxB,OAAAgC,eAAWsuE,EAAA5vE,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKmtD,SAAS7sB,+CAUzB9gC,OAAAgC,eAAWsuE,EAAA5vE,UAAA,gBAAa,KAAxB,WACI,OAAQF,KAAKgB,QAAUhB,KAAKgB,OAAOmtC,2CAiDhC2hC,EAAA5vE,UAAA2uC,SAAP,WACI/0B,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,UAERqwE,EAAqC,CACvCrvE,OAAQhB,KAAKsgC,cACbrE,oBAAqBC,GAAoBrC,OACzCwC,qBAAsBH,GAAoBrC,OAC1C0C,cAAe+zC,EAAAA,aAAatnE,GAAe,CAAE/E,OAAQ,CAAEP,SAAU,WACjE84B,eAAgB8zC,EAAAA,aAAapsE,EAAS,CAAED,OAAQ,CAAEP,SAAU,WAGhE1D,KAAKsvC,iBAAiB7P,iBAAmB,IAAIuI,GAAqBqoC,GAClErwE,KAAKsvC,iBAAiB1P,qBAAsB,GAGxCkwC,EAAA5vE,UAAAqwE,2BAAR,WACQvwE,KAAK0kC,SACL1kC,KAAKsvC,iBAAiB5K,OAAS1kC,KAAK0kC,SAI5CllC,OAAAgC,eAAYsuE,EAAA5vE,UAAA,wBAAqB,KAAjC,WACI,OAAOV,OAAOa,OAAO,GAAIL,KAAKsvC,iBAAkBtvC,KAAKouC,kDAIjD0hC,EAAA5vE,UAAAswE,mBAAR,WAQI,GANIxwE,KAAKgB,OAAOyvE,YACZC,aAAa1wE,KAAKgB,OAAO2vE,WACzB3wE,KAAKgB,OAAOyvE,WAAY,IAIvBzwE,KAAKgB,OAAOmtC,WAAanuC,KAAKgB,OAAO4vE,WAAY,CAClDF,aAAa1wE,KAAKgB,OAAO2vE,eAEnBE,EAAa,CAAE7vE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GAGjE,GAFApiB,KAAKowE,cAAc7tD,KAAKsuD,GAEpBA,EAAWzuD,OACX,OAAO,EAIXpiB,KAAKgB,OAAO+vE,WAAW/wE,KAAKgxE,uBAC5BhxE,KAAKgB,OAAO4vE,YAAa,EAG7B,OAAO,GAIHd,EAAA5vE,UAAA+wE,mBAAR,WAII,OAHAP,aAAa1wE,KAAKgB,OAAO2vE,aAGrB3wE,KAAKgB,OAAOyvE,YACZzwE,KAAKgB,OAAOyvE,WAAY,EACxBzwE,KAAKgB,OAAO4vE,YAAa,GAClB,IAURd,EAAA5vE,UAAAgxE,gBADP,SACuB5+D,OACbu+D,EAAa,CAAE7vE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GACjEpiB,KAAKowE,cAAc7tD,KAAKsuD,GAEpBA,EAAWzuD,SAIfpiB,KAAKgB,OAAO4vE,YAAa,EACzB5wE,KAAKgB,OAAOoN,QACZpO,KAAKgB,OAAO4vE,YAAa,IAOtBd,EAAA5vE,UAAAqvC,QADP,WAEI,IAAKvvC,KAAKgB,OAAOmtC,UAAW,KAClB0iC,EAAa,CAAE7vE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GAGjE,GAFApiB,KAAKowE,cAAc7tD,KAAKsuD,GAEpBA,EAAWzuD,OACX,OAGJpiB,KAAKgB,OAAO+vE,WAAW/wE,KAAKgxE,yBAQ7BlB,EAAA5vE,UAAAixE,aADP,WAAA,IAAAv8D,EAAA5U,KAEI,IAAIA,KAAKkwE,kBAITlwE,KAAKuwE,8BACgBvwE,KAAKwwE,sBAC1B,KAIMY,EAAc,CAAEpwE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GAClEpiB,KAAKmwE,cAAc5tD,KAAK6uD,GAEpBA,EAAYhvD,SAIhBpiB,KAAKgB,OAAOyvE,WAAY,EACxBzwE,KAAKgB,OAAO2vE,UAAY9kB,WAAW,WAC/Bj3C,EAAK5T,OAAOmN,KAAKyG,EAAKo8D,uBACtBp8D,EAAK5T,OAAOyvE,WAAY,GACzBzwE,KAAKgwE,cAOLF,EAAA5vE,UAAAmxE,aADP,WAAA,IAAAz8D,EAAA5U,KAEI,IAAIA,KAAKkwE,kBAITlwE,KAAKuwE,8BACgBvwE,KAAKixE,uBACNjxE,KAAKgB,OAAOmtC,WAAhC,KAIM0iC,EAAa,CAAE7vE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GACjEpiB,KAAKowE,cAAc7tD,KAAKsuD,GAEpBA,EAAWzuD,SAIfpiB,KAAKgB,OAAO4vE,YAAa,EACzB5wE,KAAKgB,OAAO2vE,UAAY9kB,WAAW,WAC/Bj3C,EAAK5T,OAAOoN,QACZwG,EAAK5T,OAAO4vE,YAAa,GAC1B5wE,KAAKiwE,cAOLH,EAAA5vE,UAAA+3C,aADP,SACoB3lC,GACZtS,KAAKkwE,iBAITlwE,KAAKsxE,eAOFxB,EAAA5vE,UAAAqxE,qBADP,SAC4Bj/D,GACpBtS,KAAKkwE,iBAILlwE,KAAKsgC,gBAAkBhuB,EAAMtR,QAC5BhB,KAAKsgC,cAAcC,SAASjuB,EAAMtR,SAEnChB,KAAKwxE,eAWN1B,EAAA5vE,UAAAoxE,YAAP,WAAA,IAAA18D,EAAA5U,KAGI,GAFA0wE,aAAa1wE,KAAKgB,OAAO2vE,YAEpB3wE,KAAKgB,OAAOmtC,UAAW,KAClB0iC,EAAa,CAAE7vE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GAGjE,GAFApiB,KAAKowE,cAAc7tD,KAAKsuD,GAEpBA,EAAWzuD,OACX,OAGJpiB,KAAKgB,OAAO+vE,WAAW/wE,KAAKgxE,uBAC5BhxE,KAAKgB,OAAO4vE,YAAa,MAGvBQ,EAAc,CAAEpwE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GAClEpiB,KAAKmwE,cAAc5tD,KAAK6uD,GAEpBA,EAAYhvD,SAIhBpiB,KAAKgB,OAAOyvE,WAAY,EACxBzwE,KAAKgB,OAAO2vE,UAAY9kB,WAAW,WAC/Bj3C,EAAK5T,OAAOmN,KAAKyG,EAAKo8D,uBACtBp8D,EAAK5T,OAAOyvE,WAAY,GACzBzwE,KAAKgwE,aAULF,EAAA5vE,UAAAsxE,YAAP,WAAA,IAAA58D,EAAA5U,KAKI,GAJIA,KAAKgB,OAAOmtC,WAAanuC,KAAKgB,OAAOyvE,WACrCC,aAAa1wE,KAAKgB,OAAO2vE,YAGzB3wE,KAAKgB,OAAOmtC,YAAanuC,KAAKgB,OAAO4vE,WAAzC,KAIMC,EAAa,CAAE7vE,OAAQhB,KAAM8wE,QAAS9wE,KAAKgB,OAAQohB,QAAQ,GACjEpiB,KAAKowE,cAAc7tD,KAAKsuD,GAEpBA,EAAWzuD,SAIfpiB,KAAKgB,OAAO4vE,YAAa,EACzB5wE,KAAKgB,OAAO2vE,UAAY9kB,WAAW,WAC/Bj3C,EAAK5T,OAAOoN,QACZwG,EAAK5T,OAAO4vE,YAAa,GAC1B5wE,KAAKiwE,kCA3YfxhE,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,gBACVtgC,SAAU,kEAxCC40B,EAAAA,kBASN91B,GAAoBzM,WAAA,CAAA,CAAAmR,KAwKpBg9B,EAAAA,iDAxHJvgC,EAAAA,MAAKX,KAAA,CAAC,gCAiBNW,EAAAA,MAAKX,KAAA,CAAC,sCAmBNW,EAAAA,MAAKX,KAAA,CAAC,mCAMNW,EAAAA,MAAKX,KAAA,CAAC,2CAuDN2d,EAAAA,8BAmBAA,EAAAA,gCAgFA/c,EAAAA,aAAYZ,KAAA,CAAC,0BAA2B,CAAC,4BAiBzCY,EAAAA,aAAYZ,KAAA,CAAC,+BAiBbY,EAAAA,aAAYZ,KAAA,CAAC,oCA6BbY,EAAAA,aAAYZ,KAAA,CAAC,oCA6BbY,EAAAA,aAAYZ,KAAA,CAAC,aAAc,CAAC,yCAY5BY,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,cA8E1C8hE,EA7YA,CAI+C1gC,IA2Y3CoC,GAAU,EAedigC,GAAA,SAAA33D,GAkFI,SAAA23D,EACIpxC,EACAuN,EAC2BrQ,EACfsQ,GAJhB,IAAAj5B,EAMIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAYuN,EAAKrQ,EAAgBsQ,IAAkB7tC,YAzEtD4U,EAAAg8D,YAAa,EAMbh8D,EAAA67D,WAAY,EA8CZ77D,EAAAjH,GAAK,eAAe6jC,OAgE/B,OA/HyCx5B,EAAAA,EAAAA,GAsBrCxY,OAAAgC,eACWiwE,EAAAvxE,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAKmuC,2CAMhB3uC,OAAAgC,eACWiwE,EAAAvxE,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAKmuC,2CAwCjB3uC,OAAAgC,eACWiwE,EAAAvxE,UAAA,OAAI,KADf,WAEI,MAAO,2CAkBDuxE,EAAAvxE,UAAAwxE,UAAV,SAAoBtjC,OACVhO,EAAOpgC,KAAKu9B,eAAe+D,eAAethC,KAAK+tC,YAErD,KADyB3N,GAAOA,EAAK6E,oBAEjC7E,EAAK6E,oBAAoB0sC,SACzBvxC,EAAK6E,oBAAoBS,QACzBtF,EAAK6E,oBAAsB,UACxB,GAAIjlC,KAAKmuC,UAAW,KACjBnqC,EAAYoqC,EAAgB3O,iBAAiBnF,SAASiC,cAC5D6R,EAAgB3O,iBAAiBnF,SAASiC,cAAgB,KAC1Dv8B,KAAKmO,KAAKigC,GACVA,EAAgB3O,iBAAiBnF,SAASiC,cAAgBv4B,IASxDytE,EAAAvxE,UAAA6wE,WAAV,SAAqB3iC,OACXhO,EAAOpgC,KAAKu9B,eAAe+D,eAAethC,KAAK+tC,YAGrD,KAF0B3N,GAAOA,EAAKO,qBAGlCP,EAAKO,qBAAqBgxC,SAC1BvxC,EAAKO,qBAAqB+E,QAC1BtF,EAAKO,qBAAuB,UACzB,IAAK3gC,KAAKmuC,UAAW,KAClBnqC,EAAYoqC,EAAgB3O,iBAAiBnF,SAASkC,eAC5D4R,EAAgB3O,iBAAiBnF,SAASkC,eAAiB,KAC3Dx8B,KAAKoO,QACLggC,EAAgB3O,iBAAiBnF,SAASkC,eAAiBx4B,wBAhItEyK,EAAAA,UAAST,KAAA,CAAC,CACPghC,SAAU,UACVtgC,SAAU,4DAtcC40B,EAAAA,kBAA2C2L,EAAAA,yBAMjDlQ,GAAiBh+B,WAAA,CAAA,CAAAmR,KAmhBjBC,EAAAA,OAAMnE,KAAA,CAAC+wB,aAhhBPvxB,GAAoBzM,WAAA,CAAA,CAAAmR,KAihBpBg9B,EAAAA,mDA5DJC,EAAAA,YAAWnhC,KAAA,CAAC,mDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+CAoBZW,EAAAA,MAAKX,KAAA,CAAC,uBAWNmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gBAuDjByjE,EAnIA,CAIyC9jC,IAoIzCikC,GAAA,WAAA,SAAAA,KAMgC,2BAN/B5iE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACwiE,GAAqB3B,IACpC5gE,QAAS,CAACuiE,GAAqB3B,IAC/BrzB,QAAS,CAACC,EAAAA,cACVvtC,UAAW,CAAC4vB,QAEgB6yC,EANhC,GCvkBAC,GAAA,WAII,SAAAA,IAAA,IAAAj9D,EAAA5U,KACIA,KAAK8xE,WAAa,CAAC,CACf9xD,KAAM,OACN+xD,SAAS,EACTC,SAAU,UACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,IAEZ,CACCgf,KAAM,UACN+xD,SAAS,EACTC,SAAU,cACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,IAEZ,CACCgf,KAAM,KACN+xD,SAAS,EACTC,SAAU,QACVnoD,QAAQ,EACRtQ,MAAO,SAACvY,EAAawY,GACjB,OAAO5E,EAAKq9D,eAAejxE,EAAQwY,MAsCnD,OAjCkBq4D,EAAAx9D,SAAd,WACI,OAAOrU,KAAKsU,YAActU,KAAKsU,UAAY,IAAItU,OAMzC6xE,EAAA3xE,UAAA+xE,eAAV,SAAyBjxE,EAAawY,GAClC,OAAOA,EAAU03B,IAAIlwC,IAMlB6wE,EAAA3xE,UAAAgyE,cAAP,WACI,OAAOlyE,KAAK8xE,WAAW93D,OAAO,SAAAm4D,GAAK,OAACA,EAAEtoD,SAAQvN,IAAI,SAACwnB,GAAY,OAAAA,EAAQ9jB,QAOpE6xD,EAAA3xE,UAAAmZ,UAAP,SAAiB2G,GACb,OAAOhgB,KAAK8xE,WAAWx6D,KAAK,SAACwsB,GAAY,OAAAA,EAAQ9jB,OAASA,KAOvD6xD,EAAA3xE,UAAAkyE,OAAP,SAAcC,GACVryE,KAAK8xE,WAAWtvE,KAAK6vE,IA5DRR,EAAAv9D,UAAiC,KA8DtDu9D,EA/DA,kBAuEI,SAAAS,IAAA,IAAA19D,EACIkF,EAAAlZ,KAAAZ,OAAOA,YACP4U,EAAKk9D,WAAa,CAAC,CACf9xD,KAAM,MACN+xD,SAAS,EACTC,SAAU,MACVz4D,MAAO,SAACvY,GACJ,OAAO,IAEZ,CACCgf,KAAM,OACN+xD,SAAS,EACTC,SAAU,UACVz4D,MAAO,SAACvY,GACJ,SAAUA,GAAqB,OAAXA,GAAmBA,IAAWgT,aAEvD,CACCgM,KAAM,QACN+xD,SAAS,EACTC,SAAU,WACVz4D,MAAO,SAACvY,GACJ,OAAQA,GAAqB,OAAXA,GAAmBA,IAAWgT,YAErD,CACCgM,KAAM,QACN+xD,SAAS,EACTC,SAAU,QACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,YAE1C,CACCgM,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,aAE1CrR,OAAOiS,EAAKk9D,cAEvB,OAxCgD95D,EAAAA,EAAAA,GAwChDs6D,GAxCgDT,mBAgD5C,SAAAU,IAAA,IAAA39D,EACIkF,EAAAlZ,KAAAZ,OAAOA,YACP4U,EAAKk9D,WAAa,CAAC,CACf9xD,KAAM,SACN+xD,SAAS,EACTC,SAAU,SACVz4D,MAAO,SAACvY,EAAcwY,GAClB,IAAKxY,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjByxE,EAAUF,EAAwBG,aAAa1xE,EAAQ,OACvD2xE,EAAUJ,EAAwBG,aAAal5D,EAAW,OAChE,OAAOi5D,EAAQG,OAASD,EAAQC,MAC5BH,EAAQI,QAAUF,EAAQE,OAC1BJ,EAAQK,MAAQH,EAAQG,MAEjC,CACC9yD,KAAM,eACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,EAAcwY,GAClB,IAAKxY,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjByxE,EAAUF,EAAwBG,aAAa1xE,EAAQ,OACvD2xE,EAAUJ,EAAwBG,aAAal5D,EAAW,OAChE,OAAOi5D,EAAQG,OAASD,EAAQC,MAC5BH,EAAQI,QAAUF,EAAQE,OAC1BJ,EAAQK,MAAQH,EAAQG,MAEjC,CACC9yD,KAAM,SACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,EAAcwY,GAClB,QAAKxY,IAIL4T,EAAK49D,kBAAkBxxE,GAEhBA,EAASwY,KAErB,CACCwG,KAAM,QACN+xD,SAAS,EACTC,SAAU,WACVz4D,MAAO,SAACvY,EAAcwY,GAClB,QAAKxY,IAIL4T,EAAK49D,kBAAkBxxE,GAEhBA,EAASwY,KAErB,CACCwG,KAAM,QACN+xD,SAAS,EACTC,SAAU,QACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,OACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,OAC7D,OAAO7Q,EAAEszE,OAASG,EAAIH,MAClBtzE,EAAEuzE,QAAUE,EAAIF,OAChBvzE,EAAEwzE,MAAQC,EAAID,MAEvB,CACC9yD,KAAM,YACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAGX1B,EADN0zE,EAAKT,EAAwBG,aAAa1xE,EAAQ,OAClDm5B,GAAM76B,EAA4C,IAAI6Q,KAA1C,IAAIA,KAAK7Q,EAAE2zE,QAAQ3zE,EAAE4zE,UAAY,KAC7CC,EAAYZ,EAAwBG,aAAav4C,EAAG,OAC1D,OAAO64C,EAAGJ,OAASO,EAAUP,MACzBI,EAAGH,QAAUM,EAAUN,OACvBG,EAAGF,MAAQK,EAAUL,MAE9B,CACC9yD,KAAM,YACN+xD,SAAS,EACTC,SAAU,aACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,MACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,MAC7D,OAAO7Q,EAAEszE,OAASG,EAAIH,MAClBtzE,EAAEuzE,QAAUE,EAAIF,QAEzB,CACC7yD,KAAM,YACN+xD,SAAS,EACTC,SAAU,aACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,MACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,MAO7D,OANK4iE,EAAIF,MAILE,EAAIF,SAHJE,EAAIF,MAAQ,GACZE,EAAIH,MAAQ,GAITtzE,EAAEszE,OAASG,EAAIH,MAClBtzE,EAAEuzE,QAAUE,EAAIF,QAEzB,CACC7yD,KAAM,YACN+xD,SAAS,EACTC,SAAU,aACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,MACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,MAO7D,OANkB,KAAd4iE,EAAIF,OACJE,EAAIF,MAAQ,EACZE,EAAIH,MAAQ,GAEZG,EAAIF,QAEDvzE,EAAEszE,OAASG,EAAIH,MAClBtzE,EAAEuzE,QAAUE,EAAIF,QAEzB,CACC7yD,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,KACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,KAC7D,OAAO7Q,EAAEszE,OAASG,EAAIH,OAE3B,CACC5yD,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,KACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,KAC7D,OAAO7Q,EAAEszE,OAASG,EAAIH,KAAO,IAElC,CACC5yD,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,IAAKA,EACD,OAAO,EAGX4T,EAAK49D,kBAAkBxxE,OAEjB1B,EAAIizE,EAAwBG,aAAa1xE,EAAQ,KACjD+xE,EAAMR,EAAwBG,aAAa,IAAIviE,KAAQ,KAC7D,OAAO7Q,EAAEszE,OAASG,EAAIH,KAAO,IAElC,CACC5yD,KAAM,QACN+xD,SAAS,EACTC,SAAU,QACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,YAE1C,CACCgM,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,aAE1CrR,OAAOiS,EAAKk9D,cAuDvB,OAhR6C95D,EAAAA,EAAAA,GAiO3Bu6D,EAAAG,aAAd,SAA2BU,EAAYC,OAC7Bz9D,EAAM,CACRk9D,IAAK,KACLQ,MAAO,KACPC,aAAc,KACdC,QAAS,KACTX,MAAO,KACPY,QAAS,KACTb,KAAM,MAEV,OAAKQ,GAASC,GAGVA,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAIg9D,KAAOQ,EAAKM,eAEhBL,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAIi9D,MAAQO,EAAKO,YAEjBN,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAIk9D,IAAMM,EAAKF,WAEfG,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAI09D,MAAQF,EAAKQ,YAEjBP,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAI49D,QAAUJ,EAAKS,cAEnBR,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAI69D,QAAUL,EAAKU,cAEnBT,EAAW/hE,QAAQ,MAAQ,IAC3BsE,EAAI29D,aAAeH,EAAKW,mBAErBn+D,GAvBIA,GA0BP28D,EAAAryE,UAAAsyE,kBAAR,SAA0BxxE,GACtB,KAAMA,aAAkBmP,MACpB,MAAM,IAAIN,MAAM,mGAId0iE,EAAAryE,UAAA+xE,eAAV,SAAyBjxE,EAAawY,GAClC,QAAKxY,GACEwY,EAAU03B,IAAI,IAAI/gC,KAAKnP,EAAO0yE,cAAe1yE,EAAO2yE,WAAY3yE,EAAOkyE,WAAWc,gBAEjGzB,GAhR6CV,mBAwRzC,SAAAoC,IAAA,IAAAr/D,EACIkF,EAAAlZ,KAAAZ,OAAOA,YACP4U,EAAKk9D,WAAa,CAAC,CACf9xD,KAAM,SACN+xD,SAAS,EACTC,SAAU,SACVz4D,MAAO,SAACvY,EAAgBwY,GACpB,OAAOxY,IAAWwY,IAEvB,CACCwG,KAAM,eACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,EAAgBwY,GACpB,OAAOxY,IAAWwY,IAEvB,CACCwG,KAAM,cACN+xD,SAAS,EACTC,SAAU,eACVz4D,MAAO,SAACvY,EAAgBwY,GACpB,OAAOxY,EAASwY,IAErB,CACCwG,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,EAAgBwY,GACpB,OAAOxY,EAASwY,IAErB,CACCwG,KAAM,uBACN+xD,SAAS,EACTC,SAAU,wBACVz4D,MAAO,SAACvY,EAAgBwY,GACpB,OAAOxY,GAAUwY,IAEtB,CACCwG,KAAM,oBACN+xD,SAAS,EACTC,SAAU,qBACVz4D,MAAO,SAACvY,EAAgBwY,GACpB,OAAOxY,GAAUwY,IAEtB,CACCwG,KAAM,QACN+xD,SAAS,EACTC,SAAU,QACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,WAAawH,MAAMxa,KAE7D,CACCgf,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,YAAcwH,MAAMxa,MAE9D2B,OAAOiS,EAAKk9D,cAEvB,OA7D+C95D,EAAAA,EAAAA,GA6D/Ci8D,GA7D+CpC,mBAqE3C,SAAAqC,IAAA,IAAAt/D,EACIkF,EAAAlZ,KAAAZ,OAAOA,YACP4U,EAAKk9D,WAAa,CAAC,CACf9xD,KAAM,WACN+xD,SAAS,EACTC,SAAU,WACVz4D,MAAO,SAACvY,EAAgBwY,EAAmB9E,OACjCy/D,EAASD,EAA0BE,gBAAgB56D,EAAW9E,GAEpE,OAAmC,KADnC1T,EAASkzE,EAA0BE,gBAAgBpzE,EAAQ0T,IAC7CpD,QAAQ6iE,KAE3B,CACCn0D,KAAM,iBACN+xD,SAAS,EACTC,SAAU,mBACVz4D,MAAO,SAACvY,EAAgBwY,EAAmB9E,OACjCy/D,EAASD,EAA0BE,gBAAgB56D,EAAW9E,GAEpE,OAAmC,KADnC1T,EAASkzE,EAA0BE,gBAAgBpzE,EAAQ0T,IAC7CpD,QAAQ6iE,KAE3B,CACCn0D,KAAM,aACN+xD,SAAS,EACTC,SAAU,cACVz4D,MAAO,SAACvY,EAAgBwY,EAAmB9E,OACjCy/D,EAASD,EAA0BE,gBAAgB56D,EAAW9E,GAEpE,OADA1T,EAASkzE,EAA0BE,gBAAgBpzE,EAAQ0T,IAC7C2/D,WAAWF,KAE9B,CACCn0D,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,EAAgBwY,EAAmB9E,OACjCy/D,EAASD,EAA0BE,gBAAgB56D,EAAW9E,GAEpE,OADA1T,EAASkzE,EAA0BE,gBAAgBpzE,EAAQ0T,IAC7CoZ,SAASqmD,KAE5B,CACCn0D,KAAM,SACN+xD,SAAS,EACTC,SAAU,SACVz4D,MAAO,SAACvY,EAAgBwY,EAAmB9E,OACjCy/D,EAASD,EAA0BE,gBAAgB56D,EAAW9E,GAEpE,OADA1T,EAASkzE,EAA0BE,gBAAgBpzE,EAAQ0T,MACzCy/D,IAEvB,CACCn0D,KAAM,eACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,EAAgBwY,EAAmB9E,OACjCy/D,EAASD,EAA0BE,gBAAgB56D,EAAW9E,GAEpE,OADA1T,EAASkzE,EAA0BE,gBAAgBpzE,EAAQ0T,MACzCy/D,IAEvB,CACCn0D,KAAM,QACN+xD,SAAS,EACTC,SAAU,QACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,WAA+B,IAAlBhT,EAAOL,SAE9D,CACCqf,KAAM,WACN+xD,SAAS,EACTC,SAAU,YACVz4D,MAAO,SAACvY,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgT,WAAahT,EAAOL,OAAS,KAEvEgC,OAAOiS,EAAKk9D,cAavB,OApF+C95D,EAAAA,EAAAA,GA+E7Bk8D,EAAAE,gBAAd,SAA8Bl/D,EAAWR,GAGrC,OAFAQ,EAAIA,GAAK,GAEFR,GAAc,GAAKQ,GAAGG,cAAgBH,GAErDg/D,GApF+CrC,ICndlCyC,GAAyB,CAClC99D,SAAU,IAAIqD,mBCClB,SAAA06D,mDAAgD,OAAZv8D,EAAAA,EAAAA,GAAYu8D,GAAZ50E,OCYpC60E,GAAA,WAUI,SAAAA,EAAoBC,EAAoDzzC,GAApDhhC,KAAAy0E,WAAAA,EAAoDz0E,KAAAghC,UAAAA,EALhEhhC,KAAA00E,SAAW,iBACX10E,KAAA20E,gBAAkB,IAAIrkE,IAEtBtQ,KAAA40E,gBAA+B,IAAIrkE,WAU3C/Q,OAAAgC,eAAIgzE,EAAAt0E,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAK00E,cAShB,SAAmBG,GACf70E,KAAK00E,SAAWG,mCASbL,EAAAt0E,UAAA40E,qBAAP,SAA4BC,EAAeF,GAEvC,YAFuC,IAAAA,IAAAA,EAAAE,GACvC,KAAKJ,gBAAgBjsD,IAAIqsD,EAAOF,GAChC,MASGL,EAAAt0E,UAAA80E,iBAAP,SAAwBD,GACpB,OAAO/0E,KAAK20E,gBAAgB7mE,IAAIinE,IAAUA,GASvCP,EAAAt0E,UAAA+0E,WAAP,SAAkBjD,EAAkBxzD,EAAa02D,GAC7C,QAD6C,IAAAA,IAAAA,EAAA,KACzClD,IAAYxzD,EAaZ,MAAM,IAAI3O,MAAM,iFAZVslE,EAAUn1E,KAAKy0E,WAAWW,+BAA+B52D,GAC/D,IAAK22D,EACD,MAAM,IAAItlE,MAAM,gGAA+F2O,EAAG,MAItH,IADqBxe,KAAKy0E,WAAWY,SAASC,EAAAA,gBAAgBC,aAAcJ,GAExE,MAAM,IAAItlE,MAAM,wDAAwD2O,EAAG,MAG/Exe,KAAKw1E,SAASxD,EAAUxzD,EAAK02D,IAa9BV,EAAAt0E,UAAAu1E,mBAAP,SAA0BzD,EAAkB0D,EAAkBR,GAC1D,QAD0D,IAAAA,IAAAA,EAAA,KACtDlD,IAAY0D,EAGZ,MAAM,IAAI7lE,MAAM,kFAFhB7P,KAAK21E,aAAa3D,EAAU0D,EAAUR,IAYvCV,EAAAt0E,UAAA01E,gBAAP,SAAuB5D,EAAkBkD,QAAA,IAAAA,IAAAA,EAAA,QAC/BW,EAAU71E,KAAK81E,cAAc9D,EAAUkD,GAC7C,OAAOl1E,KAAK40E,gBAAgB1jC,IAAI2kC,IAS7BrB,EAAAt0E,UAAA41E,cAAP,SAAqB9D,EAAkBkD,GACnC,YADmC,IAAAA,IAAAA,EAAA,IAC5BA,EAAU,IAAMlD,GAMnBwC,EAAAt0E,UAAAs1E,SAAR,SAAiBxD,EAAkBxzD,EAAa02D,QAAA,IAAAA,IAAAA,EAAA,QACtC7gE,EAAWrU,KACX+1E,EAAc,IAAIC,eACxBD,EAAY5nE,KAAK,MAAOqQ,GAAK,GAC7Bu3D,EAAYE,aAAe,OAG3BF,EAAYG,OAAS,SAAU5jE,GAC3B,IAAIA,EAQA,MAAM,IAAIzC,MAAM,iCAAiC2O,EAAG,SAP9C23D,EAAU7jE,EAAY,OAC5B,GAAuB,MAAnB6jE,EAAQC,OAGR,MAAM,IAAIvmE,MAAM,iCAAiC2O,EAAG,YAAY23D,EAAQC,OAAM,KAAKD,EAAQE,WAAU,KAFrGhiE,EAASshE,aAAa3D,EAAUmE,EAAQG,aAAcpB,IAUlEa,EAAYQ,QAAU,SAAUjkE,GAC5B,GAAIA,EAAO,KACD6jE,EAAU7jE,EAAY,OAC5B,MAAM,IAAIzC,MAAM,iCAAiC2O,EAAG,wBAAwB23D,EAAQC,OAAM,KAAKD,EAAQE,WAAU,KAErH,MAAM,IAAIxmE,MAAM,iCAAiC2O,EAAG,MAGxDu3D,EAAYS,QAMRhC,EAAAt0E,UAAAy1E,aAAR,SAAqB3D,EAAkB7vE,EAAe+yE,GAClD,QADkD,IAAAA,IAAAA,EAAA,IAC9ClD,GAAY7vE,EAAO,CACnBnC,KAAKy2E,gCAECtvB,EAAMnnD,KAAKghC,UAAU1iB,cAAc,OACzC6oC,EAAIuvB,UAAYv0E,MACVw0E,EAAMxvB,EAAIsjB,cAAc,OAE9B,GAAIkM,EAAK,KACCd,EAAU71E,KAAK81E,cAAc9D,EAAUkD,GAO7C,GALAyB,EAAIvjB,aAAa,KAAMyiB,GACvBc,EAAIvjB,aAAa,MAAO,IACxBujB,EAAIvjB,aAAa,sBAAuB,iBACxCujB,EAAIvjB,aAAa,YAAa,SAE1BpzD,KAAK40E,gBAAgB1jC,IAAI2kC,GAAU,KAC7Be,EAAW52E,KAAK62E,cAAcpM,cAAc,WAAWoL,EAAO,MACpE71E,KAAK62E,cAAc73D,YAAY43D,GAGnC52E,KAAK62E,cAAc/3D,YAAY63D,GAC/B32E,KAAK40E,gBAAgBlnE,IAAImoE,MAQ7BrB,EAAAt0E,UAAAu2E,0BAAR,WACSz2E,KAAK62E,gBACN72E,KAAK62E,cAAgB72E,KAAKghC,UAAUjG,gBAAgB0vC,cAAc,sBAC7DzqE,KAAK62E,gBACN72E,KAAK62E,cAAgB72E,KAAKghC,UAAU1iB,cAAc,OAClDte,KAAK62E,cAAc/5C,UAAUpvB,IAAI,qBACjC1N,KAAKghC,UAAUjG,gBAAgBjc,YAAY9e,KAAK62E,sCA3L/D7kE,EAAAA,WAAUhE,KAAA,CAAC,CACRiE,WAAY,oDAjBP6kE,EAAAA,gDA0B0C3kE,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,yKAV1D,GCDI0K,GAAU,EAEdulC,GAAA,WA+FI,SAAAA,EAAoBC,EAAyBC,GAAzBj3E,KAAAg3E,IAAAA,EAAyBh3E,KAAAi3E,YAAAA,EApEtCj3E,KAAAi1C,SAAW,WAcXj1C,KAAAk3E,YAAa,EAUbl3E,KAAA2N,GAAK,YAAY6jC,KAkBjBxxC,KAAAm3E,QAAS,EA2BZn3E,KAAK0S,GAAKskE,EACVh3E,KAAK43B,KAAO53B,KAAKi3E,YAAYG,eAC7Bp3E,KAAKi3E,YAAYnC,qBAAqB,WAAY,kBAsI1D,OAhIIiC,EAAA72E,UAAA2uC,SAAA,WACI7uC,KAAKq3E,mBAaT73E,OAAAgC,eAAIu1E,EAAA72E,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK43B,sCAahBp4B,OAAAgC,eAAIu1E,EAAA72E,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKm3E,wCAahB33E,OAAAgC,eACIu1E,EAAA72E,UAAA,cAAW,KADf,WAEI,OAAQF,KAAKm3E,wCAajB33E,OAAAgC,eACIu1E,EAAA72E,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKs3E,2CAahB93E,OAAAgC,eAAIu1E,EAAA72E,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKgyE,0CAchBxyE,OAAAgC,eAAIu1E,EAAA72E,UAAA,YAAS,KAAb,WACI,OAAIF,KAAKi3E,YAAYrB,gBAAgB51E,KAAKgyE,SAAUhyE,KAAK43B,MAC9C,IAAM53B,KAAKi3E,YAAYnB,cAAc91E,KAAKgyE,SAAUhyE,KAAK43B,MAG7D,sCAaXp4B,OAAAgC,eAAIu1E,EAAA72E,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKgyE,SACDhyE,KAAKi3E,YAAYrB,gBAAgB51E,KAAKgyE,SAAUhyE,KAAK43B,MAC9C53B,KAAKu3E,SAGTv3E,KAAKw3E,WAGTx3E,KAAKy3E,kDAMRV,EAAA72E,UAAAm3E,gBAAR,eACUxC,EAAY70E,KAAKi3E,YAAYjC,iBAAiBh1E,KAAK43B,MACzD53B,KAAK0S,GAAG4tB,cAAcxD,UAAUpvB,IAAImnE,GAEhC70E,KAAKgyE,WAAahyE,KAAKi3E,YAAYrB,gBAAgB51E,KAAKgyE,SAAUhyE,KAAK43B,OACvE53B,KAAK0S,GAAG4tB,cAAcxD,UAAUpvB,IAAI1N,KAAKgyE,+BArOpDlgC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,WACVqjC,SAAA,wVApBgBzO,EAAAA,kBACXkxC,0CAuBJ/9B,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,8BAGrDF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,sBAG3DF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,sBAcnDxH,EAAAA,YAAWnhC,KAAA,CAAC,sCAcZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gCASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBASAA,EAAAA,MAAKX,KAAA,CAAC,2BASNW,EAAAA,MAAKX,KAAA,CAAC,+BASNW,EAAAA,MAAKX,KAAA,CAAC,2BAUNW,EAAAA,MAAKX,KAAA,CAAC,6BA2DNmhC,EAAAA,YAAWnhC,KAAA,CAAC,kDAeZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kBAuEjB+oE,EAxOA,GCTAW,GAAA,WAAA,SAAAA,KAYA,OALkBA,EAAAC,QAAd,WACI,MAAO,CACHC,SAAUF,wBATrB1oE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC8nE,IACf7nE,QAAS,CAAC6nE,IACVt6B,QAAS,CAACC,EAAAA,kBAIVzJ,EAAAA,CADCtV,GAAgB,+KAMrB+5C,EAZA,GCKIlmC,GAAU,MASV+hB,QAAU,UACVskB,SAAW,WACXC,MAAQ,QACRC,KAAO,QAgBXC,GAAA,WA8QI,SAAAA,EAAmB33C,GAAArgC,KAAAqgC,WAAAA,EA5NZrgC,KAAA8oE,UAAY,SAYZ9oE,KAAA0xC,KAAO,MAYP1xC,KAAAi1C,SAAW,aAmBVj1C,KAAA82C,MAAuB,QAaxB92C,KAAA2N,GAAK,cAAc6jC,KAenBxxC,KAAAi4E,YAAa,EAkMxB,OAvHIz4E,OAAAgC,eACWw2E,EAAA93E,UAAA,OAAI,KADf,WAEI,OAAOF,KAAK82C,WAahB,SAAgB30C,GACZ,OAAQA,GACJ,IAAK,QACL,IAAK,SACL,IAAK,QACDnC,KAAK82C,MAAQ30C,EACb,MACJ,QACInC,KAAK82C,MAAQ,0CAazBt3C,OAAAgC,eAAIw2E,EAAA93E,UAAA,OAAI,KAAR,WACI,OAAIF,KAAKk4E,IACEC,GAAWL,MAGlB93E,KAAKo4E,KACED,GAAWJ,KAGlB/3E,KAAKq4E,SACEF,GAAWN,SAGfM,GAAW5kB,yCAYtB/zD,OAAAgC,eAAIw2E,EAAA93E,UAAA,WAAQ,KAAZ,WACI,OAAQF,KAAKkS,MACT,KAAKimE,GAAWL,MACZ,OAAO93E,KAAKs4E,cAChB,KAAKH,GAAWN,SACZ,OAAO73E,KAAKu4E,iBAChB,KAAKJ,GAAWJ,KACZ,OAAO/3E,KAAKw4E,aAChB,QACI,OAAOx4E,KAAKy4E,kDASjBT,EAAA93E,UAAA2uC,SAAP,WACI7uC,KAAK04E,gBAAkB14E,KAAK24E,WAMzBX,EAAA93E,UAAAyhD,gBAAP,WACI3hD,KAAKqgC,WAAWC,cAAcxD,UACzBpvB,IAAI,eAAe1N,KAAK82C,MAAS,eAAe92C,KAAKkS,OAMtD8lE,EAAA93E,UAAAy4E,QAAR,WACI,OAAQ34E,KAAKkS,MACT,KAAKimE,GAAWL,MACZ,MAAO,eACX,KAAKK,GAAWJ,KACZ,MAAO,cACX,KAAKI,GAAWN,SACZ,MAAO,kBACX,QACI,MAAO,kBAaZG,EAAA93E,UAAA04E,UAAP,WACI,MAAO,OAAO54E,KAAKk4E,IAAG,yBAzT7BpmC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,aACVqjC,SAAA,0fAxCAzO,EAAAA,6CAoDCmT,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,6BAM7BF,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,2BAM1DF,EAAAA,UAASzoC,KAAA,CAAC,gBAAiB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,8BAMxDF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,0BAM3DF,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,uBAWvDxH,EAAAA,YAAWnhC,KAAA,CAAC,iCAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+BAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,6CAcZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCAiBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,0BAcAwgC,EAAAA,YAAWnhC,KAAA,CAAC,8BAA2B,CAAAkE,KACvCvD,EAAAA,qBAaAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gBAAa,CAAAkE,KACzBvD,EAAAA,uBAaAwgC,EAAAA,YAAWnhC,KAAA,CAAC,qBAAkB,CAAAkE,KAC9BvD,EAAAA,wBAYAA,EAAAA,oBAYAA,EAAAA,mBAYAA,EAAAA,oBAYAA,EAAAA,SAuHLqpE,EA3TA,GAgUAa,GAAA,WAAA,SAAAA,KAK+B,2BAL9B7pE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC+oE,IACf9oE,QAAS,CAAC8oE,IACVv7B,QAAS,CAACC,EAAAA,aAAcg7B,QAEGmB,EAL/B,GCtWIrnC,GAAU,MAGV+hB,QAAU,UACVulB,KAAO,OACPC,QAAU,UACVC,QAAU,UACVC,MAAQ,SA0BZC,GAAA,WAAA,SAAAA,IAcWl5E,KAAA2N,GAAK,aAAa6jC,KAWlBxxC,KAAAkS,KAAsB,UAWtBlS,KAAAmC,MAAQ,GAwBRnC,KAAA0xC,KAAO,SAYP1xC,KAAAi1C,SAAW,YAYXj1C,KAAAm5E,MAAQ,QA4DnB,OAtDI35E,OAAAgC,eAAI03E,EAAAh5E,UAAA,kBAAe,KAAnB,WAYI,OARIF,KAAKo4E,KACKp4E,KAAKkS,KAAO,8BAAgClS,KAAKo4E,KACpDp4E,KAAKmC,MACFnC,KAAKkS,KAAO,0BAA4BlS,KAAKmC,MAE7CnC,KAAKkS,KAAO,6DAWvBgnE,EAAAh5E,UAAAk5E,WAAP,yBACQC,EAAU,GAEd,OAAQC,GAAKt5E,KAAKkS,KAAKs7C,gBACnB,KAAK8rB,GAAK/lB,SACCrlD,EAAA,IACClO,KAAKi1C,SAAQ,sBAAsB,EAD3CokC,IAGA,MACJ,KAAKC,GAAKR,MACChpE,EAAA,IACC9P,KAAKi1C,SAAQ,mBAAmB,EADxCokC,IAGA,MACJ,KAAKC,GAAKP,SACC9oE,EAAA,IACCjQ,KAAKi1C,SAAQ,sBAAsB,EAD3CokC,IAGA,MACJ,KAAKC,GAAKN,SACCzgD,EAAA,IACCv4B,KAAKi1C,SAAQ,sBAAsB,EAD3CokC,IAGA,MACJ,KAAKC,GAAKL,OACCrgD,EAAA,IACC54B,KAAKi1C,SAAQ,oBAAoB,EADzCokC,IAMR,OAAOA,uBA7IdvnC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,YACVqjC,SAAA,gSAUC5C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAWAA,EAAAA,qBAWAA,EAAAA,oBAYAA,EAAAA,oBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,+BAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kCAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sBA6DjBkrE,EAhJA,GAqJAK,GAAA,WAAA,SAAAA,KAMA,2BANCvqE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACiqE,IACfhqE,QAAS,CAACgqE,IACVz8B,QAAS,CAACC,EAAAA,aAAcg7B,QAG5B6B,EANA,GC1LAC,GAAA,WAWI,SAAAA,EACkDC,EACvC31C,EAA4B8J,GADW5tC,KAAAy5E,MAAAA,EACvCz5E,KAAA8jC,QAAAA,EAA4B9jC,KAAA4tC,IAAAA,EAJ/B5tC,KAAA05E,YAAc,GACd15E,KAAAmzD,OAAS,GASVnzD,KAAAi1C,SAAW,4BAuEXj1C,KAAA0xC,KAAO,SAClB,OA9DIlyC,OAAAgC,eAEWg4E,EAAAt5E,UAAA,QAAK,KAFhB,WAGI,OAAOF,KAAKmzD,QAAUnzD,KAAKy5E,MAAM9rE,GAAK,eAW1C,SAAiB2L,GACbtZ,KAAKmzD,OAAS75C,mCAWlB9Z,OAAAgC,eAEWg4E,EAAAt5E,UAAA,aAAU,KAFrB,WAGI,OAAOF,KAAK05E,iBAWhB,SAAsBpgE,GAClBtZ,KAAK05E,YAAcpgE,uDAnE1Bw4B,EAAAA,UAAS9jC,KAAA,CAAC,CAEPU,SAAU,2BACVqjC,SAAU,qGAML5/B,EAAAA,OAAMnE,KAAA,CCO8B,mCDnBZs1B,EAAAA,kBAAmB2L,EAAAA,uDAkB/CE,EAAAA,YAAWnhC,KAAA,CAAC,kDAWZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,uCAyBZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,sCAgCZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,gBAEjBwrE,EA3FA,GEKAG,GAAA,WAAA,SAAAA,IAMW35E,KAAAi1C,SAAW,oCACtB,2BAPCxmC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,kEAGTygC,EAAAA,YAAWnhC,KAAA,CAAC,8CAEjB2rE,EAPA,GAYAC,GAAA,WAAA,SAAAA,IAMW55E,KAAAi1C,SAAW,0CACtB,2BAPCxmC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,wEAGTygC,EAAAA,YAAWnhC,KAAA,CAAC,oDAEjB4rE,EAPA,GAYAC,GAAA,WAAA,SAAAA,KAKA,2BALCprE,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,+BAGdmrE,EALA,OCTIC,KAAO,OACPhlB,KAAO,OACPilB,MAAQ,uBAkJR,SAAAC,EAAkEP,EAAqC7rC,EAC/FvN,GAD0DrgC,KAAAy5E,MAAAA,EAAqCz5E,KAAA4tC,IAAAA,EAC/F5tC,KAAAqgC,WAAAA,EAzIArgC,KAAAi6E,eAAgB,EAQjBj6E,KAAA2N,GAAK,GAiCL3N,KAAAk6E,GAAK,IAkBLl6E,KAAA0xC,KAAO,UAwBP1xC,KAAAm6E,aAA8BC,GAAcN,KAgB5C95E,KAAAq6E,cAAgB,IAAIlxD,EAAAA,aAMnBnpB,KAAAi1C,SAAW,8BA6BZj1C,KAAA4xC,UAAW,EAIb5xC,KAAK2N,GAAQ3N,KAAKy5E,MAAM9rE,GAAE,UAqDnC,OAlLInO,OAAAgC,eACWw4E,EAAA95E,UAAA,eAAY,KAOvB,WACI,OAAOF,KAAKi6E,mBAThB,SACwB3gE,GACpBtZ,KAAKi6E,cAAa,mCAiDtBz6E,OAAAgC,eAAWw4E,EAAA95E,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKy5E,MAAM9rE,oCA6CrBnO,OAAAgC,eACWw4E,EAAA95E,UAAA,aAAU,KADrB,WAEO,OAAQF,KAAKy5E,MAAMtrC,2CAoCnB6rC,EAAA95E,UAAAo6E,SAJP,SAIgBviC,GACR/3C,KAAK4xC,SACNmG,EAAItT,mBAGPzkC,KAAKq6E,cAAc93D,KAAK,CAAEjQ,MAAOylC,EAAK0hC,MAAOz5E,KAAKy5E,QAClDz5E,KAAKy5E,MAAM1rE,OAAOgqC,GAClBA,EAAI9N,mBAKF+vC,EAAA95E,UAAAq6E,UADP,SACiBjoE,GACTA,EAAMkoE,SACNx6E,KAAKy5E,MAAMgB,OAAOnoE,GAClBtS,KAAKq6E,cAAc93D,KAAK,CAAEjQ,MAAOA,EAAOmnE,MAAOz5E,KAAKy5E,UAMpDO,EAAA95E,UAAAw6E,WADP,SACkBpoE,GACXA,EAAMkoE,SACNx6E,KAAKy5E,MAAMkB,SAASroE,GACpBtS,KAAKq6E,cAAc93D,KAAK,CAAEjQ,MAAOA,EAAOmnE,MAAOz5E,KAAKy5E,UAO3Dj6E,OAAAgC,eAAWw4E,EAAA95E,UAAA,oBAAiB,KAA5B,WACG,OAAQF,KAAKm6E,cACT,KAAMC,GAAkB,KACpB,MAAO,0CACX,KAAMA,GAAmB,MACrB,MAAO,wCACX,KAAMA,GAAkB,KACpB,MAAO,yCACX,QACI,MAAO,yDAlMtBtoC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,6BACVqjC,SAAA,syBA4Ia6oC,EAAAA,MAAI,CAAA1oE,KAAIC,EAAAA,OAAMnE,KAAA,CFrJc,mCEjBzCihC,EAAAA,yBACA3L,EAAAA,oDA0CC6oB,EAAAA,aAAYn+C,KAAA,CAAC6rE,GAAgC,CAAEljC,UAAQ,gBA0BvDxH,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7BvD,EAAAA,oBAiBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,cAAW,CAAAkE,KACvBvD,EAAAA,4BAwBAA,EAAAA,6BAgBAgd,EAAAA,yBAMCwjB,EAAAA,YAAWnhC,KAAA,CAAC,yDAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iEAsBbW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,yDAWXY,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,YAAS,CAAAkE,KACxCtD,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,YAAS,CAAAkE,KACxCtD,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,YAAS,CAAAkE,KAC3CtD,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,8BAYxBY,EAAAA,aAAYZ,KAAA,CAAC,wBAAyB,CAAC,+BAStCY,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,cAuB3CgsE,KC9MIxoC,GAAU,gBA6JV,SAAAqpC,EAAoBjtC,EAAgCzO,GAAhCn/B,KAAA4tC,IAAAA,EAAgC5tC,KAAAm/B,QAAAA,EAjJ5Cn/B,KAAAguC,YAAa,EAiCdhuC,KAAA86E,kBAAuC,CAC1Cv+C,cAAejvB,GACfkvB,eAAgBjvB,IAgBbvN,KAAA2N,GAAK,uBAAuB6jC,KAM5BxxC,KAAAi1C,SAAW,sBA+BXj1C,KAAA+6E,gBAAkB,IAAI5xD,EAAAA,aAiBtBnpB,KAAAg7E,YAAc,IAAI7xD,EAAAA,aAiBlBnpB,KAAAi7E,WAAa,IAAI9xD,EAAAA,aAyI5B,OAxLI3pB,OAAAgC,eACWq5E,EAAA36E,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKguC,gBAEhB,SAAqB7rC,GACjBnC,KAAKguC,WAAa7rC,EAClBnC,KAAK+6E,gBAAgBx4D,KAAKviB,KAAKguC,6CA8CnCxuC,OAAAgC,eAAWq5E,EAAA36E,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAK2pB,OAAY3pB,KAAK2N,GAAE,UAAY,oCAoB/CktE,EAAA36E,UAAAm4D,mBAAA,WAAA,IAAAzjD,EAAA5U,KACQA,KAAK6e,MAAQ7e,KAAK2pB,QAElBuxD,QAAQC,UAAU9hD,KAAK,WACnBzkB,EAAKiK,KAAKu8D,WAAaxmE,EAAKiK,KAAKu8D,YAAcxmE,EAAKymE,SACpDzmE,EAAKiK,KAAKs6D,MAAQvkE,EAAKiK,KAAKs6D,OAASvkE,EAAKjH,GAAK,aAKnDktE,EAAA36E,UAAA0iC,kBAAR,SAA0B04C,GACtB,GAAKt7E,KAAK6e,KAAV,KAGM7a,EAAYssE,EAAAA,aAAatwE,KAAK86E,kBAAkBv+C,eAEhD0I,EADmBjlC,KAAKm/B,QAAQgG,MAAMnhC,GACC7D,OAAOH,KAAK6e,KAAKilB,QAAQxD,eAEtE2E,EAAoBQ,OAAO,WACvB61C,IACAr2C,EAAoBS,UAGxBT,EAAoBe,SAGhB60C,EAAA36E,UAAAijC,mBAAR,SAA2Bm4C,GACvB,GAAKt7E,KAAK6e,KAAV,KAGM7a,EAAYssE,EAAAA,aAAatwE,KAAK86E,kBAAkBt+C,gBAEhDmE,EADmB3gC,KAAKm/B,QAAQgG,MAAMnhC,GACE7D,OAAOH,KAAK6e,KAAKilB,QAAQxD,eACvEK,EAAqB8E,OAAO,WACxB61C,IACA36C,EAAqB+E,UAGzB/E,EAAqBqF,SAazB60C,EAAA36E,UAAAy6E,SAAA,SAAS5iC,GAAT,IAAAnjC,EAAA5U,KACQA,KAAKmuC,WAGTnuC,KAAKmjC,mBACD,WACIvuB,EAAKomE,YAAYz4D,KAAK,CAAEjQ,MAAOylC,EAAK0hC,MAAO7kE,IAC3CA,EAAKu5B,WAAY,KAe7B0sC,EAAA36E,UAAAu6E,OAAA,SAAO1iC,GAAP,IAAAnjC,EAAA5U,KACSA,KAAKmuC,YAGVnuC,KAAKmuC,WAAY,EACjBnuC,KAAK4tC,IAAIrL,gBACTviC,KAAK4iC,kBACD,WACIhuB,EAAKqmE,WAAW14D,KAAK,CAAEjQ,MAAOylC,EAAK0hC,MAAO7kE,QAetDimE,EAAA36E,UAAA6N,OAAA,SAAOgqC,GACC/3C,KAAKmuC,UACLnuC,KAAKmO,KAAK4pC,GAEV/3C,KAAKoO,MAAM2pC,IAInB8iC,EAAA36E,UAAAiO,KAAA,SAAK4pC,GACD/3C,KAAKy6E,OAAO1iC,IAEhB8iC,EAAA36E,UAAAkO,MAAA,SAAM2pC,GACF/3C,KAAK26E,SAAS5iC,wBAtQrBjG,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,sBACVqjC,SAAA,kJACA5iC,UAAW,CAAC,CAAE88C,QHP2B,yBGOaC,YAAa2uB,iDAxBnE5rC,EAAAA,yBASKpI,EAAAA,+DAkDJl4B,EAAAA,kBAiBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,wBAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gDAmBZW,EAAAA,+BAYAgd,EAAAA,4BAiBAA,EAAAA,2BAiBAA,EAAAA,qBAaAwgC,EAAAA,aAAYn+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAAmtB,KAC3B,CAAE9iC,KAAM2V,EAAAA,WAAW,WAAM,OAAAmtB,KAAiC7iC,UAAQ,oBAMrEwV,EAAAA,aAAYn+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAA2tB,KAC3B,CAAEtjC,KAAM2V,EAAAA,WAAW,WAAM,OAAA2tB,KAAmCrjC,UAAQ,OAqH5EkkC,KCjRAU,GAAA,WAAA,SAAAA,KA4BA,2BA5BCvsE,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZ4rE,GACAb,GACAR,GACAI,GACAD,GACAE,IAEFzvB,gBAAiB,GAEjBl7C,QAAS,CACP2rE,GACAb,GACAR,GACAI,GACAD,GACEE,IAEJp9B,QAAS,CACPC,EAAAA,aACAouB,GACA4M,GACApkB,GACAulB,QAIJ0C,EA5BA,GCZAC,GAAA,WAAA,SAAAA,KAIA,2BAJC/sE,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yBAGd8sE,EAJA,GCmCAC,GAAA,WAoII,SAAAA,EAAmBp7C,GAAArgC,KAAAqgC,WAAAA,EApGZrgC,KAAA8/B,SAAW,IAAI3W,EAAAA,aAcfnpB,KAAA6/B,UAAY,IAAI1W,EAAAA,aAchBnpB,KAAAggC,SAAW,IAAI7W,EAAAA,aAcfnpB,KAAA+/B,UAAY,IAAI5W,EAAAA,aAmJ3B,OAhJI3pB,OAAAgC,eAAWi6E,EAAAv7E,UAAA,qBAAkB,KAA7B,WACI,OAAQF,KAAK07E,uDASjBl8E,OAAAgC,eACWi6E,EAAAv7E,UAAA,oBAAiB,KAD5B,WAEI,OAAOF,KAAK27E,mBAAqB37E,KAAK27E,mBAAqB37E,KAAK47E,gBAAgBd,uBAWpF,SAA6BxgD,GACzBt6B,KAAK27E,mBAAqBrhD,mCAS9B96B,OAAAgC,eAAWi6E,EAAAv7E,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK47E,gBAAgBztC,2CAShC3uC,OAAAgC,eAAWi6E,EAAAv7E,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,WAAWC,+CAM3B9gC,OAAAgC,eACWi6E,EAAAv7E,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKmuC,UAAY,GAAK,yCAmB1BstC,EAAAv7E,UAAAiO,KAAP,SAAYmE,GACRtS,KAAK67E,aAAe,CAAEC,OAAQ97E,KAAMsS,MAAKA,OACnCypE,EAAc,CAChBD,OAAQ97E,KACRsS,MAAKA,EACL8P,QAAQ,GAEZpiB,KAAK6/B,UAAUtd,KAAKw5D,GAChBA,EAAY35D,QAGhBpiB,KAAK47E,gBAAgBztE,KAAKmE,IAiBvBmpE,EAAAv7E,UAAAkO,MAAP,SAAakE,GACTtS,KAAK67E,aAAe,CAAEC,OAAQ97E,KAAMsS,MAAKA,OACnC0pE,EAAc,CAChBF,OAAQ97E,KACRsS,MAAKA,EACL8P,QAAQ,GAEZpiB,KAAK+/B,UAAUxd,KAAKy5D,GAChBA,EAAY55D,QAGhBpiB,KAAK47E,gBAAgBxtE,MAAMkE,IAiB/BmpE,EAAAv7E,UAAA6N,OAAA,SAAOuE,GACCtS,KAAKmuC,UACLnuC,KAAKmO,KAAKmE,GAEVtS,KAAKoO,MAAMkE,IAKZmpE,EAAAv7E,UAAA+7E,qBAAP,WACIj8E,KAAK8/B,SAASvd,KAAKviB,KAAK67E,eAIrBJ,EAAAv7E,UAAAg8E,sBAAP,WACIl8E,KAAKggC,SAASzd,KAAKviB,KAAK67E,mCA3N/B/pC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,aACVqjC,SAAA,8zCAxCkEzO,EAAAA,uDA8CjEmT,EAAAA,UAASzoC,KAAA,CAAC,iBAAkB,CAAE2oC,UAAQ,mCAGtCwV,EAAAA,aAAYn+C,KAAA,CAACwtE,GAA2B,CAAE7kC,UAAQ,wBAMlDwV,EAAAA,aAAYn+C,KAAA,CAAC+oE,GAAkB,CAAEpgC,UAAQ,sBAczChrB,EAAAA,0BAcAA,EAAAA,yBAcAA,EAAAA,0BAcAA,EAAAA,kCAcAhd,EAAAA,4BAwCAwgC,EAAAA,YAAWnhC,KAAA,CAAC,oBA8FjBytE,EA7NA,GAkOAU,GAAA,WAAA,SAAAA,KAK+B,2BAL9BntE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACwsE,GAAoBD,IACnCtsE,QAAS,CAACusE,GAAoBD,IAC9B/+B,QAAS,CAACC,EAAAA,aAAc6+B,GAAyB7D,GAAepkB,GAAiBwX,QAEtDqR,EAL/B,OC7OmCC,WAAA,EAAYvoB,SAAA,iEAC3CriB,GAAU,EAsBd6qC,GAAA,SAAAviE,GAgNI,SAAAuiE,EAAoBC,EAAiCj3C,EACEwP,GADvD,IAAAjgC,EAEIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAFb4U,EAAA0nE,KAAAA,EAAiC1nE,EAAAywB,UAAAA,EACEzwB,EAAAigC,uBAAAA,EA1M/CjgC,EAAAy9B,WAAY,EACVz9B,EAAA2nE,qBAAuB,IAAI/8C,EAAAA,QAC3B5qB,EAAA4nE,mBAAqB,IAAIh9C,EAAAA,QAoB5B5qB,EAAAjH,GAAK,mBAAmB6jC,KAMxB58B,EAAA6nE,OAAS,EAqCA7nE,EAAA8nE,gBAAiB,EAmD1B9nE,EAAA+nE,gBAA4B,GA6ClB/nE,EAAAgoE,SAAW,IAAIzzD,EAAAA,aAiBfvU,EAAAioE,WAAa,IAAI1zD,EAAAA,eA4LtC,OAhX6CnR,EAAAA,EAAAA,GAYzCxY,OAAAgC,eAAW66E,EAAAn8E,UAAA,UAAO,KAAlB,WACI,OAAAwC,EAAW1C,KAAK88E,YAAYlqE,UAAc5S,KAAK+8E,gBAAgBnqE,4CA8BnEpT,OAAAgC,eAAa66E,EAAAn8E,UAAA,sBAAmB,KAchC,WACI,OAAOF,KAAKg9E,0BAfhB,SAAiC76E,GAC7BnC,KAAKg9E,qBAAuB76E,GAASnC,KAAKg9E,sDAyD9Cx9E,OAAAgC,eACW66E,EAAAn8E,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKqyC,eAEhB,SAAoBlwC,GAApB,IAAAyS,EAAA5U,KACQA,KAAKqyC,YAAclwC,IACnBnC,KAAKqyC,UAAYlwC,EAEbnC,KAAK88E,aAAe98E,KAAK+8E,iBACzB/8E,KAAKi9E,QAAQxqE,QAAQ,SAAClT,GAAM,OAAAA,EAAEqyC,SAAWh9B,EAAKy9B,8CAqB1D7yC,OAAAgC,eAAa66E,EAAAn8E,UAAA,YAAS,KAatB,WACI,OAAOF,KAAKk9E,YAAcC,GAAqBtpB,SAAWspB,GAAqBf,gBAdnF,SAAuBj6E,GACnBnC,KAAKk9E,YAAc/6E,IAAUg7E,GAAqBtpB,0CAiEtDr0D,OAAAgC,eAAW66E,EAAAn8E,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKk9E,6CAoBhB19E,OAAAgC,eAAI66E,EAAAn8E,UAAA,kBAAe,KAAnB,WAAA,IAAA0U,EAAA5U,KACI,OAAOA,KAAKi9E,QAAQjjE,OAAO,SAACza,EAAGiB,GAC3B,OAA4C,IAArCoU,EAAK+nE,gBAAgBrrE,QAAQ9Q,sCAiBrC67E,EAAAn8E,UAAAk9E,aAAP,SAAoBzpE,GAApB,IAAAiB,EAAA5U,KACI,KAAI2T,GAAS3T,KAAKi9E,QAAQt8E,QAAUgT,EAAQ,GAA5C,KAIMpB,EAASvS,KAAKi9E,QAAQtpE,GACtB0pE,EAAgB9qE,EAAO+tB,cAE7BtgC,KAAK28E,gBAAgBn6E,KAAKmR,GAC1BpB,EAAOwR,UAAW,EAElB/jB,KAAKqlC,UAAU+tB,aAAaiqB,EAAe,eAAgB,QAC3Dr9E,KAAKqlC,UAAU0tB,SAASsqB,EAAe,oCAEvCr9E,KAAK48E,SAASr6D,KAAK,CAAEhQ,OAAQA,EAAQoB,MAAOA,QAEtC2pE,EAAqBt9E,KAAK88E,YAAYlqE,UAAUtB,QAAQiB,IAClC,IAAxB+qE,IACAt9E,KAAK01B,OAAO4nD,GAAoBv5D,UAAW,IAI1C/jB,KAAK08E,gBAAkB18E,KAAK28E,gBAAgBh8E,OAAS,GACtDX,KAAKi9E,QAAQxqE,QAAQ,SAAClT,EAAGiB,GACjBA,IAAMmT,IAA8C,IAArCiB,EAAK+nE,gBAAgBrrE,QAAQ9Q,IAC5CoU,EAAK2oE,eAAe/8E,OAkB7B67E,EAAAn8E,UAAAq9E,eAAP,SAAsB5pE,GAClB,KAAIA,GAAS3T,KAAKi9E,QAAQt8E,QAAUgT,EAAQ,GAA5C,KAIMpB,EAASvS,KAAKi9E,QAAQtpE,GACtB0pE,EAAgB9qE,EAAO+tB,cAE7BtgC,KAAK28E,gBAAgBzhE,OAAOlb,KAAK28E,gBAAgBrrE,QAAQqC,GAAQ,GACjEpB,EAAOwR,UAAW,EAElB/jB,KAAKqlC,UAAU+tB,aAAaiqB,EAAe,eAAgB,SAC3Dr9E,KAAKqlC,UAAUytB,YAAYuqB,EAAe,oCAE1Cr9E,KAAK68E,WAAWt6D,KAAK,CAAEhQ,OAAQA,EAAQoB,MAAOA,QAExC2pE,EAAqBt9E,KAAK88E,YAAYlqE,UAAUtB,QAAQiB,IAClC,IAAxB+qE,IACAt9E,KAAK01B,OAAO4nD,GAAoBv5D,UAAW,KAO5Cs4D,EAAAn8E,UAAAm4D,mBAAP,WAAA,IAAAzjD,EAAA5U,KACIA,KAAK+8E,gBAAgBtqE,QAAQ,SAACF,GACrBA,EAAOkiC,iBACRliC,EAAOigC,eAAiB59B,EAAK49B,mBAQlC6pC,EAAAn8E,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACUw9E,EAAc,WAEhB5oE,EAAK2nE,qBAAqBr6E,OAE1B0S,EAAK+nE,gBAAgBzhE,OAAO,EAAGtG,EAAK+nE,gBAAgBh8E,QAGpDiU,EAAKqoE,QAAQxqE,QAAQ,SAACF,EAAQoB,OACpB0pE,EAAgB9qE,EAAO+tB,cAEzB1rB,EAAKg9B,WACLr/B,EAAOq/B,UAAW,GAGlBr/B,EAAOwR,UACPnP,EAAKwoE,aAAazpE,GAGtBpB,EAAOsgD,YAAYhuB,KAAKC,EAAAA,UAAUlwB,EAAK2nE,uBAAuBx3C,UAAU,SAAC5E,GAAO,OAAAvrB,EAAK6oE,cAAct9C,EAAIxsB,KACvGiB,EAAKywB,UAAU0tB,SAASsqB,EAAe,6BAI/Cr9E,KAAK88E,YAAY76B,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKw8E,qBAAqBz3C,UAAU,WAAM,OAAAy4C,MAClFx9E,KAAK+8E,gBAAgB96B,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKw8E,qBAAqBz3C,UAAU,WAAM,OAAAy4C,MACtFA,IAEAx9E,KAAKs8E,KAAK/5C,iBAMP85C,EAAAn8E,UAAAsmC,YAAP,WACIxmC,KAAKu8E,qBAAqBr6E,OAC1BlC,KAAKu8E,qBAAqB91C,WAE1BzmC,KAAKw8E,mBAAmBt6E,OACxBlC,KAAKw8E,mBAAmB/1C,YAMrB41C,EAAAn8E,UAAAu9E,cAAP,SAAqBnrE,EAAO9R,IACiB,IAArCR,KAAK28E,gBAAgBrrE,QAAQ9Q,GAC7BR,KAAKu9E,eAAe/8E,GAEpBR,KAAKo9E,aAAa58E,wBAlX7BsxC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,kBACVqjC,SAAA,w4BA9CA9C,EAAAA,yBASAokB,EAAAA,6CAoPKnkB,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,8CAtMvB6pC,EAAAA,aAAY1vE,KAAA,CAAC0kD,6BACbtG,EAAAA,gBAAep+C,KAAA,CAAC0kD,gBAehBvjB,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,sBAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,6CAcZW,EAAAA,8BAwBAA,EAAAA,sBA2BAA,EAAAA,wBAOAA,EAAAA,yBA8BAA,EAAAA,wBAgCAgd,EAAAA,2BAiBAA,EAAAA,UA4LL0wD,EArXA,CAK6CtoC,IA0X7C4pC,GAAA,WAAA,SAAAA,KAOA,2BAPC3uE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACotE,IACfntE,QAAS,CAACmtE,IACV5/B,QAAS,CAAC6W,GAAiB5W,EAAAA,aAAcouB,GAAiB4M,QAI9DiG,EAPA,OC3aIC,MAAA,EACAC,OAAA,EACAC,QAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,gKCLQ,WACD,OAGLC,GAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrDC,GAAW,EAEjB,SAAgBvtE,GAAM41C,EAAW43B,EAAMC,QAAjB,IAAA73B,IAAAA,EAAA,QAAiB,IAAA63B,IAAAA,EAAA,GAInC,QAHMzoE,EAAM,GACN0oE,EAAOF,IAASpqE,UAAa,EAAIwyC,EACjCn8B,EAAO+zD,IAASpqE,UAAawyC,EAAQ43B,EAClC59E,EAAI89E,EAAKD,EAAO,EAAI79E,EAAI6pB,EAAM7pB,EAAI6pB,EAAK7pB,GAAK69E,EACjDzoE,EAAIpT,KAAKhC,GAEb,OAAOoV,EAUX,SAAgB2oE,GAAO3L,GACnB,OAAQA,EAAO,GAAM,IAAQA,EAAO,KAAQ,GAAOA,EAAO,KAAQ,GAGtE,SAAgB4L,GAAQ5L,EAAcC,EAAeC,GACjD,OAAO,IAAI3iE,KAAKyiE,EAAMC,EAAOC,GAAK2L,SAWtC,SAAgBC,GAAW9L,EAAcC,GACrC,GAAKA,EAAQ,GAAOA,EAAQ,GACxB,MAAM,IAAIhjE,MAAM,+BAEdijE,EAAM0L,GAAQ5L,EAAMC,EAAO,GAC7B8L,EAAQT,GAAMrL,GAIlB,OAHKA,IAAUsL,IAAcI,GAAO3L,IAChC+L,IAEG,CAAC7L,EAAK6L,GAGjB,SAAgBC,GAAexL,EAAYyL,eAEjCC,GADN1L,EAAO,IAAIjjE,KAAKijE,EAAKM,cAAeN,EAAKO,WAAYP,EAAKF,YACpC9iE,UAEtB,IAAKyuE,EACD,OAAO,MAGX,IAAyB,IAAAE,EAAAhvE,EAAA8uE,GAAMG,EAAAD,EAAA78E,QAAA88E,EAAA58E,KAAA48E,EAAAD,EAAA78E,OAAE,CAA5B,IAAM47B,EAAUkhD,EAAA78E,MACX88E,EAAUnhD,EAAWohD,UAAYphD,EAAWohD,UAAU5iE,IACxD,SAAAlb,GAAK,OAAA,IAAI+O,KAAK/O,EAAEsyE,cAAetyE,EAAEuyE,WAAYvyE,EAAE8xE,aAAcl/D,UACjE,OAAQ8pB,EAAW5rB,MACf,KAAMitE,GAAmB,MACrB,GAAIL,EAAWG,EAAQ,GAAG7uE,UACtB,OAAO,EAGX,MACJ,KAAM+uE,GAAoB,OACtB,GAAIL,EAAWG,EAAQ,GAAG7uE,UACtB,OAAO,EAGX,MACJ,KAAM+uE,GAAqB,YACjBC,EAASH,EAAQ3iE,IAAI,SAAAhd,GAAK,OAAAA,EAAE8Q,YAC5B64B,EAAMxtB,KAAKwtB,IAAIm2C,EAAO,GAAIA,EAAO,IACjC/0D,EAAM5O,KAAK4O,IAAI+0D,EAAO,GAAIA,EAAO,IACvC,GAAIN,GAAY71C,GAAO61C,GAAYz0D,EAC/B,OAAO,EAGX,MACJ,KAAM80D,GAAsB,aAClBE,EAAYJ,EAAQ3iE,IAAI,SAAAhd,GAAK,OAAAA,EAAE8Q,gBACrC,IAA+B,IAAAkvE,EAAAvvE,EAAAsvE,GAASE,EAAAD,EAAAp9E,QAAAq9E,EAAAn9E,KAAAm9E,EAAAD,EAAAp9E,OAAE,CACtC,GAAI48E,IADmBS,EAAAp9E,MAEnB,OAAO,uGAIf,MACJ,KAAMg9E,GAAsB,SAExB,GADY/L,EAAKqL,SACP,GAAM,EACZ,OAAO,EAGX,MACJ,KAAMU,GAAsB,SAExB,GADgB/L,EAAKqL,SACP,GAAM,EAChB,OAAO,EAGX,MACJ,QACI,OAAO,wGAInB,OAAO,UA+BPe,OAAA,EACAC,OAAA,EACAC,QAAA,EACAC,UAAA,EACAC,SAAA,EACAC,OAAA,EACAC,SAAA,oLAGJ,IAAAC,GAAA,WAII,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAAkCC,GAAST,QACnDx/E,KAAKkgF,cAAgBF,EAuN7B,OApNIxgF,OAAAgC,eAAWu+E,EAAA7/E,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKkgF,cAAgB,OAGhC,SAAwB/9E,GACpBnC,KAAKkgF,cAAgB/9E,mCAclB49E,EAAA7/E,UAAAigF,SAAP,mBACUvqE,EAAM,OACZ,IAAgB,IAAA9F,EAAAC,EAAAa,GAAM5Q,KAAKggF,aAAchgF,KAAKggF,aAAe,IAAE/vE,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA5D,IAAM1B,EAACyP,EAAA9N,MACRyT,EAAIpT,KAAKhC,EAAI,wGAEjB,OAAOoV,GAcJmqE,EAAA7/E,UAAAkgF,WAAP,SAAkBxN,EAAcC,EAAewN,gBAAA,IAAAA,IAAAA,GAAA,OACvCjN,EAAO,IAAIjjE,KAAKyiE,EAAMC,EAAO,GAC7ByN,GAAQlN,EAAKqL,SAAWz+E,KAAKggF,cAAgB,EAC7CM,EAAO,IACPA,EAAO,EAAI7kE,KAAKutB,IAAIs3C,IAExBlN,EAAOpzE,KAAKugF,UAAUnN,EAAM,OAAQkN,GAIpC,QAFIn+E,EADEyT,EAAM,KAUR,GALAzT,EAAQnC,KAAKwgF,sBAAsBpN,EAAMR,EAAMC,GAC/Cj9D,EAAIpT,KAAKL,IAETixE,EAAOpzE,KAAKugF,UAAUnN,EAAM,MAAO,IAEzBO,aAAed,GAAWO,EAAKqL,WAAaz+E,KAAKggF,aAAe,CACtE,GAAIK,GAAazqE,EAAIjV,QAAU,OAC3B,IAAgB,IAAAmP,EAAAC,EAAAa,GAAM,EAAG,IAAEX,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAjB+N,EAAA9N,MACRA,EAAQnC,KAAKwgF,sBAAsBpN,EAAMR,EAAMC,GAC/Cj9D,EAAIpT,KAAKL,GACTixE,EAAOpzE,KAAKugF,UAAUnN,EAAM,MAAO,wGAG3C,MAGR,OAAOx9D,GAaJmqE,EAAA7/E,UAAAugF,mBAAP,SAA0B7N,EAAcC,EAAewN,gBAAA,IAAAA,IAAAA,GAAA,OAC7CK,EAAQ1gF,KAAKogF,WAAWxN,EAAMC,EAAOwN,GACrCzqE,EAAM,OACZ,IAAgB,IAAA9F,EAAAC,EAAAa,GAAM,EAAG8vE,EAAM//E,OAAQ,IAAEsP,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAtC,IAAM1B,EAACyP,EAAA9N,MACRyT,EAAIpT,KAAKk+E,EAAM7oE,MAAMrX,EAAGA,EAAI,yGAEhC,OAAOoV,GAGJmqE,EAAA7/E,UAAAqgF,UAAP,SAAiBnN,EAAY3a,EAAkBkoB,OACrCC,EAAM,IAAIzwE,KAAKijE,GAEfyN,EAAgB,WACdD,EAAI1N,YAAcE,EAAKF,WACvB0N,EAAI3N,QAAQ,IAIpB,OAAQxa,EAASpjD,eACb,IAAK,OACDurE,EAAIE,YAAYF,EAAIlN,cAAgBiN,GACpCE,IACA,MACJ,IAAK,UACDD,EAAIG,SAASH,EAAIjN,WAAa,EAAIgN,GAClCE,IACA,MACJ,IAAK,QACDD,EAAIG,SAASH,EAAIjN,WAAagN,GAC9BE,IACA,MACJ,IAAK,OACDD,EAAI3N,QAAQ2N,EAAI1N,UAAY,EAAIyN,GAChC,MACJ,IAAK,MACDC,EAAI3N,QAAQ2N,EAAI1N,UAAYyN,GAC5B,MACJ,IAAK,OACDC,EAAII,QAAQJ,EAAIxwE,UAAoB,KAARuwE,GAC5B,MACJ,IAAK,SACDC,EAAII,QAAQJ,EAAIxwE,UAAoB,IAARuwE,GAC5B,MACJ,IAAK,SACDC,EAAII,QAAQJ,EAAIxwE,UAAoB,IAARuwE,GAC5B,MACJ,QACI,MAAM,IAAI9wE,MAAM,8BAExB,OAAO+wE,GAGJb,EAAA7/E,UAAA+gF,cAAP,SAAqB7N,EAAY8N,EAAgB53D,EAAc63D,eACrDh3D,EAAY,IAAIi3D,KAAKC,eAAeH,EAAQ53D,GAC5C9Y,EAAS,CACX4iE,KAAIA,EACJkO,KAAMn3D,EAAUk5C,OAAO+P,IAG3B,GAAI,EAAmB6N,cAAe,KAC5BM,EAAiB,EAAmBN,cAAc7N,GAElDoO,EAAS,SAACC,OACN9tE,EAAQ4tE,EAAezoE,UAAU,SAAC5K,GAAa,OAAXA,EAAAgE,OAAoBuvE,IACxD3/E,EAAqB,CAAEK,MAAO,GAAIu/E,QAAS,GAAIC,SAAU,IAE/D,MAAiB,QAAbF,GAAsB9tE,GAAS,GAC/B7R,EAAEK,MAAQo/E,EAAe5tE,GAAOxR,MACzBL,GACa,QAAb2/E,IAAiC,IAAX9tE,EACtB7R,GAGXA,EAAEK,MAAQo/E,EAAe5tE,GAAOxR,MAChCL,EAAE4/E,QAAUH,EAAe5tE,EAAQ,GAAK4tE,EAAe5tE,EAAQ,GAAGxR,MAAQ,GAC1EL,EAAE6/E,SAAW,CAAC7/E,EAAEK,MAAOL,EAAE4/E,SAAS9sD,KAAK,IAChC9yB,QAGX,IAAmB,IAAA8/E,EAAA7xE,EAAAoxE,GAAKU,EAAAD,EAAA1/E,QAAA2/E,EAAAz/E,KAAAy/E,EAAAD,EAAA1/E,OAAE,CACtBsO,EADOqU,EAAIg9D,EAAA1/E,OACIq/E,EAAO38D,kHAG1B,IAAmB,IAAAi9D,EAAA/xE,EAAAoxE,GAAKY,EAAAD,EAAA5/E,QAAA6/E,EAAA3/E,KAAA2/E,EAAAD,EAAA5/E,OAAE,CAArB,IAAM2iB,EACPrU,EADOqU,EAAIk9D,EAAA5/E,OACI,CAAEA,MAAO,GAAIu/E,QAAS,GAAIC,SAAU,yGAG3D,OAAOnxE,GAGJuvE,EAAA7/E,UAAA8hF,iBAAP,SAAwB5O,EAAY3a,EAAkBwpB,GAClD,OAAOjiF,KAAKugF,UAAUnN,EAAM3a,GAAWwpB,IAGpClC,EAAA7/E,UAAAgiF,aAAP,SAAoB9O,GAChB,OAAOpzE,KAAKugF,UAAUnN,EAAM+O,GAAyB,IAGlDpC,EAAA7/E,UAAAkiF,aAAP,SAAoBhP,GAChB,OAAOpzE,KAAKugF,UAAUnN,EAAM+O,IAA0B,IAGnDpC,EAAA7/E,UAAAmiF,YAAP,SAAmBjP,GACf,OAAOpzE,KAAKugF,UAAUnN,EAAM+O,GAAwB,IAGjDpC,EAAA7/E,UAAAoiF,YAAP,SAAmBlP,GACf,OAAOpzE,KAAKugF,UAAUnN,EAAM+O,IAAyB,IAGjDpC,EAAA7/E,UAAAsgF,sBAAR,SAA8BpN,EAAYR,EAAcC,GACpD,MAAO,CACHO,KAAIA,EACJmP,eAAgBnP,EAAKM,gBAAkBd,GAAQQ,EAAKO,aAAed,EACnE2P,YAAaxiF,KAAKwiF,YAAYpP,EAAMR,EAAMC,GAC1C4P,YAAaziF,KAAK0iF,gBAAgBtP,EAAMR,EAAMC,KAI9CkN,EAAA7/E,UAAAwiF,gBAAR,SAAwBtP,EAAYR,EAAcC,GAC9C,OAAIO,EAAKM,gBAAkBd,EAChBQ,EAAKO,WAAad,EAEtBO,EAAKM,cAAgBd,GAGxBmN,EAAA7/E,UAAAsiF,YAAR,SAAoBpP,EAAYR,EAAcC,GAC1C,OAAIO,EAAKM,gBAAkBd,EAChBQ,EAAKO,WAAad,EAGtBO,EAAKM,cAAgBd,GAEpCmN,EA5NA,GCrIA4C,GAAA,WAAA,SAAAA,IAYW3iF,KAAA4iF,gBAAkB,IAAIz5D,EAAAA,aAoBjC,OAlBI3pB,OAAAgC,eACWmhF,EAAAziF,UAAA,aAAU,KADrB,WAEI,OAAQF,KAAK6iF,+CAGjBrjF,OAAAgC,eACWmhF,EAAAziF,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK6iF,+CAGhBrjF,OAAAgC,eAAWmhF,EAAAziF,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKozE,KAAKM,gBAAkB1zE,KAAKmC,MAAMuxE,+CAI3CiP,EAAAziF,UAAAqvC,QADP,WAEIvvC,KAAK4iF,gBAAgBrgE,KAAKviB,KAAKmC,4BA9BtCsM,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uDAITC,EAAAA,MAAKX,KAAA,CAAC,iCAGNW,EAAAA,+BAGAgd,EAAAA,2BAGAwjB,EAAAA,YAAWnhC,KAAA,CAAC,gDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDASZY,EAAAA,aAAYZ,KAAA,CAAC,YAIlB20E,EAhCA,iBAwEI,SAAAG,EAAmBziD,GAAArgC,KAAAqgC,WAAAA,EAvBZrgC,KAAA+iF,iBAAmB,IAAI55D,EAAAA,aAGvBnpB,KAAA2oE,SAAW,EA2BtB,OAzBInpE,OAAAgC,eACWshF,EAAA5iF,UAAA,aAAU,KADrB,WAEI,OAAQF,KAAKuiF,gDAGjB/iF,OAAAgC,eACWshF,EAAA5iF,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKuiF,gDAGhB/iF,OAAAgC,eAAWshF,EAAA5iF,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKozE,KAAKO,aAAe3zE,KAAKmC,MAAMwxE,4CAG/Cn0E,OAAAgC,eAAWshF,EAAA5iF,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKqgC,WAAWC,+CAMpBwiD,EAAA5iF,UAAAqvC,QADP,eAEU6jC,EAAO,IAAIjjE,KAAKnQ,KAAKmC,MAAMuxE,cAAe1zE,KAAKmC,MAAMwxE,WAAY3zE,KAAKozE,KAAKF,WACjFlzE,KAAK+iF,iBAAiBxgE,KAAK6wD,wBA3ClC3kE,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEA/CV40B,EAAAA,6CAmDC30B,EAAAA,MAAKX,KAAA,CAAC,kCAGNW,EAAAA,qBAGAA,EAAAA,gCAGAgd,EAAAA,yBAGAwjB,EAAAA,YAAWnhC,KAAA,CAAC,qCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uDAeZY,EAAAA,aAAYZ,KAAA,CAAC,YAKlB80E,KAKAE,GAAA,WAKI,SAAAA,EAAmBjxC,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BANCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAlGVk6C,EAAAA,eAuGJo6B,EANA,GAWAC,GAAA,WAII,SAAAA,EAAmBlxC,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEA7GVk6C,EAAAA,eAiHJq6B,EALA,GAUAC,GAAA,WAwBI,SAAAA,EAAoBp/C,EAA6BqxB,GAA7Bn1D,KAAA8jC,QAAAA,EAA6B9jC,KAAAm1D,KAAAA,EAFzCn1D,KAAAu/B,SAAW,IAAIC,EAAAA,QA0D3B,OAnDW0jD,EAAAhjF,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KAEI4kC,EAAAA,UAAU5kC,KAAK8jC,QAAQxD,cAAe,SAASuE,KAC3Cs+C,EAAAA,SAAS,WAAM,OAAA1qB,EAAAA,SAAS,OACxB3zB,EAAAA,UAAU9kC,KAAKu/B,WACjBwF,UAAU,SAACzyB,GACTsC,EAAKwuE,WAAW9wE,KAGpBtS,KAAKm1D,KAAKrrB,kBAAkB,WACxBlF,EAAAA,UAAUhwB,EAAKkvB,QAAQxD,cAAe,WAAWuE,KAC7Cw+C,EAAAA,IAAI,SAAC/wE,GACY,MAATA,EAAMrR,KAA+B,aAATqR,EAAMrR,KAAkC,UAATqR,EAAMrR,MACjEqR,EAAM23B,iBACN33B,EAAMmyB,qBAGd0+C,EAAAA,SAAS,WAAM,OAAA1qB,EAAAA,SAAS,OACxB3zB,EAAAA,UAAUlwB,EAAK2qB,WACjBwF,UAAU,SAACzyB,GACI,MAATA,EAAMrR,KAA+B,aAATqR,EAAMrR,KAAkC,UAATqR,EAAMrR,KACjE2T,EAAKugD,KAAKzS,IAAI,WAAM,OAAA9tC,EAAK0uE,aAAY,UAU9CJ,EAAAhjF,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAOXy8C,EAAAhjF,UAAAgqE,YADP,WAEIlqE,KAAKsjF,eAOFJ,EAAAhjF,UAAAqjF,UADP,SACiBjxE,GACbtS,KAAKojF,WAAW9wE,wBA9EvB7D,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wEAtHV40B,EAAAA,kBAGAyD,EAAAA,+CA2HCp4B,EAAAA,0BAOAA,EAAAA,2BAoDAC,EAAAA,aAAYZ,KAAA,CAAC,gCAQbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAI9Bk1E,EAhFA,OCxHIM,OAAS,SACTC,MAAQ,QACRC,MAAQ,aAIRC,KAAO,OACPC,KAAO,OACP9uB,KAAO,sBA+UP,SAAA+uB,IA7HO7jF,KAAA8jF,iBAAkB,EAOlB9jF,KAAA+0C,YAAc,IAAI5rB,EAAAA,aAKjBnpB,KAAAgnE,WAAyC+c,GAAkBP,OAK5DxjF,KAAAgkF,cAAe,EAKdhkF,KAAAikF,QAAU,KAUVjkF,KAAAkkF,eAAwC,KAKxClkF,KAAAmkF,cAAuC,KAKvCnkF,KAAAokF,eAAqC,CACzCtR,IAAK,UACLD,MAAO,QACPwR,QAAS,QACTzR,KAAM,WAMF5yE,KAAAskF,aAAiC,CACrCxR,KAAK,EACLD,OAAO,EACPD,MAAM,GAoCH5yE,KAAAukF,qBAAuBC,GAAY1vB,KAKnC90D,KAAAykF,aAAe,IAAIjlD,EAAAA,QAKnBx/B,KAAA0kF,iBAAmB,IAAIllD,EAAAA,QAKvBx/B,KAAA2kF,kBAAoB,IAAInlD,EAAAA,QAUrBx/B,KAAAqmE,mBAAiC,aAIjCrmE,KAAAsmE,kBAAuC,aAM7CtmE,KAAK4kF,cAAgB,IAAI7E,GAEzB//E,KAAK6kF,SAAW7kF,KAAK6kF,SAAW7kF,KAAK6kF,SAAW,IAAI10E,KAEpDnQ,KAAK4kF,cAAc5E,aAAehgF,KAAK8kF,UACvC9kF,KAAK+kF,iBAwSb,OApnBIvlF,OAAAgC,eACWqiF,EAAA3jF,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAK4kF,cAAc5E,kBAO9B,SAAqB79E,GACjBnC,KAAK4kF,cAAc5E,aAAe79E,mCAOtC3C,OAAAgC,eACWqiF,EAAA3jF,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKikF,aAQhB,SAAkB9hF,GACdnC,KAAKikF,QAAU9hF,EACfnC,KAAK+kF,kDAMTvlF,OAAAgC,eACWqiF,EAAA3jF,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKokF,oBAOhB,SAAyBY,GACrBhlF,KAAKokF,eAAiB5kF,OAAOa,OAAOL,KAAKokF,eAAgBY,GACzDhlF,KAAK+kF,kDAOTvlF,OAAAgC,eACWqiF,EAAA3jF,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAKskF,kBAOhB,SAAuBW,GACnBjlF,KAAKskF,aAAe9kF,OAAOa,OAAOL,KAAKskF,aAAcW,oCAUzDzlF,OAAAgC,eACWqiF,EAAA3jF,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKgnE,gBAMhB,SAAqB7kE,GACjB,OAAQA,GACJ,KAAK4hF,GAAkBP,OACnBxjF,KAAKklF,cAAgB,KACrB,MACJ,KAAKnB,GAAkBN,MACvB,KAAKM,GAAkBL,MACnB1jF,KAAKklF,cAAgB,GACrB,MACJ,QACI,MAAM,IAAIr1E,MAAM,2BAExB7P,KAAKsmE,kBAAkBtmE,KAAKklF,eAC5BllF,KAAKgkF,cAAe,EACpBhkF,KAAKgnE,WAAa7kE,mCAUtB3C,OAAAgC,eACWqiF,EAAA3jF,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKklF,mBAUhB,SAAiB/iF,IACRA,GAAWA,GAAsC,IAA7B,EAAkBxB,QAI3CX,KAAKmlF,WAAWhjF,oCAOpB3C,OAAAgC,eACWqiF,EAAA3jF,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKolF,eAMhB,SAAoBjjF,GAChBnC,KAAKolF,UAAYplF,KAAKqlF,YAAYljF,oCAMtC3C,OAAAgC,eACWqiF,EAAA3jF,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKkkF,oBAehB,SAAyB/hF,GACrBnC,KAAKkkF,eAAiB/hF,mCAM1B3C,OAAAgC,eACWqiF,EAAA3jF,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKmkF,mBAehB,SAAwBhiF,GACpBnC,KAAKmkF,cAAgBhiF,mCAwJjB0hF,EAAA3jF,UAAAolF,gBAAR,SAAwBlS,GACpB,OAAOpzE,KAAKqlF,YAAYjS,GAAMhjE,WAM1ByzE,EAAA3jF,UAAAqlF,kBAAR,SAA0B/+B,EAAa1lC,OAC7BtQ,EAAS,GAGf,IAFAg2C,EAAQxmD,KAAKqlF,YAAY7+B,GACzB1lC,EAAM9gB,KAAKqlF,YAAYvkE,GAChB0lC,EAAMp2C,YAAc0Q,EAAI1Q,WAC3Bo2C,EAAQxmD,KAAK4kF,cAAcrE,UAAU/5B,EAAO,MAAO,GACnDh2C,EAAOhO,KAAKgkD,GAGhB,OAAOh2C,GAOHqzE,EAAA3jF,UAAAslF,aAAR,SAAqBrjF,GACjBnC,KAAKklF,cAAgBllF,KAAKqlF,YAAYljF,GACtCnC,KAAKsmE,kBAAkBtmE,KAAKklF,gBAOxBrB,EAAA3jF,UAAAulF,eAAR,SAAuBtjF,GAAvB,IAAAyS,EAAA5U,KACI,GAAIL,MAAM0Q,QAAQlO,GAAQ,KAChBujF,EAAWvjF,EAAMma,IAAI,SAAAuQ,GAAK,OAAAjY,EAAKywE,YAAYx4D,GAAGzc,YAC9Cu1E,EAAW3lF,KAAKklF,cAAc5oE,IAAI,SAAAuQ,GAAK,OAAAjY,EAAKywE,YAAYx4D,GAAGzc,YAEjE,GAAIi9B,KAAKC,UAAUo4C,KAAcr4C,KAAKC,UAAUq4C,GAC5C,OAGJ3lF,KAAKklF,cAAgBvlF,MAAMuT,KAAK,IAAI3C,IAAG7N,EAAKgjF,EAAaC,KAAYrpE,IAAI,SAAAuQ,GAAK,OAAA,IAAI1c,KAAK0c,SACpF,KACG+4D,EAAgB5lF,KAAKqlF,YAAYljF,GACjC+tC,EAAe,GACjBlwC,KAAKklF,cAAczxE,MAAM,SAAC2/D,GAAe,OAAAA,EAAKhjE,YAAcw1E,EAAcx1E,YAC1E8/B,EAAa1tC,KAAKojF,GAElB5lF,KAAKklF,cAAgBllF,KAAKklF,cAAclrE,OACpC,SAACo5D,GAAe,OAAAA,EAAKhjE,YAAcw1E,EAAcx1E,YAIrD8/B,EAAavvC,OAAS,IACtBX,KAAKklF,cAAgBllF,KAAKklF,cAAcviF,OAAOutC,IAGvDlwC,KAAKklF,cAAgBllF,KAAKklF,cAAclrE,OAAO,SAAA1a,GAAK,OAACsV,EAAKixE,eAAevmF,KACzEU,KAAKklF,cAAc3wE,KAAK,SAACW,EAAS3V,GAAY,OAAA2V,EAAE4wE,UAAYvmF,EAAEumF,YAC9D9lF,KAAKsmE,kBAAkBtmE,KAAKklF,gBAMxBrB,EAAA3jF,UAAA6lF,YAAR,SAAoB5jF,EAAsB6jF,GAA1C,IACQx/B,EACA1lC,EAFRlM,EAAA5U,KAII,QAJsC,IAAAgmF,IAAAA,GAAA,GAIlCrmF,MAAM0Q,QAAQlO,GAEdA,EAAMoS,KAAK,SAACW,EAAS3V,GAAY,OAAA2V,EAAE4wE,UAAYvmF,EAAEumF,YACjDt/B,EAAQxmD,KAAKqlF,YAAYljF,EAAM,IAC/B2e,EAAM9gB,KAAKqlF,YAAYljF,EAAMA,EAAMxB,OAAS,IAC5CX,KAAKklF,cAAaxiF,EAAA,CAAI8jD,GAAUxmD,KAAKulF,kBAAkB/+B,EAAO1lC,SAE9D,GAAK9gB,KAAKgkF,aAGH,CAGH,GAFAhkF,KAAKgkF,cAAe,EAEhBhkF,KAAKklF,cAAc,GAAG90E,YAAcjO,EAAMiO,UAG1C,OAFApQ,KAAKklF,cAAgB,QACrBllF,KAAKsmE,kBAAkBtmE,KAAKklF,eAIhCllF,KAAKklF,cAAc1iF,KAAKL,GACxBnC,KAAKklF,cAAc3wE,KAAK,SAACW,EAAS3V,GAAY,OAAA2V,EAAE4wE,UAAYvmF,EAAEumF,YAE9Dt/B,EAAQxmD,KAAKklF,cAAc5pC,QAC3Bx6B,EAAM9gB,KAAKklF,cAAct2D,MACzB5uB,KAAKklF,cAAaxiF,EAAA,CAAI8jD,GAAUxmD,KAAKulF,kBAAkB/+B,EAAO1lC,SAhB9D9gB,KAAKgkF,cAAe,EACpBhkF,KAAKklF,cAAgB,CAAC/iF,GAmB1B6jF,IACAhmF,KAAKklF,cAAgBllF,KAAKklF,cAAclrE,OAAO,SAAA1a,GAAK,OAACsV,EAAKixE,eAAevmF,MAG7EU,KAAKsmE,kBAAkBtmE,KAAKklF,gBAOxBrB,EAAA3jF,UAAA+lF,eAAR,SAAuB9jF,GACQ,OAAvBnC,KAAKklF,eACLllF,KAAKslF,gBAAe,KAAoBtlF,KAAKslF,gBAAgBtlF,KAAKklF,iBAClEllF,KAAKklF,cAAgB,KACrBllF,KAAKsmE,kBAAkBtmE,KAAKklF,iBAQ5BrB,EAAA3jF,UAAAgmF,iBAAR,SAAyB/jF,GAAzB,IAAAyS,EAAA5U,KACImC,EAAQA,EAAM6X,OAAO,SAAA6S,GAAK,OAAM,OAANA,IAK1B,QAJMs5D,EAAqBnmF,KAAKklF,cAAcvkF,OACxCylF,EAAmC,IAAI71E,IACzCpO,EAAMma,IAAI,SAAAuQ,GAAK,OAAAjY,EAAK0wE,gBAAgBz4D,MAE/BrsB,EAAIR,KAAKklF,cAAcvkF,OAAS,EAAGH,GAAK,EAAGA,IAC5C4lF,EAAoBl1C,IAAIlxC,KAAKslF,gBAAgBtlF,KAAKklF,cAAc1kF,MAChER,KAAKklF,cAAchqE,OAAO1a,EAAG,GAIjCR,KAAKklF,cAAcvkF,SAAWwlF,GAC9BnmF,KAAKsmE,kBAAkBtmE,KAAKklF,gBAS7BrB,EAAA3jF,UAAAmmF,wBAAP,SAA+BlkF,OACrBmkF,EAAgBtmF,KAAKqlF,YAAYljF,GACvCnC,KAAKklF,cAAgBllF,KAAKklF,cAAclrE,OACpC,SAACo5D,GAAe,OAAAA,EAAKhjE,YAAck2E,EAAcl2E,aAQjDyzE,EAAA3jF,UAAAqmF,cAAR,SAAsBpkF,GAElB,MADAA,EAAQA,EAAM6X,OAAO,SAAA6S,GAAK,OAAM,OAANA,KAChBlsB,OAAS,GAAnB,CAIAwB,EAAMoS,KAAK,SAACW,EAAS3V,GAAY,OAAA2V,EAAE4wE,UAAYvmF,EAAEumF,gBAC3CU,EAAaxmF,KAAKslF,gBAAgBnjF,EAAM,IACxCskF,EAAWzmF,KAAKslF,gBAAgBnjF,EAAMA,EAAMxB,OAAS,IAE3DX,KAAKklF,cAAc3wE,KAAK,SAACW,EAAS3V,GAAY,OAAA2V,EAAE4wE,UAAYvmF,EAAEumF,gBACxDY,EAAqB1mF,KAAKslF,gBAAgBtlF,KAAKklF,cAAc,IAC7DyB,EAAmB3mF,KAAKslF,gBAAgBtlF,KAAKklF,cAAcllF,KAAKklF,cAAcvkF,OAAS,IAEvF8lF,EAAWC,GAAyBF,EAAaG,IACnD3mF,KAAKklF,cAAgB,GACrBllF,KAAKgkF,cAAe,EACpBhkF,KAAKsmE,kBAAkBtmE,KAAKklF,kBAO1BrB,EAAA3jF,UAAA6kF,eAAV,WACI/kF,KAAK4mF,aAAe,IAAIxF,KAAKC,eAAerhF,KAAKikF,QAAS,CAAEnR,IAAK9yE,KAAKokF,eAAetR,MACrF9yE,KAAK6mF,iBAAmB,IAAIzF,KAAKC,eAAerhF,KAAKikF,QAAS,CAAEI,QAASrkF,KAAKokF,eAAeC,UAC7FrkF,KAAK8mF,eAAiB,IAAI1F,KAAKC,eAAerhF,KAAKikF,QAAS,CAAEpR,MAAO7yE,KAAKokF,eAAevR,QACzF7yE,KAAK+mF,cAAgB,IAAI3F,KAAKC,eAAerhF,KAAKikF,QAAS,CAAErR,KAAM5yE,KAAKokF,eAAexR,OACvF5yE,KAAKgnF,kBAAoB,IAAI5F,KAAKC,eAAerhF,KAAKikF,QAAS,CAAEpR,MAAO7yE,KAAKokF,eAAevR,MAAOC,IAAK9yE,KAAKokF,eAAetR,OAMtH+Q,EAAA3jF,UAAAmlF,YAAV,SAAsBjS,GAClB,OAAO,IAAIjjE,KAAKijE,EAAKM,cAAeN,EAAKO,WAAYP,EAAKF,YAMvD2Q,EAAA3jF,UAAAgoE,iBAAP,SAAwBphB,GACpB9mD,KAAKsmE,kBAAoBxf,GAMtB+8B,EAAA3jF,UAAAioE,kBAAP,SAAyBrhB,GACrB9mD,KAAKqmE,mBAAqBvf,GAMvB+8B,EAAA3jF,UAAA+nE,WAAP,SAAkB9lE,GACdnC,KAAKmlF,WAAU,IAOZtB,EAAA3jF,UAAA2lF,eAAP,SAAsBzS,GAClB,OAA2B,OAAvBpzE,KAAKinF,eAIFrI,GAAexL,EAAMpzE,KAAKinF,gBAM9BpD,EAAA3jF,UAAAilF,WAAP,SAAkBhjF,GACd,KAAc,OAAVA,GAAkBA,IAAU6R,WAAcrU,MAAM0Q,QAAQlO,IAA2B,IAAjBA,EAAMxB,QAI5E,OAAQX,KAAKgwC,WACT,KAAK+zC,GAAkBP,OACftzE,GAAO/N,KAAWnC,KAAK6lF,eAAc,IACrC7lF,KAAKwlF,aAAY,GAErB,MACJ,KAAKzB,GAAkBN,MACnBzjF,KAAKylF,eAAetjF,GACpB,MACJ,KAAK4hF,GAAkBL,MACnB1jF,KAAK+lF,YAAY5jF,GAAO,KAQ7B0hF,EAAA3jF,UAAAgnF,aAAP,SAAoB/kF,GAChB,GAAKnC,KAAKklF,eAA+C,IAA9BllF,KAAKklF,cAAcvkF,OAA9C,CAIA,GAAc,OAAVwB,GAAkBA,IAAU6R,UAI5B,OAHAhU,KAAKklF,cAAgBllF,KAAKgwC,YAAc+zC,GAAkBP,OAAS,KAAO,GAC1ExjF,KAAKgkF,cAAe,OACpBhkF,KAAKsmE,kBAAkBtmE,KAAKklF,eAIhC,OAAQllF,KAAKgwC,WACT,KAAK+zC,GAAkBP,OACnBxjF,KAAKimF,eAAc,GACnB,MACJ,KAAKlC,GAAkBN,MACnBzjF,KAAKkmF,iBAAgB,GACrB,MACJ,KAAKnC,GAAkBL,MACnB1jF,KAAKumF,cAAa,MAQvB1C,EAAA3jF,UAAAinF,qBAAP,SAA4BhlF,GACxB,OAAQnC,KAAKgwC,WACT,KAAK+zC,GAAkBP,OACvB,KAAKO,GAAkBN,MACnBzjF,KAAKmlF,WAAWhjF,GAChB,MACJ,KAAK4hF,GAAkBL,MACnB1jF,KAAK+lF,YAAY5jF,GAAO,wCAhnBnCwM,EAAAA,sBAiBAA,EAAAA,6BAkBAA,EAAAA,2BAkBAA,EAAAA,yBAoBAA,EAAAA,qBAgCAA,EAAAA,wBAwBAA,EAAAA,6BAeAA,EAAAA,4BAwBAA,EAAAA,+BAgCAA,EAAAA,2BAOAgd,EAAAA,UAqaLk4D,SCxoBItwB,QAAA,EACA6zB,KAAA,EACAC,OAAA,sEAEJ,IAAAC,GAAA,SAAAxtE,GAAA,SAAAwtE,IAAA,IAAA1yE,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAKc4U,EAAAqtE,cAAgB,EAQnBrtE,EAAA+zD,SAAW,EAwCV/zD,EAAA2yE,YAAcC,GAAaj0B,UA8CvC,OAnGwCv7C,EAAAA,EAAAA,GAyBpCxY,OAAAgC,eAAW8lF,EAAApnF,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKunF,iBAMhB,SAAsBjuE,GAClBtZ,KAAKunF,YAAcjuE,mCAMvB9Z,OAAAgC,eAAW8lF,EAAApnF,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKunF,cAAgBC,GAAaj0B,yCAM7C/zD,OAAAgC,eAAW8lF,EAAApnF,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKunF,cAAgBC,GAAaH,wCAWtCC,EAAApnF,UAAAunF,WAAP,SAAkBn1E,GAAlB,IAAAsC,EAAA5U,KACIA,KAAK6kF,SAAW7kF,KAAK4kF,cAAc5C,iBAAiB1vE,EAAO,QAAStS,KAAKiiF,eACzEjiF,KAAK0nF,WAAaF,GAAaj0B,QAE/BhX,sBAAsB,WACd3nC,EAAK+yE,WAAa/yE,EAAK+yE,UAAUhnF,QACjCiU,EAAK+yE,UAAUrwE,KAAK,SAAChV,EAAeslF,GAAgB,OAAAA,IAAQhzE,EAAKqtE,gBAAe3hD,cAAciT,WAQnG+zC,EAAApnF,UAAA2nF,iBAAP,SAAwB5F,QAAA,IAAAA,IAAAA,EAAA,GACpBjiF,KAAKunF,YAAcC,GAAaH,OAChCrnF,KAAKiiF,cAAgBA,GAMlBqF,EAAApnF,UAAA4nF,mBAAP,SAA0Bx1E,EAAO2vE,QAAA,IAAAA,IAAAA,EAAA,GAChB,MAAT3vE,EAAMrR,KAA+B,aAATqR,EAAMrR,KAAkC,UAATqR,EAAMrR,MACjEqR,EAAM23B,iBACNjqC,KAAK6nF,iBAAiB5F,KAUvBqF,EAAApnF,UAAA6nF,cAAP,SAAqB5lF,GACjB,OAAInC,KAAKilF,YAAYrS,KACV5yE,KAAK+mF,cAAc1jB,OAAOlhE,GAE9B,GAAGA,EAAMuxE,iDArFnBvkC,EAAAA,YAAWnhC,KAAA,CAAC,oCAMZ0vE,EAAAA,aAAY1vE,KAAA,CAAC,eAiFlBs5E,EAnGA,CAAwCzD,ICGpCryC,GAAU,EAEdw2C,GAAA,WAgLI,SAAAA,EAAmBt1E,GAAA1S,KAAA0S,GAAAA,EA5JZ1S,KAAA2N,GAAK,mBAAmB6jC,KAcxBxxC,KAAAozE,KAAO,IAAIjjE,KAyDXnQ,KAAAioF,YAAa,EAWbjoF,KAAA+0C,YAAc,IAAI5rB,EAAAA,aAQlBnpB,KAAAkoF,YAAa,EAebloF,KAAA2oE,SAAW,EA8BV3oE,KAAAikF,QAAU,KAKVjkF,KAAAmoF,aAAe,QAUfnoF,KAAAqmE,mBAAiC,aAIjCrmE,KAAAsmE,kBAAuC,aAG3CtmE,KAAKooF,qBACLpoF,KAAKqoF,eAAiB,IAAItI,GA8LlC,OAtUIvgF,OAAAgC,eACWwmF,EAAA9nF,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAKmoF,kBAUhB,SAAuBhmF,GACnBnC,KAAKmoF,aAAehmF,EACpBnC,KAAKooF,sDAWT5oF,OAAAgC,eACWwmF,EAAA9nF,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKikF,aAYhB,SAAkB9hF,GACdnC,KAAKikF,QAAU9hF,EACfnC,KAAKooF,sDAoDT5oF,OAAAgC,eAAIwmF,EAAA9nF,UAAA,SAAM,KAAV,WAII,QAHIsmD,EAAQ,IAAIr2C,KAAKnQ,KAAKozE,KAAKM,cAAe,EAAG,GAC3CljE,EAAS,GAENhQ,EAAI,EAAGA,EAAI,GAAIA,IACpBgQ,EAAOhO,KAAKgkD,GACZA,EAAQxmD,KAAKqoF,eAAe9H,UAAU/5B,EAAO,QAAS,GAG1D,OAAOh2C,mCA0CJw3E,EAAA9nF,UAAAooF,eAAP,SAAsBnmF,GAClB,OAAInC,KAAKioF,WACEjoF,KAAKuoF,gBAAgBllB,OAAOlhE,GAEhC,GAAGA,EAAMwxE,YAMbqU,EAAA9nF,UAAAsoF,YAAP,SAAmBl2E,GACftS,KAAK+0C,YAAYxyB,KAAKjQ,GAEtBtS,KAAKozE,KAAO9gE,EACZtS,KAAKsmE,kBAAkBtmE,KAAKozE,OAMzB4U,EAAA9nF,UAAAgoE,iBAAP,SAAwBphB,GACpB9mD,KAAKsmE,kBAAoBxf,GAMtBkhC,EAAA9nF,UAAAioE,kBAAP,SAAyBrhB,GACrB9mD,KAAKqmE,mBAAqBvf,GAMvBkhC,EAAA9nF,UAAA+nE,WAAP,SAAkB9lE,GACVA,IACAnC,KAAKozE,KAAOjxE,IAOb6lF,EAAA9nF,UAAAuoF,aAAP,SAAoB90E,EAAOsI,GACvB,OAAUA,EAAK03D,WAAU,KAMrBqU,EAAA9nF,UAAAkoF,mBAAR,WACIpoF,KAAKuoF,gBAAkB,IAAInH,KAAKC,eAAerhF,KAAKikF,QAAS,CAAEpR,MAAO7yE,KAAK0oF,eAOxEV,EAAA9nF,UAAAyoF,iBADP,SACwBr2E,GACpBA,EAAM23B,iBACN33B,EAAMmyB,sBAEA5zB,EAAO7Q,KAAK4oF,UAAUtxE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBhuB,EAAMtR,SACxE,GAAK6P,EAOL,QAHMg4E,EAAS7oF,KAAK4oF,UAAUh2E,UACxBk2E,EAAWj4E,EAAKyvB,cAAcpvB,wBAE3ByC,EAAQk1E,EAAOv3E,QAAQT,GAAQ,EAAG8C,GAAS,EAAGA,IAAS,KACtDo1E,EAAeF,EAAOl1E,GAAO2sB,cAAcpvB,wBAEjD,GAAI43E,EAASnuD,MAAQouD,EAAapuD,KAAQouD,EAAatuD,KAAOquD,EAASruD,KADrD,EACwE,CACtFouD,EAAOl1E,GAAO2sB,cAAciT,QAC5B,SASLy0C,EAAA9nF,UAAA8oF,mBADP,SAC0B12E,GACtBA,EAAM23B,iBACN33B,EAAMmyB,sBAEA5zB,EAAO7Q,KAAK4oF,UAAUtxE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBhuB,EAAMtR,SACxE,GAAK6P,EAOL,QAHMg4E,EAAS7oF,KAAK4oF,UAAUh2E,UACxBk2E,EAAWj4E,EAAKyvB,cAAcpvB,wBAE3ByC,EAAQk1E,EAAOv3E,QAAQT,GAAQ,EAAG8C,EAAQk1E,EAAOloF,OAAQgT,IAAS,KACjEo1E,EAAeF,EAAOl1E,GAAO2sB,cAAcpvB,wBAEjD,GAAI63E,EAAapuD,MAAQmuD,EAASnuD,KAAQmuD,EAASruD,KAAOsuD,EAAatuD,KADrD,EACyE,CACvFouD,EAAOl1E,GAAO2sB,cAAciT,QAC5B,SASLy0C,EAAA9nF,UAAA+oF,oBADP,SAC2B32E,GACvBA,EAAM23B,iBACN33B,EAAMmyB,sBAEA5zB,EAAO7Q,KAAK4oF,UAAUtxE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBhuB,EAAMtR,SACxE,GAAK6P,EAAL,KAEMg4E,EAAS7oF,KAAK4oF,UAAUh2E,UAC9B,GAAIi2E,EAAOv3E,QAAQT,GAAQ,EAAIg4E,EAAOloF,OACpBkoF,EAAOA,EAAOv3E,QAAQT,GAAQ,GAEtCyvB,cAAciT,UAQrBy0C,EAAA9nF,UAAAgpF,mBADP,SAC0B52E,GACtBA,EAAM23B,iBACN33B,EAAMmyB,sBAEA5zB,EAAO7Q,KAAK4oF,UAAUtxE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBhuB,EAAMtR,SACxE,GAAK6P,EAAL,KAEMg4E,EAAS7oF,KAAK4oF,UAAUh2E,UAC9B,GAAIi2E,EAAOv3E,QAAQT,GAAQ,GAAK,EACdg4E,EAAOA,EAAOv3E,QAAQT,GAAQ,GAEtCyvB,cAAciT,UAQrBy0C,EAAA9nF,UAAAipF,cADP,SACqB72E,GACjBA,EAAM23B,iBACN33B,EAAMmyB,kBAEQzkC,KAAK4oF,UAAUh2E,UAAU,GAEjC0tB,cAAciT,SAOjBy0C,EAAA9nF,UAAAkpF,aADP,SACoB92E,GAChBA,EAAM23B,iBACN33B,EAAMmyB,sBAEAokD,EAAS7oF,KAAK4oF,UAAUh2E,UAChBi2E,EAAOA,EAAOloF,OAAS,GAE/B2/B,cAAciT,SAOjBy0C,EAAA9nF,UAAAmpF,eADP,SACsB/2E,OACZnQ,EAAQnC,KAAK4oF,UAAUtxE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBhuB,EAAMtR,SAAQmB,MACjFnC,KAAKozE,KAAO,IAAIjjE,KAAKhO,EAAMuxE,cAAevxE,EAAMwxE,WAAY3zE,KAAKozE,KAAKF,WAEtElzE,KAAK+0C,YAAYxyB,KAAKviB,KAAKozE,MAC3BpzE,KAAKsmE,kBAAkBtmE,KAAKozE,2BA9WnCthC,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE88C,QAAS8V,EAAAA,kBAAmB7V,YAAa87B,EAAwB5f,OAAO,IACtF15D,SAAU,kBACVqjC,SAAA,0YAXAzO,EAAAA,0CA0BC6L,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAcAA,EAAAA,2BASAA,EAAAA,sBAyBAA,EAAAA,0BAuBAA,EAAAA,2BAWAgd,EAAAA,2BAQAwjB,EAAAA,YAAWnhC,KAAA,CAAC,yCAMZ0vE,EAAAA,aAAY1vE,KAAA,CAAC80E,GAA2B,CAAEpsC,KAAMosC,uBAShD3zC,EAAAA,YAAWnhC,KAAA,CAAC,2CAuHZY,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,uCA0BjCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,wCA0BnCY,EAAAA,aAAYZ,KAAA,CAAC,qBAAsB,CAAC,uCAmBpCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,kCAmBnCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAa9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,mCAc7BY,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,cAQpCg6E,EAhXA,GCZIx2C,GAAU,EAEd83C,GAAA,SAAAxvE,GAAA,SAAAwvE,IAAA,IAAA10E,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAEW4U,EAAA20E,UAAY,CACfC,IAAK,CAAEhiF,UAAWiiF,OAAOC,mBAAoBC,UAAW,MAEhE,OAJ0C3xE,EAAAA,EAAAA,uBADzChG,EAAAA,aAKDs3E,EALA,CAC0CM,EAAAA,mCAyLtC,SAAAC,EAAmBn3E,GAAA1S,KAAA0S,GAAAA,EArJZ1S,KAAA2N,GAAK,kBAAkB6jC,KAcvBxxC,KAAAozE,KAAO,IAAIjjE,KAoEXnQ,KAAA+0C,YAAc,IAAI5rB,EAAAA,aAQlBnpB,KAAAkoF,YAAa,EAQbloF,KAAA2oE,SAAW,EA8BV3oE,KAAAikF,QAAU,KAKVjkF,KAAA8pF,YAAc,UAUd9pF,KAAAqmE,mBAAiC,aAIjCrmE,KAAAsmE,kBAAuC,aAG3CtmE,KAAK+pF,oBACL/pF,KAAKqoF,eAAiB,IAAItI,GA4HlC,OA7PIvgF,OAAAgC,eACWqoF,EAAA3pF,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK8pF,iBAUhB,SAAsB3nF,GAClBnC,KAAK8pF,YAAc3nF,EACnBnC,KAAK+pF,qDAWTvqF,OAAAgC,eACWqoF,EAAA3pF,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKikF,aAYhB,SAAkB9hF,GACdnC,KAAKikF,QAAU9hF,EACfnC,KAAK+pF,qDA6CTvqF,OAAAgC,eAAIqoF,EAAA3pF,UAAA,SAAM,KAAV,mBACUsQ,EAAS,GACTg2C,EAAQxmD,KAAKozE,KAAKM,cAAgB,EAClC5yD,EAAM9gB,KAAKozE,KAAKM,cAAgB,MAEtC,IAAmB,IAAA5jE,EAAAC,EAAAa,GAAM41C,EAAO1lC,IAAI7Q,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAjC,IAAM0wE,EAAI3iE,EAAA9N,MACXqO,EAAOhO,KAAK,IAAI2N,KAAKyiE,EAAM5yE,KAAKozE,KAAKO,WAAY3zE,KAAKozE,KAAKF,iHAG/D,OAAO1iE,mCA0CJq5E,EAAA3pF,UAAA6nF,cAAP,SAAqB5lF,GACjB,OAAInC,KAAKioF,WACEjoF,KAAKgqF,eAAe3mB,OAAOlhE,GAE/B,GAAGA,EAAMuxE,eAMbmW,EAAA3pF,UAAA+pF,WAAP,SAAkB33E,GACdtS,KAAKozE,KAAO9gE,EAEZtS,KAAK+0C,YAAYxyB,KAAKviB,KAAKozE,MAC3BpzE,KAAKsmE,kBAAkBtmE,KAAKozE,OAMzByW,EAAA3pF,UAAAu9C,OAAP,SAAcnrC,GACVA,EAAM23B,iBACN33B,EAAMmyB,sBAEAylD,EAAQ53E,EAAM8mC,OAAS,GAAK,EAAI,EACtCp5C,KAAKmqF,kBAAkBD,IAMpBL,EAAA3pF,UAAAspF,IAAP,SAAWl3E,OACD43E,EAAQ53E,EAAM8mC,OAAS,EAAI,GAAK,EACtCp5C,KAAKmqF,kBAAkBD,IAMpBL,EAAA3pF,UAAAgoE,iBAAP,SAAwBphB,GACpB9mD,KAAKsmE,kBAAoBxf,GAMtB+iC,EAAA3pF,UAAAioE,kBAAP,SAAyBrhB,GACrB9mD,KAAKqmE,mBAAqBvf,GAMvB+iC,EAAA3pF,UAAAkqF,YAAP,SAAmBz2E,EAAOsI,GACtB,OAAUA,EAAKy3D,cAAa,KAMzBmW,EAAA3pF,UAAA+nE,WAAP,SAAkB9lE,GACVA,IACAnC,KAAKozE,KAAOjxE,IAQb0nF,EAAA3pF,UAAA8oF,mBADP,SAC0B12E,GACtBA,EAAM23B,iBACN33B,EAAMmyB,kBAENzkC,KAAKmqF,kBAAkB,IAOpBN,EAAA3pF,UAAAyoF,iBADP,SACwBr2E,GACpBA,EAAM23B,iBACN33B,EAAMmyB,kBAENzkC,KAAKmqF,mBAAmB,IAOrBN,EAAA3pF,UAAAmpF,eADP,WAEIrpF,KAAK+0C,YAAYxyB,KAAKviB,KAAKozE,MAC3BpzE,KAAKsmE,kBAAkBtmE,KAAKozE,OAMxByW,EAAA3pF,UAAA6pF,kBAAR,WACI/pF,KAAKgqF,eAAiB,IAAI5I,KAAKC,eAAerhF,KAAKikF,QAAS,CAAErR,KAAM5yE,KAAKqqF,cAMrER,EAAA3pF,UAAAiqF,kBAAR,SAA0BD,OAChBI,GAAc,IAAIn6E,MAAOujE,cAE1BwW,EAAQ,GAAKlqF,KAAKozE,KAAKM,cAAgB4W,GAAe,IACtDJ,EAAQ,GAAKI,EAActqF,KAAKozE,KAAKM,eAAiB,KAG3D1zE,KAAKozE,KAAOpzE,KAAKqoF,eAAe9H,UAAUvgF,KAAKozE,KAAM,OAAQ8W,yBA/SpEp4C,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CACP,CACI88C,QAAS8V,EAAAA,kBACT7V,YAAa29B,EACbzhB,OAAO,GAEX,CACInc,QAASs+B,EAAAA,sBACTC,SAAUlB,KAGlB56E,SAAU,iBACVqjC,SAAA,wYA3BwEzO,EAAAA,0CA0CvE6L,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAcAA,EAAAA,0BASAA,EAAAA,sBAyBAA,EAAAA,0BAuBAA,EAAAA,2BAWAgd,EAAAA,2BAQAwjB,EAAAA,YAAWnhC,KAAA,CAAC,wCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,6CAmIZY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,qCAWnCY,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,mCAWjCY,EAAAA,aAAYZ,KAAA,CAAC,oBAyBlB67E,KCvTAY,GAAA,WA4JI,SAAAA,EAAoBpqD,GAAArgC,KAAAqgC,WAAAA,EAvHbrgC,KAAA8jF,iBAAkB,EAIlB9jF,KAAA0qF,eAAgB,EAIhB1qF,KAAA2qF,gBAAiB,EAGjB3qF,KAAA4qF,eAAgB,EAGhB5qF,KAAA6qF,gBAAkB,IAAI1hE,EAAAA,aAuGrBnpB,KAAAmyC,WAAY,EASxB,OApJI3yC,OAAAgC,eACWipF,EAAAvqF,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKmyC,eAMhB,SAAoBhwC,GAChBnC,KAAKmyC,UAAYhwC,mCA6BrB3C,OAAAgC,eAAWipF,EAAAvqF,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKozE,KAAKmP,gDAGrB/iF,OAAAgC,eAAWipF,EAAAvqF,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKozE,KAAKqP,6CAGrBjjF,OAAAgC,eAAWipF,EAAAvqF,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKozE,KAAKoP,6CAGrBhjF,OAAAgC,eAAWipF,EAAAvqF,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKqgC,WAAWC,+CAG3B9gC,OAAAgC,eACWipF,EAAAvqF,UAAA,gBAAa,KADxB,WAEI,OAASF,KAAK8qF,YAAc9qF,KAAK+jB,0CAGrCvkB,OAAAgC,eACWipF,EAAAvqF,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKozE,KAAKoP,aAAexiF,KAAKozE,KAAKqP,6CAG9CjjF,OAAAgC,eACWipF,EAAAvqF,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK8jF,iBAAmB9jF,KAAK+qF,4CAGxCvrF,OAAAgC,eACWipF,EAAAvqF,UAAA,UAAO,KADlB,eAEU8qF,EAAQ,IAAI76E,KAAKA,KAAK4iE,OACtBK,EAAOpzE,KAAKozE,KAAKA,KACvB,OAAQA,EAAKM,gBAAkBsX,EAAMtX,eACjCN,EAAKO,aAAeqX,EAAMrX,YAC1BP,EAAKF,YAAc8X,EAAM9X,2CAIjC1zE,OAAAgC,eACWipF,EAAAvqF,UAAA,YAAS,KADpB,eAEU4yE,EAAM9yE,KAAKozE,KAAKA,KAAKqL,SAC3B,OAAe,IAAR3L,GAAqB,IAARA,mCAGxBtzE,OAAAgC,eAAWipF,EAAAvqF,UAAA,aAAU,KAArB,WACI,OAA2B,OAAvBF,KAAKinF,eAIFrI,GAAe5+E,KAAKozE,KAAKA,KAAMpzE,KAAKinF,gDAG/CznF,OAAAgC,eAAWipF,EAAAvqF,UAAA,eAAY,KAAvB,WACI,QAAKF,KAAKirF,iBAIHrM,GAAe5+E,KAAKozE,KAAKA,KAAMpzE,KAAKirF,kDAG/CzrF,OAAAgC,eAAWipF,EAAAvqF,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKuiF,iBAAmBviF,KAAKkrF,WAAalrF,KAAK8qF,aAAe9qF,KAAKmrF,8CAG9E3rF,OAAAgC,eACWipF,EAAAvqF,UAAA,mBAAgB,KAD3B,WAEI,OAAQF,KAAKorF,mBAAqBprF,KAAK4qF,+CAG3CprF,OAAAgC,eACWipF,EAAAvqF,UAAA,YAAS,KADpB,WAEI,OAA0B,OAAtBF,KAAKqrF,cAIFzM,GAAe5+E,KAAKozE,KAAKA,KAAMpzE,KAAKqrF,+CAG/C7rF,OAAAgC,eACWipF,EAAAvqF,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKozE,KAAKmP,kBAAoBviF,KAAKsrF,WAAatrF,KAAK+jB,2CAGhEvkB,OAAAgC,eACWipF,EAAAvqF,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKkrF,UAAYlrF,KAAK8qF,YAAc9qF,KAAKmrF,8CAGpD3rF,OAAAgC,eACWipF,EAAAvqF,UAAA,oBAAiB,KAD5B,WAEI,OAAOF,KAAKgwC,YAAc+zC,GAAkBL,uCAGhDlkF,OAAAgC,eACWipF,EAAAvqF,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK8qF,YAAc9qF,KAAKkrF,UAAY,EAAI,mCAS5CT,EAAAvqF,UAAA08E,SAFP,WAGI58E,KAAK6qF,gBAAgBtoE,KAAKviB,KAAKozE,2BAjKtCthC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,eACVqjC,SAAA,mIAV0DzO,EAAAA,4CAazD30B,EAAAA,yBAGAA,EAAAA,wBAOAA,EAAAA,6BAYAA,EAAAA,+BAGAA,EAAAA,4BAGAA,EAAAA,+BAGAA,EAAAA,6BAGAA,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,0DAGZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,0DAGZW,EAAAA,+BAGAgd,EAAAA,8BAmBAwjB,EAAAA,YAAWnhC,KAAA,CAAC,0DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAUZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+DA0BZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yDASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mCASZY,EAAAA,aAAYZ,KAAA,CAAC,UAAO,CAAAkE,KACpBtD,EAAAA,aAAYZ,KAAA,CAAC,oBAIlBy8E,EAnKA,MCFS,aACE,eACA,eACC,aAMZc,GAAA,WAAA,SAAAA,KAsKA,OA/JWA,EAAArrF,UAAAsrF,cAAP,SAAqBxqF,EAAqBC,EAAawqF,QAAA,IAAAA,IAAAA,GAAA,GAClB,IAA7BzqF,EAAO0qF,oBAA2B1qF,EAASA,EAAO+7B,gBACxB,IAA1B97B,EAAIqQ,QAAQ,WAAmBrQ,EAZ7B,QAYyC0B,OAAO1B,QAIlD6xE,EAA0BuL,EAAM79E,EAAGmrF,EAHjCC,EAAY5rF,KAAK4rF,UACjB/6E,EAAO+6E,EAAUlL,MAAMppE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBt/B,IAC/D0/E,EAAQkL,EAAUlL,MAAM9tE,UAEtBe,EAAQ+sE,EAAMpvE,QAAQT,GAE5B,GAAKA,EAAL,CAGA,OAAQ5P,GACJ,KAAK4qF,GAGD,IAFAxN,GAAQ,EACRsN,EAAW3rF,KAAKugF,UAAU1vE,EAAKuiE,KAAKA,KAAMiL,GACrC79E,EAAImT,EAAOnT,EAAI,IAChBsyE,EAAM2Y,EAAW/K,EAAMlgF,GAAKkgF,EAAMlgF,EAAI,GACtCmrF,EAAW7Y,EAAIM,KAAKA,MAChBN,EAAIM,KAAKqP,aAHMjiF,IAMnB,GAAIsyE,GAAOA,EAAIgZ,YAEX,YADAhZ,EAAIxyC,cAAciT,QAI1B,MAEJ,KAAKs4C,GAGD,IAFAxN,EAAO,EACPsN,EAAW3rF,KAAKugF,UAAU1vE,EAAKuiE,KAAKA,KAAMiL,GACrC79E,EAAImT,EAAOnT,EAAIkgF,EAAM//E,OAAS,IAC/BmyE,EAAM2Y,EAAW/K,EAAMlgF,GAAKkgF,EAAMlgF,EAAI,GACtCmrF,EAAW7Y,EAAIM,KAAKA,MAChBN,EAAIM,KAAKoP,aAHqBhiF,IAMlC,GAAIsyE,GAAOA,EAAIgZ,YAEX,YADAhZ,EAAIxyC,cAAciT,QAI1B,MAEJ,KAAKs4C,GAGD,IAFAxN,GAAQ,EACRsN,EAAW3rF,KAAKugF,UAAU1vE,EAAKuiE,KAAKA,KAAMiL,GACrC79E,EAAImT,EAAOnT,EAAI,GAAK,IACrBsyE,EAAM2Y,EAAW/K,EAAMlgF,GAAKkgF,EAAMlgF,EAAI,GACtCmrF,EAAW7Y,EAAIM,KAAKA,MAChBN,EAAIM,KAAKqP,aAHWjiF,GAAK,EAM7B,GAAIsyE,GAAOA,EAAIgZ,YAEX,YADAhZ,EAAIxyC,cAAciT,QAI1B,MAEJ,KAAKs4C,GAGD,IAFAxN,EAAO,EACPsN,EAAW3rF,KAAKugF,UAAU1vE,EAAKuiE,KAAKA,KAAMiL,GACrC79E,EAAImT,EAAOnT,EAAI,EAAI,KACpBsyE,EAAM2Y,EAAW/K,EAAMlgF,GAAKkgF,EAAMlgF,EAAI,GACtCmrF,EAAW7Y,EAAIM,KAAKA,MAChBN,EAAIM,KAAKoP,aAHWhiF,GAAK,EAM7B,GAAIsyE,GAAOA,EAAIgZ,YAEX,YADAhZ,EAAIxyC,cAAciT,YA+B9Bw4C,EAtBEC,EAAgB3N,EAAO,EAAIuN,EAAUI,cAAgBJ,EAAUK,cACrE,GAAID,EAAe,CAIf,IAFAlZ,GADA4N,EAAQsL,EAActL,MAAM9tE,WAChB0E,KAAK,SAAC2E,GAAS,OAAAA,EAAKm3D,KAAKA,KAAKhjE,YAAcu7E,EAASv7E,cAEtD0iE,EAAIgZ,YAEX,YADAhZ,EAAIxyC,cAAciT,QAGtBy4C,EAAcE,eAAeV,cAAc1Y,EAAIxyC,cAAer/B,GAelE,GAVI6xE,IAAQA,EAAIgZ,eACZhZ,EAAM4N,EAAMlgF,EAAI69E,MAEZsN,EAAW3rF,KAAKugF,UAAU1vE,EAAKuiE,KAAKA,KAAMiL,EAAO79E,EAAImT,KAMzDm/D,IAAOiZ,EAAiB1N,EAAO,EAAIvL,EAAIM,KAAKoP,YAAc1P,EAAIM,KAAKqP,aACnEmJ,EAAUO,iBAAmBH,IAAmBlZ,GAAOiZ,IAAoBjZ,GAAM,KAC3EsZ,EAAc/N,EAAO,EAAImG,GAAYZ,KAAOY,GAAYb,KAC9DiI,EAAUS,eAAe9pE,KAAK,CAAC6pE,YAAaA,EAAanrF,IAAKA,EAAK0qF,SAAUA,OAQ9EJ,EAAArrF,UAAAosF,cAAP,WAEI,QADIV,EAAY5rF,KAAK4rF,WACb5rF,KAAKusF,cAAcX,IAAcA,EAAUI,eAC/CJ,EAAYA,EAAUI,eAQvBT,EAAArrF,UAAAssF,aAAP,WAEI,QADIZ,EAAY5rF,KAAK4rF,WACb5rF,KAAKysF,aAAab,IAAcA,EAAUK,eAC9CL,EAAYA,EAAUK,eAItBV,EAAArrF,UAAAqgF,UAAR,SAAkBnN,EAAYuN,OACpBC,EAAM,IAAIzwE,KAAKijE,GAErB,OADAwN,EAAI3N,QAAQ2N,EAAI1N,UAAYyN,GACrBC,GAGH2K,EAAArrF,UAAAqsF,cAAR,SAAsBX,GAElB,QADMlL,EAAQkL,EAAUlL,MAAM1mE,OAAO,SAAA1a,GAAK,OAAAA,EAAEijF,iBACnC/hF,EAAI,EAAGA,EAAIkgF,EAAM//E,OAAQH,IAC9B,GAAIkgF,EAAMlgF,GAAGsrF,YAET,OADApL,EAAMlgF,GAAG8/B,cAAciT,SAChB,EAGf,OAAO,GAGHg4C,EAAArrF,UAAAusF,aAAR,SAAqBb,GAEjB,QADMlL,EAAQkL,EAAUlL,MAAM1mE,OAAO,SAAA1a,GAAK,OAAAA,EAAEijF,iBACnC/hF,EAAIkgF,EAAM//E,OAAS,EAAGH,GAAK,EAAGA,IACnC,GAAIkgF,EAAMlgF,GAAGsrF,YAET,OADApL,EAAMlgF,GAAG8/B,cAAciT,SAChB,EAGf,OAAO,uBApKdvhC,EAAAA,aAsKDu5E,EAtKA,GCMI/5C,GAAU,EAEdk7C,GAAA,SAAA5yE,GA6EI,SAAA4yE,EAAmBR,GAAnB,IAAAt3E,EACIkF,EAAAlZ,KAAAZ,OAAOA,YADQ4U,EAAAs3E,eAAAA,EApDZt3E,EAAAjH,GAAK,iBAAiB6jC,KAMtB58B,EAAAu3E,gBAAiB,EAMjBv3E,EAAAi2E,gBAAkB,IAAI1hE,EAAAA,aAMtBvU,EAAAy3E,eAAiB,IAAIljE,EAAAA,aA6BrBvU,EAAAszE,YAAa,IA8QxB,OA1U0ClwE,EAAAA,EAAAA,GAwEtCxY,OAAAgC,eAAWkrF,EAAAxsF,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAK4kF,cAAcnE,mBAAmBzgF,KAAK6kF,SAASnR,cAAe1zE,KAAK6kF,SAASlR,YAAY,oCAMjG+Y,EAAAxsF,UAAA2uC,SAAP,WACI7uC,KAAKksF,eAAeN,UAAY5rF,MAM7B0sF,EAAAxsF,UAAA0yC,UAAP,YACS5yC,KAAKmsF,gBAAkBnsF,KAAK0gF,OAC7B1gF,KAAK2sF,0BASND,EAAAxsF,UAAA0sF,cAAP,SAAqBzqF,GACjB,OAAInC,KAAKilF,YAAYnS,IACV9yE,KAAK4mF,aAAavjB,OAAOlhE,GAE7B,GAAGA,EAAM+wE,WAMbwZ,EAAAxsF,UAAA2sF,mBAAP,mBACUC,EAAW,GACXC,EAAK/sF,KAAK4kF,cAAcnE,mBAAmBzgF,KAAK6kF,SAASnR,cAAe1zE,KAAK6kF,SAASlR,YAAY,OACxG,IAAkB,IAAAqZ,EAAAj9E,EAAAg9E,GAAEE,EAAAD,EAAA9qF,QAAA+qF,EAAA7qF,KAAA6qF,EAAAD,EAAA9qF,OAAE,CAAjB,IAAM4wE,EAAGma,EAAA9qF,MACV2qF,EAAStqF,KAAKxC,KAAK6mF,iBAAiBxjB,OAAOyP,EAAIM,4GAGnD,OAAO0Z,GAMJJ,EAAAxsF,UAAAgtF,WAAP,SAAkBv5E,EAAOsI,GACrB,MAAO,GAAGA,EAAKtI,GAAOy/D,KAAKO,WAAa13D,EAAKtI,GAAOy/D,KAAKF,WAMtDwZ,EAAAxsF,UAAAitF,YAAP,SAAmBx5E,EAAOsI,GACtB,OAAUA,EAAKm3D,KAAKO,WAAU,KAAK13D,EAAKm3D,KAAKF,WAM1CwZ,EAAAxsF,UAAAqiF,eAAP,SAAsBpgF,GAClB,OAAOnC,KAAK6kF,SAASlR,aAAexxE,EAAMwxE,YAMvC+Y,EAAAxsF,UAAA2iF,cAAP,SAAqB1gF,GACjB,OAAOnC,KAAK6kF,SAASnR,gBAAkBvxE,EAAMuxE,eAM1CgZ,EAAAxsF,UAAAktF,WAAP,SAAkBha,OACV8R,EACJ,GAAIllF,KAAK6lF,eAAezS,EAAKA,QAAUpzE,KAAKmC,OACvCxC,MAAM0Q,QAAQrQ,KAAKmC,QAAgC,IAAtBnC,KAAKmC,MAAMxB,OAEzC,OAAO,EAGX,GAAIX,KAAKgwC,YAAc+zC,GAAkBP,OAErC,OADA0B,EAAiBllF,KAAU,MACpBA,KAAKqlF,YAAYH,GAAe90E,YAAcgjE,EAAKA,KAAKhjE,UAInE,GADA80E,EAAiBllF,KAAU,MACvBA,KAAKgwC,YAAc+zC,GAAkBL,OAAkC,IAAzBwB,EAAcvkF,OAC5D,OAAOX,KAAKqlF,YAAYH,EAAc,IAAI90E,YAAcgjE,EAAKA,KAAKhjE,UAGtE,GAAIpQ,KAAKgwC,YAAc+zC,GAAkBN,MAAO,KACtCj9B,EAAQxmD,KAAKqlF,YAAYH,EAAc,IACvCpkE,EAAM9gB,KAAKqlF,YAAYH,EAAcA,EAAcvkF,OAAS,IAElE,QAAIX,KAAK4qF,cAAcxX,EAAKA,MAAM,EAAO5sB,EAAO1lC,MACxBokE,EAAc5tE,KAAK,SAAAwsB,GAAW,OAAAA,EAAQ1zB,YAAcgjE,EAAKA,KAAKhjE,YAOtF,OAAOpQ,KAAK4qF,cAAcxX,EAAKA,MAAM,IAOtCsZ,EAAAxsF,UAAAwqF,cAAP,SAAqBtX,GACjB,GAAIpzE,KAAKorF,oBAAsBprF,KAAKmC,MAChC,OAAO,MAGLu+E,EAAQ1gF,KAAU,MAExB,OAAO0Q,GADUgwE,EAAMA,EAAM//E,OAAS,GACbyyE,EAAKA,OAM3BsZ,EAAAxsF,UAAAyqF,eAAP,SAAsBvX,GAClB,QAAIpzE,KAAKorF,oBAAsBprF,KAAKmC,QAI7BuO,GAAS1Q,KAAU,MAAY,GAAIozE,EAAKA,OAM5CsZ,EAAAxsF,UAAA0qF,cAAP,SAAqBxX,EAAYia,EAAwBpkD,EAAY5e,GACjE,QAAIgjE,KAAmB1tF,MAAM0Q,QAAQrQ,KAAKmC,QAAUnC,KAAKmC,MAAMxB,OAAS,MAIxEsoC,EAAMA,GAAYjpC,KAAKmC,MAAM,GAC7BkoB,EAAMA,GAAYrqB,KAAKmC,MAAOnC,KAAU,MAAYW,OAAS,GAEtDi+E,GAAexL,EAClB,CACI,CACIlhE,KAAMitE,GAAcrB,QACpBoB,UAAW,CAACj2C,EAAK5e,QAS1BqiE,EAAAxsF,UAAAotF,gBAAP,eACQla,EAAOpzE,KAAK0gF,MAAMppE,KAAK,SAAChY,GAAM,OAAAA,EAAEykB,WAE/BqvD,IACDA,EAAOpzE,KAAK0gF,MAAMppE,KAAK,SAAChY,GAAM,OAAAA,EAAEiuF,WAGhCna,EAAK0Y,aACL1Y,EAAK9yC,cAAciT,SAOpBm5C,EAAAxsF,UAAAstF,UAAP,SAAiBl7E,GACbtS,KAAKmnF,qBAAqB70E,EAAM8gE,MAChCpzE,KAAK6qF,gBAAgBtoE,KAAKjQ,GAE1BtS,KAAK+0C,YAAYxyB,KAAKviB,KAAKklF,gBAMvBwH,EAAAxsF,UAAAysF,uBAAR,eACUzN,EAAY,GAClBl/E,KAAK0gF,MAAM9tE,UAAUH,QAAQ,SAAC2gE,GACrBA,EAAKmP,gBACNrD,EAAU18E,KAAK4wE,EAAKA,KAAKA,QAIjCpzE,KAAKirF,gBAAkB,CAAC,CACpB/4E,KAAMitE,GAAcpB,SACpBmB,UAAWA,KAOZwN,EAAAxsF,UAAAutF,kBAAP,WAEI,QADI7B,EAAS,KACNA,EAAUK,eACbL,EAAYA,EAAUK,cAE1B,OAAOL,GAMHc,EAAAxsF,UAAAwtF,iBAAR,WAEI,QADI9B,EAAS,KACNA,EAAUI,eACbJ,EAAYA,EAAUI,cAE1B,OAAOJ,GAMXpsF,OAAAgC,eAAYkrF,EAAAxsF,UAAA,oBAAiB,KAA7B,WACI,OAAOF,KAAKgwC,YAAc+zC,GAAkBL,uCAUzCgJ,EAAAxsF,UAAAytF,eAJP,SAIsBr7E,GAClBA,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKksF,eAAeV,cAAcl5E,EAAY,OAAiBA,EAAMrR,MAOlEyrF,EAAAxsF,UAAAipF,cADP,SACqB72E,GACjBA,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKytF,oBAAoBvB,eAAeI,iBAOrCI,EAAAxsF,UAAAkpF,aADP,SACoB92E,GAChBA,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAK0tF,mBAAmBxB,eAAeM,oCApV9C16C,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIi5D,OAAO,EACPnc,QAAS8V,EAAAA,kBACT7V,YAAawgC,GAEjB,CAAEzgC,QAASs/B,GAA8Bf,SAAUe,KAEvD78E,SAAU,gBACVqjC,SAAA,o8BAdKw5C,kCA2BJp8C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,8BAMAA,EAAAA,+BAMAgd,EAAAA,+BAMAA,EAAAA,sBAMA+xD,EAAAA,aAAY1vE,KAAA,CAACy8E,GAAqB,CAAE/zC,KAAM+zC,yBAuB1Ct7C,EAAAA,YAAWnhC,KAAA,CAAC,8CAkPZY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAkE,KAC5CtD,EAAAA,aAAYZ,KAAA,CAAC,qBAAsB,CAAC,YAAS,CAAAkE,KAC7CtD,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,YAAS,CAAAkE,KAC1CtD,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,kCAUnCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAU9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,cAMlC0+E,EAtVA,CAY0C7I,ICHtCryC,GAAU,EAsBdo8C,GAAA,SAAA9zE,GAAA,SAAA8zE,IAAA,IAAAh5E,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAkDW4U,EAAAjH,GAAK,gBAAgB6jC,KAYrB58B,EAAAi5E,WAAY,EAYZj5E,EAAAi/C,UAAW,EA8BXj/C,EAAAk5E,gBAAuB,GAgBvBl5E,EAAAm5E,kBAAmB,EAenBn5E,EAAA+zD,SAAW,EASX/zD,EAAA88B,KAAO,OASP98B,EAAAi0D,eAAiB,WAoBjBj0D,EAAAszE,YAAa,EAyLZtzE,EAAAo5E,kBAAoB,EA8ErBp5E,EAAAq5E,qBAAuB,SAACF,QAAA,IAAAA,IAAAA,GAAA,GAC3Bn5E,EAAK+vE,kBAAkBziF,OACvB0S,EAAK2vE,qBAAuBC,GAAYb,KAExC/uE,EAAKs5E,cAAcH,IAQhBn5E,EAAAu5E,qBAAuB,SAACJ,QAAA,IAAAA,IAAAA,GAAA,GAC3Bn5E,EAAK+vE,kBAAkBziF,OACvB0S,EAAK2vE,qBAAuBC,GAAYZ,KAExChvE,EAAKw5E,UAAUL,IAQZn5E,EAAAy5E,gBAAkB,SAAC/7E,GACtBA,EAAMmyB,kBAMN7vB,EAAK05E,SAAS5J,iBAAiBxiF,MAAK,GACpC0S,EAAK05E,SAAS5J,iBAAiBj+C,WAG3B7xB,EAAK2vE,uBAAyBC,GAAYb,KAC1C/uE,EAAK25E,aAAajuD,cAAciT,QACzB3+B,EAAK2vE,uBAAyBC,GAAYZ,MACjDhvE,EAAK45E,aAAaluD,cAAciT,QAGpC3+B,EAAK2vE,qBAAuBC,GAAY1vB,QA2ZhD,OAt1B0C98C,EAAAA,EAAAA,GAmDtCxY,OAAAgC,eACIosF,EAAA1tF,UAAA,mBAAgB,KADpB,WAEI,OAAOF,KAAKguF,uBAGhB,SAAqB10E,GACbA,EAAM,IAIVtZ,KAAKguF,kBAAoB10E,oCAkE7B9Z,OAAAgC,eACIosF,EAAA1tF,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAK6zD,0CA8EhBr0D,OAAAgC,eAAIosF,EAAA1tF,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK0nF,aAAeF,GAAaJ,sCAY5C5nF,OAAAgC,eAAIosF,EAAA1tF,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAKyuF,wBACEzuF,KAAKyuF,wBAAwB18C,SAEjC,UAYX,SAAmB+K,GACf98C,KAAKyuF,wBAA0B3xC,mCAWnCt9C,OAAAgC,eAAIosF,EAAA1tF,UAAA,oBAAiB,KAArB,WACI,OAAIF,KAAK0uF,2BACE1uF,KAAK0uF,2BAA2B38C,SAEpC,UAYX,SAAsB+K,GAClB98C,KAAK0uF,2BAA6B5xC,mCAWtCt9C,OAAAgC,eAAIosF,EAAA1tF,UAAA,gBAAa,KAAjB,eACUkzE,EAAapzE,KAAK2uF,WACxB,OAAO3uF,KAAK4uF,gBAAgBxb,oCAYhC5zE,OAAAgC,eAAIosF,EAAA1tF,UAAA,UAAO,KAAX,eACUkzE,EAAapzE,KAAK6kF,SACxB,OAAO7kF,KAAK4uF,gBAAgBxb,oCAShC5zE,OAAAgC,eAAIosF,EAAA1tF,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKklF,cAAgBllF,KAAKklF,cAAgB,IAAI/0E,sCA8BlDy9E,EAAA1tF,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACIA,KAAK6uF,iBAAiB7uF,KAAK8uF,YAC3B9uF,KAAK+uF,oBAAsB/uF,KAAK8uF,WAAW7sC,QAAQld,UAAU,SAAA5jC,GACzDyT,EAAKi6E,iBAAiB1tF,KAG1BnB,KAAK2kF,kBAAkB9/C,KACnBC,EAAAA,UAAU9kC,KAAK0kF,kBACfsK,EAAAA,UAAU,WAAM,OAAAp6E,EAAK6vE,aAAa5/C,KAC9BoqD,EAAAA,SAAS,GACT9L,EAAAA,SAAS,WAAM,OAAA1qB,EAAAA,SAAS,OACxB3zB,EAAAA,UAAUlwB,EAAK8vE,sBACf3/C,UAAU,WACV,OAAQnwB,EAAK2vE,sBACT,KAAKC,GAAYb,KACb/uE,EAAKs5E,gBACL,MACJ,KAAK1J,GAAYZ,KACbhvE,EAAKw5E,YACL,MACJ,KAAK5J,GAAY1vB,UAc1B84B,EAAA1tF,UAAAooF,eAAP,SAAsBnmF,GAClB,OAAInC,KAAKilF,YAAYpS,MACV7yE,KAAK8mF,eAAezjB,OAAOlhE,GAE/B,GAAGA,EAAMwxE,YASbia,EAAA1tF,UAAAguF,cAAP,SAAqBH,QAAA,IAAAA,IAAAA,GAAA,GACjB/tF,KAAK6kF,SAAW7kF,KAAK4kF,cAAcxC,aAAapiF,KAAK6kF,UACrD7kF,KAAK8tF,gBAAkBtJ,GAAYb,KACnC3jF,KAAK+tF,iBAAmBA,GASrBH,EAAA1tF,UAAAkuF,UAAP,SAAiBL,QAAA,IAAAA,IAAAA,GAAA,GACb/tF,KAAK6kF,SAAW7kF,KAAK4kF,cAAc1C,aAAaliF,KAAK6kF,UACrD7kF,KAAK8tF,gBAAkBtJ,GAAYZ,KACnC5jF,KAAK+tF,iBAAmBA,GAwDrBH,EAAA1tF,UAAAgvF,mBAAP,SAA0BlhF,EAAYi0E,GAAtC,IAAArtE,EAAA5U,KACI8Z,EAAA5Z,UAAM2nF,iBAAgBjnF,KAAAZ,KAACiiF,GACvB1lC,sBAAsB,WACd3nC,EAAKu6E,aACLv6E,EAAKu6E,WAAW/b,KAAOplE,EACvB4G,EAAKu6E,WAAWz8E,GAAG4tB,cAAciT,YAStCq6C,EAAA1tF,UAAAkvF,qBAAP,SAA4B98E,EAAOtE,EAAYi0E,GAA/C,IAAArtE,EAAA5U,KACI8Z,EAAA5Z,UAAM4nF,mBAAkBlnF,KAAAZ,KAACsS,EAAO2vE,GAEhC1lC,sBAAsB,WACd3nC,EAAKu6E,aACLv6E,EAAKu6E,WAAW/b,KAAOplE,EACvB4G,EAAKu6E,WAAWz8E,GAAG4tB,cAAciT,YAStCq6C,EAAA1tF,UAAAmvF,iBAAP,eAEUjc,EAAOpzE,KAAK2uF,WAElB,MAAO,CACHW,SAAUtvF,KAAKgnF,kBAAkB3jB,OAAO+P,GACxCiR,QAASrkF,KAAK6mF,iBAAiBxjB,OAAO+P,KASvCwa,EAAA1tF,UAAAqvF,aAAP,SAAoBl7E,GACZA,EAASouE,aACTziF,KAAKkuF,gBAGL75E,EAASmuE,aACTxiF,KAAKouF,YAGTpuF,KAAKmnF,qBAAqB9yE,EAAS++D,MACZ,UAAnBpzE,KAAKgwC,WACLhwC,KAAKwvF,yBAAyBn7E,EAAS++D,MAE3CpzE,KAAK+0C,YAAYxyB,KAAKviB,KAAKklF,gBAOxB0I,EAAA1tF,UAAAuvF,aAAP,SAAoBzhF,GAApB,IAAA4G,EAAA5U,KACIA,KAAK8tF,gBAAkB9/E,EAAKo+E,YAC5BpsF,KAAK+tF,kBAAmB,EACxB/tF,KAAK2rF,SAAW39E,EAAK29E,SACrB3rF,KAAK0vF,SAAW,SAACxtF,OACP4wE,EAAMl+D,EAAK05E,SAAS5N,MAAMppE,KAAK,SAAC2E,GAAS,OAAAA,EAAKm3D,KAAKA,KAAKhjE,YAAclO,EAAKkO,YAC7E0iE,GACAl+D,EAAK05E,SAASpC,eAAeV,cAAc1Y,EAAIxyC,cAAetyB,EAAK/M,KAAK,IAGhFjB,KAAK6kF,SAAW7kF,KAAK2rF,UAOlBiC,EAAA1tF,UAAAyvF,YAAP,SAAmBr9E,GAAnB,IAAAsC,EAAA5U,KACIA,KAAK6kF,SAAW7kF,KAAK4kF,cAAc5C,iBAAiB1vE,EAAO,QAAStS,KAAKiiF,eACzEjiF,KAAK0nF,WAAaF,GAAaj0B,QAE/BhX,sBAAsB,eACZiL,EAAO5yC,EAAKg7E,WAAWt4E,KAAK,SAAChV,EAAeslF,GAAgB,OAAAA,IAAQhzE,EAAKqtE,gBAC3Ez6B,GAAQA,EAAKlnB,cAAciT,WAQhCq6C,EAAA1tF,UAAA2vF,iBAAP,SAAwB7hF,EAAYi0E,EAAuB3vE,GAA3D,IAAAsC,EAAA5U,KACIA,KAAK0nF,WAAaF,GAAaJ,KAC/BpnF,KAAKiiF,cAAgBA,EACrB1lC,sBAAsB,WAClB3nC,EAAKk7E,WAAW1c,KAAOplE,EACvB4G,EAAKm7E,WAAWz9E,EAAMtR,WAItB4sF,EAAA1tF,UAAA6vF,WAAR,SAAmB/uF,OACT6xE,EAAQ7yE,KAAK8vF,WAAWlH,UAAUtxE,KAAK,SAAChV,GAC1C,OAAAA,EAAEqR,QAAU8lC,SAASz4C,EAAO+7B,cAAcizD,WAAW,cAAc7tF,MAAO,MAC1E0wE,GAASA,EAAMvyC,cAAciT,SAO9Bq6C,EAAA1tF,UAAA+vF,mBAAP,SAA0BjiF,EAAYsE,EAAO2vE,GAC5B,MAAT3vE,EAAMrR,KAA+B,aAATqR,EAAMrR,KAAkC,UAATqR,EAAMrR,MACjEqR,EAAM23B,iBACNjqC,KAAK6vF,iBAAiB7hF,EAAMi0E,EAAe3vE,KAY5Cs7E,EAAA1tF,UAAAgnF,aAAP,SAAoB/kF,GAApB,IAAAyS,EAAA5U,KACI8Z,EAAA5Z,UAAMgnF,aAAYtmF,KAAAZ,KAACmC,GAEnBnC,KAAK8uF,WAAWr8E,QAAQ,SAAC4M,GACrBA,EAAK6lE,cAAgBtwE,EAAKswE,cAC1B7lE,EAAK2kE,cAAe,IAExBhkF,KAAKsmE,kBAAkBtmE,KAAKklF,gBASxB0I,EAAA1tF,UAAAsvF,yBAAR,SAAiCrtF,GAC7BnC,KAAK8uF,WAAWr8E,QAAQ,SAAA1Q,GACpBA,EAAEskF,wBAAwBlkF,MAQ3ByrF,EAAA1tF,UAAAgwF,YAAP,SAAmB1vF,GAEf,OADaR,KAAK4kF,cAAcrE,UAAUvgF,KAAK6kF,SAAU,QAASrkF,IAS/DotF,EAAA1tF,UAAAq3B,WAAP,SAAkB/2B,OACR4yE,EAAOpzE,KAAKkwF,YAAY1vF,GAC9B,OAAOR,KAAK4uF,gBAAgBxb,EAAM5yE,IAO/BotF,EAAA1tF,UAAAiwF,cAAP,SAAqB79E,GAKjB,GAJItS,KAAKukF,uBAAyBC,GAAY1vB,MAC1C90D,KAAKykF,aAAaviF,OAGlBlC,KAAK0nF,aAAeF,GAAaj0B,QAArC,CAOA,QAHIq4B,EAAY5rF,KAAa,SACzBozE,EAAOwY,EAAUlL,MAAMppE,KAAK,SAAChY,GAAM,OAAAA,EAAEykB,YAEjCqvD,GAAQwY,EAAUI,eACtBJ,EAAYA,EAAUI,cACtB5Y,EAAOwY,EAAUlL,MAAMppE,KAAK,SAAChY,GAAM,OAAAA,EAAEykB,WAErCqvD,GAAQA,EAAK0Y,cAAgB9rF,KAAK+tF,iBAClCliC,WAAW,WACPunB,EAAK9yC,cAAciT,SACpBkG,SAASvuC,GAAaoe,QAAQrlB,OAAOP,SAAU,MAC3C1D,KAAK0vF,UAAap9E,EAAM89E,UAAY5L,GAAYZ,MAAQtxE,EAAM89E,UAAY5L,GAAYb,MAC7F3jF,KAAK0vF,SAAS1vF,KAAK2rF,UAEvB3rF,KAAK8tF,gBAAkBtJ,GAAY1vB,OAUhC84B,EAAA1tF,UAAAmwF,kBAFP,SAEyB/9E,GAFzB,IAAAsC,EAAA5U,KAKI,GAFAsS,EAAM23B,iBAEFjqC,KAAK0nF,aAAeF,GAAaj0B,QAArC,CASA,QAFI+8B,EAHEC,EAA2B,aAAdj+E,EAAMrR,IACnBo9E,EAAOkS,EAAa,GAAK,EAC3B3E,EAAY5rF,KAAa,UAGrBswF,GAAc1E,GAClB0E,EAAa1E,EAAUlL,MAAMppE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBjiB,SAASmyE,gBAC5E5E,EAAYA,EAAUI,cAG1B,GAAIsE,EAAY,CACZtwF,KAAK2rF,SAAW,IAAIx7E,KAAKmgF,EAAWld,KAAKA,UAErCR,EAAO5yE,KAAK2rF,SAASjY,cAErBb,EAAQ7yE,KAAK2rF,SAAShY,WAAa0K,EACnCkS,EACI1d,EAAQ,KAAMA,EAAQ,EAAGD,GAAQyL,GAEjCxL,EAAQ,IAAKA,EAAQ,GAAID,GAAQyL,OAGnCztE,EAAQ8tE,GAAW1+E,KAAK2rF,SAASjY,cAAeb,GAElDC,EAAM9yE,KAAK2rF,SAASzY,UACpBJ,EAAMliE,EAAM,KAAMkiE,EAAMliE,EAAM,IAElC5Q,KAAK2rF,SAAS1Y,QAAQH,GACtB9yE,KAAK2rF,SAAS5K,SAASlO,GACvB7yE,KAAK2rF,SAAS7K,YAAYlO,GAE1B5yE,KAAK0vF,SAAW,SAACxtF,OAETuuF,EACJ,IAFA7E,EAAYh3E,EAAa,UAEhB67E,GAAW7E,GAAe6E,IAAYA,EAAQlO,gBACnDkO,EAAU7E,EAAUlL,MAAMppE,KAAK,SAAChY,GAAM,OAAAA,EAAE8zE,KAAKA,KAAKhjE,YAAclO,EAAKkO,YACrEw7E,EAAYA,EAAUI,cAEtByE,GAAWA,EAAQ3E,aAAe2E,EAAQnwD,cAAciT,SAIhEg9C,EAAcvwF,KAAKouF,WAAU,GAC7BpuF,KAAKkuF,eAAc,KAWpBN,EAAA1tF,UAAAwwF,qBAFP,SAE4Bp+E,GAF5B,IAAAsC,EAAA5U,KAKI,GAFAsS,EAAM23B,iBAEFjqC,KAAK0nF,aAAeF,GAAaj0B,QAArC,KAIMg9B,EAA2B,aAAdj+E,EAAMrR,IACnBo9E,EAAOkS,EAAa,GAAK,EAC/BvwF,KAAK6kF,SAAW7kF,KAAK4kF,cAAcrE,UAAUvgF,KAAK6kF,SAAU,OAAQxG,GAEpEr+E,KAAK8tF,gBAAkByC,EAAa/L,GAAYZ,KAAOY,GAAYb,KACnE3jF,KAAK+tF,kBAAmB,EAKxB,QAFIuC,EADA1E,EAAY5rF,KAAa,UAGrBswF,GAAc1E,GAClB0E,EAAa1E,EAAUlL,MAAMppE,KAAK,SAAC87D,GAAS,OAAAA,EAAK9yC,gBAAkBjiB,SAASmyE,gBAC5E5E,EAAYA,EAAUI,cAG1B,GAAIsE,EAAY,CACZtwF,KAAK2rF,SAAW,IAAIx7E,KAAKmgF,EAAWld,KAAKA,UAEnCR,EAAO5yE,KAAK2rF,SAASjY,cAAgB2K,EAErCztE,EAAQ8tE,GAAW9L,EAAM5yE,KAAK2rF,SAAShY,YAEzCb,EAAM9yE,KAAK2rF,SAASzY,UACpBJ,EAAMliE,EAAM,KAAMkiE,EAAMliE,EAAM,IAElC5Q,KAAK2rF,SAAS1Y,QAAQH,GACtB9yE,KAAK2rF,SAAS7K,YAAYlO,GAE1B5yE,KAAK0vF,SAAW,SAACxtF,OAETuuF,EACJ,IAFA7E,EAAYh3E,EAAa,UAEhB67E,GAAW7E,GAAe6E,IAAYA,EAAQlO,gBACnDkO,EAAU7E,EAAUlL,MAAMppE,KAAK,SAAChY,GAAM,OAAAA,EAAE8zE,KAAKA,KAAKhjE,YAAclO,EAAKkO,YACrEw7E,EAAYA,EAAUI,cAEtByE,GAAWA,EAAQ3E,aAAe2E,EAAQnwD,cAAciT,YAWjEq6C,EAAA1tF,UAAAipF,cADP,SACqB72E,GACbtS,KAAKsuF,UACLtuF,KAAKsuF,SAASnF,cAAc72E,IAU7Bs7E,EAAA1tF,UAAAkpF,aADP,SACoB92E,GACZtS,KAAKsuF,UACLtuF,KAAKsuF,SAASlF,aAAa92E,IAU5Bs7E,EAAA1tF,UAAAqjF,UADP,SACiBjxE,GACTtS,KAAKukF,uBAAyBC,GAAY1vB,MAC1C90D,KAAKquF,gBAAgB/7E,IAQtBs7E,EAAA1tF,UAAAsmC,YAAP,WACQxmC,KAAK+uF,qBACL/uF,KAAK+uF,oBAAoB7gD,eAUzB0/C,EAAA1tF,UAAA0uF,gBAAR,SAAwBzsF,EAAa3B,GAArC,IAAAoU,EAAA5U,KAQI,MAAO,CAAE49C,UAPSx9C,EAAA,CACduT,MAAOnT,EACPorF,UAAW,WAAM,OAAAh3E,EAAKi7E,iBAAiB1tF,EAAO3B,IAC9CmwF,SAAU,WAAM,OAAA/7E,EAAKs6E,mBAAmB/sF,EAAO3B,KAC5CR,KAAK4kF,cAAc3D,cAAc9+E,EAAOnC,KAAKkhF,OAAQlhF,KAAKglF,cACzD,CAAC,MAAO,OAAQ,QAAS,MAAO,eAUpC4I,EAAA1tF,UAAA2uF,iBAAR,SAAyBC,GAAzB,IAAAl6E,EAAA5U,KACI8uF,EAAWr8E,QAAQ,SAACwJ,EAAMtI,OAChBs4E,EAAgBr3E,EAAKg8E,aAAaj9E,EAAQ,GAC1Cq4E,EAAgBp3E,EAAKg8E,aAAaj9E,EAAQ,GAChDsI,EAAK+vE,cAAgBA,EACrB/vE,EAAKgwE,cAAgBA,KASrB2B,EAAA1tF,UAAA0wF,aAAR,SAAqBj9E,GACjB,OAAe,IAAXA,GAAgBA,IAAU3T,KAAK8uF,WAAWnuF,OACnC,KAEAX,KAAK8uF,WAAWl8E,UAAUe,wBAr3B5Cm+B,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIi5D,OAAO,EACPnc,QAAS8V,EAAAA,kBACT7V,YAAa0hC,IAGrBiD,WAAY,CACRhvB,EAAAA,QAAQ,cAAe,CACnBivB,EAAAA,WAAW,YAAaxgB,EAAAA,aAAavsE,IACrC+sF,EAAAA,WAAW,YAAaxgB,EAAAA,aAAatnE,GAAe,CAChD/E,OAAQ,CACJP,SAAU,MACV8E,UAAW,SAIvBq5D,EAAAA,QAAQ,gBAAiB,CACrBivB,EAAAA,WAAW,YAAaxgB,EAAAA,aAAarlE,GAAa,CAC9ChH,OAAQ,CACJ6G,aAAc,uBAGtBgmF,EAAAA,WAAW,YAAaxgB,EAAAA,aAAaplE,GAAc,CAC/CjH,OAAQ,CACJ6G,aAAc,yBAK9B4D,SAAU,eACVqjC,SAAA,08HAgBC5C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,yBAYAA,EAAAA,wBAYAA,EAAAA,gCAYAA,EAAAA,+BAkBAA,EAAAA,wBA+BAwgC,EAAAA,YAAWnhC,KAAA,CAAC,+BASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qCASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDAWZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CASZyoC,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE0oC,KAAMsxC,GAAwBrxC,UAAQ,wBAQ5D+mC,EAAAA,aAAY1vE,KAAA,CAAC,iCASbyoC,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE0oC,KAAMmzC,GAAuBlzC,UAAQ,sBAS3DF,EAAAA,UAASzoC,KAAA,CAAC,OAAQ,CAAE0oC,KAAMg2C,GAAsB/1C,UAAQ,wBAQxD+mC,EAAAA,aAAY1vE,KAAA,CAAC,OAAQ,CAAE0oC,KAAMg2C,2BAS7Bj2C,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE2oC,UAAQ,0BASpCF,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE2oC,UAAQ,qCA8GpCwV,EAAAA,aAAYn+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAA22B,KAAqC,CAAEtsC,KAAMssC,GAAoCrsC,UAAQ,wCAQvHwV,EAAAA,aAAYn+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAA42B,KAAwC,CAAEvsC,KAAMusC,GAAuCtsC,UAAQ,+BAkV7H/nC,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,YAAS,CAAAkE,KAC3CtD,EAAAA,aAAYZ,KAAA,CAAC,iBAAkB,CAAC,yCA4DhCY,EAAAA,aAAYZ,KAAA,CAAC,uBAAwB,CAAC,YAAS,CAAAkE,KAC/CtD,EAAAA,aAAYZ,KAAA,CAAC,yBAA0B,CAAC,kCAqDxCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAY9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,8BAY7BY,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,cA4DvC4/E,EAx3BA,CAkC0CtG,ICvEtC91C,GAAU,EACdu/C,GAAA,SAAAj3E,GAAA,SAAAi3E,IAAA,IAAAn8E,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAyCW4U,EAAAjH,GAAK,oBAAoB6jC,KAQzB58B,EAAAszE,YAAa,EA6BbtzE,EAAAo8E,WAAa,KAkLxB,OA9N6Ch5E,EAAAA,EAAAA,GAiDlC+4E,EAAA7wF,UAAAiwF,cAAP,WACInwF,KAAKgxF,WAAa,IAMfD,EAAA7wF,UAAA4nF,mBAAP,SAA0Bx1E,GAA1B,IAAAsC,EAAA5U,KACI8Z,EAAA5Z,UAAM4nF,mBAAkBlnF,KAAAZ,KAACsS,GAEZ,eAATA,EAAMrR,KAAqC,UAATqR,EAAMrR,MACxCqR,EAAM23B,iBACNjqC,KAAKixF,YAGI,cAAT3+E,EAAMrR,KAAoC,SAATqR,EAAMrR,MACvCqR,EAAM23B,iBACNjqC,KAAKkxF,gBAGT30C,sBAAsB,WACd3nC,EAAKu6E,YAAcv6E,EAAKu6E,WAAWz8E,GAAG4tB,cAAciT,WAOzDw9C,EAAA7wF,UAAA2nF,iBAAP,WAAA,IAAAjzE,EAAA5U,KACI8Z,EAAA5Z,UAAM2nF,iBAAgBjnF,KAAAZ,MAEtBu8C,sBAAsB,WAClB3nC,EAAKu6E,WAAWz8E,GAAG4tB,cAAciT,WAOlCw9C,EAAA7wF,UAAA+wF,SAAP,WACIjxF,KAAKgxF,WAAa,OAClBhxF,KAAK6kF,SAAW7kF,KAAK4kF,cAAcvC,YAAYriF,KAAK6kF,UAEpD7kF,KAAKmlF,WAAWnlF,KAAK6kF,UACrB7kF,KAAK+0C,YAAYxyB,KAAKviB,KAAKklF,gBAMxB6L,EAAA7wF,UAAAixF,WAAP,SAAkB7+E,GACD,MAATA,EAAMrR,KAA+B,aAATqR,EAAMrR,KAAkC,UAATqR,EAAMrR,MACjEqR,EAAM23B,iBACN33B,EAAMmyB,kBAENzkC,KAAKixF,aAONF,EAAA7wF,UAAAgxF,aAAP,WACIlxF,KAAKgxF,WAAa,OAClBhxF,KAAK6kF,SAAW7kF,KAAK4kF,cAActC,YAAYtiF,KAAK6kF,UAEpD7kF,KAAKmlF,WAAWnlF,KAAK6kF,UACrB7kF,KAAK+0C,YAAYxyB,KAAKviB,KAAKklF,gBAMxB6L,EAAA7wF,UAAAkxF,eAAP,SAAsB9+E,GACL,MAATA,EAAMrR,KAA+B,aAATqR,EAAMrR,KAAkC,UAATqR,EAAMrR,MACjEqR,EAAM23B,iBACN33B,EAAMmyB,kBAENzkC,KAAKkxF,iBAONH,EAAA7wF,UAAA+pF,WAAP,SAAkB33E,GAAlB,IAAAsC,EAAA5U,KACIA,KAAK6kF,SAAW,IAAI10E,KAAKmC,EAAMohE,cAAephE,EAAMqhE,WAAYrhE,EAAM4gE,WACtElzE,KAAK0nF,WAAaF,GAAaj0B,QAE/BvzD,KAAKmlF,WAAW7yE,GAChBtS,KAAK+0C,YAAYxyB,KAAKviB,KAAKklF,eAE3B3oC,sBAAsB,WACd3nC,EAAKy8E,UAAYz8E,EAAKy8E,SAAS/wD,cAAciT,WAOlDw9C,EAAA7wF,UAAAsoF,YAAP,SAAmBl2E,GACftS,KAAKmlF,WAAW7yE,GAChBtS,KAAK+0C,YAAYxyB,KAAKviB,KAAKklF,gBASxB6L,EAAA7wF,UAAAilF,WAAP,SAAkBhjF,GACd,IAAKA,EACD,OAAO,IAAIgO,KAIf2J,EAAA5Z,UAAMilF,WAAUvkF,KAAAZ,KAACmC,GACjBnC,KAAK6kF,SAAW1iF,GAMb4uF,EAAA7wF,UAAA+nE,WAAP,SAAkB9lE,GAGVA,IACAnC,KAAK6kF,SAAW7kF,KAAKklF,cAAgB/iF,IAQtC4uF,EAAA7wF,UAAAoxF,gBADP,SACuBh/E,GACnBA,EAAM23B,iBACNjqC,KAAKgxF,WAAa,OAClBhxF,KAAK6kF,SAAW7kF,KAAK4kF,cAActC,YAAYtiF,KAAK6kF,WAOjDkM,EAAA7wF,UAAAmwF,kBADP,SACyB/9E,GACrBA,EAAM23B,iBACNjqC,KAAKgxF,WAAa,OAClBhxF,KAAK6kF,SAAW7kF,KAAK4kF,cAAcvC,YAAYriF,KAAK6kF,WAOjDkM,EAAA7wF,UAAAipF,cADP,SACqB72E,GACbtS,KAAK8vF,aACL9vF,KAAK8vF,WAAWp9E,GAAG4tB,cAAciT,QACjCvzC,KAAK8vF,WAAW3G,cAAc72E,KAQ/By+E,EAAA7wF,UAAAkpF,aADP,SACoB92E,GACZtS,KAAK8vF,aACL9vF,KAAK8vF,WAAWp9E,GAAG4tB,cAAciT,QACjCvzC,KAAK8vF,WAAW1G,aAAa92E,yBA7PxCw/B,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIi5D,OAAO,EACPnc,QAAS8V,EAAAA,kBACT7V,YAAa6kC,IAGrBF,WAAY,CACRhvB,EAAAA,QAAQ,cAAe,CACnBivB,EAAAA,WAAW,YAAaxgB,EAAAA,aAAavsE,IACrC+sF,EAAAA,WAAW,YAAaxgB,EAAAA,aAAatnE,GAAe,CAChD/E,OAAQ,CACJP,SAAU,MACV8E,UAAW,SAIvBq5D,EAAAA,QAAQ,gBAAiB,CACrBivB,EAAAA,WAAW,YAAaxgB,EAAAA,aAAarlE,GAAa,CAC9ChH,OAAQ,CACJ6G,aAAc,uBAGtBgmF,EAAAA,WAAW,YAAaxgB,EAAAA,aAAaplE,GAAc,CAC/CjH,OAAQ,CACJ6G,aAAc,yBAK9B4D,SAAU,mBACVqjC,SAAA,uwDAOC5C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,0BAQAwgC,EAAAA,YAAWnhC,KAAA,CAAC,0CAMZyoC,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE0oC,KAAMsxC,GAAwBrxC,UAAQ,wBAM5DF,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE0oC,KAAMmzC,GAAuBlzC,UAAQ,sBAM3DF,EAAAA,UAASzoC,KAAA,CAAC,OAAQ,CAAE0oC,KAAMg2C,GAAsB/1C,UAAQ,sBAMxDF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,6BAkJhC/nC,EAAAA,aAAYZ,KAAA,CAAC,iBAAkB,CAAC,sCAUhCY,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,kCAUlCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAW9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,cAOlC+iF,EAhQA,CAkC6CzJ,ICpD7CiK,GAAA,WAGA,SAAAA,KAOA,OAHWA,EAAArxF,UAAAsE,UAAP,SAAiBsqF,GACb,OAAO,IAAInvF,MAAMmvF,wBALxBnmE,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,wBAMVuxE,EAVA,iBAiBI,SAAAC,IACIxxF,KAAKyxF,SAAW,IAAI1R,GAM5B,OAJWyR,EAAAtxF,UAAAsE,UAAP,SAAiBmP,EAAekxE,EAAgB6M,QAAA,IAAAA,IAAAA,GAAA,OACtCte,EAAOpzE,KAAKyxF,SAASlR,UAAUsE,EAAU,QAASlxE,GACxD,OAAO+9E,EAAYte,EAAOA,EAAKO,gCAVtChrD,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,2DAWVwxE,KCFAG,GAAA,WAAA,SAAAA,KA6BiC,2BA7BhC3iF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVw7E,GACAiC,GACAkB,GACA5K,GACAF,GACAH,GACAM,GACAC,GACA8E,GACA6B,GACAkH,GACAQ,GACAC,IAEJtiF,QAAS,CACL0+E,GACAlB,GACA1E,GACA6B,GACAkH,GACA/N,GACAF,GACAH,GACAM,IAEJxmC,QAAS,CAACC,EAAAA,aAAck1C,EAAAA,YAAala,QAERia,EA7BjC,GCPIngD,GAAU,EAMdqgD,GAAA,WAAA,SAAAA,IASW7xF,KAAAi1C,SAAW,kBAYXj1C,KAAAiR,MAAQ,OAWRjR,KAAAmN,OAAS,OAOTnN,KAAA0xC,KAAO,MAClB,2BAxCCjjC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,uDAMTygC,EAAAA,YAAWnhC,KAAA,CAAC,wCAUZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gBAAa,CAAAkE,KACzBi9B,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7BvD,EAAAA,sBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iBAAc,CAAAkE,KAC1BvD,EAAAA,oBAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,cAAW,CAAAkE,KACvBvD,EAAAA,SAELkjF,EAxCA,GA6CAC,GAAA,WAAA,SAAAA,IASW9xF,KAAAi1C,SAAW,kBAWXj1C,KAAA6zD,UAAW,EAUX7zD,KAAA0xC,KAAO,SAClB,2BA/BCI,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,kBACVqjC,SAAA,sbAMC5C,EAAAA,YAAWnhC,KAAA,CAAC,2CAUZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oCAAiC,CAAAkE,KAC7CvD,EAAAA,oBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gBAEjB8jF,EA/BA,GAqCAC,GAAA,WAAA,SAAAA,KAGyC,2BAHxCtjF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yBAE2BqjF,EAHzC,GASAC,GAAA,WAAA,SAAAA,IAQWhyF,KAAAi1C,SAAW,0BACtB,2BATCxmC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6DAMTygC,EAAAA,YAAWnhC,KAAA,CAAC,mCAEjBgkF,EATA,GAeAC,GAAA,WAAA,SAAAA,IAQWjyF,KAAAi1C,SAAW,4BACtB,2BATCxmC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gEAMTygC,EAAAA,YAAWnhC,KAAA,CAAC,sCAEjBikF,EATA,GAaAC,GAAA,WAAA,SAAAA,IASWlyF,KAAAi1C,SAAW,mBACtB,2BAVCxmC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,yDAMTygC,EAAAA,YAAWnhC,KAAA,CAAC,6BAEjBkkF,EAVA,GAeAC,GAAA,WAAA,SAAAA,IAcWnyF,KAAA0xC,KAAO,SAClB,2BAfCjjC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,oDAUTygC,EAAAA,YAAWnhC,KAAA,CAAC,cAAW,CAAAkE,KACvBvD,EAAAA,SAELwjF,EAfA,OAwCI5+B,QAAU,UACV6+B,SAAW,0BAGf,SAAAC,IAkBWryF,KAAA2N,GAAK,YAAY6jC,KAWjBxxC,KAAA0xC,KAAO,QAYP1xC,KAAAkS,KAA6BogF,GAAY/+B,QAoBzCvzD,KAAAo8E,YAAa,EACxB,OAhBI58E,OAAAgC,eACI6wF,EAAAnyF,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKkS,OAASogF,GAAYF,8DAhDxCtgD,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,WACVqjC,SAAA,ySAcC5C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,cAAW,CAAAkE,KACvBvD,EAAAA,oBAWAwgC,EAAAA,YAAWnhC,KAAA,CAAC,mBAAgB,CAAAkE,KAC5BvD,EAAAA,8BAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gDAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+BAA4B,CAAAkE,KACxCvD,EAAAA,SAEL0jF,SAGI9+B,QAAU,UACVg/B,QAAU,WAMdC,GAAA,WAQI,SAAAA,EAAyDC,GAAAzyF,KAAAyyF,KAAAA,EAFjDzyF,KAAA0yF,eAAgB,EAiBjB1yF,KAAA2yF,OAAwC,UAgCxC3yF,KAAA6U,SAAU,EAarB,OA/BIrV,OAAAgC,eACIgxF,EAAAtyF,UAAA,kBAAe,KADnB,WAEI,OAAOF,KAAK2yF,SAAWC,GAAqBL,yCAkBhDC,EAAAtyF,UAAA8hD,YAAA,SAAYC,GACR,IAAK,IAAMvU,KAAQuU,EACF,aAATvU,IACA1tC,KAAK0yF,eAAgB,IAKjCF,EAAAtyF,UAAA2uC,SAAA,WACI7uC,KAAK6zD,UAAY7zD,KAAK0yF,eAAiB1yF,KAAKyyF,KAAKrW,gCAlExDtqC,EAAAA,UAAS9jC,KAAA,CAAC,CAEPU,SAAU,mBACVqjC,SAAA,qTAK+DsgD,GAAgBtxF,WAAA,CAAA,CAAAmR,KAAlEg9B,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAACqkF,yCAa/BljD,EAAAA,YAAWnhC,KAAA,CAAC,2BAAwB,CAAAkE,KACpCvD,EAAAA,wBAOAwgC,EAAAA,YAAWnhC,KAAA,CAAC,qCAAkC,CAAAkE,KAC9CvD,EAAAA,+BAOAwgC,EAAAA,YAAWnhC,KAAA,CAAC,oDAgBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oCAAiC,CAAAkE,KAC7CvD,EAAAA,SAcL6jF,EApEA,GAyEAK,GAAA,WAAA,SAAAA,KAyB6B,2BAzB5B7jF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVojF,GACAP,GACAD,GACAK,GACAM,GACAL,GACAH,GACAC,GACAF,IAEJ7iF,QAAS,CACLmjF,GACAP,GACAD,GACAK,GACAM,GACAL,GACAH,GACAC,GACAF,IAEJt1C,QAAS,CAACC,EAAAA,aAAc4W,QAECu/B,EAzB7B,GCxUIrhD,GAAU,MAEUsjB,KAAA,EAAM8uB,KAAA,EAAMD,KAAA,4DAuBpC,IAAAmP,GAAA,WAmKI,SAAAA,EAAoBhvD,EAA6BivD,GAA7B/yF,KAAA8jC,QAAAA,EAA6B9jC,KAAA+yF,aAAAA,EAjJhB/yF,KAAA0xC,KAAO,SAYjC1xC,KAAA2N,GAAK,gBAAgB6jC,KAUZxxC,KAAAgzF,MAAO,EAUPhzF,KAAAizF,OAAQ,EA8CRjzF,KAAAkzF,YAAa,EAUZlzF,KAAAmzF,eAAiB,IAAIhqE,EAAAA,aAUrBnpB,KAAAozF,aAAe,IAAIjqE,EAAAA,aAUnBnpB,KAAAqzF,eAAiB,IAAIlqE,EAAAA,aAUrBnpB,KAAAszF,iBAAmB,IAAInqE,EAAAA,aAUvBnpB,KAAAuzF,kBAAoB,IAAIpqE,EAAAA,aASlCnpB,KAAAwzF,OAA8B,GAM7BxzF,KAAAyzF,OAAS,EAoSrB,OA1YIj0F,OAAAgC,eACIsxF,EAAA5yF,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK0zF,eAWhB,SAAavxF,GACTnC,KAAK0zF,WAAavxF,EAClBnC,KAAK2zF,oDASTn0F,OAAAgC,eACIsxF,EAAA5yF,UAAA,WAAQ,KADZ,WAEI,OAAO,mCAkFJ4yF,EAAA5yF,UAAAsmC,YAAP,WACIxmC,KAAK4zF,YAAa,EACd5zF,KAAK6zF,eACLC,cAAc9zF,KAAK6zF,gBAOpBf,EAAA5yF,UAAA6zF,aAAP,SAAoBC,GAChB,MAAO,SAAQA,EAAMrgF,MAAQ,GAAC,OAAO3T,KAAKi0F,OAU9Cz0F,OAAAgC,eAAWsxF,EAAA5yF,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAKyzF,wCAUhBj0F,OAAAgC,eAAWsxF,EAAA5yF,UAAA,UAAO,KAAlB,WACI,OAAQF,KAAKk0F,cAAoBl0F,KAAKk0F,cAAcvgF,MAAvB,mCAUjCnU,OAAAgC,eAAWsxF,EAAA5yF,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKm0F,0CAUhB30F,OAAAgC,eAAWsxF,EAAA5yF,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK4zF,4CAShBp0F,OAAAgC,eAAIsxF,EAAA5yF,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAUjBwyD,EAAA5yF,UAAA4N,IAAP,SAAW6F,eACP,IAAmB,IAAA7D,EAAAC,EAAA/P,KAAKwzF,QAAMvjF,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA3B,IAAM2iB,EAAI5U,EAAA9N,MACX,GAAI0iB,EAAKlR,QAAUA,EACf,OAAOkR,yGAYZiuE,EAAA5yF,UAAAwN,IAAP,SAAWsmF,GACPA,EAAMrgF,MAAQ3T,KAAKi0F,MACnBj0F,KAAKwzF,OAAOhxF,KAAKwxF,GACjBh0F,KAAKyzF,QAAU,EAEI,IAAfzzF,KAAKi0F,OAAeD,EAAM7c,QAC1Bn3E,KAAKiyD,OAAO+hC,GACO,IAAfh0F,KAAKi0F,OACLj0F,KAAKgmC,QAGTguD,EAAM7c,QAAS,EAGnBn3E,KAAKozF,aAAa7wE,KAAK,CAAE6xE,SAAUp0F,KAAMg0F,MAAKA,KAU3ClB,EAAA5yF,UAAA2N,OAAP,SAAcmmF,GACV,GAAIA,GAASA,IAAUh0F,KAAK8N,IAAIkmF,EAAMrgF,OAAQ,CAS1C,GARIqgF,EAAMrgF,QAAU3T,KAAKq0F,UACrBL,EAAM7c,QAAS,EACfn3E,KAAKkC,QAGTlC,KAAKwzF,OAAOt4E,OAAO84E,EAAMrgF,MAAO,GAChC3T,KAAKyzF,QAAU,GAEVzzF,KAAKi0F,MAEN,YADAj0F,KAAKk0F,cAAgB,MAIzB,IAAK,IAAI1zF,EAAI,EAAGA,EAAIR,KAAKi0F,MAAOzzF,IAC5BR,KAAKwzF,OAAOhzF,GAAGmT,MAAQnT,EAG3BR,KAAKqzF,eAAe9wE,KAAK,CAAE6xE,SAAUp0F,KAAMg0F,MAAKA,MAWjDlB,EAAA5yF,UAAA+xD,OAAP,SAAc+hC,EAA0BxsF,QAAA,IAAAA,IAAAA,EAAuBqkF,GAAU/2B,UAC/Dtf,EAAWw+C,EAAMrgF,MACnBnM,IAAcqkF,GAAU/2B,OACxBttD,EAAYguC,EAAWx1C,KAAKq0F,QAAUxI,GAAUjI,KAAOiI,GAAUlI,MAGjEqQ,GAASA,IAAUh0F,KAAKk0F,eACxBl0F,KAAKs0F,QAAQN,EAAOxsF,IAWrBsrF,EAAA5yF,UAAAgC,KAAP,eACUyR,GAAS3T,KAAKq0F,QAAU,GAAKr0F,KAAKi0F,MAExC,GAAc,IAAVtgF,GAAgB3T,KAAKgzF,KAIzB,OAAOhzF,KAAKiyD,OAAOjyD,KAAK8N,IAAI6F,GAAQk4E,GAAUjI,MAH1C5jF,KAAKo+E,QAaN0U,EAAA5yF,UAAAq0F,KAAP,eACU5gF,EAAQ3T,KAAKq0F,QAAU,EAAI,EAC7Br0F,KAAKi0F,MAAQ,EAAIj0F,KAAKq0F,QAAU,EAEpC,GAAKr0F,KAAKgzF,MAAQr/E,IAAU3T,KAAKi0F,MAAQ,EAIzC,OAAOj0F,KAAKiyD,OAAOjyD,KAAK8N,IAAI6F,GAAQk4E,GAAUlI,MAH1C3jF,KAAKo+E,QAeN0U,EAAA5yF,UAAA8lC,KAAP,WACShmC,KAAKm0F,WACNn0F,KAAKm0F,UAAW,EAChBn0F,KAAKuzF,kBAAkBhxE,KAAKviB,MAC5BA,KAAK2zF,qBAaNb,EAAA5yF,UAAAk+E,KAAP,WACQp+E,KAAKizF,QACLjzF,KAAKm0F,UAAW,EAChBn0F,KAAKszF,iBAAiB/wE,KAAKviB,MAC3BA,KAAKw0F,mBAML1B,EAAA5yF,UAAAo0F,QAAR,SAAgBN,EAA0BxsF,GAClCxH,KAAK4zF,aAITI,EAAMxsF,UAAYA,EAClBwsF,EAAM7c,QAAS,EAEXn3E,KAAKk0F,gBACLl0F,KAAKk0F,cAAc1sF,UAAYA,EAC/BxH,KAAKk0F,cAAc/c,QAAS,GAGhCn3E,KAAKk0F,cAAgBF,EAErBh0F,KAAKmzF,eAAe5wE,KAAK,CAAE6xE,SAAUp0F,KAAMg0F,MAAKA,IAChDh0F,KAAK2zF,qBAKDb,EAAA5yF,UAAAs0F,eAAR,WACQx0F,KAAK6zF,gBACLC,cAAc9zF,KAAK6zF,eACnB7zF,KAAK6zF,cAAgB,OAMrBf,EAAA5yF,UAAAyzF,iBAAR,WAAA,IAAA/+E,EAAA5U,KACIA,KAAKw0F,kBAEAh5E,MAAMxb,KAAKy4D,WAAaz4D,KAAKy4D,SAAW,GAAKz4D,KAAK+yF,aAAanhF,YAChE5R,KAAK6zF,cAAgBY,YAAY,eACvBC,GAAQ9/E,EAAK6jD,SACf7jD,EAAKu/E,UAAYv/E,EAAKq/E,QAAUz4E,MAAMk5E,IAASA,EAAO,EACtD9/E,EAAK1S,OAEL0S,EAAKwpE,QAEVp+E,KAAKy4D,YAOTq6B,EAAA5yF,UAAA+oF,oBADP,WAAA,IAAAr0E,EAAA5U,KAEIA,KAAKkC,OACLq6C,sBAAsB,WAAM,OAAA3nC,EAAK0rB,cAAciT,WAM5Cu/C,EAAA5yF,UAAAgpF,mBADP,WAAA,IAAAt0E,EAAA5U,KAEIA,KAAKu0F,OACLh4C,sBAAsB,WAAM,OAAA3nC,EAAK0rB,cAAciT,+BAnctDzB,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,eACVqjC,SAAA,2iCACS,4HAzCTzO,EAAAA,kBAWqB5xB,oCA6CpBy9B,EAAAA,YAAWnhC,KAAA,CAAC,yBAUZmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAWAA,EAAAA,qBAUAA,EAAAA,wBASAA,EAAAA,wBAwBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,qCAaZW,EAAAA,8BAUAgd,EAAAA,6BAUAA,EAAAA,+BAUAA,EAAAA,iCAUAA,EAAAA,kCAUAA,EAAAA,oCAsSA/c,EAAAA,aAAYZ,KAAA,CAAC,kDAQbY,EAAAA,aAAYZ,KAAA,CAAC,wBAKlB8kF,EArcA,GAmdA6B,GAAA,WA0DI,SAAAA,EAAoBP,GAAAp0F,KAAAo0F,SAAAA,EAFHp0F,KAAA40F,aAAe,IAAIzrE,EAAAA,aAexC,OA3BI3pB,OAAAgC,eAEWmzF,EAAAz0F,UAAA,SAAM,KAFjB,WAGI,OAAOF,KAAK60F,aAEhB,SAAkB1yF,GACdnC,KAAK60F,QAAU1yF,EACfnC,KAAK40F,aAAaryE,KAAKviB,KAAK60F,0CAWzBF,EAAAz0F,UAAA2uC,SAAP,WACI7uC,KAAKo0F,SAAS1mF,IAAI1N,OAKf20F,EAAAz0F,UAAAsmC,YAAP,WACIxmC,KAAKo0F,SAASvmF,OAAO7N,2BArE5B8xC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,YACVqjC,SAAA,wSAwD8B+gD,qCA1C7BnkF,EAAAA,yBAWAA,EAAAA,sBAiBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iBAAc,CAAAkE,KAC1BvD,EAAAA,4BAWAgd,EAAAA,UAeLgpE,EAvEA,GAiFAG,GAAA,WAAA,SAAAA,KAMA,2BANC9lF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC6jF,GAAsB6B,IACrCzlF,QAAS,CAAC4jF,GAAsB6B,IAChCl4C,QAAS,CAACC,EAAAA,aAAcg7B,QAG5Bod,EANA,OC1jBIxsB,OAAS,SACTC,MAAQ,SAQNtC,GAAO,aACTuC,GAAS,EAebusB,GAAA,WAAA,SAAAA,IA+CoB/0F,KAAA2N,GAAK,gBAAgB66D,KAYrBxoE,KAAA6xC,QAAa7xC,KAAK2N,GAAE,SAiCpB3N,KAAA2oE,SAAmB,KAYnB3oE,KAAA0oE,cAAwCssB,GAAczsB,MAYtDvoE,KAAA4oE,eAAgB,EAYhB5oE,KAAAwuD,UAAW,EAapBxuD,KAAA6oE,eAAiB7oE,KAAK6xC,QAYtB7xC,KAAA8oE,UAA2B,KAOzB9oE,KAAAusC,OAAiD,IAAIpjB,EAAAA,aASvDnpB,KAAAi1C,SAAW,eAaXj1C,KAAAyyC,SAAU,EAaDzyC,KAAAi1F,eAAgB,EAahBj1F,KAAA+oE,SAAU,EAaV/oE,KAAA4xC,UAAW,EAYX5xC,KAAAk1F,UAAW,EAaXl1F,KAAAm1F,oBAAqB,EAI9Bn1F,KAAAgpE,QAAahpE,KAAK2N,GAAE,SAInB3N,KAAAqmE,mBAAiCJ,GAIjCjmE,KAAAsmE,kBAAsCL,GA0GlD,OAlGW8uB,EAAA70F,UAAA6N,OAAP,WACQ/N,KAAK4xC,UAAY5xC,KAAKk1F,WAI1Bl1F,KAAKi1F,eAAgB,EACrBj1F,KAAKyyC,SAAU,EACfzyC,KAAK+oE,SAAW/oE,KAAK+oE,QAErB/oE,KAAKusC,OAAOhqB,KAAK,CAAEwmD,QAAS/oE,KAAK+oE,QAASqsB,SAAUp1F,OACpDA,KAAKsmE,kBAAkBtmE,KAAK+oE,WAKzBgsB,EAAA70F,UAAAm1F,kBAAP,SAAyB/iF,GAGrBA,EAAMmyB,mBAKHswD,EAAA70F,UAAAo1F,iBAAP,SAAwBhjF,GAKpBA,EAAMmyB,kBAEFzkC,KAAKk1F,UAIL5iF,EAAM23B,iBAGN94B,MACAnR,KAAKu1F,eAAej1D,cAAc+oC,OAGtCrpE,KAAK+N,UAKFgnF,EAAA70F,UAAAopE,cAAP,SAAqBh3D,GAKjBtS,KAAK+N,UAKFgnF,EAAA70F,UAAAwuD,QAAP,SAAep8C,GACXtS,KAAKyyC,SAAU,GAKZsiD,EAAA70F,UAAA0uD,OAAP,SAAct8C,GACVtS,KAAKyyC,SAAU,EACfzyC,KAAKqmE,sBAKF0uB,EAAA70F,UAAA+nE,WAAP,SAAkB9lE,GACdnC,KAAKipE,OAAS9mE,EACdnC,KAAK+oE,UAAY/oE,KAAKipE,QAK1BzpE,OAAAgC,eAAWuzF,EAAA70F,UAAA,aAAU,KAArB,WACI,OAAQF,KAAK0oE,eACT,KAAKssB,GAAc1sB,OACf,OAAUtoE,KAAKi1C,SAAQ,kBAC3B,KAAK+/C,GAAczsB,MACnB,QACI,OAAUvoE,KAAKi1C,SAAQ,4CAM5B8/C,EAAA70F,UAAAgoE,iBAAP,SAAwBphB,GAAwB9mD,KAAKsmE,kBAAoBxf,GAIlEiuC,EAAA70F,UAAAioE,kBAAP,SAAyBrhB,GAAkB9mD,KAAKqmE,mBAAqBvf,GAGrEiuC,EAAA70F,UAAA4hE,eAAA,WACI,OAAO9hE,KAAKu1F,eAAej1D,mCA1WlCwR,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE88C,QAAS8V,EAAAA,kBAAmB7V,YAAa6oC,EAAsB3sB,OAAO,IACpF15D,SAAU,eACV8mF,qBAAqB,EACrBzjD,SAAA,wwCAcC0E,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,yBAQhCF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,8BAQ7BF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE2oC,UAAQ,gBAYxCxH,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,uBAYAA,EAAAA,qBAWAA,EAAAA,oBAWAA,EAAAA,wBAWAA,EAAAA,6BAYAA,EAAAA,6BAYAA,EAAAA,wBAYAA,EAAAA,8BAYAA,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,8BAON2d,EAAAA,yBASAwjB,EAAAA,YAAWnhC,KAAA,CAAC,uCAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAAmC,CAAAkE,KAC/CvD,EAAAA,uBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gCAA6B,CAAAkE,KACzCvD,EAAAA,wBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iCAA8B,CAAAkE,KAC1CvD,EAAAA,wBAYAA,EAAAA,kCAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,8BAA2B,CAAAkE,KACvCvD,EAAAA,SAsHLomF,EA5WA,GA8WaU,GAA4C,CACrDxpC,QAASypC,EAAAA,cACTxpC,YAAaG,EAAAA,WAAW,WAAM,OAAAspC,KAC9BvtB,OAAO,GAIXutB,GAAA,SAAA77E,GAAA,SAAA67E,mDAM8E,OAA5B39E,EAAAA,EAAAA,uBANjDvJ,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0HAGVS,UAAW,CAACsmF,QAE8DE,EAN9E,CAMkDC,EAAAA,2BAKlDC,GAAA,WAAA,SAAAA,KAKiC,2BALhC7mF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC8lF,GAAsBY,IACrCzmF,QAAS,CAAC6lF,GAAsBY,IAChCl5C,QAAS,CAACquB,QAEmB+qB,EALjC,GC5XIC,GAAU,EAEdC,GAAA,SAAAj8E,GAiXI,SAAAi8E,EAAmBnoD,EAA+BvN,EAAgC+0B,EAC3BvgB,GADvD,IAAAjgC,EAEQkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAFlB4U,EAAAg5B,IAAAA,EAA+Bh5B,EAAAyrB,WAAAA,EAAgCzrB,EAAAwgD,SAAAA,EAC3BxgD,EAAAigC,uBAAAA,EApWhDjgC,EAAAjH,GAAK,YAAYmoF,KAmBjBlhF,EAAAohF,WAAY,EAUZphF,EAAA8gD,kBAAmB,EAUnB9gD,EAAA6gD,gBAAiB,EAUjB7gD,EAAAqhF,WAAY,EAoBZrhF,EAAAshF,YAAa,EAgBbthF,EAAAuhF,SAAQ,GAWRvhF,EAAAg9B,UAAW,EAsBXh9B,EAAA09B,eAAiB,IAAInpB,EAAAA,aAuDrBvU,EAAAwhF,YAAc,IAAIjtE,EAAAA,aAelBvU,EAAAyhF,UAAY,IAAIltE,EAAAA,aAehBvU,EAAA0hF,SAAW,IAAIntE,EAAAA,aAefvU,EAAA26B,QAAU,IAAIpmB,EAAAA,aAgBdvU,EAAAmgC,YAAc,IAAI5rB,EAAAA,aAclBvU,EAAA2hF,gBAAkB,IAAIptE,EAAAA,aAgBtBvU,EAAA4hF,UAAY,IAAIrtE,EAAAA,aAgBhBvU,EAAAqqD,YAAc,IAAI91C,EAAAA,aAuEfvU,EAAAu9B,WAAY,EACZv9B,EAAA6hF,mBAAqB,2BACrB7hF,EAAA8hF,qBAAsB,IAuNpC,OAlkBsC1+E,EAAAA,EAAAA,GAuHlCxY,OAAAgC,eACWu0F,EAAA71F,UAAA,WAAQ,KAoBnB,WACI,OAAOF,KAAKmyC,eAtBhB,SACoB91B,GAChBrc,KAAK22F,gBAAgBt6E,oCA8BzB7c,OAAAgC,eACWu0F,EAAA71F,UAAA,QAAK,KAchB,WACI,OAAOF,KAAK42F,SAASt2D,cAAcj9B,MAAMwzF,qBAhB7C,SACiBC,GACb92F,KAAK42F,SAASt2D,cAAcj9B,MAAMwzF,gBAAkBC,mCA8IxDt3F,OAAAgC,eACIu0F,EAAA71F,UAAA,YAAS,KADb,eAEUm5E,EAAU,CAACr5E,KAAK00C,yBAAyB,aAI/C,OAHA2kC,EAAQ72E,KAAKxC,KAAK4xC,SAAW,qBAAuB,IAEpDynC,EAAQ72E,KAAKxC,KAAKm2F,UACX9c,EAAQzkD,KAAK,sCAsCxBp1B,OAAAgC,eAAWu0F,EAAA71F,UAAA,uBAAoB,KAA/B,WACI,OAAOF,KAAK+2F,YAAc/2F,KAAKg3F,mDAMnCx3F,OAAAgC,eAAWu0F,EAAA71F,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAKi3F,YAAcj3F,KAAKk3F,mDAMnC13F,OAAAgC,eAAWu0F,EAAA71F,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK00C,yBAAyB,oDAGzCl1C,OAAAgC,eAAWu0F,EAAA71F,UAAA,eAAY,KAAvB,WACI,OAAQF,KAAK4xC,SAAe,GAAJ,mCAerBmkD,EAAA71F,UAAAi3F,YAAP,SAAmB99E,SAGf,OAAAnL,EAAA,IAFqB,oBAGDmL,EAChBnL,EAAIkpF,6BAA0B/9E,KAI5B08E,EAAA71F,UAAAy2F,gBAAV,SAA0Bt6E,EAAmBg7E,QAAA,IAAAA,IAAAA,EAAA,UACnCC,EAAqC,CACvCn8B,cAAek8B,EACfj8B,MAAOp7D,KACP+jB,UAAU,EACV3B,QAAQ,GAGR/F,IAAarc,KAAKmyC,WAClBmlD,EAAavzE,UAAW,EACxB/jB,KAAK+0C,YAAYxyB,KAAK+0E,GAEjBA,EAAal1E,SACdpiB,KAAKo1D,SAASrC,SAAS/yD,KAAK42F,SAASt2D,cAAetgC,KAAKy2F,oBACzDz2F,KAAKmyC,UAAY91B,EACjBrc,KAAKsyC,eAAe/vB,KAAKviB,KAAKmyC,cAE1B91B,GAAYrc,KAAKmyC,YACzBnyC,KAAK+0C,YAAYxyB,KAAK+0E,GAEjBA,EAAal1E,SACdpiB,KAAKo1D,SAAStC,YAAY9yD,KAAK42F,SAASt2D,cAAetgC,KAAKy2F,oBAC5Dz2F,KAAKmyC,UAAY91B,EACjBrc,KAAKsyC,eAAe/vB,KAAKviB,KAAKmyC,cAKnC4jD,EAAA71F,UAAAq3F,uBAAP,SAA8BjlF,GACC,UAAvBA,EAAMklF,cAA8BllF,EAAMtR,OAAOquD,SAEjDrvD,KAAKu2F,gBAAgBh0E,KAAK,CACtB64C,MAAOp7D,KACPm7D,cAAe7oD,KAQpByjF,EAAA71F,UAAAu3F,cAAP,SAAqBnlF,OACXolF,EAAqC,CACvCv8B,cAAe7oD,EACf8oD,MAAOp7D,KACPoiB,QAAQ,GAGZpiB,KAAKw2F,UAAUj0E,KAAKm1E,GAChBA,EAAYt1E,SAIG,WAAd9P,EAAMrR,KAAkC,QAAdqR,EAAMrR,MAAkBjB,KAAKi2F,WACxDj2F,KAAKs2F,SAAS/zE,KAAK,CACf44C,cAAe7oD,EACf8oD,MAAOp7D,OAII,MAAdsS,EAAMrR,KAA6B,aAAdqR,EAAMrR,MAAuBjB,KAAKk2F,YAAel2F,KAAK4xC,UAC5E5xC,KAAK22F,iBAAiB32F,KAAK+jB,SAAUzR,GAGvB,QAAdA,EAAMrR,KACNqR,EAAM23B,mBAOP8rD,EAAA71F,UAAAy3F,mBAAP,SAA0BrlF,GACJ,MAAdA,EAAMrR,KAA6B,aAAdqR,EAAMrR,KAAoC,UAAdqR,EAAMrR,MACvDjB,KAAKs2F,SAAS/zE,KAAK,CACf44C,cAAe7oD,EACf8oD,MAAOp7D,OAGXsS,EAAM23B,iBACN33B,EAAMmyB,oBAIPsxD,EAAA71F,UAAA03F,kBAAP,SAAyBtlF,GACrBA,EAAMmyB,mBAMHsxD,EAAA71F,UAAA23F,cAAP,SAAqBvlF,GACjBtS,KAAKs2F,SAAS/zE,KAAK,CACf44C,cAAe7oD,EACf8oD,MAAOp7D,QAOR+1F,EAAA71F,UAAA43F,kBAAP,WAEI93F,KAAK02F,qBAAsB,GAMxBX,EAAA71F,UAAA63F,iBAAP,SAAwBzlF,GACftS,KAAK02F,qBACN12F,KAAK63F,cAAcvlF,GAEvBtS,KAAK02F,qBAAsB,GAQxBX,EAAA71F,UAAA83F,gBAAP,SAAuB1lF,GACnBtS,KAAKo2F,YAAY7zE,KAAK,CAClB44C,cAAe7oD,EACf8oD,MAAOp7D,OAEXsS,EAAM8P,QAAUpiB,KAAKg2F,WAAah2F,KAAK4xC,UAMpCmkD,EAAA71F,UAAA+3F,cAAP,WACQj4F,KAAK01D,kBACL11D,KAAKk4F,cAAcn+B,sBAOpBg8B,EAAA71F,UAAAi4F,cAAP,SAAqB7lF,GAEjBtS,KAAKq2F,UAAU9zE,KAAK,CAChB44C,cAAe7oD,EACf8oD,MAAOp7D,OAGPA,KAAK+jB,UACL/jB,KAAK42F,SAASt2D,cAAciT,SAO7BwiD,EAAA71F,UAAAk4F,kBAAP,SAAyB9lF,OACf+lF,EAAsC,CACxCl9B,cAAe7oD,EACf8oD,MAAOp7D,KACPoiB,QAAQ,GAEZpiB,KAAKuvC,QAAQhtB,KAAK81E,GAEbA,EAAej2E,SAAUpiB,KAAKk2F,YAAel2F,KAAK4xC,UACnD5xC,KAAK22F,iBAAiB32F,KAAK+jB,SAAUzR,IAUtCyjF,EAAA71F,UAAAo4F,uBAAP,SAA8BhmF,GAC1B,GAAItS,KAAKk4F,gBAAkB5lF,EAAM4hD,MAAS5hD,EAAM4hD,KAAK1/C,MAASlC,EAAM4hD,KAAK1/C,KAAK+jF,KAA9E,KAIM32D,EAAyC,CAC3Cw5B,MAAOp7D,KACPw4F,SAAUlmF,EAAM4hD,KAAK1/C,KAAK+jF,KAC1Bp9B,cAAe7oD,GAEnBtS,KAAKi/D,YAAY18C,KAAKqf,KAMnBm0D,EAAA71F,UAAAu4F,WAAP,SAAkBnmF,GAEdA,EAAM8P,QAAS,uBAnkBtB0vB,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,WACVqjC,SAAA,8gDAlDA9C,EAAAA,yBAEA3L,EAAAA,kBAKA+vB,EAAAA,6CA2ZKnkB,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,qCAtWvB1E,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBASAA,EAAAA,yBAUAA,EAAAA,gCAUAA,EAAAA,8BAUAA,EAAAA,yBAUAA,EAAAA,0BAUAA,EAAAA,0BAUAA,EAAAA,0BAUAA,EAAAA,uBAMAA,EAAAA,wBAWAA,EAAAA,wBAcAA,EAAAA,8BAQAgd,EAAAA,sBAwBAhd,EAAAA,2BA+BAgd,EAAAA,0BAeAA,EAAAA,yBAeAA,EAAAA,wBAeAA,EAAAA,4BAgBAA,EAAAA,gCAcAA,EAAAA,0BAgBAA,EAAAA,4BAgBAA,EAAAA,0BAMAwjB,EAAAA,YAAWnhC,KAAA,CAAC,qCAoBZyoC,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE0oC,KAAMue,GAAkBte,UAAQ,sBAMxDF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,+BAMlDF,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,+BAM5DF,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,OAqPjEo/C,EAtkBA,CAIsChiD,ICtDtC2kD,GAAA,WA4JI,SAAAA,EAAmB9qD,EAA+B9J,EACtC60D,GADO34F,KAAA4tC,IAAAA,EAA+B5tC,KAAA8jC,QAAAA,EACtC9jC,KAAA24F,iBAAAA,EA3GL34F,KAAAm2F,SAAQ,GA8CRn2F,KAAA44F,UAAY,IAAIzvE,EAAAA,aAehBnpB,KAAA+0C,YAAc,IAAI5rB,EAAAA,aAclBnpB,KAAAo2F,YAAc,IAAIjtE,EAAAA,aAclBnpB,KAAAq2F,UAAY,IAAIltE,EAAAA,aAcfnpB,KAAA2+C,QAAmD,KACjD3+C,KAAAu/B,SAAW,IAAIC,EAAAA,QAIrBx/B,KAAK2+C,QAAU3+C,KAAK24F,iBAAiBrhF,KAAK,IAAInX,OAAO,MAqL7D,OA5RIX,OAAAgC,eACIk3F,EAAAx4F,UAAA,YAAS,KADb,eAEUm5E,EAAU,CAAC,iBAGjB,OAFAA,EAAQ72E,KAAKxC,KAAKm2F,UAEX9c,EAAQzkD,KAAK,sCAwGjB8jE,EAAAx4F,UAAAyhD,gBAAP,WAEI,GAAI3hD,KAAK64F,UAAUl4F,OAAQ,KACjBm4F,EAAgB94F,KAAK64F,UAAU7+E,OAAO,SAACiC,GAA2B,OAAAA,EAAK8H,WACzE+0E,EAAcn4F,QACdX,KAAK+0C,YAAYxyB,KAAK,CAClB44C,cAAe,KACfjrB,aAAc4oD,EACd19B,MAAOp7D,SAShB04F,EAAAx4F,UAAA0yC,UAAP,WAAA,IAAAh+B,EAAA5U,KACI,GAAIA,KAAK64F,UAAW,KACV52C,EAAUjiD,KAAK2+C,QAAQ6D,KAAKxiD,KAAK64F,UAAUjmF,WAC7CqvC,IACAA,EAAQ82C,iBAAiB,SAACC,GACtBA,EAAU/8E,KAAKm6E,YAAYvxD,KAAKC,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,SAAC/2B,GACjE4G,EAAKqkF,gBAAgBjrF,KAEzBgrF,EAAU/8E,KAAKo6E,UAAUxxD,KAAKC,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,SAAC/2B,GAC/D4G,EAAKujF,cAAcnqF,KAEvBgrF,EAAU/8E,KAAKgjD,YAAYp6B,KAAKC,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,SAAC/2B,GACjE4G,EAAKskF,gBAAgBlrF,KAEzBgrF,EAAU/8E,KAAKu6E,UAAU3xD,KAAKC,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,SAAC/2B,GAC/D4G,EAAK6iF,cAAczpF,KAEnBgrF,EAAU/8E,KAAKi6E,YACf8C,EAAU/8E,KAAK84B,YAAYlQ,KAAKC,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,SAAC/2B,GACjE4G,EAAKukF,sBAAsBnrF,OAIvChO,KAAKo5F,mBAAqBp5F,KAAK64F,UAAUjmF,aAQ9C8lF,EAAAx4F,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAMRiyD,EAAAx4F,UAAAu3F,cAAV,SAAwBnlF,GAAxB,IAAAsC,EAAA5U,KAEUq5F,EAAar5F,KAAK64F,UAAUjmF,UAC5B0mF,EAAgBD,EAAWvgF,UAAU,SAACpG,GAAO,OAAAA,IAAOJ,EAAM8oD,SAC3B,IAAjC9oD,EAAM6oD,cAAco+B,SACY,cAA5BjnF,EAAM6oD,cAAcl6D,KAAmD,SAA5BqR,EAAM6oD,cAAcl6D,IAChDjB,KAAKw5F,oBAAoBF,EAAeA,EAAgB,GAAG,EAAOhnF,EAAM6oD,gBAEnFtP,WAAW,WACPj3C,EAAKikF,UAAUjmF,UAAU0mF,EAAgB,GAAG1C,SAASt2D,cAAciT,UAGxC,eAA5BjhC,EAAM6oD,cAAcl6D,KAAoD,UAA5BqR,EAAM6oD,cAAcl6D,KACxDjB,KAAKw5F,oBAAoBF,EAAeA,EAAgB,GAAG,EAAMhnF,EAAM6oD,gBAGzD,cAA5B7oD,EAAM6oD,cAAcl6D,KAAmD,SAA5BqR,EAAM6oD,cAAcl6D,MAAmBq4F,EAAgB,EACnGD,EAAWC,EAAgB,GAAG1C,SAASt2D,cAAciT,SACjB,eAA5BjhC,EAAM6oD,cAAcl6D,KAAoD,UAA5BqR,EAAM6oD,cAAcl6D,MACxEq4F,EAAgBD,EAAW14F,OAAS,GACpC04F,EAAWC,EAAgB,GAAG1C,SAASt2D,cAAciT,SAQvDmlD,EAAAx4F,UAAA+4F,gBAAV,SAA0B3mF,GACtBtS,KAAKo2F,YAAY7zE,KAAK,CAClB44C,cAAe7oD,EAAM6oD,cACrBC,MAAOp7D,QAOL04F,EAAAx4F,UAAAi4F,cAAV,SAAwB7lF,GACpBtS,KAAKq2F,UAAU9zE,KAAK,CAChB44C,cAAe7oD,EAAM6oD,cACrBC,MAAOp7D,QAOL04F,EAAAx4F,UAAAg5F,gBAAV,SAA0B5mF,OAChBmnF,EAAgBz5F,KAAK64F,UAAUjmF,UAAUkG,UAAU,SAACpG,GAAO,OAAAA,IAAOJ,EAAM8oD,QACxEk+B,EAAgBt5F,KAAK64F,UAAUjmF,UAAUkG,UAAU,SAACpG,GAAO,OAAAA,IAAOJ,EAAMkmF,WAC1Ec,EAAgBG,EAEhBz5F,KAAKw5F,oBAAoBF,EAAeG,GAAe,EAAMnnF,EAAM6oD,eAGnEn7D,KAAKw5F,oBAAoBF,EAAeG,GAAe,EAAOnnF,EAAM6oD,gBAOlEu9B,EAAAx4F,UAAAs5F,oBAAV,SAA8BE,EAAWC,EAAaC,EAAez+B,GACjE,GAAIu+B,EAAY,GAAK15F,KAAK64F,UAAUl4F,QAAU+4F,GAC1CC,EAAc,GAAK35F,KAAK64F,UAAUl4F,QAAUg5F,EAC5C,OAAO,EAKX,QAFMN,EAAar5F,KAAK64F,UAAUjmF,UAC5BpC,EAA6B,GAC1BhQ,EAAI,EAAGA,EAAI64F,EAAW14F,OAAQH,IAC/Bo5F,EACIF,GAAal5F,GAAKA,EAAIm5F,EACtBnpF,EAAOhO,KAAK62F,EAAW74F,EAAI,IACpBA,IAAMm5F,EACbnpF,EAAOhO,KAAK62F,EAAWK,IAEvBlpF,EAAOhO,KAAK62F,EAAW74F,IAGvBm5F,EAAcn5F,GAAKA,GAAKk5F,EACxBlpF,EAAOhO,KAAK62F,EAAW74F,EAAI,IACpBA,IAAMm5F,EACbnpF,EAAOhO,KAAK62F,EAAWK,IAEvBlpF,EAAOhO,KAAK62F,EAAW74F,IAInCR,KAAKo5F,mBAAqB5oF,MAEpBqpF,EAAwC,CAC1CR,WAAYr5F,KAAKo5F,mBACjBj+B,cAAeA,EACfC,MAAOp7D,MAGX,OADAA,KAAK44F,UAAUr2E,KAAKs3E,IACb,GAMDnB,EAAAx4F,UAAAi5F,sBAAV,SAAgC7mF,OACxBwmF,EAAgB94F,KAAK64F,UAAU7+E,OAAO,SAACu+E,GAAS,OAAAA,EAAKx0E,WACrDzR,EAAMyR,WAAa+0E,EAAchsE,SAASxa,EAAM8oD,OAChD09B,EAAct2F,KAAK8P,EAAM8oD,QACjB9oD,EAAMyR,UAAY+0E,EAAchsE,SAASxa,EAAM8oD,SACvD09B,EAAgBA,EAAc9+E,OAAO,SAACu+E,GAClC,OAAOA,EAAK5qF,KAAO2E,EAAM8oD,MAAMztD,MAGvC3N,KAAK+0C,YAAYxyB,KAAK,CAClB44C,cAAe7oD,EAAM6oD,cACrBjrB,aAAc4oD,EACd19B,MAAOp7D,4BAxSlB8xC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,iBACVqjC,SAAA,2EAvCA9C,EAAAA,yBAWA3L,EAAAA,kBANAulB,EAAAA,oDAyCCl6C,EAAAA,yBAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,6BAcZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mBAAgB,CAAAkE,KAC5BvD,EAAAA,sBASAwgC,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7BvD,EAAAA,yBAeAgd,EAAAA,4BAeAA,EAAAA,4BAcAA,EAAAA,0BAcAA,EAAAA,0BAWAygC,EAAAA,gBAAep+C,KAAA,CAAC+nF,OA8LrB2C,EAnVA,GCeAoB,GAAA,WAAA,SAAAA,KAsB8B,2BAtB7B9qF,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZypF,GACA3C,IAEF7mF,QAAS,CACPwpF,GACA3C,GACA1lC,GACAE,IAEF9T,QAAS,CACPC,EAAAA,aACAouB,GACA4M,GACApkB,GACAulB,GACApY,GACAnQ,GACAE,QAG0BspC,EAtB9B,GCVAC,GAAA,WAAA,SAAAA,KAIA,2BAJCtrF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uBAGdqrF,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCvrF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uBAGdsrF,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCxrF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qBAGdurF,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCzrF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sBAGdwrF,EAJA,GASAC,GAAA,WAAA,SAAAA,KAKA,2BALC1rF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2BAIdyrF,EALA,GAUAC,GAAA,WAAA,SAAAA,KAIA,2BAJC3rF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wBAGd0rF,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJC5rF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2BAGd2rF,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJC7rF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0BAGd4rF,EAJA,iBChEA,SAAAC,IAGWv6F,KAAAm1F,oBAAqB,EAgDhC,OA9CWoF,EAAAr6F,UAAAs6F,SAAP,SAAgBC,GACZz6F,KAAKy6F,MAAQA,GAIVF,EAAAr6F,UAAAqrC,MAAP,WACIvrC,KAAKy6F,MAAQ,MAGjBj7F,OAAAgC,eAAW+4F,EAAAr6F,UAAA,WAAQ,KAAnB,WACI,OAA+B,OAAxBF,KAAKy6F,MAAMC,UAAqB16F,KAAKy6F,MAAMC,WAAa1mF,UAAYhU,KAAKy6F,MAAMC,SAAW,sCAGrGl7F,OAAAgC,eAAW+4F,EAAAr6F,UAAA,iBAAc,KAAzB,WACI,OAAO,mCAEXV,OAAAgC,eAAW+4F,EAAAr6F,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKy6F,MAAMn3C,0CAGfi3C,EAAAr6F,UAAAy6F,gBAAP,WACS36F,KAAKy6F,OAGVz6F,KAAKy6F,MAAMG,uBAGfp7F,OAAAgC,eAAW+4F,EAAAr6F,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKy6F,MAAM9sF,oCAGf4sF,EAAAr6F,UAAA26F,kBAAP,SAAyBvqD,EAAah+B,OAC5ByR,EAAW/jB,KAAKy6F,MAAMK,eAAexqD,GAC5B,OAAXA,GAAmBA,IAAWt8B,YAG7B+P,EAGD/jB,KAAKy6F,MAAMM,cAAc,CAACzqD,GAASh+B,GAFnCtS,KAAKy6F,MAAMO,YAAY,CAAC1qD,IAAS,EAAOh+B,KAMzCioF,EAAAr6F,UAAA+wC,iBAAP,SAAwBX,GACpB,OAAOtwC,KAAKy6F,MAAMK,eAAexqD,IAEzCiqD,KCzCAU,GAAA,SAAAnhF,GAqCI,SAAAmhF,EACcC,EAC2BjpD,EAC3B5R,EACgC2P,GAJ9C,IAAAp7B,EAMIkF,EAAAlZ,KAAAZ,KAAMiyC,EAAU5R,EAAY,KAAM2P,IAAUhwC,YALlC4U,EAAAsmF,SAAAA,EAC2BtmF,EAAAq9B,SAAAA,EAC3Br9B,EAAAyrB,WAAAA,EACgCzrB,EAAAo7B,UAAAA,EA7BvCp7B,EAAAumF,WAAa,KAyFxB,OAjG2CnjF,EAAAA,EAAAA,GAavCxY,OAAAgC,eAAWy5F,EAAA/6F,UAAA,SAAM,KAAjB,eACUw6F,EAAW16F,KAAKk7F,SAASR,SAC/B,OAAoB,OAAbA,EAAoB16F,KAAKmC,MAAMu4F,GAAY16F,KAAKmC,uCAM3D3C,OAAAgC,eAAWy5F,EAAA/6F,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKk7F,SAASE,yCAOzB57F,OAAAgC,eAAWy5F,EAAA/6F,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAKk7F,SAAS/F,oDAezB31F,OAAAgC,eAAIy5F,EAAA/6F,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKk7F,SAASjqD,iBAAiBjxC,KAAKswC,aAG/C,SAAanuC,GACLnC,KAAK82B,WAGT92B,KAAKmyC,UAAYhwC,oCAMrB84F,EAAA/6F,UAAAm7F,UAAA,SAAU7zF,OACA8zF,EAAOt7F,KAAK8jC,QAAQxD,cAAcpvB,wBAClCqqF,EAAYv7F,KAAK8jC,QAAQxD,cAAcvD,cAAcA,cAAc7rB,wBACzE,OAAI1J,IAAcwuC,GAASlG,KAChBwrD,EAAKnhE,EAAImhE,EAAKnuF,QAAUouF,EAAUphE,EAAIohE,EAAUpuF,OAEpDmuF,EAAKnhE,GAAKohE,EAAUphE,GAI/B8gE,EAAA/6F,UAAAyyC,QADA,SACQrgC,GAEJ,GADAtS,KAAKk7F,SAAS/F,oBAAqB,EAC/Bn1F,KAAK4xC,UAAY5xC,KAAK82B,SAA1B,KACUsc,EAAcpzC,KAAKiyC,SAASS,MAAMp7B,KAAK,SAAC2E,GAAS,OAAAA,EAAKw2B,UACxDzyC,KAAKiyC,SAASqB,iBAAmBF,GACjCA,EAAYtP,QAAQxD,cAAciT,MAAM,CAAEC,eAAe,SAIjExzC,KAAKiyC,SAASyD,aAAa11C,KAAK2T,OAChC3T,KAAKk7F,SAASL,kBAAkB76F,KAAKswC,OAAQh+B,IAYjD2oF,EAAA/6F,UAAAs7F,aAAA,SAAalpF,GACTA,EAAM23B,kBAGVgxD,EAAA/6F,UAAA0yC,UAAA,iCAnGHd,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,iBACVqjC,SAAA,gUANKwoD,sCA2CApoF,EAAAA,OAAMnE,KAAA,ChFbkB,iCgFvC7Bs1B,EAAAA,kBAUKyM,GAAsBhvC,WAAA,CAAA,CAAAmR,KA4CtBC,EAAAA,OAAMnE,KAAA,CAAC+hC,6CA/BXphC,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,oCA6DZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cA6B5BitF,EArGA,CAI2C/nD,ICb3CuoD,GAAA,SAAA3hF,GAAA,SAAA2hF,mDAgBA,OAX8CzjF,EAAAA,EAAAA,GAC1CxY,OAAAgC,eAAIi6F,EAAAv7F,UAAA,WAAQ,KAAZ,WACI,OAAO,OAEX,SAAaiC,qCAGbs5F,EAAAv7F,UAAAyyC,QAAA,SAAQrgC,GACJtS,KAAKk7F,SAAS/F,oBAAqB,EACnCn1F,KAAKk7F,SAASP,uCAdrB7oD,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,qBACVqjC,SAAU,4BACV5iC,UAAW,CAAC,CAAE88C,QAASgvC,GAAuB/uC,YAAauvC,QAa/DA,EAhBA,CAK8CR,ICI9CS,GAAA,SAAA5hF,GAMI,SAAA4hF,EACcr7D,EACAuN,EACAoC,EAC0ByqD,EAC1BS,EACyCrmD,GANvD,IAAAjgC,EAOIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAYuN,EAAKoC,EAAW6E,IAAuB70C,YAN/C4U,EAAAyrB,WAAAA,EACAzrB,EAAAg5B,IAAAA,EACAh5B,EAAAo7B,UAAAA,EAC0Bp7B,EAAA6lF,MAAAA,EAC1B7lF,EAAAsmF,SAAAA,EACyCtmF,EAAAigC,uBAAAA,EAyBhDjgC,EAAAjC,SAA2C,KAyExCiC,EAAA+mF,cAAgB,WACtB/mF,EAAKsmF,SAAS/F,oBAAqB,KAyF3C,OAnM+Cn9E,EAAAA,EAAAA,GAW3CxY,OAAAgC,eAAck6F,EAAAx7F,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKsqD,QAAQlL,GAAGrb,SAASzD,+CAGpC9gC,OAAAgC,eAAck6F,EAAAx7F,UAAA,mBAAgB,KAA9B,eACUu7B,EAAYz7B,KAAKsqD,QAAQpvB,eACzByP,EAAe3qC,KAAKsqD,QAAQhL,YAAY3U,aAC9C,OAAOlvB,KAAKmC,MAAM6d,EAAYz7B,KAAKsqD,QAAQ/K,uBAAyB5U,mCAGxEnrC,OAAAgC,eAAck6F,EAAAx7F,UAAA,mBAAgB,KAA9B,WACI,OAAOF,KAAKy6F,MAAMt8C,eACd1iC,KAAKmC,MAAM5d,KAAKy6F,MAAMmB,eAAiB57F,KAAKy6F,MAAMU,YAClDn7F,KAAK0yC,MAAM/xC,OAAS,mCAarB+6F,EAAAx7F,UAAAwuD,QAAP,WACI1uD,KAAKozC,YAAcpzC,KAAK80C,cAAgB90C,KAAK0yC,MAAM,IAMhDgpD,EAAAx7F,UAAA0uD,OAAP,SAAc7W,GACV/3C,KAAKozC,YAAc,MAMhBsoD,EAAAx7F,UAAAurD,eAAP,WACIzrD,KAAK8/B,SAASvd,QAMXm5E,EAAAx7F,UAAA61C,cAAP,WACI/1C,KAAK01C,aAAa11C,KAAKsqD,QAAQ9K,SAAS1mC,UAAU,SAAAxW,GAAK,OAACA,EAAEw0B,aAMvD4kE,EAAAx7F,UAAAi2C,aAAP,WACQn2C,KAAK80C,cAA4C,IAA5B90C,KAAK80C,aAAanhC,OAAiD,IAAlC3T,KAAKsqD,QAAQ/7C,MAAMonC,WACzE31C,KAAKy6F,MAAMoB,kBAAiB,GAE5B/hF,EAAA5Z,UAAMi2C,aAAYv1C,KAAAZ,OAQnB07F,EAAAx7F,UAAAg2C,aAAP,eACU4lD,EAAY97F,KAAKy6F,MAAMt8C,eAAiBn+C,KAAKy6F,MAAMt8C,eAAiB,EAAIn+C,KAAKsqD,QAAQ9K,SAAS7+C,OAAS,EACzGX,KAAK80C,cAAgB90C,KAAK80C,aAAanhC,QAAUmoF,EACjD97F,KAAK+7F,qBAELjiF,EAAA5Z,UAAMg2C,aAAYt1C,KAAAZ,OAOnB07F,EAAAx7F,UAAA8yC,WAAP,SAAkB/2B,GACD,OAATA,GAAiBA,IAASjI,YAG9BhU,KAAKk7F,SAASL,kBAAkB5+E,EAAKq0B,QACrCtwC,KAAK80C,aAAe74B,IAGhBy/E,EAAAx7F,UAAA67F,mBAAR,WACQ/7F,KAAKy6F,MAAMuB,uBACXh8F,KAAKozC,YAAcpzC,KAAK0yC,MAAM1yC,KAAK0yC,MAAM/xC,OAAS,KAIhD+6F,EAAAx7F,UAAA41C,mBAAV,SAA6BD,KAM7Br2C,OAAAgC,eAAck6F,EAAAx7F,UAAA,iBAAc,KAA5B,WACI,OAAIF,KAAK2S,WAAaqB,UACXhU,KAAK2S,SAASC,UAChB2B,KAAK,SAACW,EAAwB3V,GAC3B,OAAO2V,EAAEvB,MAAQpU,EAAEoU,QAGxB,sCAUXnU,OAAAgC,eAAWk6F,EAAAx7F,UAAA,QAAK,KAAhB,mBACUwyC,EAAiC,GACvC,GAAI1yC,KAAK2S,WAAaqB,UAAW,KACvBioF,EAAiBj8F,KAAmB,mBAC1C,IAAoB,IAAAk8F,EAAAnsF,EAAAksF,GAAcE,EAAAD,EAAAh6F,QAAAi6F,EAAA/5F,KAAA+5F,EAAAD,EAAAh6F,OAAE,CAA/B,IAAM8gC,EAAKm5D,EAAAh6F,MACP6gC,EAAMlM,UACP4b,EAAMlwC,KAAKwgC,yGAKvB,OAAO0P,mCAMJgpD,EAAAx7F,UAAAsqD,qBAAP,WACIxqD,KAAKsqD,QAAQhL,YAAY7jB,UAAYz7B,KAAKwrD,iBAMvCkwC,EAAAx7F,UAAAi1C,gBAAP,SAAuBl0C,GACnB,OAAQA,GACJ,KAAKm0C,GACDp1C,KAAKo8F,cACL,MACJ,KAAKhnD,GACDp1C,KAAKq8F,cACL,MACJ,KAAKjnD,GACDp1C,KAAKoO,UAITstF,EAAAx7F,UAAAk8F,YAAR,WACQp8F,KAAKs8F,mBACLt8F,KAAKy6F,MAAMG,sBAEX56F,KAAKoO,SAILstF,EAAAx7F,UAAAm8F,YAAR,WACQr8F,KAAKs8F,oBAGLt8F,KAAKgzC,WAAWhzC,KAAKozC,cAIrBsoD,EAAAx7F,UAAAo8F,iBAAR,WACI,OAAOt8F,KAAKozC,uBAAuBqoD,IAGhCC,EAAAx7F,UAAAyhD,gBAAP,WACI3hD,KAAKsqD,QAAQhL,YAAY9a,iBAAiB,SAAUxkC,KAAK27F,gBAMtDD,EAAAx7F,UAAAsmC,YAAP,WACIxmC,KAAKsqD,QAAQhL,YAAYjZ,oBAAoB,SAAUrmC,KAAK27F,eAC5D37F,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,gCAtMrBqL,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,sBACVqjC,SAAA,6ZACA5iC,UAAW,CAAC,CAAE88C,QlFuBe,uBkFvBaC,YAAawvC,iDAjBzBp4D,EAAAA,kBAA9B2L,EAAAA,yBASKc,sCAeA59B,EAAAA,OAAMnE,KAAA,CCrBoB,mCDI1BusF,sCAmBArrD,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,2CAwBvBuY,EAAAA,gBAAep+C,KAAA,CAACitF,GAAuB,CAAE3uC,aAAa,OAoK3DovC,EAxMA,CAK+CrxC,IEN/CkyC,GAAA,WAKI,SAAAA,EAAgD9B,GAAAz6F,KAAAy6F,MAAAA,EAgBpD,OAdW8B,EAAAr8F,UAAAsE,UAAP,SAAiBoY,EAAmBpH,EACnB+D,OACP0L,EAA4B,IAAIxM,GAAyBc,GAC/D0L,EAAyBtM,kBAAoBnD,MACvCjH,EAAyB,CAAEyK,gBAAiBiM,EAA0BzO,SAAU,IAAIgmF,IAG1F,OAFAjuF,EAAMyK,gBAAgBL,kBAAoB3Y,KAAKy6F,MAAMgC,qBAEhDluF,EAAMyK,gBAAgBL,kBAAkBhY,OAI9B6Z,GAASR,OAAO5K,GAAWwN,GAAarO,GAH5CqO,uBAflB+L,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,0FAIO7N,EAAAA,OAAMnE,KAAA,CDfY,+BC+BnCuuF,EArBA,kBAwBA,SAAAC,mDAMA,OAN6CxkF,EAAAA,EAAAA,GAClCwkF,EAAAt8F,UAAAgZ,sBAAP,SAA6BC,EAAahD,OAChCiD,EAAOjD,EAAKkD,UACZC,EAAMnD,EAAKvC,YAAcI,UAAYmF,EAAMA,EAAIhD,EAAKvC,WAC1D,OAAOwF,EAAKG,MAAMD,EAAKnD,EAAKqD,UAAWrD,EAAKzB,aAEpD8nF,GAN6C3iF,IAW7C6iF,GAAA,WAKI,SAAAA,KASJ,OAPWA,EAAAx8F,UAAAsE,UAAP,SAAiBoY,EAAmBpH,GAChC,OAAKA,EAAY7U,OAGF6Z,GAASjG,KAAKnF,GAAWwN,GAAapH,GAF1CoH,uBATlB+L,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,eACN4I,MAAM,4CAYV8zE,EAdA,GAmBAC,GAAA,WAKI,SAAAA,EAAgDlC,GAAAz6F,KAAAy6F,MAAAA,EA2BpD,OAzBWkC,EAAAz8F,UAAAsE,UAAP,SAAiBoY,EAAmBggF,SAEhC,GADA58F,KAAKy6F,MAAMp6E,aAAezD,GACpBggF,GAAyB,IAAbA,IAAoBhgF,EAAWjc,OAC7C,OAAOic,EAKX,QAHMpI,EAAOpF,GAAWwN,GACpBigF,EAAU,EACVC,EAAgB,KACXt8F,EAAI,EAAGA,EAAIoc,EAAWjc,OAAQH,IAAK,KACpCu8F,EAAa,EACbD,IAAkBlgF,EAAWpc,GAAGo8F,KAChCE,EAAgBlgF,EAAWpc,GAAGo8F,GAC9BG,EAAa,GAEbA,IACAvoF,EAAK0G,OAAO1a,EAAIq8F,EAAS,IAAC3uF,EAAA,IACrBlO,KAAKy6F,MAAMC,UAAWoC,EACvB5uF,EAAClO,KAAKy6F,MAAMmC,UAAWE,EACvB5uF,EAAA4oB,UAAU,MAEd+lE,KAGR,OAAOroF,uBA9BdmU,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,yFAIO7N,EAAAA,OAAMnE,KAAA,CDrEY,+BCgGnC2uF,EAhCA,GAqCAK,GAAA,WAAA,SAAAA,KAUA,OAHWA,EAAA98F,UAAAsE,UAAP,SAAiBrC,GACb,OAAOA,EAAM4Q,MAAM,aAAa6hB,KAAK,0BAR5CjM,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,kBACN4I,MAAM,MAQVo0E,EAVA,MCvDgB,eACF,UAORC,GAAc,CAChBvpD,YAAe,GACfC,KAAQ,GACRC,QAAW,QAcX+Z,QAAA,EAIAC,MAAA,EAIAC,QAAA,GA2BJ,SAASqvC,GAAWC,EAAgBC,OAC1BC,EAAU,GAMhB,OALAF,EAAK1qF,QAAQ,SAAA6qF,GACJF,EAAKlsD,IAAIosD,IACVD,EAAQ76F,KAAK86F,KAGdD,6EAGP7rD,GAAU,EACRy0B,GAAO,4BAgDT,SAAAs3B,EACcl9D,EACAuN,EACAoC,EACAkrD,EACyCrmD,EAC/B3V,GANxB,IAAAtqB,EAOIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YANnB4U,EAAAyrB,WAAAA,EACAzrB,EAAAg5B,IAAAA,EACAh5B,EAAAo7B,UAAAA,EACAp7B,EAAAsmF,SAAAA,EACyCtmF,EAAAigC,uBAAAA,EAC/BjgC,EAAAsqB,UAAAA,EAtCjBtqB,EAAA4oF,iBAAkB,EAIlB5oF,EAAA6oF,qBAAuB,QACpB7oF,EAAA8oF,cAAgBxpB,GAChBt/D,EAAA+oF,eAAiBrrB,GACjB19D,EAAAgpF,gBAAkBhkF,GAAetB,GACjC1D,EAAAipF,sBAAgD,GAChDjpF,EAAAkpF,oBAA4C,GAC5ClpF,EAAAmpF,UAAY,GAEZnpF,EAAAopF,gBAAkB,GACpBppF,EAAAqpF,UAAY,GACZrpF,EAAAi6C,UAAuB,KACvBj6C,EAAA2qB,SAAW,IAAIC,EAAAA,QACf5qB,EAAAiX,MAAQ,GACRjX,EAAAspF,cAAgB,GAChBtpF,EAAAupF,YAAc,KACdvpF,EAAAwpF,gBAAkB,KAClBxpF,EAAAypF,iBAAmB,GACnBzpF,EAAA0xD,kBAAsCL,GACtCrxD,EAAAyxD,mBAAiCJ,GACjCrxD,EAAA0pF,iBAAoC,CACxC5+D,eAAgB,IAAI8J,GACpB/J,iBAAkB,IAAIwH,GACtBtH,OAAO,EACPC,qBAAqB,EACrBc,uBAAuB,GAEnB9rB,EAAAq0D,OAAS,GACTr0D,EAAAs5C,OAASqwC,GAAc5wC,QAiCxB/4C,EAAAw5B,gBAAmC,KAkBnCx5B,EAAA4pF,YAA4C,KA+B5C5pF,EAAA6pF,aAAiC,KAuBjC7pF,EAAA8pF,eAAmC,KAuBnC9pF,EAAA+pF,eAAmC,KAqBnC/pF,EAAAgqF,mBAAuC,KAuBvChqF,EAAAiqF,gBAAoC,KAuBpCjqF,EAAAkqF,cAAkC,KAqBlClqF,EAAAmqF,mBAAuC,KAqBvCnqF,EAAAoqF,kBAAsC,KAenCpqF,EAAAqqF,kBAAgC,KAUnCrqF,EAAAsqF,kBAAoB,IAAI/1E,EAAAA,aAUxBvU,EAAAirB,UAAY,IAAI1W,EAAAA,aAUhBvU,EAAAkrB,SAAW,IAAI3W,EAAAA,aAUfvU,EAAAmrB,UAAY,IAAI5W,EAAAA,aAUhBvU,EAAAorB,SAAW,IAAI7W,EAAAA,aAUfvU,EAAAuqF,WAAa,IAAIh2E,EAAAA,aAUjBvU,EAAAwqF,cAAgB,IAAIj2E,EAAAA,aAUpBvU,EAAAyqF,cAAgB,IAAIl2E,EAAAA,aAiBpBvU,EAAAjH,GAAK,aAAa6jC,KAuBlB58B,EAAAqgC,SAAW,YAMXrgC,EAAA88B,KAAO,WAwCP98B,EAAA0qF,mBAAoB,EAuEpB1qF,EAAA6W,eAAiB7R,GAAetB,GAuChC1D,EAAA2qF,kBAAoB,sBAgCpB3qF,EAAA8lF,SAAmB,KA8DnB9lF,EAAA4qF,YAAa,EAmBb5qF,EAAAg9B,UAAW,EAUXh9B,EAAA1C,KAAO,MA8BP0C,EAAA6qF,YAAc,GAyYX7qF,EAAA46C,gBAAkB,YACnB56C,EAAKi6C,UAAUK,QAAQQ,SAAW96C,EAAKi6C,UAAUK,QAAQS,SACzD/6C,EAAKi6C,UAAUK,QAAQC,WAAav6C,EAAKi6C,UAAUK,QAAQO,kBACxD76C,EAAKk6C,MAAQl6C,EAAKi6C,UAAUC,MAAQyvC,GAAc3wC,MAAQ2wC,GAAc1wC,SAEhFj5C,EAAK8qF,0BA9iCL9qF,EAAKsmF,SAASV,SAAS5lF,KA46C/B,OAz9CuCoD,EAAAA,EAAAA,GA4FnCxY,OAAAgC,eAAI+7F,EAAAr9F,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKw/F,YAAcx/F,KAAKs/F,mDAsUnC9/F,OAAAgC,eACW+7F,EAAAr9F,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAKwsD,SAASre,2CAM1B3uC,OAAAgC,eACW+7F,EAAAr9F,UAAA,WAAQ,KADnB,WAEI,MAAO,2CAMXV,OAAAgC,eACW+7F,EAAAr9F,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKwsD,SAAS7+C,oCAgCzBnO,OAAAgC,eACW+7F,EAAAr9F,UAAA,iBAAc,KADzB,WAEI,OAA6B,OAAzBF,KAAKo+F,iBAA4Bp+F,KAAKo+F,kBAAoBpqF,UAthB7C,GAuhBNhU,KAAKm7F,WAETn7F,KAAKo+F,qBAGhB,SAA0B9kF,GACtBtZ,KAAKo+F,gBAAkB9kF,mCAgC3B9Z,OAAAgC,eACW+7F,EAAAr9F,UAAA,aAAU,KADrB,WAEI,OAAyB,OAArBF,KAAKm+F,aAAwBn+F,KAAKm+F,cAAgBnqF,UAC3CipF,GAAYj9F,KAAKwyC,gBAErBxyC,KAAKm+F,iBAGhB,SAAsB7kF,GAClBtZ,KAAKm+F,YAAc7kF,mCA2BvB9Z,OAAAgC,eAAW+7F,EAAAr9F,UAAA,aAAU,KAArB,WACI,OAAQF,KAAKmC,QAAUnC,KAAK4vD,6CA2BhCpwD,OAAAgC,eACI+7F,EAAAr9F,UAAA,OAAI,KADR,WAEI,OAAOF,KAAK6rB,WAEhB,SAASvS,GACLtZ,KAAK6rB,MAAQ,GAAc,oCAmB/BrsB,OAAAgC,eACI+7F,EAAAr9F,UAAA,aAAU,KAqBd,WACI,OAAOF,KAAK2/F,YAAc3/F,KAAK2/F,YAAc3/F,KAAK06F,cAvBtD,SACephF,GACXtZ,KAAK2/F,YAAcrmF,mCAgCvB9Z,OAAAgC,eACW+7F,EAAAr9F,UAAA,WAAQ,KAcnB,WACI,OAAOF,KAAK+9F,eAhBhB,SACoBzkF,GAChBtZ,KAAK4/F,aAAa5/F,KAAK+9F,WACvB/9F,KAAK+9F,UAAYzkF,EACjBtZ,KAAKuU,KAAKvU,KAAK+9F,4CA6DlBv+F,OAAAgC,eAAW+7F,EAAAr9F,UAAA,QAAK,KAAhB,WACG,OAAOF,KAAKkuD,YAWhB,SAAiBY,GACb9uD,KAAKkuD,OAASY,EACd9uD,KAAK6/F,WAAW/wC,MAAQX,GAAcowC,GAAczvC,qCAaxDyuC,EAAAr9F,UAAAqyD,YAFA,SAEYjgD,GACRA,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKmO,QAMTovF,EAAAr9F,UAAA4/F,aAAA,SAAaxtF,GACTA,EAAMmyB,kBACNnyB,EAAM23B,iBACNjqC,KAAK+N,UAWTvO,OAAAgC,eAAI+7F,EAAAr9F,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKsqD,QAAQ/7C,WAUxB,SAAwBA,GACpBvO,KAAKsqD,QAAQ/7C,MAAQA,mCAWzB/O,OAAAgC,eAAI+7F,EAAAr9F,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKsqD,QAAQnM,oBAUxB,SAAmB7rB,GACftyB,KAAKsqD,QAAQnM,eAAiB7rB,EAC9BtyB,KAAK4tC,IAAIrL,iDAMb/iC,OAAAgC,eAAW+7F,EAAAr9F,UAAA,uBAAoB,KAA/B,WACI,OAAOF,KAAKw/F,WAAax/F,KAAK69F,sBAAwB,QAM1D,SAAgC17F,GAC5BnC,KAAK69F,sBAAwB17F,EAC7BnC,KAAK4tC,IAAI+U,gDAMbnjD,OAAAgC,eAAW+7F,EAAAr9F,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAK89F,yBAMhB,SAA8B37F,GAC1BnC,KAAK89F,oBAAsB37F,EAC3BnC,KAAK4tC,IAAI+U,gDAGH46C,EAAAr9F,UAAA0/F,aAAV,SAAuBz/E,GACnB,GAAIA,IAAUnM,WAAuB,OAAVmM,EAA3B,KAIMstB,EAAer+B,GAAWpP,KAAKwkB,oBAC/B7Q,EAAQ85B,EAAa30B,UAAU,SAAC3C,GAAS,OAAAA,EAAKvC,YAAcuM,IAC9DxM,GAAS,IACT85B,EAAavyB,OAAOvH,EAAO,GAC3B3T,KAAKwkB,mBAAqBipB,QAP1BztC,KAAKwkB,mBAAqB,IAmBlChlB,OAAAgC,eAAI+7F,EAAAr9F,UAAA,QAAK,KAAT,WACI,OAAOF,KAAKipE,wCAMhBzpE,OAAAgC,eAAW+7F,EAAAr9F,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKw/F,WAAax/F,KAAKk+F,cAAgBl+F,KAAKwU,UAMvD,SAAwB8E,GACpBtZ,KAAKk+F,cAAgBl+F,KAAK48F,UAAYtjF,GAAO,IAAIU,OAAO,SAAC1X,GAAM,OAAe,IAAfA,EAAEw0B,WAAqBxd,EACtFtZ,KAAK+/F,8CAMFxC,EAAAr9F,UAAA8/F,YAAP,SAAmB1tF,GACG,cAAdA,EAAMrR,KAAqC,SAAdqR,EAAMrR,KACnCjB,KAAKwsD,SAASpZ,YAAcpzC,KAAKwsD,SAAS9Z,MAAM,GAChD1yC,KAAKi/F,kBAAkB3+D,cAAciT,SAChB,WAAdjhC,EAAMrR,KAAkC,QAAdqR,EAAMrR,KACvCjB,KAAK+N,UAONwvF,EAAAr9F,UAAAusD,cAAP,SAAqBn6C,GACC,YAAdA,EAAMrR,KAAmC,OAAdqR,EAAMrR,MACjCqR,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKoO,UAILmvF,EAAAr9F,UAAA6/F,WAAR,WAAA,IAAAnrF,EAAA5U,KACUigG,EAAajgG,KAAKigG,WAKlBC,EAAYlgG,KAAKqgB,aAAauM,KAJpB,SAACtqB,GAEb,OADc29F,EAAa39F,EAAE29F,GAAc39F,GAC9BmO,WAAW4E,gBAAkBT,EAAK6qF,YAAY//E,OAAOrK,gBAGtErV,KAAKw9F,gBAAkBx9F,KAAKs/F,oBAAsBY,GAM/C3C,EAAAr9F,UAAAigG,kBAAP,SAAyB7tF,GAAzB,IAAAsC,EAAA5U,KACQogG,GAAU,EACRC,EAAargG,KAAKsqD,QACpBh4C,IAAU0B,WAAahU,KAAKg+F,kBAAoB1rF,IAIhDtS,KAAKg+F,gBAAkB1rF,IAAU0B,UAAY1B,EAAQ,GAErDA,IAAU0B,WAENqsF,EAAWzgD,eACXygD,EAAWh9C,SAAS,GAEpB+8C,GAAU,EAEdpgG,KAAKo/F,cAAc78E,KAAKjQ,IAExB8tF,GAAU,EAEVpgG,KAAKw/F,YACLx/F,KAAKga,SAEDomF,GACAC,EAAWjiD,YAAYvZ,KAAKimB,EAAAA,KAAK,IAAI/lB,UAAU,WACvCs7D,EAAWzgD,gBACXhrC,EAAKg5B,IAAIrL,mBAKrBviC,KAAK+/F,eAONxC,EAAAr9F,UAAAqU,KAAP,SAAYX,EAAmBa,EAA8CC,EACzE8B,GACA,QAF2B,IAAA/B,IAAAA,EAAwBK,GAAiB1B,UAAK,IAAAsB,IAAAA,GAAA,QACzE,IAAA8B,IAAAA,EAA6BpC,GAAuBC,YAC/CT,EAAL,KAGM2Q,EAAenV,GAAWpP,KAAKwkB,oBAAoB,GAEzDxkB,KAAKykB,2BAA2BF,EAAc3Q,EAAWa,EAAKC,EAAY8B,GAC1ExW,KAAKwkB,mBAAqBD,IAGpBg5E,EAAAr9F,UAAAukB,2BAAV,SAAqClW,EAA6BqF,EAAmBa,EAAuBC,EACxG8B,GAEA,GAAI/B,IAAQK,GAAiB3B,KAA7B,KAKMc,EAAa1F,EAAM+I,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcA,IAEtDK,EAGDzU,OAAOa,OAAO4T,EAAY,CAAEL,UAASA,EAAEa,IAAGA,EAAEC,WAAUA,IAFtDnG,EAAM/L,KAAK,CAAEoR,UAASA,EAAEa,IAAGA,EAAEC,WAAUA,EAAE8B,SAAQA,SAPjDjI,EAAM2M,OAAO3M,EAAMuK,UAAU,SAAC3C,GAAS,OAAAA,EAAKvC,YAAcA,IAAY,IAgB9EpU,OAAAgC,eAAW+7F,EAAAr9F,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKigG,WACEK,GAEJA,oCAMX9gG,OAAAgC,eAAW+7F,EAAAr9F,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKm+C,eAAiB,GACzBn+C,KAAK06F,UACL16F,KAAKmd,WAAamjF,oCAIlB/C,EAAAr9F,UAAAqgG,sBAAR,SAA8BC,EAAY9yF,eACtC,QADsC,IAAAA,IAAAA,GAAA,GAClCA,EAAK,KACCsiC,EAAYhwC,KAAKygG,qBAAqBD,OAC5C,IAAoB,IAAAE,EAAA3wF,EAAAigC,GAAS2wD,EAAAD,EAAAx+F,QAAAy+F,EAAAv+F,KAAAu+F,EAAAD,EAAAx+F,OAAE,CAA1B,IAAMo7F,EAAKqD,EAAAx+F,MACZnC,KAAKq+F,iBAAiBf,EAAMt9F,KAAK06F,WAAa4C,EAAMt9F,KAAKigG,2HAG7D,IAAoB,IAAAW,EAAA7wF,EAAAywF,GAAGK,EAAAD,EAAA1+F,QAAA2+F,EAAAz+F,KAAAy+F,EAAAD,EAAA1+F,OAAE,CAAdo7F,EAAKuD,EAAA1+F,aACLnC,KAAKq+F,iBAAiBf,0GAMjCC,EAAAr9F,UAAAugG,qBAAR,SAA6BD,GAA7B,IAAA5rF,EAAA5U,KACI,OAAOA,KAAKwU,KAAKwF,OAAO,SAAAsjF,GAAS,OAAAkD,EAAIlvF,QAAQgsF,EAAM1oF,EAAK8lF,YAAc,IAAGp+E,IAAI,SAAAha,SACzE,OAAA4L,EAAA,IACK0G,EAAK8lF,UAAWp4F,EAAEsS,EAAK8lF,UACxBxsF,EAAC0G,EAAKqrF,YAAa39F,EAAEsS,EAAKqrF,iBAU/B1C,EAAAr9F,UAAA46F,eAAP,SAAsB7+E,GAClB,OAAOjc,KAAKgwC,UAAUiB,iBAAiBjxC,KAAK2N,GAAIsO,IAM7CshF,EAAAr9F,UAAA4gG,aAAP,WACI9gG,KAAK4tC,IAAIrL,iBAMNg7D,EAAAr9F,UAAA87F,mBAAP,WAEI,MAA4B,KAArBh8F,KAAKy/F,aAAsBz/F,KAAKw9F,iBAMpCD,EAAAr9F,UAAA6gG,gBAAP,SAAuBhpD,GACfA,EAAIgxB,QACJ/oE,KAAKghG,iBAELhhG,KAAKihG,oBAON1D,EAAAr9F,UAAA06F,oBAAP,mBACI,GAAK56F,KAAKy/F,YAAV,KAGMpjF,EAAWrc,KAAKy/F,YAAY//E,OAC5BwhF,EAAYlhG,KAAKigG,aAAU/xF,EAAA,IAC5BlO,KAAK06F,UAAWr+E,EACjBnO,EAAClO,KAAKigG,YAAa5jF,KACnBA,EACArc,KAAK48F,UACLp9F,OAAOa,OAAO6gG,IAASpxF,EAAA,IAAK9P,KAAK48F,UAAW58F,KAAKy9F,qBAAoB3tF,QAEnEqxF,EAAgBnhG,KAAKwU,KACrB4sF,EAAa1+F,EAAO1C,KAAKwU,MAC/B4sF,EAAc5+F,KAAK0+F,OACblzF,EAAgC,CAClCmzF,cAAaA,EAAED,UAASA,EAAEE,cAAaA,GAE3CphG,KAAKm/F,WAAW58E,KAAKvU,GACrBhO,KAAKwU,KAAKhS,KAAK0+F,GAGflhG,KAAKwU,KAAOpF,GAAWpP,KAAKwU,MAC5BxU,KAAKg7F,YAAuC,OAA3Bh7F,KAAKk7F,SAASR,SAAoB,CAACwG,EAAUlhG,KAAK06F,WAAa,CAACwG,IAAY,GAC7FlhG,KAAKw9F,iBAAkB,EACvBx9F,KAAKw+F,YAAYl+D,cAAciT,QAC/BvzC,KAAKwsD,SAASpZ,YAAc,KAC5BpzC,KAAKmgG,sBAMF5C,EAAAr9F,UAAA27F,iBAAP,SAAwBwF,GAChBrhG,KAAKshG,oBAAsBthG,KAAKw+F,YAChCx+F,KAAKw+F,YAAYl+D,cAAciT,QAE3B8tD,EACArhG,KAAKi/F,kBAAkB3+D,cAAciT,SAErCvzC,KAAK6/F,WAAWv/D,cAAciT,QAC9BvzC,KAAK+N,WAMPwvF,EAAAr9F,UAAAmlB,6BAAV,SAAuC7L,EAAWH,EAAW3E,EAAYd,OAC/D2tF,EAAQ7+F,EAAO1C,KAAKy8F,sBACpBxoF,EAAastF,EAASjqF,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcA,IACxDmS,EAAgB,CAAEnS,UAASA,EAAE4F,UAASA,EAAEH,UAASA,EAAE3E,WAAUA,GAMnE,GALKT,EAGDzU,OAAOa,OAAO4T,EAAY8R,GAF1Bw7E,EAAS/+F,KAAKujB,GAId/lB,KAAK48F,SAAU,KACT4E,EAAcD,EAASjqF,KAAK,SAACnB,GAAS,MAAmB,aAAnBA,EAAKvC,YAC3C6tF,EAAmB,CACrB7tF,UAAW,WAAY8tF,WAAY,GACnCroF,UAAWi5D,GAA2Bj+D,WAAWgF,UAAU,QAAS3E,YAAY,GAE/E8sF,EAGDhiG,OAAOa,OAAOmhG,EAAaC,GAF3BF,EAAS/+F,KAAKi/F,GAKtBzhG,KAAKy8F,qBAAuB8E,GAWtBhE,EAAAr9F,UAAAw/F,uBAAV,WACI,GAAI1/F,KAAK6uD,WAAa7uD,KAAK6uD,UAAUK,QAAQC,UAAW,KAE9C1sD,EAAQzC,KAAK6uD,UAAUK,QAAQC,UAAS,IAC9CnvD,KAAK+tD,WAAWU,WAAahsD,GAASA,EAAM+rD,WAO7C+uC,EAAAr9F,UAAA0uD,OAAP,WACQ5uD,KAAKmuC,YACLnuC,KAAKqmE,qBACDrmE,KAAK6uD,YAAc7uD,KAAK6uD,UAAUC,MAClC9uD,KAAK8uD,MAAQyvC,GAAc1wC,QAE3B7tD,KAAK8uD,MAAQyvC,GAAc5wC,UAMhC4vC,EAAAr9F,UAAAwuD,QAAP,WACQ1uD,KAAKmuC,WACLnuC,KAAKqmE,sBAONk3B,EAAAr9F,UAAA8Z,OAAP,WACIha,KAAKqlB,6BAA6BrlB,KAAKy/F,YAAY//E,OAAQw0D,GAA0B7/D,WAAWgF,UAAU,aACtG,EAAMrZ,KAAKmd,WAAamjF,GAAsBtsF,UAAYhU,KAAKigG,aAMhE1C,EAAAr9F,UAAA2uC,SAAP,WACI7uC,KAAK6uD,UAAY7uD,KAAKk/B,UAAUpxB,IAAe6zF,EAAS,UAAqB,MAC7E3hG,KAAKs+F,iBAAiB7+D,iBAAiBnF,SAASt5B,OAAShB,KAAKqgC,WAAWC,cACzEtgC,KAAKgwC,UAAUtnB,IAAI1oB,KAAK2N,GAAI,IAAI4C,MAM7BgtF,EAAAr9F,UAAAyhD,gBAAP,WACI3hD,KAAKqgB,aAAY3d,EAAO1C,KAAKwU,MAEzBxU,KAAK6uD,YACL7uD,KAAK6uD,UAAUU,cAAc1qB,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU/kC,KAAKwvD,iBAC3ExvD,KAAK0/F,yBACL1/F,KAAK4tC,IAAIrL,kBAOVg7D,EAAAr9F,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,OACdlC,KAAKu/B,SAASkH,WACdzmC,KAAKk7F,SAAS3vD,QACdvrC,KAAKgwC,UAAUzE,MAAMvrC,KAAK2N,KAMvB4vF,EAAAr9F,UAAA0hG,YAAP,SAAmBtvF,GACftS,KAAKq/F,cAAc98E,KAAKjQ,IAMrBirF,EAAAr9F,UAAA+nE,WAAP,SAAkB9lE,GACdnC,KAAKg7F,YAAY74F,GAAO,GACxBnC,KAAK4tC,IAAI+U,gBAMN46C,EAAAr9F,UAAAgoE,iBAAP,SAAwBphB,GACpB9mD,KAAKsmE,kBAAoBxf,GAMtBy2C,EAAAr9F,UAAAioE,kBAAP,SAAyBrhB,GACrB9mD,KAAKqmE,mBAAqBvf,GAMvBy2C,EAAAr9F,UAAA2hG,iBAAP,SAAwB/W,GACpB9qF,KAAK4xC,SAAWk5C,GAMbyS,EAAAr9F,UAAA4hE,eAAP,WACI,OAAO9hE,KAAK6/F,WAAWv/D,eAM3B9gC,OAAAgC,eAAW+7F,EAAAr9F,UAAA,WAAQ,KAAnB,WAEI,OADAF,KAAKi+F,UAAYj+F,KAAKmd,SAClBnd,KAAKy+F,aACEz+F,KAAKy+F,aAEZz+F,KAAKi+F,YAAcqC,GACZtgG,KAAK8hG,gBAET9hG,KAAK+hG,mDAMhBviG,OAAAgC,eAAW+7F,EAAAr9F,UAAA,UAAO,KAAlB,WACI,MAAO,CACH09C,UAAW59C,uCAOZu9F,EAAAr9F,UAAA8hG,iBAAP,SAAwB1vF,GACpBtS,KAAKihG,kBAAiB,EAAM3uF,GACxBtS,KAAKmuC,UACLnuC,KAAK8hE,iBAAiBvuB,QAEtBvzC,KAAK67F,kBAAiB,GAE1BvpF,EAAMmyB,mBAWH84D,EAAAr9F,UAAA6N,OAAP,eACUqgC,EAAkB5uC,OAAOa,OAAO,GAAIL,KAAKs+F,iBAAkBt+F,KAAKouC,iBACtEpuC,KAAKwsD,SAASz+C,OAAOqgC,IAWlBmvD,EAAAr9F,UAAAiO,KAAP,eACUigC,EAAkB5uC,OAAOa,OAAO,GAAIL,KAAKs+F,iBAAkBt+F,KAAKouC,iBACtEpuC,KAAKwsD,SAASr+C,KAAKigC,IAWhBmvD,EAAAr9F,UAAAkO,MAAP,WACIpO,KAAKwsD,SAASp+C,SAUlB5O,OAAAgC,eAAW+7F,EAAAr9F,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKwsD,SAASre,2CAUlBovD,EAAAr9F,UAAA+hG,cAAP,WAEI,OADctiG,MAAMuT,KAAKlT,KAAKgwC,UAAUliC,IAAI9N,KAAK2N,MAY9C4vF,EAAAr9F,UAAA86F,YAAP,SAAmBkH,EAAsBC,EAAiC7vF,GACtE,GAAI4vF,EAAU,KACJhyD,EAAelwC,KAAKgwC,UAAUO,UAAUvwC,KAAK2N,GAAIu0F,EAAUC,GACjEniG,KAAKoiG,aAAalyD,EAAc59B,KAWjCirF,EAAAr9F,UAAA66F,cAAP,SAAqBroD,EAAmBpgC,GACpC,GAAIogC,EAAO,KACDxC,EAAelwC,KAAKgwC,UAAUa,aAAa7wC,KAAK2N,GAAI+kC,GAC1D1yC,KAAKoiG,aAAalyD,EAAc59B,KAWjCirF,EAAAr9F,UAAA8gG,eAAP,SAAsBqB,EAAwB/vF,OACpCgwF,EAAatiG,KAAKgwC,UAAUuB,YAAY8wD,EAAeriG,KAAKwU,KAAOxU,KAAKqgB,aAAcrgB,KAAK06F,UAC3FxqD,EAAelwC,KAAKgwC,UAAUO,UAAUvwC,KAAK2N,GAAI20F,GACvDtiG,KAAKoiG,aAAalyD,EAAc59B,IAU7BirF,EAAAr9F,UAAA+gG,iBAAP,SAAwBoB,EAAwB/vF,OACxC49B,EAAelwC,KAAKgwC,UAAUG,YAC9BnwC,KAAKqgB,aAAa1f,SAAWX,KAAKwU,KAAK7T,QAAW0hG,IAClDnyD,EAAelwC,KAAKgwC,UAAUa,aAAa7wC,KAAK2N,GAAI3N,KAAKgwC,UAAUuB,YAAYvxC,KAAKqgB,aAAcrgB,KAAK06F,YAE3G16F,KAAKoiG,aAAalyD,EAAc59B,IAqB7BirF,EAAAr9F,UAAAuqD,gBAAP,SAAuBna,EAAa2hB,EAAe3/C,QAAf,IAAA2/C,IAAAA,GAAA,GACjB,OAAX3hB,GAAmBA,IAAWt8B,YAG9Bi+C,EACAjyD,KAAKg7F,YAAY,CAAC1qD,IAAS,EAAOh+B,GAElCtS,KAAK+6F,cAAc,CAACzqD,GAASh+B,KAI3BirF,EAAAr9F,UAAAkiG,aAAV,SAAuBlyD,EAAwB59B,GAA/C,IAAAsC,EAAA5U,KACUuiG,EAAUrF,GAAWl9F,KAAKgwC,UAAUliC,IAAI9N,KAAK2N,IAAKuiC,GAClDsyD,EAAQtF,GAAWhtD,EAAclwC,KAAKgwC,UAAUliC,IAAI9N,KAAK2N,KACzDK,EAAuC,CACzCkiC,aAAcvwC,MAAMuT,KAAKg9B,GACzBmF,aAAc11C,MAAMuT,KAAKlT,KAAKgwC,UAAUliC,IAAI9N,KAAK2N,KAAO,IACxD60F,MAAKA,EACLD,QAAOA,EACPjwF,MAAKA,EACL8P,QAAQ,GAGZ,GADApiB,KAAKk/F,kBAAkB38E,KAAKvU,IACvBA,EAAKoU,OAAQ,CACdpiB,KAAKgwC,UAAUW,aAAa3wC,KAAK2N,GAAIK,EAAKkiC,cAAc,OACpD/tC,EAAQ,GACZ,GAAInC,KAAKsjD,SACL,GAAIt1C,EAAKkiC,aAAavvC,OAAQ,KACpB8hG,EAAez0F,EAAKqnC,aAAar7B,OAAO,SAAA1X,GAAK,OAAA0L,EAAKkiC,aAAa5+B,QAAQhP,GAAK,IAC5EogG,EAAa10F,EAAKkiC,aAAal2B,OAAO,SAAA1X,GAAK,OAAA0L,EAAKqnC,aAAa/jC,QAAQhP,GAAK,IAChFtC,KAAKugG,sBAAsBmC,GAC3B1iG,KAAKugG,sBAAsBkC,GAAc,GACzCtgG,EAAQ3C,OAAOwQ,KAAKhQ,KAAKq+F,kBAAkB/hF,IAAI,SAAAha,GAAK,OAAAsS,EAAKypF,iBAAiB/7F,KAAIsyB,KAAK,WAGnF50B,KAAKugG,sBAAsBvyF,EAAKqnC,cAAc,QAGlDlzC,EAA4B,OAApBnC,KAAKigG,YAAuBjgG,KAAKigG,aAAejsF,UACpDhU,KAAK2iG,mBAAmB30F,EAAKkiC,cAAc5zB,IAAI,SAAAghF,GAAS,OAAAA,EAAM1oF,EAAKqrF,cAAarrE,KAAK,MACrF5mB,EAAKkiC,aAAatb,KAAK,MAE/B50B,KAAKipE,OAAS9mE,EACdnC,KAAKsmE,kBAAkBt4D,EAAKkiC,gBAK5BqtD,EAAAr9F,UAAAyiG,mBAAR,SAA2B3yF,GAA3B,IAAA4E,EAAA5U,KACI,OAA+B,OAA3BA,KAAKk7F,SAASR,SACP1qF,EAGJA,EAAKsM,IAAI,SAAArb,GAAO,OAAA2T,EAAKJ,KAAK8C,KAAK,SAAAgmF,GAAS,OAAAA,EAAM1oF,EAAK8lF,YAAcz5F,MAAM+Y,OAAO,SAAA1X,GAAK,OAAAA,IAAM0R,aAO7FupF,EAAAr9F,UAAA0iG,cAAP,SAAqBtwF,GACjBtS,KAAK6/B,UAAUtd,KAAKjQ,GAChBA,EAAM8P,QAGVpiB,KAAKmgG,qBAMF5C,EAAAr9F,UAAA2iG,aAAP,WACI7iG,KAAK8gG,eACL9gG,KAAK67F,kBAAiB,GACtB77F,KAAK8/B,SAASvd,QAMXg7E,EAAAr9F,UAAA4iG,cAAP,SAAqBxwF,GACjBtS,KAAK+/B,UAAUxd,KAAKjQ,GAChBA,EAAM8P,SAGVpiB,KAAKy/F,YAAc,GACnBz/F,KAAK6/F,WAAWv/D,cAAciT,UAM3BgqD,EAAAr9F,UAAA6iG,aAAP,WACI/iG,KAAKggC,SAASzd,4BAh+CrBuvB,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,YACVqjC,SAAA,iwKACA5iC,UAAW,CACPorF,GACA,CAAEtuC,QF5HyB,yBE4HKC,YAAaqxC,GAC7C,CAAEtxC,QAAS8V,EAAAA,kBAAmB7V,YAAaG,EAAAA,WAAW,WAAM,OAAAkxC,IAAoBn1B,OAAO,iDA9HhC9kC,EAAAA,kBAA5C2L,EAAAA,yBAeVc,UAsBAwqD,sCAsIArrD,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,aA1K8DjN,EAAAA,SAAQ7lC,WAAA,CAAA,CAAAmR,KA2KzFg9B,EAAAA,+CAKJuH,EAAAA,UAASzoC,KAAA,CAAC8vC,GAAmB,CAAEpH,KAAMoH,GAAmBnH,UAAQ,6BAoBhEhoC,EAAAA,0BAIA8nC,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMqa,GAAwBpa,UAAQ,wBAGhEF,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMoX,GAAmBnX,UAAQ,sBAK3DF,EAAAA,UAASzoC,KAAA,CAAC0tF,GAA2B,CAAEhlD,KAAMglD,GAA2B/kD,UAAQ,yBAMhFF,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE2oC,UAAQ,0BA+BnCwV,EAAAA,aAAYn+C,KAAA,CAACisF,GAAuB,CAAEvjD,KAAMkS,EAAAA,YAAajS,UAAQ,4BAuBjEwV,EAAAA,aAAYn+C,KAAA,CAAC+rF,GAAyB,CAAErjD,KAAMkS,EAAAA,YAAajS,UAAQ,4BAuBnEwV,EAAAA,aAAYn+C,KAAA,CAACgsF,GAAyB,CAAEtjD,KAAMkS,EAAAA,YAAajS,UAAQ,gCAqBnEwV,EAAAA,aAAYn+C,KAAA,CAACmsF,GAA6B,CAAEzjD,KAAMkS,EAAAA,YAAajS,UAAQ,6BAuBvEwV,EAAAA,aAAYn+C,KAAA,CAACosF,GAA0B,CAAE1jD,KAAMkS,EAAAA,YAAajS,UAAQ,2BAuBpEwV,EAAAA,aAAYn+C,KAAA,CAACksF,GAAwB,CAAExjD,KAAMkS,EAAAA,YAAajS,UAAQ,gCAqBlEwV,EAAAA,aAAYn+C,KAAA,CAACqsF,GAA6B,CAAE3jD,KAAMkS,EAAAA,YAAajS,UAAQ,+BAqBvEwV,EAAAA,aAAYn+C,KAAA,CAACssF,GAA4B,CAAE5jD,KAAMkS,EAAAA,YAAajS,UAAQ,+BAGtEF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,6BAGpDF,EAAAA,UAASzoC,KAAA,CAAC,UAAW,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,oCAMlDF,EAAAA,UAASzoC,KAAA,CAAC8vC,GAAmB,CAAEnH,UAAQ,+BAGvCF,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE2oC,UAAQ,+BAU7ChrB,EAAAA,0BAUAA,EAAAA,yBAUAA,EAAAA,0BAUAA,EAAAA,yBAUAA,EAAAA,2BAUAA,EAAAA,8BAUAA,EAAAA,8BAUAA,EAAAA,mBAgBAwjB,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,qBAgBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gBAAa,CAAAkE,KACzBvD,EAAAA,wBAMAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,6CAkBZW,EAAAA,8BAgBAA,EAAAA,0BAyBAA,EAAAA,0BAgBAA,EAAAA,2BA8BAA,EAAAA,iCAuBAA,EAAAA,oBAWAA,EAAAA,wBAqBAA,EAAAA,0BAGAA,EAAAA,wBAkCAA,EAAAA,0BAyBAA,EAAAA,8BASAA,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,0CASZW,EAAAA,oBAUAA,EAAAA,2BAoCAC,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAkE,KAC5CtD,EAAAA,aAAYZ,KAAA,CAAC,wBAAyB,CAAC,cAswB5CuvF,GAz9CuCxpD,IA89CvCivD,GAAA,WAAA,SAAAA,KAwB8B,2BAxB7Bh0F,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACsuF,GAAmBtC,GAAuB+B,GAA6BL,GAClFJ,GAAuBG,GAAqBhB,GAA2BD,GACvExB,GACAC,GACAC,GACAJ,GACAC,GACAI,GACAC,GACAC,IACJprF,QAAS,CAACquF,GAAmBtC,GAAuBS,GAA2BD,GAC3ExB,GACAC,GACAC,GACAJ,GACAC,GACAI,GACAC,GACAC,IACJ79C,QAAS,CAACquB,GAAiBpuB,EAAAA,aAAciV,GAAqBigC,EAAAA,YAAaqR,EAAAA,oBACvE94C,GAAgBva,GAAiBimD,GAAmB9oC,GAAmBuG,GAAiBokB,IAC5FvoE,UAAW,CAAC4gC,QAEcizD,EAxB9B,GCzjDAE,GAAA,WAAA,SAAAA,KAggBA,OAnfkBA,EAAAC,gBAAd,SAA8BC,EAAmBliB,QAAA,IAAAA,IAAAA,EAAiBgiB,EAAeG,oBACzEC,EAAa,GACjB,GAAIF,IAAcpvF,WAAc7C,KAEzB,KACGiyD,EAAO,GAA0B8/B,EAAeK,gBAChDC,EAAY7jG,MAAMuT,KAAKkwD,GACvBqgC,EAAoBrgC,EAAK9xD,QAAO,KAChCoyF,EAAkBtgC,EAAK9xD,QAAO,KAC9BqyF,EAAmBvgC,EAAK9xD,QAAO,MAEX,IAAtBqyF,GACAL,EAAW9gG,KAAK,CACZ0P,KAAI,OACJ0xF,gBAAiBD,EACjBE,WAAYX,EAAeY,kBAAkB1gC,MAI1B,IAAvBqgC,GACAH,EAAW9gG,KAAK,CACZ0P,KAAI,QACJ0xF,gBAAiBH,EACjBI,WAAYX,EAAea,mBAAmB3gC,MAI7B,IAArBsgC,GACAJ,EAAW9gG,KAAK,CACZ0P,KAAI,MACJ0xF,gBAAiBF,EACjBG,WAAYX,EAAec,iBAAiB5gC,KAIpD,IAAK,IAAI5iE,EAAI,EAAGA,EAAIgjG,EAAU7iG,OAAQH,IAC7B0iG,EAAee,WAAWT,EAAUhjG,KACrC8iG,EAAW9gG,KAAK,CACZ0P,KAAMgxF,EAAegB,UACrBN,gBAAiBpjG,EACjB2B,MAAOqhG,EAAUhjG,KAK7B8iG,EAAW/uF,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAE0uF,gBAAkBrkG,EAAEqkG,kBAChDV,EAAeiB,uBAAuBb,QA3CtCA,EAAaJ,EAAekB,qBAAqBljB,GA6CrD,OAAOoiB,GAQGJ,EAAAmB,aAAd,SAA2Bf,GAEvB,QADMgB,EAAY,GACT9jG,EAAI,EAAGA,EAAI8iG,EAAW3iG,OAAQH,IACnC,GAAI8iG,EAAW9iG,GAAG0R,OAASgxF,EAAegB,UACtCI,EAAU9hG,KAAK8gG,EAAW9iG,GAAG2B,YAC1B,GAAsB,QAAlBmhG,EAAW9iG,GAAG0R,MAA4C,UAAlBoxF,EAAW9iG,GAAG0R,KAC7DoyF,EAAU9hG,KAAK,WACZ,GAAsB,SAAlB8gG,EAAW9iG,GAAG0R,KACrB,OAAQoxF,EAAW9iG,GAAGqjG,YAClB,IAAA,UACIS,EAAU9hG,KAAK,QACf,MAEJ,IAAA,UACI8hG,EAAU9hG,KAAK,MAM/B,OAAO8hG,EAAU1vE,KAAK,KAQZsuE,EAAAqB,QAAd,SAAsBjB,GAElB,QADMlgC,EAAO,GACJ5iE,EAAI,EAAGA,EAAI8iG,EAAW3iG,OAAQH,IAAK,CACxC,OAAQ8iG,EAAW9iG,GAAGqjG,YAClB,IAAA,UAC0B,QAAlBP,EAAW9iG,GAAG0R,KACdkxD,EAAK5gE,KAAK,KACe,UAAlB8gG,EAAW9iG,GAAG0R,KACrBkxD,EAAK5gE,KAAK,KAEV4gE,EAAK5gE,KAAK,QAEd,MAEJ,IAAA,UAC0B,QAAlB8gG,EAAW9iG,GAAG0R,KACdkxD,EAAK5gE,KAAK,MACe,UAAlB8gG,EAAW9iG,GAAG0R,KACrBkxD,EAAK5gE,KAAK,MAEV4gE,EAAK5gE,KAAK,MAKlB8gG,EAAW9iG,GAAG0R,OAASgxF,EAAegB,WACtC9gC,EAAK5gE,KAAK8gG,EAAW9iG,GAAG2B,OAIhC,OAAOihE,EAAKxuC,KAAK,KASPsuE,EAAAsB,eAAd,SAA6BC,EAAwBC,EAAqB/jC,OAQlEiS,EAMA+xB,EAbEC,EAAS1B,EAAe2B,qBAAqBJ,EAAiB9jC,GAC9DmkC,EAAW5B,EAAe6B,uBAAuBN,EAAiB9jC,GAClEqkC,EAAU9B,EAAe+B,sBAAsBR,EAAiB9jC,GAChE0pB,EAAa6Y,EAAegC,kBAAkBT,EAAe,QAAkBZ,WAC/E/wB,EAAkB,KAAX8xB,EAAiBnrD,SAASmrD,EAAQ,IAAM,EAC/C/xB,EAAsB,KAAbiyB,EAAmBrrD,SAASqrD,EAAU,IAAM,EAAI,EAS/D,GALIlyB,EADY,KAAZoyB,EACkB,YAAV3a,EAAuC,KAAO,OAE/C2a,EAGPN,EAAe,KACTS,EAAeT,EAAchxB,cAAcjjE,WACrB,IAAxB00F,EAAaxkG,SACbgkG,EAAaQ,EAAat/B,UAAU,EAAG,SAG3C8+B,EAAa,SAEXS,EAAsB,YAAV/a,EAAuCsa,EAAWhiG,OAAOiwE,GAAQA,EAEnF,OAAKC,EAAQ,GAAOA,EAAQ,IAAQA,IAAUwyB,IACnC,CAAE92F,MAAK,UAAqBpM,MAAOw+D,GAGzCmS,EAAM,GAAOA,EAAMowB,EAAeoC,YAAYF,EAAUvyB,EAAQ,IAAQC,IAAQuyB,IAC1E,CAAE92F,MAAK,UAAqBpM,MAAOw+D,GAGvC,CAAEpyD,MAAK,QAAmB6kE,KAAM,IAAIjjE,KAAKi1F,EAAUvyB,EAAOC,KAGvDowB,EAAAqC,kBAAd,SAAgCniC,GAE5B,OADeA,EAAKt0C,QAAQ,OAAQo0E,EAAesC,cAQzCtC,EAAAuC,eAAd,SAA6BtjG,GAEzB,OADeA,EAAM2sB,QAAQ,KAAM,KAazBo0E,EAAAwC,qBAAd,SAAmCjB,EAC/B9jC,EACAjkC,EACAwtD,EACAyb,OAIItpF,EAKAupF,EAAUC,EARRC,EAAW5C,EAAe6C,sBAAsBtB,EAAiB/nE,GACjEspE,EAAeF,EAAS5zF,KACxB+zF,EAAqBH,EAASjC,WAG9BqC,EAAgBhD,EAAeiD,sBAAsB1B,EAAiBuB,EAAcrlC,GAC1FtkD,EAAWo9B,SAASysD,EAAe,QAG7BE,EAASlD,EAAemD,eAAe5B,EAAiBqB,EAAUnlC,GACxEklC,EAAWO,EAAOn9D,IAClB28D,EAAWQ,EAAO/7E,IAEd7O,MAAMa,KAEFA,EADa,aAAbwpF,EACW,IAEAA,OAGfS,EAAYjqF,EAChBiqF,GAAapc,EAGI,aAAb0b,GAAwC,aAAbC,IAC3BxpF,EAAWiqF,GAGXX,GACIW,EAAYV,IACZU,EAAYT,GAEZS,EAAYT,IACZS,EAAYV,GAEhBvpF,EAAWiqF,GAEPA,GAAaV,GAAYU,GAAaT,IACtCxpF,EAAWiqF,OAIbC,EAAWT,EAASppE,SAAS,GAC7B8pE,EAASV,EAASppE,SAAS,GAC3B8pB,EAAQma,EAAW9oD,MAAM,EAAG0uF,GAC5BzlF,EAAM6/C,EAAW9oD,MAAM2uF,EAAQ7lC,EAAWhgE,QAG1C8lG,EAASvD,EAAewD,uBAAuBT,GAGrD,MAAO,GAAGz/C,GAFKnqC,EAAW,GAAM,GAAGoqF,EAASpqF,EAAa,GAAGA,GAE5ByE,GAUtBoiF,EAAAyD,uBAAd,SAAqClC,EAAwBrxB,EAAYzS,GAErE,QADMimC,EAAYjnG,MAAMuT,KAAKytD,GACpBngE,EAAI,EAAGA,EAAIikG,EAAgB9jG,OAAQH,IACP,YAA7BikG,EAAgBjkG,GAAGqjG,aACS,QAAvBY,EAAgBjkG,GAAG0R,MAA0BkhE,EAAKF,UAAY,IACpC,UAAvBuxB,EAAgBjkG,GAAG0R,MAA4BkhE,EAAKO,WAAa,EAAI,MACzEizB,EAAU1rF,OAAOupF,EAAgBjkG,GAAGk8B,SAAS,GAAI,EAAGwmE,EAAesC,aACnEoB,EAAUhyE,KAAK,KAI3B,OAAOgyE,EAAUhyE,KAAK,KASZsuE,EAAA2D,0BAAd,SAAwCpC,EAAwBjkD,OACtDsmD,EAAW5D,EAAe2B,qBAAqBJ,EAAiBjkD,GAChEumD,EAAa7D,EAAe6B,uBAAuBN,EAAiBjkD,GACpEwmD,EAAY9D,EAAe+B,sBAAsBR,EAAiBjkD,GAClEokD,EAAS1B,EAAe2B,qBAAqBJ,EAAiBjkD,GAAO,GACrEskD,EAAW5B,EAAe6B,uBAAuBN,EAAiBjkD,GAAO,GAE/E,OAAI0iD,EAAe+D,YAAYH,EAAUlC,IAClC1B,EAAe+D,YAAYF,EAAYjC,IACvC5B,EAAegE,gBAAgBzC,EAAiBuC,GAC5C,WACa,KAAbF,GAAkC,KAAfC,GAAmC,KAAdC,EACxC,QACa,KAAbF,GAAkC,KAAfC,GAAmC,KAAdC,EACxC,UAEJ,IAGI9D,EAAAY,kBAAf,SAAiCzgC,GAC7B,OAAQA,EAAOlF,MAAM,IAAIwH,OAAM,IAAqB,MAAMhlE,QACtD,KAAK,EAIL,KAAK,EAED,MAAA,UAEJ,KAAK,EAED,MAAA,YAKGuiG,EAAAa,mBAAf,SAAkC1gC,GAC9B,OAAQA,EAAOlF,MAAM,IAAIwH,OAAM,IAAsB,MAAMhlE,QACvD,KAAK,EAED,MAAA,UAEJ,KAAK,EAED,MAAA,YAKGuiG,EAAAc,iBAAf,SAAgC3gC,GAC5B,OAAQA,EAAOlF,MAAM,IAAIwH,OAAM,IAAoB,MAAMhlE,QACrD,KAAK,EAED,MAAA,UAEJ,KAAK,EAED,MAAA,YAKGuiG,EAAAkB,qBAAf,SAAoCljB,GAIhC,QAHMoiB,EAAa,GACbn5E,EAAY,IAAIi3D,KAAKC,eAAeH,GACpCD,EAAgB92D,EAAU82D,cAAc,IAAI9wE,MACzC3P,EAAI,EAAGA,EAAIygF,EAActgF,OAAQH,IAClCygF,EAAczgF,GAAG0R,OAASgxF,EAAegB,UACzCZ,EAAW9gG,KAAK,CACZ0P,KAAMgxF,EAAegB,UACrB/hG,MAAO8+E,EAAczgF,GAAG2B,QAG5BmhG,EAAW9gG,KAAK,CACZ0P,KAAM+uE,EAAczgF,GAAG0R,WAI7Bi1F,EAAmBh9E,EAAUi9E,kBACnC,IAAS5mG,EAAI,EAAGA,EAAI8iG,EAAW3iG,OAAQH,IACnC,OAAQ8iG,EAAW9iG,GAAG0R,MAClB,IAAA,MACIoxF,EAAW9iG,GAAGqjG,WAAasD,EAAiBr0B,IAC5C,MAEJ,IAAA,QAIA,IAAA,OACIwwB,EAAW9iG,GAAGqjG,WAAasD,EAAiBt0B,MAMxD,OADAqwB,EAAeiB,uBAAuBb,GAC/BA,GAGIJ,EAAAe,WAAf,SAA0BlxE,GACtB,MAAY,MAAJA,GAAmC,MAAJA,GAAoC,MAAJA,GAG5DmwE,EAAAwD,uBAAf,SAAsC7C,GAClC,OAAQA,GACJ,IAAA,UACI,MAAO,IAEX,IAAA,UACI,OAAOX,EAAesC,cAKnBtC,EAAAmD,eAAf,SAA8B5B,EAAwBqB,EAAUnlC,OACxDilC,EAAUC,EACd,OAAQC,EAAS5zF,MACb,IAAA,QACI2zF,EAAW,EACXD,EAAW1C,EAAemE,iBAC1B,MAEJ,IAAA,MACIxB,EAAW,EACXD,EAAW1C,EAAeoC,YACtBpC,EAAeoE,sBAAsBpE,EAAegC,kBAAkBT,EAAe,QAAmB9jC,GACxGlnB,SAASypD,EAAe6B,uBAAuBN,EAAiB9jC,GAAa,KACjF,MAEJ,IAAA,OAC2B,YAAnBmlC,EAASjC,YACTgC,EAAW,EACXD,EAAW,KAGXC,EAAW,WACXD,EAAW,YAKvB,MAAO,CAAE38D,IAAK48D,EAAUx7E,IAAKu7E,IAGlB1C,EAAAoC,YAAf,SAA2BF,EAAkBvyB,GACzC,OAAO,IAAI1iE,KAAKi1F,EAAUvyB,EAAO,GAAGK,WAGzBgwB,EAAAiD,sBAAf,SAAqC1B,EAAwBvyF,EAAiByuD,EAAoBjhD,QAAA,IAAAA,IAAAA,GAAA,OACxF6nF,EAAerE,EAAegC,kBAAkBT,EAAiBvyF,GAAMwqB,SACvElsB,EAASmwD,EAAWkF,UAAU0hC,EAAa,GAAIA,EAAa,IAClE,OAAO,EAASrE,EAAeuC,eAAej1F,GAAUA,GAG7C0yF,EAAA2B,qBAAf,SAAoCJ,EAAwB9jC,EAAoBjhD,GAC5E,YAD4E,IAAAA,IAAAA,GAAA,GACrEwjF,EAAeiD,sBAAsB1B,EAAe,MAAiB9jC,EAAYjhD,IAG7EwjF,EAAA6B,uBAAf,SAAsCN,EAAwB9jC,EAAoBjhD,GAC9E,YAD8E,IAAAA,IAAAA,GAAA,GACvEwjF,EAAeiD,sBAAsB1B,EAAe,QAAmB9jC,EAAYjhD,IAG/EwjF,EAAA+B,sBAAf,SAAqCR,EAAwB9jC,EAAoBjhD,GAC7E,YAD6E,IAAAA,IAAAA,GAAA,GACtEwjF,EAAeiD,sBAAsB1B,EAAe,OAAkB9jC,EAAYjhD,IAG9EwjF,EAAAgC,kBAAf,SAAiCT,EAAwBvyF,GAErD,OADeuyF,EAAgBzqF,OAAO,SAAC8rF,GAAa,OAACA,EAAS5zF,OAASA,IAAO,IAInEgxF,EAAA+D,YAAf,SAA2B9kG,EAAYq+C,GACnC,MAAkB,KAAVr+C,GAAiC,IAAjBq+C,EAAM7/C,QAAgB6/C,EAAMklB,OAAO,KAAOw9B,EAAesC,aAGtEtC,EAAAgE,gBAAf,SAA+BzC,EAAwBtiG,GACnD,OAAQ+gG,EAAegC,kBAAkBT,EAAe,QAAkBZ,YACtE,IAAA,UACI,MAAkB,KAAV1hG,GAAiC,IAAjBA,EAAMxB,OAElC,IAAA,UACI,MAAkB,KAAVwB,GAAiC,IAAjBA,EAAMxB,OAElC,QACI,OAAO,IAKJuiG,EAAA6C,sBAAf,SAAqCtB,EAAwB/nE,GAGzD,OAFe+nE,EAAgBzqF,OAAO,SAAC8pB,GACnC,OAAAA,EAAQpH,SAAS,IAAMA,GAAYA,GAAYoH,EAAQpH,SAAS,IAAMoH,EAAQ5xB,OAASgxF,EAAegB,YAAW,IAI1GhB,EAAAoE,sBAAf,SAAqCE,EAAU7mC,GAC3C,OAAOlnB,SAASknB,EAAWkF,UAAU2hC,EAAS9qE,SAAS,GAAI8qE,EAAS9qE,SAAS,IAAK,KAGvEwmE,EAAAiB,uBAAf,SAAsCyC,GAGlC,QAFIa,EAAa,EAERjnG,EAAI,EAAGA,EAAIomG,EAAUjmG,OAAQH,IAElC,GAAqB,QAAjBomG,EAAUpmG,GAAG0R,MAA2C,UAAjB00F,EAAUpmG,GAAG0R,KAEpD00F,EAAUpmG,GAAGk8B,SAAW,CAAC+qE,EAAYA,EAAa,GAClDA,GAAc,OACX,GAAqB,SAAjBb,EAAUpmG,GAAG0R,KAEpB,OAAQ00F,EAAUpmG,GAAGqjG,YACjB,IAAA,UAEI+C,EAAUpmG,GAAGk8B,SAAW,CAAC+qE,EAAYA,EAAa,GAClDA,GAAc,EACd,MAEJ,IAAA,UAEIb,EAAUpmG,GAAGk8B,SAAW,CAAC+qE,EAAYA,EAAa,GAClDA,GAAc,OAIfb,EAAUpmG,GAAG0R,OAASgxF,EAAegB,YAE5C0C,EAAUpmG,GAAGk8B,SAAW,CAAC+qE,EAAYA,EAAa,GAClDA,MA3fYvE,EAAAK,gBAAkB,WAClBL,EAAAgB,UAAY,UACZhB,EAAAmE,iBAAmB,GACnBnE,EAAAsC,YAAc,IACdtC,EAAAG,eAAiB,KA2f7CH,EAhgBA,GClCAwE,GAAA,WAII,SAAAA,EAAuDC,GAAA3nG,KAAA2nG,YAAAA,EAW3D,OAVID,EAAAxnG,UAAAsE,UAAA,SAAUrC,EAAY6L,GAClB,MAAc,KAAV7L,EACIA,IAAU+gG,GAAeqC,kBAAkBvlG,KAAK2nG,YAAYrD,WACrD,IAEXtkG,KAAK2nG,YAAYC,cAAgBzlG,EAC1B+gG,GAAeuC,eAAetjG,IAElC,wBAbdwmB,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,wFAGO7N,EAAAA,OAAMnE,KAAA,CCVkB,oCDqBzC05F,EAfA,GAoBAG,GAAA,WAII,SAAAA,EAAuDF,GAAA3nG,KAAA2nG,YAAAA,EAY3D,OAXIE,EAAA3nG,UAAAsE,UAAA,SAAUrC,EAAY6L,GAClB,MAAqC,KAAjChO,KAAK2nG,YAAYG,YACV9nG,KAAK2nG,YAAYG,YAEO,OAA3B9nG,KAAK2nG,YAAYxlG,OAAkBnC,KAAK2nG,YAAYxlG,QAAU6R,UACvDkvF,GAAeqC,kBAAkBvlG,KAAK2nG,YAAYrD,WAElDpB,GAAeyD,uBAAuB3mG,KAAK2nG,YAAYlD,gBAAiBzkG,KAAK2nG,YAAYxlG,MAAOA,wBAZtHwmB,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,sFAGO7N,EAAAA,OAAMnE,KAAA,CC9BkB,oCD0CzC65F,EAhBA,GE3BAE,GAAA,WAYI,SAAAA,EAAmBh2D,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BAXCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uEAHMk6C,EAAAA,eAapBm/C,EAbA,GAkBAC,GAAA,WAII,SAAAA,EAAmBj2D,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEAnBMk6C,EAAAA,eAuBpBo/C,EALA,OCbIC,SAAW,WACXC,OAAS,UCEbC,GAAA,WAAA,SAAAA,IAUWnoG,KAAAooG,KAAwBC,GAAgBH,OAGxCloG,KAAA6zD,UAAW,EAYX7zD,KAAAsoG,QAAU,IAAIn/E,EAAAA,aAGdnpB,KAAAuoG,iBAAmB,IAAIp/E,EAAAA,aAGvBnpB,KAAAkoF,WAAa,kBAyCxB,OAvCI1oF,OAAAgC,eACI2mG,EAAAjoG,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKooG,OAASC,GAAgBJ,0CAGzCzoG,OAAAgC,eACI2mG,EAAAjoG,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK6zD,UAAY7zD,KAAKooG,OAASC,GAAgBH,wCAKnDC,EAAAjoG,UAAAsoG,SAFP,SAEgBl2F,GACZA,EAAM23B,iBACNjqC,KAAKsoG,QAAQ/lF,QAQjB/iB,OAAAgC,eAAW2mG,EAAAjoG,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKooG,OAASC,GAAgBH,wCAMlCC,EAAAjoG,UAAAuoG,cAAP,WACIzoG,KAAKsoG,QAAQ/lF,QAMV4lF,EAAAjoG,UAAAwoG,sBAAP,WACI1oG,KAAKuoG,iBAAiBhmF,4BAtE7BuvB,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,yBAEVqjC,SAAA,kqBADS,iEAIR0E,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,kBAGhChoC,EAAAA,wBAGAA,EAAAA,iCAGAA,EAAAA,gCAGAA,EAAAA,iCAGAA,EAAAA,uBAGAgd,EAAAA,iCAGAA,EAAAA,2BAGAwjB,EAAAA,YAAWnhC,KAAA,CAAC,8CAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qDAKZY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,YAAS,CAAAkE,KACtCtD,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,cA4B1Cm6F,EAxEA,GCwDI32D,GAAU,MAgDVm3D,UAAY,YACZC,WAAa,aACbC,SAAW,WACXC,SAAW,YAGT7iC,GAAO,aAab8iC,GAAA,WAwSI,SAAAA,EAC+Bp/D,EACpB7F,EACCw4C,EACA0sB,EACA9pE,GAJmBl/B,KAAA2pC,gBAAAA,EACpB3pC,KAAA8jC,QAAAA,EACC9jC,KAAAs8E,KAAAA,EACAt8E,KAAAgpG,WAAAA,EACAhpG,KAAAk/B,UAAAA,EAnRLl/B,KAAAm5E,MAAQ,OAQRn5E,KAAAipG,iBAAkB,EAgBTjpG,KAAA8kF,UAA+B7E,GAAST,OAyCjDx/E,KAAAkpG,iBAAmB,EA8RnBlpG,KAAA2N,GAAK,mBAAmB6jC,KAqCxBxxC,KAAA6zD,UAAW,EA2BX7zD,KAAAooG,KAAOC,GAAgBH,OASvBloG,KAAA2lG,YAAa,EA0Cb3lG,KAAA8/B,SAAW,IAAI3W,EAAAA,aA4BfnpB,KAAAggC,SAAW,IAAI7W,EAAAA,aAMfnpB,KAAA+/B,UAAY,IAAI5W,EAAAA,aAchBnpB,KAAA+0C,YAAc,IAAI5rB,EAAAA,aAclBnpB,KAAAmpG,YAAc,IAAIhgF,EAAAA,aAclBnpB,KAAAopG,eAAiB,IAAIjgF,EAAAA,aAcrBnpB,KAAAqpG,mBAAqB,IAAIlgF,EAAAA,aAyDzBnpB,KAAA6tF,WAAY,EACZ7tF,KAAAmuC,WAAY,EACZnuC,KAAA+nE,iBAAmB,IAAI2/B,GAA2B1nG,MAClDA,KAAAspG,eAAiB,IAAIzB,GAAyB7nG,MAC9CA,KAAAykG,gBAAkB,GAGlBzkG,KAAAqzB,SAAU,EACVrzB,KAAA8nG,YAAc,GAEJ9nG,KAAAupG,UAAY,EACZvpG,KAAAwpG,cAAgB,KAEzBxpG,KAAAokF,eAAiB,CACrBtR,IAAK,UACLD,MAAO,QACPwR,QAAS,QACTzR,KAAM,WAEF5yE,KAAAskF,aAAe,CACnBxR,KAAK,EACLD,OAAO,EACPD,MAAM,GAEF5yE,KAAAypG,UAAY,IAAIjqE,EAAAA,QAMhBx/B,KAAAkkF,eAAwC,KACxClkF,KAAAmkF,cAAuC,KAOvCnkF,KAAA0pG,QAAU,IAAIvgF,EAAAA,aACdnpB,KAAA2pG,SAAW,IAAIxgF,EAAAA,aACfnpB,KAAA4pG,WAAwB,KAIxB5pG,KAAAsmE,kBAAuCL,GAEvCjmE,KAAAqmE,mBAAiCJ,GAknB7C,OAjuCIzmE,OAAAgC,eACWunG,EAAA7oG,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKokF,oBA8ChB,SAAyBY,GACrBhlF,KAAKokF,eAAiB5kF,OAAOa,OAAOL,KAAKokF,eAAgBY,oCAa7DxlF,OAAAgC,eACWunG,EAAA7oG,UAAA,SAAM,KADjB,WAEI,OAAQF,KAAK6pG,UAAY71F,UAAa81F,GAAwBnB,UAAY3oG,KAAK6pG,aAYnF,SAAkBxmC,GACdrjE,KAAK6pG,QAAUxmC,mCA0BnB7jE,OAAAgC,eACWunG,EAAA7oG,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAKskF,kBAehB,SAAuBW,GACnBjlF,KAAKskF,aAAe9kF,OAAOa,OAAOL,KAAKskF,aAAcW,oCASzDzlF,OAAAgC,eACWunG,EAAA7oG,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKkkF,oBAehB,SAAyB/hF,GACrBnC,KAAKkkF,eAAiB/hF,mCAS1B3C,OAAAgC,eACWunG,EAAA7oG,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKmkF,mBAehB,SAAwBhiF,GACpBnC,KAAKmkF,cAAgBhiF,mCAGzB3C,OAAAgC,eACWunG,EAAA7oG,UAAA,uBAAoB,KAD/B,WAEI,OAAOF,KAAK+pG,mBAGhB,SAAgC5nG,GAC5BnC,KAAK+pG,cAAgB5nG,mCAGzB3C,OAAAgC,eACWunG,EAAA7oG,UAAA,0BAAuB,KADlC,WAEI,OAAOF,KAAKgqG,0BAA4BhqG,KAAKiqG,qCAGjD,SAAmC9nG,GAC/BnC,KAAKgqG,yBAA2B7nG,mCAiBpC3C,OAAAgC,eAAWunG,EAAA7oG,UAAA,cAAW,KAAtB,WACI,OAAIF,KAAKmC,MACEnC,KAAKkqG,qBAAqBlqG,KAAKmqB,UAAWnqB,KAAKmC,OAEnD,oCAMX3C,OAAAgC,eAAWunG,EAAA7oG,UAAA,kBAAe,KAA1B,WAOI,OANIF,KAAKipE,QACLjpE,KAAKmqG,iBAAoBnqG,KAAkB,cAAIA,KAAKoqG,eAAepqG,KAAKipE,QAAUjpE,KAAKqqG,gBAAgBrqG,KAAKipE,QAC5GjpE,KAAKqzB,SAAU,GAEfrzB,KAAKmqG,iBAAoBnqG,KAAkB,cAAIkjG,GAAeqC,kBAAkBvlG,KAAKskG,WAAa,GAE/FtkG,KAAKmqG,sBAGhB,SAA2BhoG,GACvBnC,KAAKmqG,iBAAmBhoG,mCAiB5B3C,OAAAgC,eAAIunG,EAAA7oG,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKsqG,4BACEtqG,KAAKsqG,4BAA4Bv4D,SAEpC/xC,KAAKooG,OAASC,GAAgBH,OAAUloG,KAAKuqG,2BAA6BvqG,KAAKwqG,4DAO3FhrG,OAAAgC,eAAIunG,EAAA7oG,UAAA,UAAO,KAAX,WAAA,IAAA0U,EAAA5U,KACI,MAAO,CACH4xC,SAAU5xC,KAAK4xC,SACfq1C,cAAejnF,KAAKinF,cACpBwjB,YAAazqG,KAAKyqG,YAClBpnC,OAAQrjE,KAAKqjE,OACbsiC,WAAY3lG,KAAK2lG,WACjBxsB,MAAOn5E,KAAKm5E,MACZ8vB,gBAAiBjpG,KAAKipG,gBACtB/nB,OAAQlhF,KAAKkhF,OACb9d,KAAMpjE,KAAKojE,KACXglC,KAAMpoG,KAAKooG,KACX/c,aAAcrrF,KAAKqrF,aACnBlpF,MAAOnC,KAAKmC,MACZuoG,WAAY,SAAC1pG,GAAyB,OAAA4T,EAAK81F,WAAW1pG,sCAI9DxB,OAAAgC,eAAYunG,EAAA7oG,UAAA,WAAQ,KAApB,WACI,GAAIF,KAAK4pG,YAAc5pG,KAAK4pG,WAAW16C,SAAWlvD,KAAK4pG,WAAW16C,QAAQC,UAAW,KAE3E1sD,EAAQzC,KAAK4pG,WAAW16C,QAAQC,UAAS,IAC/C,OAAO1sD,GAASA,EAAM+rD,SAG1B,OAAO,mCAaXhvD,OAAAgC,eACWunG,EAAA7oG,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKipE,YAGhB,SAAiBmK,GACbpzE,KAAKipE,OAASmK,EACdpzE,KAAKsmE,kBAAkB8M,oCAkH3B5zE,OAAAgC,eAAWunG,EAAA7oG,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAK0pG,aAGhB,SAAkBpwF,GACdtZ,KAAK0pG,QAAUpwF,mCAuBnB9Z,OAAAgC,eAAWunG,EAAA7oG,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK2pG,cAGhB,SAAmBrwF,GACftZ,KAAK2pG,SAAWrwF,mCA+KbyvF,EAAA7oG,UAAA+nE,WAAP,SAAkB9lE,GACdnC,KAAKipE,OAAS9mE,EAEdnC,KAAKs8E,KAAK35B,gBAIPomD,EAAA7oG,UAAAgoE,iBAAP,SAAwBphB,GAAyB9mD,KAAKsmE,kBAAoBxf,GAGnEiiD,EAAA7oG,UAAAioE,kBAAP,SAAyBrhB,GAAkB9mD,KAAKqmE,mBAAqBvf,GAG9DiiD,EAAA7oG,UAAA2hG,iBAAP,SAAwB/W,GAA6B9qF,KAAK4xC,SAAWk5C,GAS9Die,EAAA7oG,UAAAyqG,aAFP,SAEoBr4F,GAChBtS,KAAK0qG,WAAW1qG,KAAK4qG,wBACrBt4F,EAAM23B,kBAKH8+D,EAAA7oG,UAAA4hE,eAAP,eACU+oC,EAA2B7qG,KAAK8qG,kBAAoB9qG,KAAK+qG,6BAC/D,OAAO,EAA6BF,EAAyBvqE,cAAgB,MAI1EyoE,EAAA7oG,UAAA0qG,qBAAP,WACI,OAAO5qG,KAAK+tD,WAAa/tD,KAAK+tD,WAAWjqB,QAAQxD,cAAgB,MAM9DyoE,EAAA7oG,UAAA2uC,SAAP,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKgrG,kBAAoB,CACrBzuE,cAAex4B,EACfy4B,eAAgBt4B,GAGpBlE,KAAKiqG,gCAAkC,CACnCrqE,qBAAqB,EACrBD,OAAO,EACPD,eAAgB,IAAI8J,GACpB/J,iBAAkB,IAAIuI,GAAqBhoC,KAAKgrG,mBAChDtmE,OAAQ1kC,KAAK0kC,QAGjB1kC,KAAKirG,sBAAwB,CACzBrrE,qBAAqB,EACrBD,OAAO,EACP+E,OAAQ1kC,KAAK0kC,QAGjB1kC,KAAK2pC,gBAAgB9J,UAAUgF,KAC3B7qB,EAAAA,OAAO,SAACkxF,GAAY,OAAAA,EAAQv9F,KAAOiH,EAAKu2F,eACxCrmE,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,SAACnD,GAClChtB,EAAKw2F,WAAWxpE,KAGxB5hC,KAAK2pC,gBAAgB7J,SAAS+E,KAC1B7qB,EAAAA,OAAO,SAACkxF,GAAY,OAAAA,EAAQv9F,KAAOiH,EAAKu2F,eACxCrmE,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,WACjCnwB,EAAKy2F,cAGbrrG,KAAK2pC,gBAAgB3J,SAAS6E,KAC1B7qB,EAAAA,OAAO,SAAAkxF,GAAW,OAAAA,EAAQv9F,KAAOiH,EAAKu2F,eACtCrmE,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,WACjCnwB,EAAK02F,cAGbtrG,KAAK2pC,gBAAgB5J,UAAU8E,KAC3B7qB,EAAAA,OAAO,SAAAkxF,GAAW,OAAAA,EAAQv9F,KAAOiH,EAAKu2F,eACtCrmE,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,SAACzyB,GAGlC,GAFAsC,EAAKmrB,UAAUxd,KAAKjQ,IAEhBA,EAAM8P,OAAV,KAIMo+B,EAAQ5rC,EAAKktD,kBACfthB,GAAWluC,EAAMA,OAASsC,EAAKwzF,OAASC,GAAgBJ,SAIxDrzF,EAAK22F,wBAHL/qD,EAAMjN,WAOdvzC,KAAKooG,OAASC,GAAgBJ,WAC9BjoG,KAAKykG,gBAAkBvB,GAAeC,gBAAgBnjG,KAAKojE,KAAMpjE,KAAKkhF,QAClElhF,KAAKojE,OAASpvD,YACdhU,KAAKojE,KAAO8/B,GAAeqB,QAAQvkG,KAAKykG,kBAE5CzkG,KAAKskG,UAAYpB,GAAemB,aAAarkG,KAAKykG,kBAGtDzkG,KAAK4pG,WAAa5pG,KAAKk/B,UAAUpxB,IAAe6zF,EAAS,UAAqB,OAM3EoH,EAAA7oG,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACQA,KAAKooG,OAASC,GAAgBJ,UAAYjoG,KAAK8qG,kBAC/ClmE,EAAAA,UAAU5kC,KAAK8qG,iBAAiBxqE,cAAe,WAAWuE,KACtD2zB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B5zB,EAAAA,UAAU9kC,KAAKypG,YACjB1kE,UAAU,SAACnvB,GAAQ,OAAAhB,EAAK4hF,UAAU5gF,KAGpC5V,KAAK4pG,aACL5pG,KAAKsvD,gBAAkBtvD,KAAK4pG,WAAWr6C,cAAcxqB,UAAU/kC,KAAKwvD,gBAAgBvO,KAAKjhD,SAI1F+oG,EAAA7oG,UAAAqtE,mBAAP,WAMQvtE,KAAK+tD,YAAc/tD,KAAK+tD,WAAWU,aAAezuD,KAAKwuD,WACvDxuD,KAAK+tD,WAAWU,WAAazuD,KAAKwuD,SAClCxuD,KAAKs8E,KAAK/5C,kBAIRwmE,EAAA7oG,UAAAsvD,gBAAV,YACSxvD,KAAK4pG,WAAW16C,QAAQQ,SAAW1vD,KAAK4pG,WAAW16C,QAAQS,SAC3D3vD,KAAK4pG,WAAW16C,QAAQC,WAAanvD,KAAK4pG,WAAW16C,QAAQO,kBAC1DzvD,KAAK+tD,WAAWY,UAChB3uD,KAAKwrG,gBAAgB18C,MAAQ9uD,KAAK4pG,WAAW96C,MAAQX,GAAcP,MAAQO,GAAcN,QAEzF7tD,KAAKwrG,gBAAgB18C,MAAQ9uD,KAAK4pG,WAAW96C,MAAQX,GAAcR,QAAUQ,GAAcN,SAI/F7tD,KAAK+tD,YAAc/tD,KAAK+tD,WAAWU,aAAezuD,KAAKwuD,WACvDxuD,KAAK+tD,WAAWU,WAAazuD,KAAKwuD,WAOnCu6C,EAAA7oG,UAAAsmC,YAAP,WACQxmC,KAAKmrG,cACLnrG,KAAK2pC,gBAAgBnI,KAAKxhC,KAAKmrG,cAEnCnrG,KAAKypG,UAAUvnG,MAAK,GACpBlC,KAAKypG,UAAUhjE,YAcZsiE,EAAA7oG,UAAAwoG,sBAAP,eACU1d,EAAQ,IAAI76E,KAAKA,KAAK4iE,OAC5B/yE,KAAKyrG,gBAAgBzgB,IAgBlB+d,EAAA7oG,UAAAilF,WAAP,SAAkB/R,OACR3wD,EAAYziB,KAAKmC,MACvBnC,KAAKmC,MAAQixE,EAEbpzE,KAAK0rG,qBAAqBjpF,EAAUziB,KAAKmC,OACzCnC,KAAK+0C,YAAYxyB,KAAK6wD,IAcnB21B,EAAA7oG,UAAAgnF,aAAP,eACUzkE,EAAYziB,KAAKmC,MACvBnC,KAAKmC,MAAQ,KACbnC,KAAK0rG,qBAAqBjpF,EAAUziB,KAAKmC,OACrCnC,KAAKyxF,UACLzxF,KAAKyxF,SAASvK,gBAqBf6hB,EAAA7oG,UAAAwqG,WAAP,SAAkB1pG,GACd,GAAKhB,KAAKmuC,UAGV,OAAQnuC,KAAKooG,MACT,KAAKC,GAAgBH,OACjBloG,KAAK6tF,WAAY,MACX8d,EAAgB3rG,KAAK4rG,uBAAyB53F,UAAahU,KAAK+pG,cAAgB/pG,KAAKirG,sBAC3FjrG,KAAKmrG,aAAenrG,KAAK2pC,gBAAgBnM,OAAO2qE,GAA+BwD,EAAc3rG,KAAKgpG,YAClGhpG,KAAK2pC,gBAAgBvI,KAAKphC,KAAKmrG,cAC/B,MAEJ,KAAK9C,GAAgBJ,SACjBjoG,KAAK6tF,WAAY,EACb7sF,IACAhB,KAAK6rG,wBAAwBpsE,iBAAiBnF,SAASt5B,OAASA,GAEpEhB,KAAKmrG,aAAenrG,KAAK2pC,gBAAgBnM,OAAO2qE,GAC5CnoG,KAAK6rG,wBAAyB7rG,KAAKgpG,YACvChpG,KAAK2pC,gBAAgBvI,KAAKphC,KAAKmrG,gBAMpCpC,EAAA7oG,UAAA4rG,UAAP,SAAiBxpG,GAGTA,EAAEtB,SAAWhB,KAAK8hE,kBAClBx/D,EAAE2nC,kBASH8+D,EAAA7oG,UAAAuoG,cAAP,WACIzoG,KAAK2pC,gBAAgBnI,KAAKxhC,KAAKmrG,eAQ5BpC,EAAA7oG,UAAAqrC,MAAP,WACIvrC,KAAKqzB,SAAU,EACfrzB,KAAK8nG,YAAc,GACnB9nG,KAAKknF,eACLlnF,KAAK+rG,mBAAmB,IAWrBhD,EAAA7oG,UAAAurG,gBAAP,SAAuBr4B,GACfpzE,KAAKmC,QACLixE,EAAK44B,SAAShsG,KAAKmC,MAAMyxE,YACzBR,EAAK64B,WAAWjsG,KAAKmC,MAAM0xE,cAC3BT,EAAK84B,WAAWlsG,KAAKmC,MAAM2xE,cAC3BV,EAAK+4B,gBAAgBnsG,KAAKmC,MAAM4xE,wBAE9BtxD,EAAYziB,KAAKmC,MACvBnC,KAAKmC,MAAQixE,EAEbpzE,KAAK0rG,qBAAqBjpF,EAAUziB,KAAKmC,OACzCnC,KAAKyxF,SAAS5M,SAAWzR,EACzBpzE,KAAKyoG,gBACLzoG,KAAK+0C,YAAYxyB,KAAK6wD,IAWnB21B,EAAA7oG,UAAA0uD,OAAP,SAAct8C,GACVtS,KAAKosG,eAAgB,EACjBpsG,KAAKooG,OAASC,GAAgBJ,UAC9BjoG,KAAKqsG,cAAc/5F,EAAMtR,OAAOmB,MAAOmQ,EAAMJ,MAG7ClS,KAAKmuC,WACLnuC,KAAKurG,yBAWNxC,EAAA7oG,UAAAwuD,QAAP,WACI1uD,KAAKosG,eAAgB,EACjBpsG,KAAKmC,OAA8B,KAArBnC,KAAK8nG,cACnB9nG,KAAKmqG,iBAAmBnqG,KAAKoqG,eAAepqG,KAAKmC,SAYlD4mG,EAAA7oG,UAAAs2F,UAAP,SAAiBlkF,GACb,OAAQA,EAAMrR,KACV,IAAA,UACA,IAAA,KACIqR,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKssG,UAAUh6F,EAAMtR,OAAOmB,MAAO,EAAGmQ,EAAMJ,MAC5C,MACJ,IAAA,YACA,IAAA,OACQI,EAAMkoE,OACNx6E,KAAK0qG,WAAW1qG,KAAK4qG,yBAErBt4F,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKssG,UAAUh6F,EAAMtR,OAAOmB,OAAQ,EAAGmQ,EAAMJ,SAgBtD62F,EAAA7oG,UAAA83C,QAAP,SAAe1lC,GACX,GAAItS,KAAKosG,cAAe,CACpB95F,EAAM23B,iBACN33B,EAAMmyB,sBACAuU,EAAQ1mC,EAAM8mC,OAAS,GAAM,EAAI,EACvCp5C,KAAKssG,UAAUh6F,EAAMtR,OAAOmB,MAAO62C,EAAM1mC,EAAMJ,QAWhD62F,EAAA7oG,UAAA8uD,QAAP,SAAe18C,GAAf,IAAAsC,EAAA5U,KACUusG,EAAcj6F,EAAMtR,OAAOmB,MAC3BqqG,EAAiBxsG,KAAKysG,qBACtBC,EAAaxJ,GAAe2D,0BAA0B7mG,KAAKykG,gBAAiB8H,GAClFvsG,KAAKosG,eAAgB,EAEjBG,IAAgBrJ,GAAeqC,kBAAkBvlG,KAAKskG,aACtDtkG,KAAKqzB,SAAU,GAIA,aAAfq5E,GAAiD,0BAApBp6F,EAAMq6F,WACnC3sG,KAAKmqG,iBAAmBoC,EACxBvsG,KAAKqsG,cAAcE,EAAaj6F,EAAMJ,MACtClS,KAAK+rG,mBAAmBS,IACF,YAAfE,GAEP1sG,KAAKknF,eACL3qC,sBAAsB,WAClB3nC,EAAKktD,iBAAiB3/D,MAAQoqG,EAC9B33F,EAAKm3F,mBAAmBS,MAEN,UAAfE,IAEP1sG,KAAKqzB,SAAU,EACfrzB,KAAKknF,iBAIL6hB,EAAA7oG,UAAAwrG,qBAAR,SAA6BjpF,EAAgBpG,GACpC3L,GAAQ+R,EAAUpG,IACnBrc,KAAKmpG,YAAY5mF,KAAKlG,IAItB0sF,EAAA7oG,UAAAmsG,cAAR,SAAsBO,EAAoBC,GACtC,GAAmB,KAAfD,EAAmB,KACblI,EAAgB1kG,KAAKmC,MACrBw+D,EAAiC,SAAnBksC,EAA6B7sG,KAAK4nG,cAAgBgF,EAChEE,EAAe5J,GAAesB,eAAexkG,KAAKykG,gBAAiBC,EAAe/jC,GAExF,GAAsB,UAAlBmsC,EAAav+F,MAA2B,KAClC8N,EAAWywF,EAAa15B,KAS9B,GAPIsxB,IACAroF,EAAS2vF,SAAStH,EAAc9wB,YAChCv3D,EAAS4vF,WAAWvH,EAAc7wB,cAClCx3D,EAAS6vF,WAAWxH,EAAc5wB,cAClCz3D,EAAS8vF,gBAAgBzH,EAAc3wB,oBAGhB,OAAvB/zE,KAAKinF,eACsB,OAAvBjnF,KAAKinF,gBAA2BrI,GAAeviE,EAAUrc,KAAKinF,eAAiB,KACzExkE,EAAYziB,KAAKmC,MACvBnC,KAAKmC,MAAQka,EAEbrc,KAAK0rG,qBAAqBjpF,EAAUziB,KAAKmC,OACzCnC,KAAK8nG,YAAc,OACpB,KACG95F,EAAyC,CAC3C++F,WAAY/sG,KACZkiD,aAAc7lC,GAElBrc,KAAKopG,eAAe7mF,KAAKvU,QAE1B,CACGA,EAA6C,CAC/C++F,WAAY/sG,KACZgtG,UAAWtI,GAEf1kG,KAAK8nG,YAAc8E,EACnB5sG,KAAKqpG,mBAAmB9mF,KAAKvU,MAKjC+6F,EAAA7oG,UAAAosG,UAAR,SAAkB3rC,EAAoB3nB,EAAci0D,GAChDjtG,KAAKosG,eAAgB,EACrBpsG,KAAKqzB,SAAU,MACTm5E,EAAiBxsG,KAAKysG,qBAEtBS,EACFhK,GAAewC,qBAAqB1lG,KAAKykG,gBAAiB9jC,EAAY6rC,EAAgBxsG,KAAKupG,UAAYvwD,EAAMh5C,KAAK2lG,YAEtH3lG,KAAK8hE,iBAAiB3/D,MAAQ+qG,EAC9BltG,KAAK+rG,mBAAmBS,GAGL,aADAtJ,GAAe2D,0BAA0B7mG,KAAKykG,gBAAiByI,KAE9EltG,KAAKosG,eAAgB,EACrBpsG,KAAKqsG,cAAca,EAAoBD,GACvCjtG,KAAK+rG,mBAAmBS,KAIxBzD,EAAA7oG,UAAAkrG,WAAR,SAAmB94F,GACftS,KAAKmtG,6BAA6B76F,EAAMuvB,aAAqB,UAC7D7hC,KAAKmuC,WAAY,GAGb46D,EAAA7oG,UAAAmrG,UAAR,WACIrrG,KAAK8/B,SAASvd,KAAKviB,MAGnBA,KAAK0pG,QAAQnnF,KAAKviB,MAEdA,KAAKyxF,UACLzxF,KAAKotG,sBAILrE,EAAA7oG,UAAAorG,UAAR,WACItrG,KAAKmuC,WAAY,EACjBnuC,KAAKmrG,aAAe,KACpBnrG,KAAKggC,SAASzd,KAAKviB,OAGf+oG,EAAA7oG,UAAAitG,6BAAR,SAAqCE,GAArC,IAAAz4F,EAAA5U,KACIA,KAAKyxF,SAAW4b,EAAkB5b,aAC5B6b,EAActtG,KAAK6zD,UAAY7zD,KAAKooG,OAASC,GAAgBH,OACnEloG,KAAKyxF,SAAS5D,UAAY7tF,KAAK6tF,UAC/B7tF,KAAKyxF,SAASzM,cAAgBhlF,KAAKglF,cACnChlF,KAAKyxF,SAASxM,YAAcjlF,KAAKilF,YACjCjlF,KAAKyxF,SAASvQ,OAASlhF,KAAKkhF,OAC5BlhF,KAAKyxF,SAAS59B,SAAWy5C,EACzBttG,KAAKyxF,SAAS3M,UAAY9kF,KAAK8kF,UAC/B9kF,KAAKyxF,SAASpG,aAAerrF,KAAKqrF,aAClCrrF,KAAKyxF,SAASxK,cAAgBjnF,KAAKinF,cACnCjnF,KAAKyxF,SAASiN,eAAiB1+F,KAAK0+F,eACpC1+F,KAAKyxF,SAAS8b,kBAAoBvtG,KAAKutG,kBACvCvtG,KAAKyxF,SAAS3N,gBAAkB9jF,KAAK8jF,gBACrC9jF,KAAKyxF,SAASyX,iBAAmBlpG,KAAKkpG,iBACtClpG,KAAKyxF,SAAS18C,YAAYlQ,KAAKC,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,SAAC5E,GAAa,OAAAvrB,EAAK62F,gBAAgBtrE,KAEnGngC,KAAKmC,QACLnC,KAAKyxF,SAAStvF,MAAQnC,KAAKmC,MAC3BnC,KAAKyxF,SAAS5M,SAAW7kF,KAAKmC,OAGlCkrG,EAAkBjF,KAAOpoG,KAAKooG,KAC9BiF,EAAkBx5C,SAAWy5C,EAC7BD,EAAkBG,kBAAoBxtG,KAAKwtG,kBAC3CH,EAAkBI,iBAAmBztG,KAAKytG,iBAC1CJ,EAAkBK,kBAAoB1tG,KAAK2tG,2BAE3CN,EAAkB/E,QAAQzjE,KAAKC,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,WAAM,OAAAnwB,EAAK6zF,kBAC/E4E,EAAkB9E,iBAAiB1jE,KAAKC,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,WAAM,OAAAnwB,EAAK8zF,2BAIpFK,EAAA7oG,UAAAktG,mBAAR,WAAA,IAAAx4F,EAAA5U,KACIu8C,sBAAsB,WAClB3nC,EAAK68E,SAASnD,SAAShB,qBAIvByb,EAAA7oG,UAAA0tG,iBAAR,SAAyBzrG,GACrB,OAAIgP,KAMwB,IAAIhB,KAAKhO,EAAMuxE,cAAevxE,EAAMwxE,WAAYxxE,EAAM+wE,UAC1E/wE,EAAMyxE,WAAYzxE,EAAM0xE,aAAc1xE,EAAM2xE,aAAc3xE,EAAM4xE,mBAC7C85B,mBAAmB7tG,KAAKkhF,QAG5C/+E,EAAM0rG,mBAAmB7tG,KAAKkhF,SAGjC6nB,EAAA7oG,UAAAusG,mBAAR,WACI,OAAOzsG,KAAK8hE,iBAAiB2E,gBAGzBsiC,EAAA7oG,UAAA6rG,mBAAR,SAA2BvlD,EAAe1lC,GAA1C,IAAAlM,EAAA5U,UAA0C,IAAA8gB,IAAAA,EAAA0lC,GACtCjK,sBAAsB,WAClB3nC,EAAKktD,iBAAiBkG,kBAAkBxhB,EAAO1lC,MAS/CioF,EAAA7oG,UAAAgqG,qBAAR,SAA6B//E,EAAgCipD,GACzD,OAAOpzE,KAAKmqB,UAAYnqB,KAAKmqB,UAAUipD,GAAQpzE,KAAK4tG,iBAAiBx6B,IASjE21B,EAAA7oG,UAAAmqG,gBAAR,SAAwBloG,GACpB,GAAInC,KAAKqjE,SAAWrjE,KAAKmqB,UAAW,KAC1B+2D,EAASlhF,KAAKkhF,QAAUlhF,KAAKwpG,cACnC,OAAOsE,EAAAA,WAAW3rG,EAAOnC,KAAKqjE,OAAQ6d,GAEtC,OAAOlhF,KAAKkqG,qBAAqBlqG,KAAKmqB,UAAWhoB,IAIjD4mG,EAAA7oG,UAAAkqG,eAAR,SAAuBjoG,OACb++E,EAASlhF,KAAKkhF,QAAUlhF,KAAKwpG,cAC7BuE,EAAe,EAAUD,EAAAA,WAAW3rG,EAAOnC,KAAKojE,KAAM8d,GAAU,GACtE,OAAOgiB,GAAeyD,uBAAuB3mG,KAAKykG,gBAAiBzkG,KAAKmC,MAAO4rG,IAG5EhF,EAAA7oG,UAAAqrG,sBAAP,WACIvrG,KAAKqmE,yBACC7lB,EAAQxgD,KAAKwrG,iBAAmBxrG,KAAKguG,4BACvCxtD,GAASxgD,KAAK4pG,aAAe5pG,KAAK4pG,WAAW96C,MAC7CtO,EAAMsO,MAAQX,GAAcN,QAE5BrN,EAAMsO,MAAQX,GAAcR,6BA5xCvC7b,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UACI,CAAC,CACG88C,QAAS8V,EAAAA,kBACT7V,YAAa68C,EACb3gC,OAAO,IAGf15D,SAAU,kBACVqjC,SAAA,wrDACS,gHArGThT,GAAiBh+B,WAAA,CAAA,CAAAmR,KAmYJC,EAAAA,OAAMnE,KAAA,CACf+wB,aAjaJuE,EAAAA,kBAGA2L,EAAAA,yBAEAg/D,EAAAA,mBAGArnE,EAAAA,2CAyICj4B,EAAAA,+BAQAA,EAAAA,sBASAA,EAAAA,yBAQAA,EAAAA,6BAYAA,EAAAA,+BAeAA,EAAAA,gCAaAA,EAAAA,sBAkCAA,EAAAA,oBA4BAA,EAAAA,2BAaAA,EAAAA,6BA2BAA,EAAAA,4BA2BAA,EAAAA,oCAqBAA,EAAAA,uCASAA,EAAAA,qBA8GAA,EAAAA,kBAgBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,yBAmBAA,EAAAA,wBASAA,EAAAA,wBASAA,EAAAA,gCASAA,EAAAA,iCASAA,EAAAA,oBASAA,EAAAA,0BASAA,EAAAA,sBAcAA,EAAAA,sBAgBAgd,EAAAA,yBAYAA,EAAAA,wBAgBAA,EAAAA,yBAYAA,EAAAA,0BAMAA,EAAAA,4BAcAA,EAAAA,4BAcAA,EAAAA,+BAcAA,EAAAA,mCAcAA,EAAAA,2CAMA8qB,EAAAA,UAASzoC,KAAA,CAAC,6BAA8B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,wCAMrEF,EAAAA,UAASzoC,KAAA,CAAC,6BAA8B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,wBAMrEF,EAAAA,UAASzoC,KAAA,CAAC+iD,GAAwB,CAAEpa,UAAQ,8BAG5CF,EAAAA,UAASzoC,KAAA,CAAC8/C,GAAmB,CAAEpX,KAAMpT,EAAAA,WAAYqT,UAAQ,0CAGzDwV,EAAAA,aAAYn+C,KAAA,CAAC8/C,GAAmB,CAAEpX,KAAMpT,EAAAA,WAAYqT,UAAQ,6BAG5DF,EAAAA,UAASzoC,KAAA,CAAC8/C,GAAmB,CAAEnX,UAAQ,yCAGvCwV,EAAAA,aAAYn+C,KAAA,CAAC8/C,GAAmB,CAAEnX,UAAQ,yCAM1CwV,EAAAA,aAAYn+C,KAAA,CAAC+5F,GAAgC,CAAErxD,KAAMqxD,GAAgCpxD,UAAQ,4BAM7FwV,EAAAA,aAAYn+C,KAAA,CAACg1E,GAAoC,CAAEtsC,KAAMssC,GAAoCrsC,UAAQ,+BAMrGwV,EAAAA,aAAYn+C,KAAA,CAACi1E,GAAuC,CAAEvsC,KAAMusC,GAAuCtsC,UAAQ,wCAM3GwV,EAAAA,aAAYn+C,KAAA,CAACg6F,GAA+B,CAAEtxD,KAAMsxD,GAA+BrxD,UAAQ,0BAyE3F/nC,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,YAAS,CAAAkE,KAC3CtD,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,cArOhCilC,EAAAA,CAFC/U,GAAkB,oFAMI/U,EAAAA,qCAAAA,EAAAA,2CAwBvB8pB,EAAAA,CAFC/U,GAAkB,qFAMK/U,EAAAA,qCAAAA,EAAAA,4CA+xB5B4/E,EA/xCA,GAoyCAmF,GAAA,WAAA,SAAAA,KASmC,2BATlCl/F,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC85F,GAAwBZ,GAA+BH,GAClED,GAAgCL,GAA4BG,IAChE34F,QAAS,CAAC65F,GAAwBhB,GAAgCC,GAC9DN,GAA4BG,IAChCprD,QAAS,CAACC,EAAAA,aAAcg7B,GAAe/lB,GAAqBggC,GAAmBr+B,GACnEwX,GAAiBzC,GAAewH,IAC5CzlB,gBAAiB,CAAC+9C,QAEa+F,EATnC,GCj6CAC,GAAA,WAAA,SAAAA,IAMWnuG,KAAAouG,cAAe,EACzB,2BAPA3/F,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8EAITygC,EAAAA,YAAWnhC,KAAA,CAAC,qCAEhBmgG,EAPD,GAYAE,GAAA,WAAA,SAAAA,IAMWruG,KAAAowD,cAAe,EACzB,2BAPA3hD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kFAITygC,EAAAA,YAAWnhC,KAAA,CAAC,uCAEhBqgG,EAPD,GCUIC,GAAY,EAwBhBC,GAAA,WAsVI,SAAAA,EACYluE,EACYmuE,GADZxuG,KAAAqgC,WAAAA,EACYrgC,KAAAwuG,WAAAA,EArUjBxuG,KAAA2N,GAAK,cAAc2gG,KAmBnBtuG,KAAAyuG,MAAQ,GASRzuG,KAAA49B,QAAU,GASV59B,KAAA0uG,gBAAkB,GAalB1uG,KAAA2uG,eAAiB,OAQjB3uG,KAAA4uG,gBAAkB,GASlB5uG,KAAA6uG,0BAA4B,GAU5B7uG,KAAA8uG,iBAAmB,GASnB9uG,KAAA+uG,iBAAmB,GAanB/uG,KAAAgvG,gBAAkB,OASlBhvG,KAAAivG,iBAAmB,GASnBjvG,KAAAkvG,2BAA6B,GAS7BlvG,KAAAmvG,kBAAoB,GA+DpBnvG,KAAAovG,OAAS,IAAIjmF,EAAAA,aAUbnpB,KAAAsoG,QAAU,IAAIn/E,EAAAA,aAUdnpB,KAAAqvG,mBAAqB,IAAIlmF,EAAAA,aAYzBnpB,KAAAsvG,oBAAsB,IAAInmF,EAAAA,aAEzBnpB,KAAAgrG,kBAAsC,CAC1CzuE,cAAe+zC,EAAAA,aAAanlE,GAAe,CAAElH,OAAQ,CAAE6G,aAAc,sBACrE0xB,eAAgB8zC,EAAAA,aAAa9kE,GAAa,CAAEvH,OAAQ,CAAE8G,WAAY,wBAI9D/K,KAAAuvG,uBAAwB,EACxBvvG,KAAAwvG,UAAW,EACTxvG,KAAAu/B,SAAW,IAAIC,EAAAA,QAelBx/B,KAAA2oE,UAAY,EAiFf3oE,KAAKyvG,SAAWlB,EAAmB/8D,UAAY,SAE/CxxC,KAAK0vG,wBAA0B,CAC3BjwE,iBAAkB,IAAI1D,GAAuB/7B,KAAKgrG,mBAClDtrE,eAAgB,IAAIrC,GACpBsC,MAAO3/B,KAAK2vG,QACZ/vE,oBAAqB5/B,KAAK4vG,sBAoGtC,OA/aIpwG,OAAAgC,eACI+sG,EAAAruG,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKwvG,cAGhB,SAAYl2F,GACRtZ,KAAK0vG,wBAAwB/vE,MAAQrmB,EACrCtZ,KAAKwvG,SAAWl2F,mCA+HpB9Z,OAAAgC,eACI+sG,EAAAruG,UAAA,uBAAoB,KADxB,WAEI,OAAOF,KAAKuvG,2BAGhB,SAAyBj2F,GACrBtZ,KAAK0vG,wBAAwB9vE,oBAAsBtmB,EACnDtZ,KAAKuvG,sBAAwBj2F,mCAUjC9Z,OAAAgC,eACW+sG,EAAAruG,UAAA,mBAAgB,KAD3B,WAEI,OAAOF,KAAKgrG,uBAqBhB,SAA4B1wE,GACxBt6B,KAAKgrG,kBAAoB1wE,EACzBt6B,KAAK0vG,wBAAwBjwE,iBAAmB,IAAI1D,GAAuB/7B,KAAKgrG,oDA0DpFxrG,OAAAgC,eAAW+sG,EAAAruG,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,WAAWC,+CAuB3B9gC,OAAAgC,eAAI+sG,EAAAruG,UAAA,QAAK,KAAT,WACI,OAAOF,KAAK6vG,OAAS,OAAS,yCAalCrwG,OAAAgC,eACI+sG,EAAAruG,UAAA,SAAM,KADV,WAEI,OAAQF,KAAK8vG,UAAU3hE,2CAG3B3uC,OAAAgC,eACI+sG,EAAAruG,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK8vG,UAAU3hE,2CAa1B3uC,OAAAgC,eACI+sG,EAAAruG,UAAA,OAAI,KADR,WAEI,MAA6B,KAAzBF,KAAK0uG,iBAAoD,KAA1B1uG,KAAK+uG,iBAC7B,SAEkB,KAAzB/uG,KAAK0uG,iBACqB,KAA1B1uG,KAAK+uG,iBAEE,cAEA,yCAcfvvG,OAAAgC,eACI+sG,EAAAruG,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKyvG,0CAiBhBlB,EAAAruG,UAAAm4D,mBAAA,WAAA,IAAAzjD,EAAA5U,KACIA,KAAK8vG,UAAU/vE,UAAU8E,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,WAAM,OAAAnwB,EAAKm7F,yBAGzExB,EAAAruG,UAAA6vG,oBAAR,WACI/vG,KAAKsoG,QAAQ/lF,KAAK,CAAEytF,OAAQhwG,KAAMsS,MAAO,QAWtCi8F,EAAAruG,UAAAiO,KAAP,SAAYigC,QAAA,IAAAA,IAAAA,EAAmCpuC,KAAK0vG,yBAChD1vG,KAAK8vG,UAAU3hG,KAAKigC,GACpBpuC,KAAKovG,OAAO7sF,KAAK,CAAEytF,OAAQhwG,KAAMsS,MAAO,OACnCtS,KAAK0uG,iBAAoB1uG,KAAK+uG,kBAC/B/uG,KAAK8vG,UAAUhsE,QAAQyP,SAYxBg7D,EAAAruG,UAAAkO,MAAP,WAEIpO,KAAK8vG,UAAU1hG,SAYZmgG,EAAAruG,UAAA6N,OAAP,WACI/N,KAAK6vG,OAAS7vG,KAAKoO,QAAUpO,KAAKmO,QAM/BogG,EAAAruG,UAAA+vG,iBAAP,SAAwB39F,GACpBA,EAAMmyB,kBAEFzkC,KAAK6vG,QACL7vG,KAAK4vG,sBACLt9F,EAAMtR,OAAO87B,UAAUyD,SAASguE,EAAmB2B,eAEnDlwG,KAAKoO,SAONmgG,EAAAruG,UAAAiwG,2BAAP,SAAkC79F,GAC9BtS,KAAKqvG,mBAAmB9sF,KAAK,CAAEytF,OAAQhwG,KAAMsS,MAAKA,KAM/Ci8F,EAAAruG,UAAAkwG,4BAAP,SAAmC99F,GAC/BtS,KAAKsvG,oBAAoB/sF,KAAK,CAAEytF,OAAQhwG,KAAMsS,MAAKA,KAMhDi8F,EAAAruG,UAAA2uC,SAAP,WACQ7uC,KAAKwuG,YAAcxuG,KAAK2N,IACxB3N,KAAKwuG,WAAW9gG,IAAI1N,KAAK2N,GAAI3N,OAM9BuuG,EAAAruG,UAAAsmC,YAAP,WACQxmC,KAAKwuG,YAAcxuG,KAAK2N,IACxB3N,KAAKwuG,WAAW3gG,OAAO7N,KAAK2N,KA1brB4gG,EAAA/8D,QAAU,EACD+8D,EAAA2B,aAAe,iCAN1Cp+D,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,aACVqjC,SAAA,ikDAlDAzO,EAAAA,kBAcK91B,GAAoBzM,WAAA,CAAA,CAAAmR,KA0XpBg9B,EAAAA,iDAhVJuH,EAAAA,UAASzoC,KAAA,CAAC2/B,GAAoB,CAAEgJ,UAAQ,gBASxCxH,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,uBAGAA,EAAAA,qBAgBAA,EAAAA,uBASAA,EAAAA,+BASAA,EAAAA,8BAaAA,EAAAA,+BAQAA,EAAAA,yCASAA,EAAAA,gCAUAA,EAAAA,gCASAA,EAAAA,+BAaAA,EAAAA,gCASAA,EAAAA,0CASAA,EAAAA,iCASAA,EAAAA,oCAWAA,EAAAA,gCAiBAA,EAAAA,sBAmCAgd,EAAAA,wBAUAA,EAAAA,mCAUAA,EAAAA,oCAYAA,EAAAA,yBAyBAwjB,EAAAA,YAAWnhC,KAAA,CAAC,iCA6BZW,EAAAA,2BAKAwgC,EAAAA,YAAWnhC,KAAA,CAAC,0CAeZW,EAAAA,uBAwBAA,EAAAA,SAmHL4/F,EApcA,GA8cA8B,GAAA,WAAA,SAAAA,KAK+B,2BAL9BrhG,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACs/F,GAAoBJ,GAAyBE,IAC5Dn/F,QAAS,CAACq/F,GAAoBJ,GAAyBE,IACvD5xD,QAAS,CAACC,EAAAA,aAAc9M,GAAiB0jB,GAAiBwX,GAAiB9I,QAEhDquC,EAL/B,iBCldI,SAAAC,EAAmB3iG,EAAgBgG,EAAsBa,GAAtCxU,KAAA2N,GAAAA,EAAgB3N,KAAA2T,MAAAA,EAAsB3T,KAAAwU,KAAAA,EAU7D,OARI87F,EAAApwG,UAAAmiB,oBAAA,WACI,MAAO,CACHtH,MAAO/a,KAAK2N,GACZ8U,SAAQriB,EAAA,GAAQJ,KAAKwU,MACrB6H,SAAUrc,KAAK0jB,QACftB,QAAQ,IAGpBkuF,KAEAC,GAAA,WAKI,SAAAA,EACW5iG,EACA6T,EACAI,EACAzf,EACAggB,EACAb,GALAthB,KAAA2N,GAAAA,EACA3N,KAAAwhB,SAAAA,EACAxhB,KAAA4hB,OAAAA,EACA5hB,KAAAmC,MAAAA,EACAnC,KAAAmiB,UAAAA,EACAniB,KAAAshB,QAAAA,EAmBf,OAjBIivF,EAAArwG,UAAAsiB,aAAA,SAAargB,GACT,GAA6B,WAAzBnC,KAAK4hB,OAAOzE,WAA0Bnd,KAAK4hB,OAAO4uF,qBAAsB,KAClE3jF,EAAIxP,WAAWlb,GACrB,OAAQqZ,MAAMqR,IAAM4jF,SAAS5jF,GAAKA,EAAI,EAE1C,OAAO1qB,GAGXouG,EAAArwG,UAAAmiB,oBAAA,WACI,MAAO,CACHtH,MAAO/a,KAAK2N,GAAGoN,MACf21F,OAAQ1wG,KAAK2N,GACb8U,SAAUziB,KAAKmC,MACfka,SAAUrc,KAAKmiB,UACfC,QAAQ,IAGpBmuF,EA9BA,iBAgCA,SAAAI,IAII3wG,KAAAghB,KAAuB,KACvBhhB,KAAAqhB,IAAqB,KAwGzB,OAtGIsvF,EAAAzwG,UAAA0wG,WAAA,SAAW5vF,GACP,OAAO,IAAIuvF,GAAQvvF,EAAK0vF,OAAQ1vF,EAAKQ,SAAUR,EAAKY,OAAQZ,EAAK7e,MAAO6e,EAAK7e,MAAO6e,EAAKK,IAAIC,UAGjGqvF,EAAAzwG,UAAA2wG,UAAA,SAAU7vF,GACN,OAAO,IAAIsvF,GAAOtvF,EAAKrT,GAAGoN,MAAOiG,EAAKQ,SAAUR,EAAKM,UAGzDqvF,EAAAzwG,UAAA4wG,QAAA,SAAQ/1F,GACJ,OAAO/a,KAAKqhB,KAAOrhB,KAAKqhB,IAAI1T,KAAOoN,GAGvC41F,EAAAzwG,UAAA6wG,SAAA,SAAS/vF,GACL,OAAQhhB,KAAKghB,KAAKrT,GAAGoN,QAAUiG,EAAKrT,GAAGoN,OACnC/a,KAAKghB,KAAKrT,GAAGqjG,WAAahwF,EAAKrT,GAAGqjG,UAG1CxxG,OAAAgC,eAAImvG,EAAAzwG,UAAA,aAAU,KAAd,WACI,QAASF,KAAKghB,sCAGlBxhB,OAAAgC,eAAImvG,EAAAzwG,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK2W,KAAKwM,6CAGrB3jB,OAAAgC,eAAImvG,EAAAzwG,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK2W,KAAKoF,4CAGrB40F,EAAAzwG,UAAA+wG,aAAA,YACQjxG,KAAK2W,KAAKwM,aAAgBnjB,KAAK2W,KAAKoF,aAAe/H,WAAsC,OAAzBhU,KAAK2W,KAAKoF,YAC1E6iB,QAAQC,KAAK,yEAEjB7+B,KAAKqhB,IAAMrhB,KAAK6wG,UAAU7wG,KAAKghB,UACzBhT,EAAO,CACT+M,MAAO/a,KAAKqhB,IAAI1T,GAChB8U,SAAUziB,KAAKqhB,IAAI7M,KACnB4N,QAAQ,GAEZpiB,KAAK2W,KAAKu6F,eAAe3uF,KAAKvU,GAC1BA,EAAKoU,OACLpiB,KAAKmxG,cAGTnxG,KAAKqhB,IAAIuC,iBAAmB5jB,KAAK2W,KAAKmF,aAAa6H,mBAAmB3jB,KAAKqhB,IAAI1T,IAAI,GACnF3N,KAAK2W,KAAKmF,aAAa0vB,eACvBxrC,KAAK2W,KAAKy6F,eAAepxG,KAAKqhB,IAAI1T,MAItCgjG,EAAAzwG,UAAAixG,WAAA,WACInxG,KAAKqhB,IAAM,MAGfsvF,EAAAzwG,UAAAmxG,MAAA,SAAMrwF,OACIswF,EAAUtxG,KAAK4wG,WAAW5vF,GAChCswF,EAAQv1F,WAAa/b,KAAK+b,eACpB/N,EAAO,CACT0iG,OAAQY,EAAQ3jG,GAChBoN,MAAOu2F,EAAQ3jG,GAAGoN,MAClB0H,SAAU6uF,EAAQnvG,MAClBigB,QAAQ,GAKZ,GAFApiB,KAAK2W,KAAK46F,gBAAgBhvF,KAAKvU,GAE3BA,EAAKoU,OACLpiB,KAAK8gB,WAIT,GAAI9gB,KAAKwxG,WAAY,CACjB,GAAIxxG,KAAKqhB,MAAQrhB,KAAK8wG,QAAQQ,EAAQ3jG,GAAGoN,OAIrC,OAHA/a,KAAK2W,KAAKuO,SAAQ,GAClBllB,KAAKghB,KAAOswF,OACZtxG,KAAKixG,eAMT,GAFAjxG,KAAKghB,KAAOswF,GAEPtxG,KAAKqhB,IAEN,YADArhB,KAAKixG,oBAITjxG,KAAKghB,KAAOswF,EACZtxG,KAAKmxG,cAIbR,EAAAzwG,UAAA4gB,IAAA,WACI9gB,KAAKghB,KAAO,MAIhB2vF,EAAAzwG,UAAAuxG,aAAA,SAAajwF,EAAkBM,GAC3B,QAAK9hB,KAAKghB,OAGHhhB,KAAKghB,KAAKY,OAAOjO,QAAUmO,GAAe9hB,KAAKghB,KAAKQ,WAAaA,wBA3G/ExP,EAAAA,aA6GD2+F,mBA8CI,SAAAe,EAAoBv8C,GAAAn1D,KAAAm1D,KAAAA,EAxCpBn1D,KAAA2xG,UAAW,EAEX3xG,KAAA4xG,cAAa,GACb5xG,KAAA6xG,aAAY,GAGZ7xG,KAAAgwC,UAAY,IAAI1/B,IAChBtQ,KAAA8xG,KAAO,IAAIxhG,IACXtQ,KAAA+xG,QAAuB,IAAIxhG,IAE3BvQ,KAAAgyG,aAAyB,IAAIzhG,IA+BzBvQ,KAAKiyG,mBACLjyG,KAAKkyG,oBAkcb,OA3dI1yG,OAAAgC,eAAIkwG,EAAAxxG,UAAA,SAAM,KAAV,WAGIF,KAAKmyG,uBAECtzB,EAASl/E,MAAMuT,KAAKlT,KAAK+xG,SAASz1F,IAAI,SAAA1L,GAAS,OAAAy8B,KAAK+kE,MAAMxhG,KAOhE,OAJKiuE,EAAOl+E,QAAUX,KAAKwwF,eAAiBxwF,KAAK2W,KAAK07F,kBAClDxzB,EAAOr8E,KAAKxC,KAAKsyG,cAActyG,KAAKwwF,gBAGjC3R,mCAGXr/E,OAAAgC,eAAIkwG,EAAAxxG,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK6xG,aAAaU,mBAG7B,SAAkBpwG,GACdnC,KAAK6xG,aAAaU,cAAgBpwG,mCAWtCuvG,EAAAxxG,UAAAgyG,kBAAA,WACIlyG,KAAK4xG,cAAc/gG,KAAO,KAC1B7Q,KAAK4xG,cAAct2D,OAAQ,EAC3Bt7C,KAAK4xG,cAAchhG,MAAQ,KAC3B5Q,KAAK4xG,cAAcz6B,QAAS,GAMhCu6B,EAAAxxG,UAAA+xG,iBAAA,WACIjyG,KAAK6xG,aAAahhG,KAAO,KACzB7Q,KAAK6xG,aAAaW,MAAO,EACzBxyG,KAAK6xG,aAAav2D,OAAQ,EAC1Bt7C,KAAK6xG,aAAajhG,MAAQ,KAC1B5Q,KAAK6xG,aAAaU,eAAgB,GAOtCb,EAAAxxG,UAAAwN,IAAA,SAAImD,EAAsB4hG,QAAA,IAAAA,IAAAA,GAAA,GACtBzyG,KAAKgwC,UAAUkB,IAAIrgC,EAAKwQ,KAAOrhB,KAAKgwC,UAAUliC,IAAI+C,EAAKwQ,KAAK3T,IAAImD,EAAK+Q,QACjE5hB,KAAKgwC,UAAUtnB,IAAI7X,EAAKwQ,IAAK,IAAI9Q,KAAezC,IAAI+C,EAAKwQ,KAAK3T,IAAImD,EAAK+Q,QAEvE6wF,GAAczyG,KAAK+xG,QAAQrkG,IAAI2/B,KAAKC,UAAUttC,KAAKsyG,cAAczhG,MAMzE6gG,EAAAxxG,UAAAiyG,iBAAA,WACQnyG,KAAK4xG,cAAchhG,OACnB5Q,KAAK+xG,QAAQrkG,IAAI2/B,KAAKC,UAAUttC,KAAK4xG,cAAchhG,SAI3D8gG,EAAAxxG,UAAA2N,OAAA,SAAOgD,GACC7Q,KAAKgwC,UAAUkB,IAAIrgC,EAAKwQ,MACxBrhB,KAAKgwC,UAAUliC,IAAI+C,EAAKwQ,KAAKurB,UAAO/7B,EAAK+Q,QAEzC5hB,KAAK0yG,aAAa7hG,KAClB7Q,KAAKwwF,cAAgB,MAEzBxwF,KAAK+xG,QAAQnlE,UAAOS,KAAKC,UAAUttC,KAAKsyG,cAAczhG,MAG1D6gG,EAAAxxG,UAAAyyG,QAAA,SAAQ9hG,GACJ,OAAQ7Q,KAAKgwC,UAAUkB,IAAIrgC,EAAKwQ,MAAQrhB,KAAKgwC,UAAUliC,IAAI+C,EAAKwQ,KAAK6vB,IAAIrgC,EAAK+Q,SACzE5hB,KAAK8xG,KAAK5gE,IAAIrgC,EAAKwQ,MAAQrhB,KAAK8xG,KAAKhkG,IAAI+C,EAAKwQ,KAAK6vB,IAAIrgC,EAAK+Q,SAGrE8vF,EAAAxxG,UAAA6jB,SAAA,SAASlT,GACL,OAAQ7Q,KAAK0yG,aAAa7hG,IAAS7Q,KAAK2W,KAAK07F,kBAAqBryG,KAAK2yG,QAAQ9hG,IAGnF6gG,EAAAxxG,UAAAwyG,aAAA,SAAa7hG,GACT,GAAI7Q,KAAKwwF,cAAe,KACdoiB,EAAW5yG,KAAKwwF,cAAc5uE,SAAW/Q,EAAK+Q,QAAU5hB,KAAKwwF,cAAcnvE,MAAQxQ,EAAKwQ,IAC9F,GAAIrhB,KAAK2W,KAAKk8F,iBAAkB,KACtBlgB,EAAS3yF,KAAKwwF,cAAcmC,OAClC,OAAOigB,GAAY5yG,KAAK8yG,eAAengB,EAAQ9hF,EAAK8hF,QAExD,OAAOigB,EAEX,OAAO,GAGXlB,EAAAxxG,UAAA4yG,eAAA,SAAeze,EAA8BrzF,GACzC,OAAOqzF,EAAQ0e,qBAAuB/xG,EAAO+xG,oBAGjDrB,EAAAxxG,UAAA8yG,aAAA,SAAaniG,EAAsBtC,GAC/BvO,KAAK+xG,QAAQrkG,IAAI2/B,KAAKC,UAAUttC,KAAKsyG,cAAczhG,EAAMtC,MAG7DmjG,EAAAxxG,UAAA+yG,gBAAA,SAAgBpiG,EAAsBtC,GAClCvO,KAAK+xG,QAAQnlE,UAAOS,KAAKC,UAAUttC,KAAKsyG,cAAczhG,EAAMtC,MAQhEmjG,EAAAxxG,UAAAoyG,cAAA,SAAczhG,EAAsBtC,GAChC,IAAKA,EACD,MAAO,CACH2kG,SAAUriG,EAAKwQ,IACf8xF,OAAQtiG,EAAKwQ,IACb+xF,YAAaviG,EAAK+Q,OAClByxF,UAAWxiG,EAAK+Q,QAIlB,IAAA1T,EAAAK,EAAAsC,KAAEwQ,EAAAnT,EAAAmT,IAAKO,EAAA1T,EAAA0T,OAMb,MAAO,CAAEsxF,SALQz3F,KAAKwtB,IAAIp4B,EAAKwQ,IAAKA,GAKjB8xF,OAJJ13F,KAAK4O,IAAIxZ,EAAKwQ,IAAKA,GAIP+xF,YAHP33F,KAAKwtB,IAAIp4B,EAAK+Q,OAAQA,GAGFyxF,UAFtB53F,KAAK4O,IAAIxZ,EAAK+Q,OAAQA,KAQ5C8vF,EAAAxxG,UAAAozG,uBAAA,SAAuBziG,EAAsByqC,EAAgBi4D,GACzDvzG,KAAK4xG,cAAcz6B,QAAS,EAC5Bn3E,KAAKiyG,mBACLjyG,KAAK4xG,cAAct2D,MAAQA,IAAUi4D,EAIjCvzG,KAAK4xG,cAAct2D,QAAUt7C,KAAK4xG,cAAc/gG,OAChD7Q,KAAKurC,QACLvrC,KAAK4xG,cAAc/gG,KAAOA,IAIlC6gG,EAAAxxG,UAAAszG,qBAAA,SAAqB3iG,EAAsB4iG,EAA2CC,OAC5EC,EAAU3zG,KAAK4xG,cAGrB,GAAI+B,EAAQx8B,OAAQ,CAKhB,GAJIy8B,MACA5zG,KAAK6zG,qBAAqBH,GAG1BC,EAAQr4D,MAIR,OAHAt7C,KAAK8zG,WAAWjjG,EAAM8iG,GACtBA,EAAQ/iG,MAAQ5Q,KAAKsyG,cAAczhG,EAAM8iG,QACzCF,EAAQlxF,KAAKviB,KAAKsyG,cAAczhG,EAAM8iG,IAI1C3zG,KAAKkyG,oBACLlyG,KAAKurC,QACLvrC,KAAK0N,IAAImD,KAIjB6gG,EAAAxxG,UAAA6zG,YAAA,SAAYljG,EAAsByqC,EAAgBk3D,GAW9C,GAVAxyG,KAAKmyG,mBACLnyG,KAAKkyG,oBACLlyG,KAAK6xG,aAAaW,KAAOA,EACzBxyG,KAAK6xG,aAAav2D,MAAQA,EAGrBk3D,GACDxyG,KAAKurC,QAGL+P,EAOA,OALKt7C,KAAK6xG,aAAahhG,OACnB7Q,KAAK6xG,aAAahhG,KAAO7Q,KAAKwwF,eAAiB3/E,GAEnD7Q,KAAKg0G,oBAAoBnjG,QACzB7Q,KAAKi0G,qBAITj0G,KAAKizG,gBAAgBpiG,GACrB7Q,KAAK6xG,aAAahhG,KAAOA,GAG7B6gG,EAAAxxG,UAAA8zG,oBAAA,SAAoBnjG,GAChB7Q,KAAKurC,QACLvrC,KAAK+lF,YAAYl1E,EAAM7Q,KAAK6xG,eAGhCH,EAAAxxG,UAAAg0G,SAAA,SAASlzG,EAAkCmzG,GAMvC,QAHIlzG,EACAkB,EAHEF,EAAWkyG,EAAOC,UACpBC,EAAOpyG,EAASC,0BAMhB,GADAgM,EAAA7L,EAAAgyG,EAAAlyG,MAAA,GAAClB,EAAAiN,EAAA,GAAK/L,EAAA+L,EAAA,GACFlN,EAAOkwC,IAAIjwC,GAAM,KACXqzG,EAAWtzG,EAAO8M,IAAI7M,GAC5BkB,EAAMsQ,QAAQ,SAAAwO,GAAU,OAAAqzF,EAAS5mG,IAAIuT,KACrCjgB,EAAO0nB,IAAIznB,EAAKqzG,QAEhBtzG,EAAO0nB,IAAIznB,EAAKkB,GAEpBkyG,EAAOpyG,EAASC,SATZmyG,EAAKjyG,WAajBsvG,EAAAxxG,UAAAq0G,aAAA,SAAa1jG,EAAsByB,GAG/B,OADAtS,KAAK2xG,SAA6B,IAAlBr/F,EAAM2qE,UAAmC,IAAlB3qE,EAAMC,SACxCvS,KAAK2xG,WAGV3xG,KAAKi0G,qBAKAj0G,KAAK6xG,aAAahhG,OACnB7Q,KAAK6xG,aAAahhG,KAAOA,GAG7B7Q,KAAK6xG,aAAaW,KAAOxyG,KAAK+lF,YAAYl1E,EAAM7Q,KAAK6xG,aAAc7xG,KAAK8xG,MACpE9xG,KAAK8zG,WAAWjjG,EAAM7Q,KAAK6xG,eACxB,IAGXH,EAAAxxG,UAAAs0G,UAAA,SAAU3jG,EAAsB4iG,GAAhC,IAAA7+F,EAAA5U,KACI,OAAIA,KAAK2xG,UACL3xG,KAAKy0G,uBACLz0G,KAAKgzG,aAAaniG,EAAM7Q,KAAK6xG,cAC7B7xG,KAAKk0G,SAASl0G,KAAKgwC,UAAWhwC,KAAK8xG,MACnC9xG,KAAKm1D,KAAK7T,QAAQ,WAAM,OAAAmyD,EAAQlxF,KAAK3N,EAAK09F,cAAczhG,EAAM+D,EAAKi9F,iBACnE7xG,KAAK8xG,KAAKvmE,QACVvrC,KAAK2xG,UAAW,GACT,GAGP3xG,KAAK6xG,aAAav2D,OAClBt7C,KAAKi0G,qBACLj0G,KAAKy0G,uBACLz0G,KAAKgzG,aAAaniG,EAAM7Q,KAAK6xG,cAC7B4B,EAAQlxF,KAAKviB,KAAKsyG,cAAczhG,EAAM7Q,KAAK6xG,gBACpC,IAGX7xG,KAAK0N,IAAImD,IACF,IAGX6gG,EAAAxxG,UAAA6lF,YAAA,SAAYl1E,EAAsBtC,EAAuBqO,QAAA,IAAAA,IAAAA,EAAuC5c,KAAKgwC,WAC7FpzB,IAAe5c,KAAK8xG,MACpBl1F,EAAW2uB,QAGf,IADM,IAAAr9B,EAAAlO,KAAAsyG,cAAAzhG,EAAAtC,GAAE2kG,EAAAhlG,EAAAglG,SAAUC,EAAAjlG,EAAAilG,OAAQC,EAAAllG,EAAAklG,YAAaC,EAAAnlG,EAAAmlG,UAC9B7yG,EAAI0yG,EAAU1yG,GAAK2yG,EAAQ3yG,IAChC,IAAK,IAAI0V,EAAC,EAA0BA,GAAKm9F,EAAWn9F,IAChD0G,EAAWs0B,IAAI1wC,GAAKoc,EAAW9O,IAAItN,GAAGkN,IAAIwI,GACtC0G,EAAW8L,IAAIloB,EAAG,IAAI+P,KAAezC,IAAItN,GAAGkN,IAAIwI,IAKhEw7F,EAAAxxG,UAAA4zG,WAAA,SAAWjjG,EAAsBtC,GACxBvO,KAAK6xG,aAAaW,MACnBxyG,KAAKgwC,UAAUzE,QAEnBvrC,KAAK+lF,YAAYl1E,EAAMtC,IAG3BmjG,EAAAxxG,UAAAqrC,MAAA,SAAMmpE,QAAA,IAAAA,IAAAA,GAAA,GACEA,IAAiB10G,KAAKwwF,cAAgB,MAC1CxwF,KAAKgwC,UAAUzE,QACfvrC,KAAK8xG,KAAKvmE,QACVvrC,KAAK+xG,QAAQxmE,SAGjBmmE,EAAAxxG,UAAA+zG,mBAAA,eACUjkE,EAAYj+B,OAAO4iG,eACrB3kE,EAAU4kE,aACV50G,KAAK60G,gBAAkB7kE,EAAU8kE,WAAW,GAC5C90G,KAAK60G,gBAAgBl6B,UAAS,GAC9B3qC,EAAU+kE,oBAIlBrD,EAAAxxG,UAAAu0G,qBAAA,eACUzkE,EAAYj+B,OAAO4iG,eACpB3kE,EAAU4kE,YACX5kE,EAAUglE,SAASh1G,KAAK60G,iBAAmBx2F,SAAS42F,gBAS5DvD,EAAAxxG,UAAA2zG,qBAAA,SAAqBhjG,OACXm/B,EAAYj+B,OAAO4iG,eACzB3kE,EAAU+kE,sBACJnkG,EAAQ,IAAIskG,MAClBtkG,EAAMukG,WAAWtkG,GACjBD,EAAM+pE,UAAS,GACf3qC,EAAUglE,SAASpkG,IAIvB8gG,EAAAxxG,UAAAk1G,gBAAA,WACI,OAAOp1G,KAAKgyG,aAAap1E,KAAOj9B,MAAMuT,KAAKlT,KAAKgyG,aAAahiG,QAAU,IAI3E0hG,EAAAxxG,UAAAm1G,kBAAA,SAAkB/iG,GAAlB,IAAAsC,EAAA5U,KACUs1G,EAAat1G,KAAKu1G,qBACpBv1G,KAAKw1G,UAAUx1G,KAAKy1G,SAASz7F,OAAO,SAAA07F,GAAO,OAAA9gG,EAAKkO,cAAc4yF,KAAQ11G,KAAKo1G,kBACzEllE,EAAelwC,KAAKu1G,qBAAuBv1G,KAAKo1G,kBAAkBp7F,OAAO,SAAA8C,GAAK,OAACw4F,EAAWxoF,SAAShQ,KAAM,GAC/G9c,KAAK21G,sBAAsBzlE,EAAc,GAAIolE,EAAYhjG,IAI7Do/F,EAAAxxG,UAAA01G,cAAA,SAActjG,GAAd,IAAAsC,EAAA5U,KAEU61G,EADY71G,KAAKw1G,UAAUx1G,KAAKy1G,SACTz7F,OAAO,SAAC07F,GAAQ,OAAC9gG,EAAKkO,cAAc4yF,KAC3DxlE,EAAelwC,KAAKgyG,aAAap1E,KAAO58B,KAAKo1G,kBAAkBzyG,OAAOkzG,GAAaA,EAEzF71G,KAAK21G,sBAAsBzlE,EAAc2lE,EAAW,GAAIvjG,IAI5Do/F,EAAAxxG,UAAA8iB,cAAA,SAAcjI,EAAO+6F,EAAqBxjG,GACtC,GAAKtS,KAAK2W,KAAKo/F,kBAAmB/1G,KAAKg2G,aAAaj7F,GAApD,KAGMm1B,GAFN4lE,GAAsB91G,KAAK2W,KAAKs/F,4BAA8BH,GAEpB,CAAC/6F,IAAoD,IAA3C/a,KAAKo1G,kBAAkB9jG,QAAQyJ,GAC/E/a,KAAKo1G,kBAAiB1yG,EAAO1C,KAAKo1G,kBAAiB,CAAEr6F,IACnDwnF,EAAUuT,EAAqB91G,KAAKo1G,kBAAoB,GAC9Dp1G,KAAK21G,sBAAsBzlE,EAAc,CAACn1B,GAAQwnF,EAASjwF,KAI/Do/F,EAAAxxG,UAAA6iB,YAAA,SAAYhI,EAAOzI,GACf,GAAKtS,KAAK8iB,cAAc/H,GAAxB,KACMm1B,EAAelwC,KAAKo1G,kBAAkBp7F,OAAO,SAAA5Y,GAAK,OAAAA,IAAM2Z,IAC1D/a,KAAKgyG,aAAap1E,MAAQ58B,KAAKgyG,aAAa9gE,IAAIn2B,IAChD/a,KAAK21G,sBAAsBzlE,EAAc,GAAI,CAACn1B,GAAQzI,KAK9Do/F,EAAAxxG,UAAAg2G,sBAAA,SAAsBC,EAAeL,GAArC,IAAAlhG,EAAA5U,KACQ81G,GAAsB91G,KAAKgyG,aAAazmE,QAC5C4qE,EAAO1jG,QAAQ,SAAAsI,GAAWnG,EAAKo9F,aAAatkG,IAAIqN,KAChD/a,KAAKo2G,gBAAkBpiG,WAI3B09F,EAAAxxG,UAAAm2G,wBAAA,SAAwBF,GAAxB,IAAAvhG,EAAA5U,KACIm2G,EAAO1jG,QAAQ,SAAAsI,GAAS,OAAAnG,EAAKo9F,aAAaplE,UAAO7xB,KACjD/a,KAAKo2G,gBAAkBpiG,WAG3B09F,EAAAxxG,UAAA4iB,cAAA,SAAc/H,GACV,OAAO/a,KAAKgyG,aAAap1E,KAAO,GAAK58B,KAAKgyG,aAAa9gE,IAAIn2B,IAI/D22F,EAAAxxG,UAAAo2G,mBAAA,SAAmBv7F,EAAOuG,EAAShP,GAAnC,IAAAsC,EAAA5U,KAEI,GADAA,KAAKo2G,gBAAkBpiG,UAClBhU,KAAKgyG,aAAap1E,OAAQ58B,KAAKg2G,aAAaj7F,GAAjD,KAIMw7F,EAAWv2G,KAAKy1G,QAChBe,EAAYx2G,KAAKo1G,kBAAkBp1G,KAAKgyG,aAAap1E,KAAO,GAC5D65E,EAAYF,EAASjlG,QAAQtR,KAAK02G,eAAeF,IACjDhhE,EAAW+gE,EAASjlG,QAAQgQ,GAC5Bq1F,EAAOJ,EAAS1+F,MAAM4D,KAAKwtB,IAAIwtE,EAAWjhE,GAAW/5B,KAAK4O,IAAIosF,EAAWjhE,GAAY,GAErFgtD,EAAQxiG,KAAKw1G,UAAUmB,GAAM38F,OAAO,SAAA07F,GAAO,OAAC9gG,EAAKkO,cAAc4yF,KAC/DxlE,EAAelwC,KAAKo1G,kBAAkBzyG,OAAO6/F,GAEnDxiG,KAAK21G,sBAAsBzlE,EAAcsyD,EAAO,GAAIlwF,QAZhDtS,KAAKgjB,cAAcjI,IAe3B22F,EAAAxxG,UAAA02G,kBAAA,WACI,IAAK52G,KAAK2W,KAAKnC,KAAQ,OAAO,EAC9B,GAAIxU,KAAKo2G,kBAAoBpiG,UAAa,OAAOhU,KAAKo2G,oBAEhDS,EAAc72G,KAAKw1G,UAAUx1G,KAAKy1G,SACxC,OAAOz1G,KAAKo2G,gBAAkB36F,KAAKwtB,IAAIjpC,KAAKgyG,aAAap1E,KAAMi6E,EAAYl2G,QAAU,GACjF,IAAI4P,IAAI5Q,MAAMuT,KAAKlT,KAAKgyG,aAAat8E,UAAU/yB,OAAOk0G,IAAcj6E,OAAS58B,KAAKgyG,aAAap1E,MAGvG80E,EAAAxxG,UAAA42G,mBAAA,WAAA,IAAAliG,EAAA5U,KACUqgB,GAAergB,KAAKu1G,sBACtBv1G,KAAKw1G,UAAUx1G,KAAK2W,KAAK0J,cAAcuM,KAAK,SAAA8oF,GAAO,OAAA9gG,EAAKkO,cAAc4yF,KAC1E,OAAO11G,KAAKgyG,aAAap1E,KAAO,GAAKvc,IAAiBrgB,KAAK42G,qBAG/Dp3G,OAAAgC,eAAWkwG,EAAAxxG,UAAA,yBAAsB,KAAjC,WAAA,IAAA0U,EAAA5U,KACI,OAAOA,KAAKu1G,qBACRv1G,KAAKw1G,UAAUx1G,KAAKy1G,SAASz7F,OAAO,SAAAe,GAAS,OAAAnG,EAAKkO,cAAc/H,KAChE/a,KAAKo1G,kBAAkBp7F,OAAO,SAAAe,GAAS,OAACnG,EAAKohG,aAAaj7F,sCAG3D22F,EAAAxxG,UAAAy1G,sBAAP,SAA6BzlE,EAAcsyD,EAAOD,EAASjwF,OACjDykG,EAAgB/2G,KAAKo1G,kBAC3B,IAAIp1G,KAAKg3G,oBAAoBD,EAAe7mE,GAA5C,KAEMliC,EAAO,CACTqnC,aAAc0hE,EAAe7mE,aAAcA,EAC3CsyD,MAAOA,EAAOD,QAASA,EAASjwF,MAAOA,EAAO8P,QAAQ,GAE1DpiB,KAAK2W,KAAKsgG,qBAAqB10F,KAAKvU,GAChCA,EAAKoU,QACTpiB,KAAKk2G,sBAAsBloG,EAAKkiC,cAAc,KAG3CwhE,EAAAxxG,UAAAw2G,eAAP,SAAsB37F,GAClB,IAAK/a,KAAK2W,KAAKoF,WAAc,OAAOhB,MAC9ByG,EAAWxhB,KAAKw1G,UAAUx1G,KAAK2W,KAAKoR,QAAQrH,cAAa,IAAOpP,QAAQyJ,GAC9E,OAAOyG,EAAW,EAAI,GAAKxhB,KAAK2W,KAAKoR,QAAQrH,cAAa,GAAMc,IAG7DkwF,EAAAxxG,UAAAs1G,UAAP,SAAiBhhG,GAAjB,IAAAI,EAAA5U,KACI,OAAOA,KAAK2W,KAAKoF,YAAcvH,EAAK7T,OAAS6T,EAAK8H,IAAI,SAAAnD,GAAO,OAAAA,EAAIvE,EAAK+B,KAAKoF,cAAevH,GAGvFk9F,EAAAxxG,UAAAgnB,mBAAP,WACIlnB,KAAKo2G,gBAAkBpiG,WAIpB09F,EAAAxxG,UAAAg3G,qBAAP,WACIl3G,KAAKgyG,aAAazmE,QAClBvrC,KAAKknB,sBAIT1nB,OAAAgC,eAAWkwG,EAAAxxG,UAAA,UAAO,KAAlB,WAAA,IAAA0U,EAAA5U,KAGI,OAFgBA,KAAKu1G,sBAAwBv1G,KAAK2W,KAAK6N,mBAAmB7jB,OACtEX,KAAK2W,KAAKwgG,mBAAqBn3G,KAAK2W,KAAKoR,QAAQrH,cAAa,IACnD1G,OAAO,SAAAo9F,GAAS,OAACxiG,EAAKohG,aAAaphG,EAAK+B,KAAKoR,QAAQR,WAAW6vF,uCAG3E1F,EAAAxxG,UAAA82G,oBAAR,SAA4BrrE,EAAOC,GAC/B,OAAOD,EAAMhrC,SAAWirC,EAAOjrC,QAAU,IAAI4P,IAAIo7B,EAAMhpC,OAAOipC,IAAShP,OAAS+O,EAAMhrC,QAGlF+wG,EAAAxxG,UAAAq1G,mBAAR,eACU5+F,EAAO3W,KAAS,KACtB,OAAQyY,GAAyBG,MAAMjC,EAAKsO,4BAC3CxM,GAAyBG,MAAMjC,EAAKuR,mCAGjCwpF,EAAAxxG,UAAA81G,aAAR,SAAqBj7F,GACjB,OAAO/a,KAAK2W,KAAKoR,QAAQP,wBAAwBzM,wBA7exD/I,EAAAA,sDA5MkC+0B,EAAAA,UA2rBnC2qE,KAEA,SAAgBkC,KACZ,OAAQ,eAAepiG,KAAKJ,UAAUK,YAAc,cAAcD,KAAKJ,UAAUimG,WAAa,QAAQ7lG,KAAKJ,UAAUK,eClrBzH6lG,GAAA,WAUI,SAAAA,EAAoBl4E,EAAyCm4E,EAAkBxkB,GAA3D/yF,KAAAo/B,MAAAA,EAAyCp/B,KAAAu3G,IAAAA,EAAkBv3G,KAAA+yF,aAAAA,EAJrE/yF,KAAAw3G,cAA+B,GAEjCx3G,KAAAy3G,gBAA4E,GAGhFz3G,KAAK03G,gBAAkB13G,KAAK+yF,aAAanhF,UACrC5R,KAAK03G,kBACL13G,KAAKw3G,cAAgB,CAGjBG,WAAYluB,OAAOmuB,WACnBC,YAAa,CACT,CAACpuB,OAAOquB,IAAK,CAAEnuB,UAAW,IAC1B,CAACF,OAAOsuB,MAAO,CACXvwG,UAAWiiF,OAAOuuB,uBAEtB,CAACvuB,OAAOwuB,KACR,CAACxuB,OAAOwuB,IAAK,CAAE3lG,MAAO,YAAa4lG,KAAM,GAAK,CAAC,WA+HnE,OAzHWZ,EAAAp3G,UAAAi4G,SAAP,SAAgBt6C,GACZ,OAAOA,EAAUxoD,cAAcyY,SAAS,aAOrCwpF,EAAAp3G,UAAAskC,iBAAP,SACIV,EACA+5B,EACAu6C,EACA9uF,GAJJ,IAAA1U,EAAA5U,KAKI,QADA,IAAAspB,IAAAA,EAAA,MACKtpB,KAAK03G,gBAKV,OAAO13G,KAAKo/B,MAAM0K,kBAAkB,eAC5BuuE,EAAoBzjG,EAAK0jG,qBAAqBx0E,GACvC,OAAPu0E,IAEAA,EAAK,IAAI5uB,OAAO3lD,EAAStkC,OAAOa,OAAOuU,EAAK4iG,cAAeluF,IAC3D1U,EAAK2jG,qBAAqBz0E,EAASu0E,QAEjCG,EAAU,SAACC,GAAe7jG,EAAKwqB,MAAMsjB,IAAI,WAAQ01D,EAAaK,MAEpE,OADAJ,EAAGK,GAAG76C,EAAW26C,GACV,WAAQH,EAAGM,IAAI96C,EAAW26C,OAUlClB,EAAAp3G,UAAA04G,uBAAP,SAA8B53G,EAAgB68D,EAAmBu6C,GAC7D,GAAKp4G,KAAK03G,gBAAV,KAIM5zE,EAAU9jC,KAAK64G,qBAAqB73G,GAG1C,OAAOhB,KAAKwkC,iBAAgB,EAAyBq5B,EAAWu6C,KAQ7Dd,EAAAp3G,UAAA24G,qBAAP,SAA4B73G,GACxB,OAAO83G,EAAAA,UAASD,qBAAqB74G,KAAKu3G,IAAKv2G,IAc5Cs2G,EAAAp3G,UAAA64G,iBAAP,SAAwBj1E,EAAsBxxB,EAAegX,GACzCtpB,KAAKs4G,qBAAqBx0E,GAClCh2B,IAAIwE,GAAOoW,IAAIY,IAQpBguF,EAAAp3G,UAAAq4G,qBAAP,SAA4Bz0E,EAAsBk1E,GAC9Ch5G,KAAKy3G,gBAAgBj1G,KAAK,CAACshC,QAAOA,EAAEk1E,QAAOA,KAQxC1B,EAAAp3G,UAAAo4G,qBAAP,SAA4Bx0E,OAClBtzB,EAAUxQ,KAAKy3G,gBAAgBz9F,OAAO,SAAC7X,EAAOwR,EAAOtE,GACvD,OAAOlN,EAAM2hC,UAAYA,IAE7B,OAAOtzB,EAAO7P,OAAS6P,EAAO,GAAGwoG,QAAU,MAQxC1B,EAAAp3G,UAAA+4G,wBAAP,SAA+Bn1E,GAE3B,QADInwB,EAAgB,KACXnT,EAAI,EAAGA,EAAIR,KAAKy3G,gBAAgB92G,OAAQH,IAC7C,GAAIsjC,IAAY9jC,KAAKy3G,gBAAgBj3G,GAAGsjC,QAAS,CAC7CnwB,EAAQnT,EACR,MAGM,OAAVmT,GACa3T,KAAKy3G,gBAAgBv8F,OAAOvH,EAAO,GAAG,GAE9CqlG,QAAQh3E,WAKds1E,EAAAp3G,UAAA8hC,QAAP,uBACI,IAAmB,IAAAlyB,EAAAC,EAAA/P,KAAKy3G,iBAAexnG,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA1B+N,EAAA9N,MACN62G,QAAQh3E,+GAEjBhiC,KAAKy3G,gBAAkB,wBApJ9BzlG,EAAAA,sDAZ4B+0B,EAAAA,0CAsBW50B,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBAnBtCp1B,MA+JT4lG,EAtJA,OCVI4B,YAAc,cACdC,iBAAmB,wBAInBx+E,IAAM,MACNH,OAAS,cAIT4+E,cAAgB,gBAChBC,gBAAkB,kBAClBC,mBAAqB,0BAIrBC,SAAW,WACXC,YAAc,cACdviG,SAAW,WACXwiG,gBAAkB,uBAIlBC,KAAO,OACPC,OAAS,SACTC,SAAW,YCgBfC,GAAA,WA8fI,SAAAA,EACch3F,EACAhC,EACHkH,EACA6lB,EACC9J,EACEqxB,EACF2kD,EACE/mB,GARd,IAAAn+E,EAAA5U,KACcA,KAAA6iB,iBAAAA,EACA7iB,KAAA6gB,YAAAA,EACH7gB,KAAA+nB,QAAAA,EACA/nB,KAAA4tC,IAAAA,EACC5tC,KAAA8jC,QAAAA,EACE9jC,KAAAm1D,KAAAA,EACFn1D,KAAA85G,aAAAA,EACE95G,KAAA+yF,aAAAA,EA/fN/yF,KAAA+5G,SAAW,EAgFZ/5G,KAAAg6G,eAAiB,gBAajBh6G,KAAAi6G,qBAAuB,wBA8K9Bj6G,KAAAk6G,YAAa,EAObl6G,KAAAm6G,UAAW,EAcJn6G,KAAA2oE,SAAW,EAcX3oE,KAAA0xC,KAAO,WAsEd1xC,KAAAiR,MAAQ,GAsFDjR,KAAAyyC,SAAU,EAsCPzyC,KAAAo6G,qBAAsB,EAIxBp6G,KAAAq6G,eAAiBC,GAAkBV,SA0K3C55G,KAAAu6G,YAAc,SAACjoG,GACX,IAAKD,GAAYC,GAIb,OAHAsC,EAAKiO,iBAAiBsvF,mBACtBv9F,EAAKiO,iBAAiBqvF,yBACtBt9F,EAAKiO,iBAAiB0vF,eAAgB,GAG1C39F,EAAKiO,iBAAiBkxF,YAAYn/F,EAAK4lG,cAAeloG,EAAMinF,SAAUjnF,EAAMmoG,UAQhFz6G,KAAA06G,aAAe,SAACpoG,GACKsC,EAAKiO,iBAAiB0xF,aAAa3/F,EAAK4lG,cAAeloG,IAEpEsC,EAAK+B,KAAKi3B,IAAIrL,iBAQtBviC,KAAA26G,UAAY,SAACroG,GACLsC,EAAK+B,KAAKk8F,kBACVj+F,EAAK+B,KAAKu8E,WAAW0nB,uBAAuBhmG,EAAKimG,SAAUjmG,EAAKs+F,SAAU,MAEzE7gG,GAAYC,KACbsC,EAAKiO,iBAAiB2xF,UAAU5/F,EAAK4lG,cAAe5lG,EAAK+B,KAAKmkG,mBAC9DlmG,EAAK+B,KAAKi3B,IAAIrL,gBAElB3tB,EAAKmmG,sBAQF/6G,KAAAg7G,cAAgB,SAAC1oG,GACD,cAAfA,EAAMJ,MAEN,EAAuB+3B,kBAEvBr1B,EAAKqmG,UAAarmG,EAAKulG,UAAavlG,EAAKyM,IAAI65F,SAC7CtmG,EAAKiM,YAAYwwF,MAAMz8F,GAG3BA,EAAK+B,KAAKqkG,cAAcz4F,KAAK,CACzBvB,KAAMpM,EACNtC,MAAKA,KAwSjB,OA34BI9S,OAAAgC,eAAIq4G,EAAA35G,UAAA,UAAO,KAAX,WACI,MAAO,CACH09C,UAAW59C,KAAKmC,MAChB6e,KAAMhhB,uCAWdR,OAAAgC,eAAIq4G,EAAA35G,UAAA,WAAQ,KAAZ,WACI,GAAIF,KAAKm6G,SAAU,KACT3J,EAAuBxwG,KAAK4hB,OAAO4uF,qBACzC,OAAOA,GAA8CxwG,KAAKwwG,qBAE9D,OAAIxwG,KAAKm7G,aACEn7G,KAAKm7G,aAETn7G,KAAKo7G,qDAUhB57G,OAAAgC,eAAIq4G,EAAA35G,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKqhB,IAAIg6F,wCAUpB77G,OAAAgC,eAAIq4G,EAAA35G,UAAA,OAAI,KAAR,WACI,OAAOF,KAAK+nB,QAAQpR,sCAUxBnX,OAAAgC,eACIq4G,EAAA35G,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAKqhB,IAAI1N,uCAUpBnU,OAAAgC,eAAIq4G,EAAA35G,UAAA,cAAW,KAAf,WACI,OAAOF,KAAK4hB,OAAOjO,uCAUvBnU,OAAAgC,eAEIq4G,EAAA35G,UAAA,qBAAkB,KAFtB,WAGI,OAAOF,KAAK4hB,OAAO05F,kBAAoBt7G,KAAK4hB,OAAOoI,aAAehqB,KAAK+5G,aAG3E,SAAuBzgG,GACnBtZ,KAAK+5G,QAAUzgG,mCAUnB9Z,OAAAgC,eAAWq4G,EAAA35G,UAAA,SAAM,KAAjB,eACU6b,EAAa/b,KAAK2W,KAAKoF,WAE7B,MAAO,CAAEhB,MADKgB,EAAa/b,KAAKshB,QAAQvF,GAAc/b,KAAKshB,QAC3C0vF,SAAUhxG,KAAK8hB,YAAaN,SAAUxhB,KAAKwhB,2CAU/DhiB,OAAAgC,eAAIq4G,EAAA35G,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAexB9gC,OAAAgC,eAAIq4G,EAAA35G,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKm6G,cAGhB,SAAeh4G,GACXnC,KAAKu7G,YAAYp5G,oCAOrB3C,OAAAgC,eACIq4G,EAAA35G,UAAA,oBAAiB,KADrB,WAEI,OAAOF,KAAKq6G,oBAGhB,SAAsBl4G,GAAtB,IAAAyS,EAAA5U,KACQA,KAAKq6G,iBAAmBl4G,IAC3BnC,KAAKm1D,KAAKrrB,kBAAkB,WACzB3nC,IAAUm4G,GAAkBV,SAC5BhlG,EAAK4mG,oBAAoBr5G,GAASyS,EAAK6mG,uBAAuB7mG,EAAKylG,kBAEvEr6G,KAAKq6G,eAAiBl4G,oCAqD1B3C,OAAAgC,eACIq4G,EAAA35G,UAAA,WAAQ,KADZ,WAEI,OAAQF,KAAK4hB,OAAOq5F,0CAGxBz7G,OAAAgC,eACIq4G,EAAA35G,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK4hB,OAAO85F,6CAGvBl8G,OAAAgC,eACIq4G,EAAA35G,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAK4hB,OAAO+5F,gDAIvBn8G,OAAAgC,eACIq4G,EAAA35G,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK4hB,OAAOuxF,wCAGvB3zG,OAAAgC,eACIq4G,EAAA35G,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK4hB,OAAOg6F,wCAGvBp8G,OAAAgC,eAEIq4G,EAAA35G,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAK4hB,OAAOsxF,0CAGvB1zG,OAAAgC,eAEIq4G,EAAA35G,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAK4hB,OAAOi5F,0CAUvBr7G,OAAAgC,eACIq4G,EAAA35G,UAAA,cAAW,KADf,WAEI,OAAUF,KAAKqhB,IAAIg6F,OAAM,IAAIr7G,KAAK4hB,OAAOzB,uCAuB7C3gB,OAAAgC,eAEIq4G,EAAA35G,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAK6iB,iBAAiBkB,SAAS/jB,KAAKw6G,oBAU/C,SAAalhG,OACHzI,EAAO7Q,KAAKw6G,cAClBlhG,EAAMtZ,KAAK6iB,iBAAiBnV,IAAImD,GAAQ7Q,KAAK6iB,iBAAiBhV,OAAOgD,GACrE7Q,KAAK2W,KAAKwQ,iDAGd3nB,OAAAgC,eACIq4G,EAAA35G,UAAA,QAAK,KADT,WAEI,IAAIF,KAAK2W,KAAKwM,YAKP,KACG04F,EAAwB77G,KAAK2W,KAAKmF,aAAa+H,SAAS7jB,KAAKqhB,IAAItG,OACnE,OAAO8gG,GAAkBA,EAAe15G,QACvC05G,EAAe15G,MAAMnC,KAAK4hB,OAAOzB,QACW,IAA5C07F,EAAe15G,MAAMnC,KAAK4hB,OAAOzB,SACW,IAA5C07F,EAAe15G,MAAMnC,KAAK4hB,OAAOzB,YAThC27F,EAAkB97G,KAAK2W,KAAKmF,aAAa6H,mBAAmB3jB,KAAKqhB,IAAItG,OAAO,GAClF,QAAI+gG,IACOA,EAAgB97G,KAAK4hB,OAAOzB,SAAWnM,WAAoD,OAAvC8nG,EAAgB97G,KAAK4hB,OAAOzB,yCAqBnG3gB,OAAAgC,eAAWq4G,EAAA35G,UAAA,YAAS,KAcpB,WACI,GAAIF,KAAK6gB,YAAYk7F,WACjB,OAAO/7G,KAAK6gB,YAAYG,KAAKmB,eAhBrC,SAAqBhgB,GACbnC,KAAK6gB,YAAYk7F,aACjB/7G,KAAK6gB,YAAYG,KAAKmB,UAAYhgB,oCAqB1C3C,OAAAgC,eAAIq4G,EAAA35G,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK4hB,OAAOq5F,0CAgBvBz7G,OAAAgC,eACcq4G,EAAA35G,UAAA,YAAS,KAWvB,WACI,OAAOF,KAAKg8G,gBAbhB,SACwB75G,GACpBnC,KAAKg8G,WAAa75G,EAEdnC,KAAKg8G,YAAch8G,KAAK2W,KAAKslG,eAAertC,aAC5C5uE,KAAKg8G,WAAWpvC,UAAU5sE,KAAK2W,KAAKslG,eAAertC,WAC/C5uE,KAAK2W,KAAKslG,eAAe9uC,cACzBntE,KAAK2W,KAAKslG,eAAe7uC,YAC7BptE,KAAKg8G,WAAWvvC,wDAQxBjtE,OAAAgC,eAAcq4G,EAAA35G,UAAA,gBAAa,KAA3B,WACI,MAAO,CACHmhB,IAAKrhB,KAAKwhB,SACVI,OAAQ5hB,KAAK4hB,OAAO05F,kBAAoBt7G,KAAK4hB,OAAOlL,OAAOsT,aAAehqB,KAAKgiB,mBAC/E2wE,OAAQ3yF,KAAK4hB,OAAO05F,kBAAoB,CACpCpI,SAAUlzG,KAAK4hB,OAAOsxF,SACtB2H,SAAU76G,KAAK4hB,OAAOi5F,SACtB1H,OAAQnzG,KAAK4hB,OAAOuxF,OACpByI,OAAQ57G,KAAK4hB,OAAOg6F,OACpB7I,mBAAoB/yG,KAAKgiB,oBACzB,uCAqBJ63F,EAAA35G,UAAAs7G,oBAAR,SAA4BxrE,GACpBA,IAAcsqE,GAAkBV,WACpC55G,KAAKsgC,cAAckE,iBAAiB,cAAexkC,KAAKu6G,aACxDv6G,KAAKsgC,cAAckE,iBAAiB,eAAgBxkC,KAAK06G,cACzD16G,KAAKsgC,cAAckE,iBAAiB,YAAaxkC,KAAK26G,aAGjDd,EAAA35G,UAAAu7G,uBAAT,SAAgCzrE,GACxBA,IAAcsqE,GAAkBV,WACpC55G,KAAKsgC,cAAc+F,oBAAoB,cAAermC,KAAKu6G,aAC3Dv6G,KAAKsgC,cAAc+F,oBAAoB,eAAgBrmC,KAAK06G,cAC5D16G,KAAKsgC,cAAc+F,oBAAoB,YAAarmC,KAAK26G,aAO7Dd,EAAA35G,UAAA2uC,SAAA,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKm1D,KAAKrrB,kBAAkB,WACxBl1B,EAAK4mG,oBAAoB5mG,EAAKsnG,mBAE1B/qG,OACAyD,EAAKunG,wBAA0B,WAAM,OAAAvnG,EAAKwlG,qBAAsB,GAChExlG,EAAKwnG,sBAAwB,WAAM,OAAAxnG,EAAKwlG,qBAAsB,GAE9DxlG,EAAK0rB,cAAckE,iBAAiB,mBAAoB5vB,EAAKunG,yBAC7DvnG,EAAK0rB,cAAckE,iBAAiB,iBAAkB5vB,EAAKwnG,0BAG/Dp8G,KAAK+yF,aAAajhF,OAClB9R,KAAK85G,aAAat1E,iBAAiBxkC,KAAKsgC,cAAe,YAAatgC,KAAKg7G,cAAa,CAClFqB,SAAU,MAStBxC,EAAA35G,UAAAsmC,YAAA,WAAA,IAAA5xB,EAAA5U,KACIA,KAAKm1D,KAAKrrB,kBAAkB,WACxBl1B,EAAK6mG,uBAAuB7mG,EAAKsnG,mBAC7B/qG,OACAyD,EAAK0rB,cAAc+F,oBAAoB,mBAAoBzxB,EAAKunG,yBAChEvnG,EAAK0rB,cAAc+F,oBAAoB,iBAAkBzxB,EAAKwnG,0BAGtEp8G,KAAK85G,aAAa93E,WAOtB63E,EAAA35G,UAAA66G,kBAAA,WACI,IAAI/6G,KAAKm6G,SAAT,KAIMmC,EAAOt8G,KAAK6gB,YACZ07F,EAAev8G,KAAK6gB,YAAYG,KAChCm5F,KAAcmC,EAAKj7F,MAAOi7F,EAAKt7F,MAErC,GAAIhhB,KAAKi7G,UAAYd,IAAan6G,KAAKqhB,IAAI65F,QAOvC,OANIqB,GACAv8G,KAAK+nB,QAAQ7F,YAAYq6F,EAAcA,EAAap6F,WAExDm6F,EAAKx7F,MACL9gB,KAAK2W,KAAKwQ,qBACVm1F,EAAKjL,MAAMrxG,MAIXu8G,GAAgBD,EAAKxL,QAAQ9wG,KAAK0wG,OAAO31F,OACzC/a,KAAK+nB,QAAQ9F,eACNk4F,IAAamC,EAAKxL,QAAQ9wG,KAAK0wG,OAAO31F,QAC7C/a,KAAK2W,KAAKuO,SAAQ,KAanB20F,EAAA35G,UAAAs8G,eAAP,WACI,OAAOx8G,KAAK6iB,iBAAiBkB,SAAS/jB,KAAKw6G,gBAOxCX,EAAA35G,UAAA8hD,YAAP,SAAmBC,GACXA,EAAQ9/C,QAAU8/C,EAAQ9/C,MAAMkgD,aAC5BriD,KAAK4sE,YACL5sE,KAAK4sE,UAAUqvC,eAAehvC,aAAejtE,KAAK2W,KAAKslG,eAAertC,WACtE5uE,KAAK4sE,UAAUqvC,eAAe9uC,cAAgBntE,KAAK2W,KAAKslG,eAAe9uC,cACvEntE,KAAK4sE,UAAUqvC,eAAe7uC,WAAaptE,KAAK2W,KAAKslG,eAAe7uC,aAYhFysC,EAAA35G,UAAAq7G,YAAA,SAAYp5G,GACJnC,KAAKqhB,IAAI65F,UAGTl7G,KAAKi7G,UAAY94G,GACjBnC,KAAK+nB,QAAQ9F,eACbjiB,KAAK6gB,YAAYwwF,MAAMrxG,OAEvBA,KAAK+nB,QAAQnH,kBAEjB5gB,KAAK2W,KAAKwQ,kBAWP0yF,EAAA35G,UAAAu8G,OAAP,SAAcnjG,GACV,IAAItZ,KAAKqhB,IAAI65F,QAAb,KAGMl6F,EAAOhhB,KAAK6gB,YAAY+vF,WAAW5wG,MACnCgO,EAAOhO,KAAK+nB,QAAQ7F,YAAYlB,EAAM1H,GAC5C,GAAItZ,KAAK6gB,YAAYG,MAAQhhB,KAAK6gB,YAAYkwF,SAAS/vF,GAAO,CAC1D,GAAIhT,EAAKoU,OACL,OAEJpiB,KAAK+nB,QAAQnH,kBAEjB5gB,KAAK4tC,IAAI+U,iBAsENk3D,EAAA35G,UAAAqvC,QADP,SACej9B,GACXtS,KAAK2W,KAAK+lG,YAAYn6F,KAAK,CACvBvB,KAAMhhB,KACNsS,MAAKA,KASNunG,EAAA35G,UAAAy8G,cADP,SACqBrqG,GACjBtS,KAAK2W,KAAKgmG,cAAcp6F,KAAK,CACzBvB,KAAMhhB,KACNsS,MAAKA,KASNunG,EAAA35G,UAAAwuD,QADP,SACep8C,GACX,IAAItS,KAAKyyC,QAAT,CAGAzyC,KAAKyyC,SAAU,EACfzyC,KAAKqhB,IAAIoxB,SAAU,MACb5hC,EAAO7Q,KAAKw6G,cACZoC,GAAuB58G,KAAK6iB,iBAAiB6vF,aAAa7hG,GAE5D7Q,KAAK6iB,iBAAiB0vF,eACtBvyG,KAAK+6G,oBACL/6G,KAAK6iB,iBAAiB2tE,cAAgB3/E,IAEtC7Q,KAAK6iB,iBAAiB2tE,cAAgB,KAClCxwF,KAAK6gB,YAAYk7F,aAAe/7G,KAAKm6G,UACrCn6G,KAAK+nB,QAAQ9F,gBAIrBjiB,KAAK6iB,iBAAiB0vF,eAAgB,EAClCvyG,KAAKk8G,oBAAsB5B,GAAkBV,UAAY55G,KAAK6iB,iBAAiB2tE,gBAC/ExwF,KAAK6iB,iBAAiBnV,IAAI1N,KAAK6iB,iBAAiB2tE,eAAe,GAC/DxwF,KAAK6iB,iBAAiB2wF,qBAAqB3iG,EAAM7Q,KAAK2W,KAAKmkG,iBAAkB96G,KAAKsgC,gBAElFtgC,KAAK2W,KAAK07F,kBAAoBuK,GAC9B58G,KAAK2W,KAAKo+B,YAAYxyB,KAAK,CAAEvB,KAAMhhB,KAAMsS,MAAKA,MAS/CunG,EAAA35G,UAAA0uD,OADP,WAEI5uD,KAAKyyC,SAAU,EACfzyC,KAAKqhB,IAAIoxB,SAAU,GAGbonE,EAAA35G,UAAA28G,UAAV,SAAoB57G,EAAaqR,GAC7B,GAAqD,sBAAjDtS,KAAKqhB,IAAIif,cAAc+uB,QAAQh6C,eAAyCrV,KAAK88G,YAAY77G,GAAM,KACzF05E,EAAY36E,KAAQ,IAASuX,UAAYvE,GAAkBk+B,IAAIjwC,GAC/Dw5E,GAAWz6E,KAAQ,IAASuX,UAAYzE,GAAgBo+B,IAAIjwC,GAC9D05E,EACC36E,KAAY,QAAS+8G,6BAA6B/8G,KAAKqhB,IAAI27F,SAAUh9G,KAAKqhB,IAAI9J,SAAUjF,EAAOtS,KAAKgiB,oBAC9Fy4D,GACNz6E,KAAY,QAAS+8G,6BAA6B/8G,KAAKqhB,IAAI27F,SAAUh9G,KAAKqhB,IAAI9J,SAAUjF,EAAOtS,KAAKgiB,sBAKvG63F,EAAA35G,UAAA+8G,UAAV,SAAoB3hE,GACZA,EACAt7C,KAAK2W,KAAKu8E,WAAWgqB,mBAAmBl9G,KAAKqhB,IAAIif,cAAetgC,KAAKw6G,eAErEx6G,KAAK2W,KAAKu8E,WAAWiqB,WAAWn9G,KAAKqhB,IAAIif,cAAetgC,KAAKw6G,gBAI3DX,EAAA35G,UAAAk9G,UAAV,SAAoB5K,GACZA,EACAxyG,KAAK2W,KAAKu8E,WAAWmqB,eAErBr9G,KAAK2W,KAAKu8E,WAAW9J,aAAappF,KAAKwhB,UAAU,EAAOxhB,KAAKkzG,WAI3D2G,EAAA35G,UAAAo9G,WAAV,SAAqB9K,GACbA,EACAxyG,KAAK2W,KAAKu8E,WAAWqqB,gBAErBv9G,KAAK2W,KAAKu8E,WAAW/J,cAAcnpF,KAAKwhB,UAAU,EAAOxhB,KAAKkzG,WAWtE2G,EAAA35G,UAAA48D,cADA,SACcxqD,OACJrR,EAAMqR,EAAMrR,IAAIoU,cAChBimC,EAAQhpC,EAAMinF,SACdiZ,EAAOlgG,EAAMmoG,QACb5pG,EAAO7Q,KAAKw6G,cAElB,GAAKvnG,GAAei+B,IAAIjwC,GAAxB,CAGAqR,EAAMmyB,sBAEA+4E,EAAc,CAAEC,WAAY,WAAYz8G,OAAQhB,KAAMsS,MAAOA,EAAO8P,QAAQ,GAElF,GADApiB,KAAK2W,KAAK+mG,cAAcn7F,KAAKi7F,GACzBA,EAAYp7F,OAGZ,OAFApiB,KAAK6iB,iBAAiB0oB,aACtBvrC,KAAK6iB,iBAAiB+uF,cAAcz6B,QAAS,GAIjD,GAAI7kE,EAAMkoE,OAGN,OAFAloE,EAAM23B,sBACNjqC,KAAK68G,UAAU57G,EAAKqR,GAWxB,GAPAtS,KAAK6iB,iBAAiBywF,uBAAuBziG,EAAMyqC,EAAOA,GAAiB,QAARr6C,GAGvD,QAARA,GACAqR,EAAM23B,iBAGNjqC,KAAKm6G,UACDtnG,GAAgBq+B,IAAIjwC,GAD5B,CAEQ,GAAIjB,KAAK4hB,OAAO4uF,qBAAwB,OACpC,CAAC,OAAQ,WAAWl/F,QAAQtR,KAAK4hB,OAAOzE,eASpD,OAJItK,GAAgBq+B,IAAIjwC,IACpBqR,EAAM23B,iBAGFhpC,GACJ,IAAK,MACDjB,KAAKi9G,UAAU3hE,GACf,MACJ,IAAK,MACDt7C,KAAKo9G,UAAU5K,GACf,MACJ,IAAK,OACDxyG,KAAKs9G,WAAW9K,GAChB,MACJ,IAAK,YACL,IAAK,OACD,GAAIA,EAAM,CACNxyG,KAAK2W,KAAKu8E,WAAW/J,cAAct4E,EAAKwQ,KAAK,EAAOrhB,KAAKkzG,UACzD,MAEJlzG,KAAK2W,KAAKu8E,WAAWhK,mBAAmBlpF,KAAKsgC,cAAetgC,KAAKw6G,eACjE,MACJ,IAAK,aACL,IAAK,QACD,GAAIhI,EAAM,CACNxyG,KAAK2W,KAAKu8E,WAAW9J,aAAav4E,EAAKwQ,KAAK,EAAOrhB,KAAKkzG,UACxD,MAEJlzG,KAAK2W,KAAKu8E,WAAWjK,oBAAoBjpF,KAAKsgC,cAAetgC,KAAKw6G,eAClE,MACJ,IAAK,UACL,IAAK,KACD,GAAIhI,EAAM,CACNxyG,KAAK2W,KAAKu8E,WAAWyqB,YAAY39G,KAAKgiB,oBACtC,MAEJhiB,KAAK2W,KAAKu8E,WAAW0qB,WAAW59G,KAAKqhB,IAAIif,cAAetgC,KAAKw6G,eAC7D,MACJ,IAAK,YACL,IAAK,OACD,GAAIhI,EAAM,CACNxyG,KAAK2W,KAAKu8E,WAAW2qB,eAAe79G,KAAKgiB,oBACzC,MAEJhiB,KAAK2W,KAAKu8E,WAAW4qB,aAAa99G,KAAKqhB,IAAIif,cAAetgC,KAAKw6G,eAC/D,MACJ,IAAK,QACL,IAAK,KACDx6G,KAAK+9G,yBACL,MACJ,IAAK,SACL,IAAK,MACD/9G,KAAKg+G,wBACL,MACJ,IAAK,IACL,IAAK,WACL,IAAK,QACGh+G,KAAK2W,KAAKo/F,kBACV/1G,KAAKqhB,IAAI0C,SAAW/jB,KAAK6iB,iBAAiBE,YAAY/iB,KAAKqhB,IAAItG,MAAOzI,GACtEtS,KAAK6iB,iBAAiBG,cAAchjB,KAAKqhB,IAAItG,OAAO,EAAOzI,IAE/D,MACJ,QACI,UAQLunG,EAAA35G,UAAA69G,uBAAP,WACQ/9G,KAAKo6G,qBAGLp6G,KAAK4hB,OAAOq5F,WAAaj7G,KAAKqhB,IAAI65F,UAC9Bl7G,KAAKm6G,UACLn6G,KAAK2W,KAAKuO,SAAQ,GAClBllB,KAAKsgC,cAAciT,SAEnBvzC,KAAK6gB,YAAYwwF,MAAMrxG,QAS5B65G,EAAA35G,UAAA89G,sBAAP,WACI,IAAIh+G,KAAKo6G,qBAILp6G,KAAKm6G,SAAU,KACTnsG,EAAOhO,KAAK6gB,YAAYG,KAAKqB,sBAEnC,GADAriB,KAAK2W,KAAKsnG,iBAAiB17F,KAAKvU,GAC5BA,EAAKoU,OACL,OAEJpiB,KAAK2W,KAAKuO,SAAQ,GAClBllB,KAAKsgC,cAAciT,UAWpBsmE,EAAA35G,UAAAg+G,cAAP,SAAqB1wC,EAAcL,EAAyBC,GACxD,OAAOptE,KAAK4sE,WAAa5sE,KAAK4hB,OAAOu8F,WAAan+G,KAAK4sE,UAAUA,UAAUY,EAAML,EAAeC,GAAc,GAU3GysC,EAAA35G,UAAA6sE,eAAP,WACQ/sE,KAAK4sE,WAAa5sE,KAAK4hB,OAAOu8F,YAC9Bn+G,KAAK4sE,UAAUG,kBAQhB8sC,EAAA35G,UAAAk+G,mBAAP,SAA0BxtG,GACtB,OAAO6K,KAAK4O,IAAGxpB,MAAR4a,KAAI/Y,EAAQ/C,MAAMuT,KAAKlT,KAAKsgC,cAAc3tB,UAC5C2J,IAAI,SAAC0mB,GAAU,OAAAryB,GAAoBC,EAAOoyB,QAG3C62E,EAAA35G,UAAA48G,YAAR,SAAoB77G,GAChB,OAAO+R,GAAkBk+B,IAAIjwC,IAAQ6R,GAAgBo+B,IAAIjwC,wBAhgChE6wC,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC7vG,SAAU,gBACVqjC,SAAA,k7DACA5iC,UAAW,CAACmoG,iDAxBP5F,UAAyCf,UANzChxF,UAfLsvB,EAAAA,yBAEA3L,EAAAA,kBAMAyD,EAAAA,cAeKuwE,UANwG5lG,sCAwC5G/C,EAAAA,mBAUAA,EAAAA,uBAUAA,EAAAA,4BAwBAA,EAAAA,qBAaAA,EAAAA,yBAoCAA,EAAAA,wBAgEAwgC,EAAAA,YAAWnhC,KAAA,CAAC,kDAuBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2BAAwB,CAAAkE,KACpCvD,EAAAA,iCAyDAA,EAAAA,0BAkBAA,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,qDAMZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,iDAcZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+BAcZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+BAUZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,8CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCi9B,EAAAA,YAAWnhC,KAAA,CAAC,0CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0BAAuB,CAAAkE,KACnCi9B,EAAAA,YAAWnhC,KAAA,CAAC,gDAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7Bi9B,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7Bi9B,EAAAA,YAAWnhC,KAAA,CAAC,qBAAkB,CAAAkE,KAC9BvD,EAAAA,wBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCi9B,EAAAA,YAAWnhC,KAAA,CAAC,+CAkBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+CAyDZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2DAGZyoC,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,kCAGtDF,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,uBAGvDF,EAAAA,UAASzoC,KAAA,CAAC89D,GAA2B,CAAEp1B,KAAMo1B,GAA2Bn1B,UAAQ,2BAqPhF/nC,EAAAA,aAAYZ,KAAA,CAAC,WAAY,CAAC,4BAoB1BY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,kCAYvBY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,4BAY7BY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,2BAkCvBY,EAAAA,aAAYZ,KAAA,CAAC,+BAgDbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cA1lB1BilC,EAAAA,CADC/U,GAAkB,wMAkXnB+U,EAAAA,CADCtV,GAAgB,0LAgarBk8E,EAlgCA,GCpBA2E,GAAA,WAwPI,SAAAA,EACWz2F,EACAlH,EACAgC,EACAihB,EACA8J,GAJA5tC,KAAA+nB,QAAAA,EACA/nB,KAAA6gB,YAAAA,EACA7gB,KAAA6iB,iBAAAA,EACA7iB,KAAA8jC,QAAAA,EACA9jC,KAAA4tC,IAAAA,EA1LJ5tC,KAAA0xC,KAAO,MA6GP1xC,KAAAy+G,UAAW,EA+DXz+G,KAAAyyC,SAAU,EAMVzyC,KAAA0+G,gBAAkB,eA6G7B,OAtVIl/G,OAAAgC,eACWg9G,EAAAt+G,UAAA,UAAO,KADlB,WAEI,OAAIF,KAAK+7G,WACEv8G,OAAOa,OAAO,GAAIL,KAAK2+G,SAAU3+G,KAAK2W,KAAKmF,aAAa6H,mBAAmB3jB,KAAK+a,OAAO,IAE3F/a,KAAK2+G,cAGhB,SAAmB9xF,GACf7sB,KAAK2+G,SAAW9xF,mCAgDpBrtB,OAAAgC,eACIg9G,EAAAt+G,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK2T,uCAMhBnU,OAAAgC,eACIg9G,EAAAt+G,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK4+G,kDAMhBp/G,OAAAgC,eAEIg9G,EAAAt+G,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAK6iB,iBAAiBC,cAAc9iB,KAAK+a,YAGpD,SAAa5Y,GACTA,EAAQnC,KAAK6iB,iBAAiBqzF,sBAAsB,CAACl2G,KAAK+a,QAC1D/a,KAAK6iB,iBAAiBwzF,wBAAwB,CAACr2G,KAAK+a,QACpD/a,KAAK2W,KAAKi3B,IAAI+U,gDAMlBnjD,OAAAgC,eAAIg9G,EAAAt+G,UAAA,UAAO,KAAX,WACI,OAAOF,KAAK2W,KAAKkoG,gDAOrBr/G,OAAAgC,eAAIg9G,EAAAt+G,UAAA,YAAS,KAAb,WACI,OAAKF,KAAS,KAAS8+G,oBAAoBn+G,OAChCX,KAAK2W,KAAKwgG,mBAAmB7lG,QAAQtR,KAAKshB,SAE9CthB,KAAK2T,MAAQ3T,KAAK2W,KAAKwE,KAAOnb,KAAK2W,KAAK2Q,yCAMnD9nB,OAAAgC,eAAIg9G,EAAAt+G,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK2W,KAAKooG,+CAMrBv/G,OAAAgC,eAAIg9G,EAAAt+G,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK2W,KAAKqoG,iDAMrBx/G,OAAAgC,eAAWg9G,EAAAt+G,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAK2W,KAAKsoG,kDAIrBz/G,OAAAgC,eAAWg9G,EAAAt+G,UAAA,QAAK,KAAhB,eACUmhB,EAAMrhB,KAAK2W,KAAKmF,aAAa+H,SAAS7jB,KAAK+a,OACjD,QAAIsG,IACOA,EAAInP,OAASkK,GAAgBlC,KAAOmH,EAAInP,OAASkK,GAAgBhC,yCAOhF5a,OAAAgC,eAAWg9G,EAAAt+G,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK6iB,iBAAiBC,cAAc9iB,KAAK+a,wCAMpDvb,OAAAgC,eAAWg9G,EAAAt+G,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK2W,KAAKuoG,8CAIrB1/G,OAAAgC,eAAWg9G,EAAAt+G,UAAA,QAAK,KAAhB,eACUmhB,EAAMrhB,KAAK2W,KAAKmF,aAAa+H,SAAS7jB,KAAK+a,OACjD,QAAIsG,GACOA,EAAInP,OAASkK,GAAgBlC,qCAO5C1a,OAAAgC,eAAWg9G,EAAAt+G,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK+nB,QAAQP,wBAAwBxnB,KAAK+a,wCASrDvb,OAAAgC,eAAWg9G,EAAAt+G,UAAA,aAAU,KAArB,WACI,GAAIF,KAAK2W,KAAKwM,YAAa,KACjBtD,EAAe7f,KAAK6gB,YAAYQ,IACtC,OAAQxB,GAAgBA,EAAalS,KAAO3N,KAAK+a,QAAU,EAE3D,OAAO,mCAqBfvb,OAAAgC,eAAIg9G,EAAAt+G,UAAA,OAAI,KAAR,WACI,OAAOF,KAAK+nB,QAAQpR,sCAaxBnX,OAAAgC,eAAWg9G,EAAAt+G,UAAA,QAAK,KAAhB,eACU6b,EAAa/b,KAAK2W,KAAKoF,WAC7B,OAAOA,EAAa/b,KAAK2+G,SAAS5iG,GAAc/b,KAAK2+G,0CAWzDn/G,OAAAgC,eAAIg9G,EAAAt+G,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CA2BjBk+E,EAAAt+G,UAAAqvC,QADP,SACej9B,GACoB,SAA3BtS,KAAK2W,KAAKq7F,cAA2BhyG,KAAKk7G,UAC1C5oG,EAAMinF,UAAuC,aAA3Bv5F,KAAK2W,KAAKq7F,aAC5BhyG,KAAK6iB,iBAAiByzF,mBAAmBt2G,KAAK+a,MAAO/a,KAAKshB,QAAShP,GAGvEtS,KAAK6iB,iBAAiBG,cAAchjB,KAAK+a,OAAQzI,EAAMmoG,QAASnoG,KAM7DksG,EAAAt+G,UAAAi/G,mBAAP,SAA0B7sG,GACtBA,EAAMmyB,kBACFnyB,EAAMinF,UAAuC,aAA3Bv5F,KAAK2W,KAAKq7F,aAC5BhyG,KAAK6iB,iBAAiByzF,mBAAmBt2G,KAAK+a,MAAO/a,KAAKshB,QAAShP,GAGvEtS,KAAK+jB,SAAW/jB,KAAK6iB,iBAAiBE,YAAY/iB,KAAK+a,MAAOzI,GAC9DtS,KAAK6iB,iBAAiBG,cAAchjB,KAAK+a,OAAO,EAAOzI,IAapDksG,EAAAt+G,UAAAu8G,OAAP,SAAct6G,OACJ0e,EAAc7gB,KAAK6gB,YACrBA,EAAYk7F,YAAcl7F,EAAYG,KAAKrT,GAAGoN,QAAU/a,KAAK+a,OAC7D/a,KAAK2W,KAAKuO,SAAQ,OAEhB7D,EAAM,IAAIivF,GAAOtwG,KAAK+a,MAAO/a,KAAK2T,MAAO3T,KAAKshB,SACpDthB,KAAK+nB,QAAQjE,WAAWzC,EAAKlf,GAC7BnC,KAAK4tC,IAAI+U,gBAYN67D,EAAAt+G,UAAA0sC,UAAP,WACI5sC,KAAK2W,KAAKoQ,cAAc/mB,KAAK+a,QAMjCvb,OAAAgC,eAAIg9G,EAAAt+G,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK2W,KAAKoF,WACb/b,KAAK+jB,SAAW,yBAA2B/jB,KAAK+a,MAAQ,uBAAyB/a,KAAK+a,MACtF/a,KAAK+jB,SAAW,eAAiB,8CAMlCy6F,EAAAt+G,UAAA0yC,UAAP,WACI5yC,KAAK4tC,IAAI+U,gBAMH67D,EAAAt+G,UAAA0+G,eAAV,eACUQ,EAAap/G,KAAK2T,MAAQ,EAAI3T,KAAK2W,KAAK0oG,WAAar/G,KAAK2W,KAAK2oG,UAC/DC,EAAgBv/G,KAAK+jB,SAAW,yBAA2B,GAC3Dy7F,EAAYx/G,KAAK+7G,WAAa,qBAAuB,GACrD0D,EAAaz/G,KAAK2vD,MAAQ,uBAAyB,GACnD+vD,EAAe1/G,KAAKk7G,QAAU,wBAA0B,GACxDyE,EAAW3/G,KAAK2W,KAAKk8F,iBAAmB,oBAAsB,GAC9D+M,EAAY5/G,KAAKy+G,SAAW,qBAAuB,GACzD,OAAUz+G,KAAK0+G,gBAAe,IAAIU,EAAU,IAAIG,EAAa,IAAIC,EAAS,IAAIC,EAAU,cACrFC,EAAY,IAAIC,EAAQ,IAAIC,GAAYlgG,QAM/ClgB,OAAAgC,eAAWg9G,EAAAt+G,UAAA,8BAA2B,KAAtC,WAGI,MAAU2/G,6BADe7/G,KAAK2W,KAAKmpG,cAAgB9/G,KAAKy+G,SAAW,gCAAkC,yDA/V5GzsG,EAAAA,sDARQ2N,UAKyBgxF,UAAzBe,UAjBLpuE,EAAAA,kBAFA2L,EAAAA,sDAkCCtgC,EAAAA,qBAmBAA,EAAAA,sBAMAA,EAAAA,0BAMA8nC,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMoS,GAAuBnS,UAAQ,6BAM9DF,EAAAA,UAASzoC,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAA0oC,KAAuB,CAAEr+C,KAAMq+C,GAAsBp+C,UAAQ,mBAWxF+mC,EAAAA,aAAY1vE,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAAwtD,oBAM9B1qE,EAAAA,YAAWnhC,KAAA,CAAC,mCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2BAQZW,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,uCA6KZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cAhHxBilC,EAAAA,CADC/U,GAAkB,uJAgNvBsgF,EAlWA,GClBA,SAAgBuB,KACZ,OAAO,SAAC/+G,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAgB5F,OAdA0mG,EAASt3F,IAAM,SAAqBpP,SAC1BusB,EAAO7lC,KAAKmgH,MACZ19F,EAAWziB,KAAKiB,GACtB,IAAIqY,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,KACxDy9F,EAAet/G,KAAKZ,KAAMsZ,GACtBtZ,KAAKgiD,cAAgBnc,GAAM,KAErBoc,IAAO/zC,EAAA,IACRjN,GAAM,IAAIm/G,EAAAA,aAAa39F,EAAUnJ,GAAK,MAE3CtZ,KAAKgiD,YAAYC,KAItB+9D,GAIf,SAAgBK,KACZ,OAAO,SAACr/G,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,GAIf,SAAgB74F,GAAcs5F,GAC1B,YAD0B,IAAAA,IAAAA,GAAA,GACnB,SAACC,EAAQz/G,EAAa++G,OAEnBC,EAAa,KAAKh/G,EAQlBi/G,GANNF,EAAWA,GAAY,CACnBthF,YAAY,EACZD,cAAc,IAIgBuhF,EAASt3F,IAAM,KAkBjD,OAhBAs3F,EAASlyG,IAAMkyG,EAASlyG,KAAG,WAAsB,OAAO9N,KAAKigH,IAE7DD,EAASt3F,IAAM,SAAerM,GAC1B,GAAI6jG,EACAA,EAAet/G,KAAKZ,KAAMqc,GACtBrc,KAAK2W,MACL3W,KAAK2W,KAAKwQ,cAAcs5F,OAEzB,CACH,GAAIpkG,IAAarc,KAAKiB,GAAQ,OAC9BjB,KAAKigH,GAAc5jG,EACfrc,KAAK2W,MACL3W,KAAK2W,KAAKwQ,cAAcs5F,KAIpC,GCpFR,IAAAE,GAAA,WAEA,SAAAA,IAEW3gH,KAAAusC,OAAuB,IAAI/M,EAAAA,QACxBx/B,KAAAuO,MAA4C,IAAI+B,IAChDtQ,KAAA8f,WAA4C,IAAIxP,IAEhDtQ,KAAA4gH,gBAAsD,IAAItwG,IAC1DtQ,KAAA6gH,WAAsD,IAAIvwG,IAsExE,OApEWqwG,EAAAzgH,UAAAs6F,SAAP,SAAgB+lB,GACZvgH,KAAKuO,MAAMma,IAAI63F,EAAU5yG,GAAI4yG,GAC7BvgH,KAAK8f,WAAW4I,IAAI63F,EAAU5yG,GAAI,IAAI6xB,EAAAA,UAGnCmhF,EAAAzgH,UAAAguC,YAAP,SAAmBqyE,GACfvgH,KAAKuO,MAAMq+B,UAAO2zE,EAAU5yG,KAGzBgzG,EAAAzgH,UAAA4N,IAAP,SAAWH,GACP,OAAO3N,KAAKuO,MAAMT,IAAIH,IAGnBgzG,EAAAzgH,UAAA4gH,MAAP,SAAanzG,GACT3N,KAAKuO,MAAMq+B,UAAOj/B,GAClB3N,KAAK8f,WAAW8sB,UAAOj/B,IAGpBgzG,EAAAzgH,UAAAwlC,MAAP,SAAaq7E,EAAe38F,OAClB4d,EAAUhiC,KAAK8f,WAAWhS,IAAIizG,GAC9BR,EAAYvgH,KAAK8N,IAAIizG,GAE3B/gH,KAAK8gH,MAAMC,GAEPR,GACAvgH,KAAKuO,MAAMma,IAAItE,EAAOm8F,GAGtBv+E,GACAhiC,KAAK8f,WAAW4I,IAAItE,EAAO4d,IAInC2+E,EAAAzgH,UAAA8gH,uBAAA,SAAuBT,GACnBvgH,KAAK4gH,gBAAgBl4F,IAAI63F,EAAUt/G,IAAKs/G,GACxCvgH,KAAK8f,WAAW4I,IAAI63F,EAAUt/G,IAAK,IAAIu+B,EAAAA,UAG3CmhF,EAAAzgH,UAAA+gH,oBAAA,SAAoBV,GAChBvgH,KAAK4gH,gBAAgBh0E,UAAO2zE,EAAUt/G,KACtCjB,KAAK8f,WAAW8sB,UAAO2zE,EAAUt/G,MAGrC0/G,EAAAzgH,UAAAghH,kBAAA,SAAkBC,GACd,OAAOnhH,KAAK4gH,gBAAgB9yG,IAAIqzG,IAGpCR,EAAAzgH,UAAAkhH,kBAAA,SAAkBC,EAA4B1qG,GAC1C3W,KAAK6gH,WAAWn4F,IAAI24F,EAAa1qG,IAGrCgqG,EAAAzgH,UAAAohH,cAAA,SAAcC,OACNC,EAAc,GAUlB,OATAxhH,KAAK6gH,WAAWpuG,QAAQ,SAACkE,GACrB6qG,EAAYh/G,KAAKmU,KAEjB4qG,GACAvhH,KAAK4gH,gBAAgBnuG,QAAQ,SAACkgF,GAC1B6uB,EAAcA,EAAY7+G,OAAOgwF,EAAO2tB,aAAagB,cAAcC,MAIpEC,GAGXb,EAAAzgH,UAAAuhH,iBAAA,SAAiB1mG,GACb,OAAO/a,KAAK6gH,WAAW/yG,IAAIiN,IAEnC4lG,EA/EA,GCcMp1E,GAAQ,SAAC74B,GAAO,OAAO,IAAPA,GAAY6H,QAAQ7H,kBAI1C,SAAAgvG,KAgDA,OAvCkBA,EAAApvF,MAAd,SAAoB9d,GAChB,OAAOA,EAAK7T,QA+BT+gH,EAAAxhH,UAAAyhH,QAAP,SAAentG,EAAkBihG,EAAqB7hG,GAClD,YADW,IAAAY,IAAAA,EAAA,IACJ,CAAC,CACJvT,IAAK,QACLk4E,MAAO,QACPyoC,cAAeF,EAAkBpvF,MAAM9d,MAGnDktG,oBAGA,SAAAG,mDAuGA,OAvG6C7pG,EAAAA,EAAAA,GAS3B6pG,EAAA54E,IAAd,SAAkBz0B,GACd,OAAOA,EAAK7T,QAAU6T,EAAKwF,OAAOuxB,IAAO5qC,OAAS6T,EAAKwF,OAAOuxB,IAAOpgB,OAAO,SAACjW,EAAG3V,GAAM,OAAAkc,KAAKwtB,IAAI/zB,EAAG3V,KAAM,GAU9FsiH,EAAAx3F,IAAd,SAAkB7V,GACd,OAAOA,EAAK7T,QAAU6T,EAAKwF,OAAOuxB,IAAO5qC,OAAS6T,EAAKwF,OAAOuxB,IAAOpgB,OAAO,SAACjW,EAAG3V,GAAM,OAAAkc,KAAK4O,IAAInV,EAAG3V,KAAM,GAU9FsiH,EAAAj6D,IAAd,SAAkBpzC,GACd,OAAOA,EAAK7T,QAAU6T,EAAKwF,OAAOuxB,IAAO5qC,OAAS6T,EAAKwF,OAAOuxB,IAAOpgB,OAAO,SAACjW,EAAG3V,GAAM,OAAC2V,IAAK3V,IAAK,GAUvFsiH,EAAAC,QAAd,SAAsBttG,GAClB,OAAOA,EAAK7T,QAAU6T,EAAKwF,OAAOuxB,IAAO5qC,OAASX,KAAK4nD,IAAIpzC,GAAQxU,KAAKsyB,MAAM9d,GAAQ,GAoCnFqtG,EAAA3hH,UAAAyhH,QAAP,SAAentG,EAAkBihG,EAAqB7hG,QAAvC,IAAAY,IAAAA,EAAA,SAAkB,IAAAihG,IAAAA,EAAA,QACvBjlG,EAASsJ,EAAA5Z,UAAMyhH,QAAO/gH,KAAAZ,KAACwU,EAAMihG,EAAS7hG,GAqB5C,OApBApD,EAAOhO,KAAK,CACRvB,IAAK,MACLk4E,MAAO,MACPyoC,cAAeC,EAAwB54E,IAAIz0B,KAE/ChE,EAAOhO,KAAK,CACRvB,IAAK,MACLk4E,MAAO,MACPyoC,cAAeC,EAAwBx3F,IAAI7V,KAE/ChE,EAAOhO,KAAK,CACRvB,IAAK,MACLk4E,MAAO,MACPyoC,cAAeC,EAAwBj6D,IAAIpzC,KAE/ChE,EAAOhO,KAAK,CACRvB,IAAK,UACLk4E,MAAO,MACPyoC,cAAeC,EAAwBC,QAAQttG,KAE5ChE,GAEfqxG,GAvG6CH,mBA0G7C,SAAAK,mDAoEA,OApE2C/pG,EAAAA,EAAAA,GASzB+pG,EAAAC,OAAd,SAAqBxtG,GACjB,OAAOA,EAAK7T,QAAU6T,EAAKwF,OAAOuxB,IAAO5qC,OAC/B6T,EAAKwF,OAAOuxB,IAAOh3B,KAAK,SAACW,EAAG3V,GAAM,OAAA,IAAI4Q,KAAK5Q,GAAGumF,UAAY,IAAI31E,KAAK+E,GAAG4wE,YA3K7D,GA2K2E9xE,WAUpF+tG,EAAAE,SAAd,SAAuBztG,GACnB,OAAOA,EAAK7T,QAAU6T,EAAKwF,OAAOuxB,IAAO5qC,QArLnC4O,EAsLGiF,EAAKwF,OAAOuxB,IAAOh3B,KAAK,SAACW,EAAG3V,GAAM,OAAA,IAAI4Q,KAAK5Q,GAAGumF,UAAY,IAAI31E,KAAK+E,GAAG4wE,aAtL7Dv2E,EAAI5O,OAAS,GAsL8DqT,UAtLxF,IAACzE,GAqNHwyG,EAAA7hH,UAAAyhH,QAAP,SAAentG,EAAkBihG,EAAqB7hG,QAAvC,IAAAY,IAAAA,EAAA,SAAkB,IAAAihG,IAAAA,EAAA,QACvBjlG,EAASsJ,EAAA5Z,UAAMyhH,QAAO/gH,KAAAZ,KAACwU,EAAMihG,EAAS7hG,GAW5C,OAVApD,EAAOhO,KAAK,CACRvB,IAAK,WACLk4E,MAAO,WACPyoC,cAAeG,EAAsBE,SAASztG,KAElDhE,EAAOhO,KAAK,CACRvB,IAAK,SACLk4E,MAAO,SACPyoC,cAAeG,EAAsBC,OAAOxtG,KAEzChE,GAEfuxG,GApE2CL,ICjL3CQ,GAAA,WAOI,SAAAA,EAAmBnwE,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uEAJMk6C,EAAAA,eAQpBs5D,EARA,iBAeI,SAAAC,EAAmBpwE,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BANCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yDAXMk6C,EAAAA,eAgBpBu5D,mBAOI,SAAAC,EAAmBrwE,GAAA/xC,KAAA+xC,SAAAA,EAEvB,2BAPCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAnBMk6C,EAAAA,eAyBpBw5D,KAIAC,GAAA,WAKI,SAAAA,EAAmBtwE,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BANCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DA9BMk6C,EAAAA,eAmCpBy5D,EANA,iBAaI,SAAAC,EAAmBvwE,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BANCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+DAtCMk6C,EAAAA,eA2CpB05D,KCcAC,GAAA,WA0lCI,SAAAA,EAAmBx6F,EAA8E6lB,EACtF0yE,GADQtgH,KAAA+nB,QAAAA,EAA8E/nB,KAAA4tC,IAAAA,EACtF5tC,KAAAsgH,aAAAA,EA1jCJtgH,KAAA2pB,OAAS,GAcT3pB,KAAAwiH,UAAW,EAelBxiH,KAAAyiH,WAAY,EAsDLziH,KAAAw/F,YAAa,EAcbx/F,KAAA0iH,WAAY,EA8EZ1iH,KAAA2iH,aAAe,IAAIx5F,EAAAA,aAW1BnpB,KAAA4iH,eAAgB,EAWhB5iH,KAAA6iH,gBAAiB,EAeV7iH,KAAA8iH,SAAU,EA2CV9iH,KAAA+iH,YAAc,IAAI55F,EAAAA,aASjBnpB,KAAAgjH,WAAa,KAoDdhjH,KAAAijH,cAAgB,GAehBjjH,KAAAkjH,mBAAqB,GA0C5BljH,KAAAmjH,WAAa,KAgDNnjH,KAAAwlB,qBAAsB,EActBxlB,KAAAojH,mBAAoB,EAapBpjH,KAAAmd,SAAqBC,GAAS/C,OA4C9Bra,KAAAqjH,aAAe,IAAIl6F,EAAAA,aA0DnBnpB,KAAAm+G,YAAa,EAiapBn+G,KAAA0W,OAAS,KAeC1W,KAAAu/B,SAAW,IAAIC,EAAAA,QASfx/B,KAAAsjH,SAAU,EAoBVtjH,KAAAujH,WAAa,KAIbvjH,KAAAwjH,SAAW,KAIXxjH,KAAAyjH,cAAkCrvG,GAAuBC,WAQzDrU,KAAA0jH,SAAU,EAQV1jH,KAAA2jH,iBAAkB,EAQlB3jH,KAAA4jH,iBAAmB,GAInB5jH,KAAA6jH,aAAc,EA2Bd7jH,KAAA+5G,QAAU1U,IAqkBxB,OA/kDI7lG,OAAAgC,eAAI+gH,EAAAriH,UAAA,WAAQ,KAAZ,eAGUijB,EAAcnjB,KAAK2W,MAAQ3W,KAAK2W,KAAKwM,YACrC2gG,EAAkB9jH,KAAK2W,MAAQ3W,KAAK2W,KAAKmF,aAAawE,QAE5D,QAAItgB,KAAK+jH,kBAAoB5gG,IAAe2gG,KAIxC9jH,KAAKgkH,YAAchwG,UACZhU,KAAKgkH,UAEL7gG,QAaf,SAAa83F,GACTj7G,KAAKgkH,UAAY/I,mCAyCrBz7G,OAAAgC,eAAI+gH,EAAAriH,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK6jH,iBAUhB,SAAe1hH,GACXnC,KAAK6jH,YAAc1hH,EAEfnC,KAAK2W,MACL3W,KAAK2W,KAAK+L,eAAeuhG,sDAajCzkH,OAAAgC,eAAI+gH,EAAAriH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK0jH,aAehB,SAAWvhH,GACP,GAAInC,KAAK0jH,UAAYvhH,EAAO,CAGxB,GAFAnC,KAAK0jH,QAAUvhH,EACfnC,KAAK2iH,aAAapgG,KAAKviB,KAAK0jH,SACxB1jH,KAAKs7G,mBAAqBt7G,KAAK0W,OAAOmT,SAAW1nB,EAEjD,YADAnC,KAAK0W,OAAOmT,OAAS1nB,GAGrBnC,KAAK2W,OACL3W,KAAK2W,KAAKuO,SAAQ,GAClBllB,KAAK2W,KAAK+L,eAAeuhG,qBACzBjkH,KAAK2W,KAAKutG,iBAAiBC,qBAC3BnkH,KAAK2W,KAAKutG,iBAAiBE,yCAAyCpkH,MACpEA,KAAK2W,KAAKwQ,mDA0DtB3nB,OAAAgC,eAAW+gH,EAAAriH,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAKqkH,eAAiBrkH,KAAKskH,OAAStkH,KAAKukH,kBAcpD,SAAiBpiH,GACTA,IACAnC,KAAKgjH,WAAa,KAClBhjH,KAAKwkH,eAAiBnf,IACtBrlG,KAAKqkH,gBAAiB,EACtBrkH,KAAKskH,OAASniH,EACVnC,KAAK2W,MACL3W,KAAKykH,iBAETzkH,KAAK+iH,YAAYxgG,KAAKviB,KAAKskH,0CAanC9kH,OAAAgC,eAAW+gH,EAAAriH,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK0kH,gDAiChBllH,OAAAgC,eAAW+gH,EAAAriH,UAAA,WAAQ,KAMnB,WACI,OAAQF,KAAK4jH,iBAA0C5jH,KAAK4jH,iBAA5B5jH,KAAK2kH,qBAPzC,SAAoBxiH,OACVyiH,EAASvnG,WAAWlb,GACtBmY,OAAOkB,MAAMopG,KACjB5kH,KAAK4jH,iBAAmBzhH,oCAoF5B3C,OAAAgC,eAAI+gH,EAAAriH,UAAA,QAAK,KAAT,WACI,OAAOF,KAAK2W,KAAK4O,QAAQjU,QAAQtR,uCA4ErCR,OAAAgC,eAAW+gH,EAAAriH,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKsjH,aAehB,SAAkBnhH,GACd,GAAInC,KAAKsjH,UAAYnhH,EAAO,CACxB,GAAInC,KAAK2W,MAAQ3W,KAAKiR,QAAUuK,MAAMi+B,SAASz5C,KAAKiR,MAAO,KAEvD,YADA9O,EAAQnC,KAAK6kH,MAAQ7kH,KAAK8kH,SAM9B9kH,KAAKsjH,QAAUnhH,EACfnC,KAAKqjH,aAAa9gG,KAAKviB,KAAKsjH,2CAiCpC9jH,OAAAgC,eAAW+gH,EAAAriH,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKujH,gBAShB,SAAqBvkD,GACjBh/D,KAAKujH,WAAa,IAAIvkD,EAElBh/D,KAAK2W,OACL3W,KAAK2W,KAAK+L,eAAeqiG,8BAA8B/kH,KAAKmgB,OAC3DngB,KAAS,KAASglH,sBACnBhlH,KAAK2W,KAAK+L,eAAeuhG,uDAyBjCzkH,OAAAgC,eACW+gH,EAAAriH,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAKwjH,cAShB,SAAmBnvG,GACfrU,KAAKwjH,SAAWnvG,mCASpB7U,OAAAgC,eACW+gH,EAAAriH,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKyjH,mBAUhB,SAAwBzkD,GACpBh/D,KAAKyjH,cAAgBzkD,mCASzBx/D,OAAAgC,eACW+gH,EAAAriH,UAAA,mBAAgB,KAD3B,WAEI,OAAOF,KAAKilH,uBAUhB,SAA4BC,GACxBllH,KAAKilH,kBAAoBC,mCAS7B1lH,OAAAgC,eAAI+gH,EAAAriH,UAAA,kBAAe,KAAnB,WACI,IAAKF,KAAK2W,KAAQ,MAAO,KACzB,OAAQ3W,KAAK2W,KAAK67B,gBACd,KAAK2B,GAAeR,KAChB,MAAO,KACX,KAAKQ,GAAeP,QAChB,MAAO,KACX,QACI,MAAO,uCAUnBp0C,OAAAgC,eAAW+gH,EAAAriH,UAAA,OAAI,KAAf,WACI,OAAOF,KAAK+nB,QAAQpR,sCAYxBnX,OAAAgC,eAAI+gH,EAAAriH,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKmlH,mBAkBhB,SAAiBpzE,GACb/xC,KAAKmlH,cAAgBpzE,mCAYzBvyC,OAAAgC,eAAI+gH,EAAAriH,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKolH,qBAmBhB,SAAmBrzE,GACf/xC,KAAKolH,gBAAkBrzE,mCAY3BvyC,OAAAgC,eAAI+gH,EAAAriH,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKqlH,2BAgBhB,SAAyBtzE,GACrB/xC,KAAKqlH,sBAAwBtzE,mCAYjCvyC,OAAAgC,eAAI+gH,EAAAriH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKslH,yBAgBhB,SAAuBvzE,GACnB/xC,KAAKslH,oBAAsBvzE,mCAS/BvyC,OAAAgC,eAAI+gH,EAAAriH,UAAA,QAAK,KAAT,WAAA,IAAA0U,EAAA5U,KACI,OAAOA,KAAK2W,KAAK8K,QAAQzH,OAAO,SAACqH,GAAQ,OAAAA,aAAem9F,KACnDliG,IAAI,SAAC+E,GACF,GAAIA,EAAIM,MACJ,OAAON,EAAIM,MAAM3H,OAAO,SAACgH,GAAS,OAAAA,EAAKc,cAAgBlN,EAAKjB,UAEjEwX,OAAO,SAACjW,EAAG3V,GAAM,OAAA2V,EAAEvS,OAAOpD,IAAI,qCAUzCC,OAAAgC,eAAI+gH,EAAAriH,UAAA,eAAY,KAAhB,WAAA,IAAA0U,EAAA5U,KACI,IAAKwb,MAAMxb,KAAK+5G,SACZ,OAAO/5G,KAAK+5G,YAEViF,EAAkBh/G,KAAK2W,KAAKqoG,gBAAgBhlG,OAAO,SAAA7Y,GAAK,OAACA,EAAEokH,cAC3DxG,EAAgB/+G,KAAK2W,KAAKooG,cAAc/kG,OAAO,SAAA7Y,GAAK,OAACA,EAAEokH,cACzDrlG,EAAMlgB,KACNwlH,GAAU,EAKd,GAHIxlH,KAAKulH,cACLrlG,EAAMlgB,KAAKwhH,YAAYxnG,OAAO,SAAA7Y,GAAK,OAACA,EAAEokH,cAAa,IAEnDvlH,KAAKs7G,kBACL,OAAOt7G,KAAK0W,OAAO+uG,uBAAuBnuG,KAAK,SAAAwF,GAAK,OAAAA,EAAE8E,SAAWhN,IAAMjB,MAG3E,GAAK3T,KAAKsqB,OAINk7F,EAASzG,EAAcztG,QAAQ4O,OAJjB,KACRwlG,EAAoB1G,EAAgB1tG,QAAQ4O,GAClDslG,GAAgC,IAAvBE,GAA4B,EAAI3G,EAAcp+G,OAAS+kH,EAKpE,OADA1lH,KAAK+5G,QAAUyL,EACRA,mCASXhmH,OAAAgC,eAAI+gH,EAAAriH,UAAA,cAAW,KAAf,WACI,OAAO,mCASXV,OAAAgC,eAAI+gH,EAAAriH,UAAA,eAAY,KAAhB,WACI,OAAO,mCAUXV,OAAAgC,eAAI+gH,EAAAriH,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAK0W,QAAU1W,KAAK0W,OAAOivG,8CAWtCnmH,OAAAgC,eAAI+gH,EAAAriH,UAAA,cAAW,KAAf,WACI,MAAO,oCAUXV,OAAAgC,eAAI+gH,EAAAriH,UAAA,QAAK,KAAT,WAII,QAHI0lH,EAAM5lH,KAAK0W,OACXmvG,EAAM,EAEHD,GACHC,IACAD,EAAMA,EAAIlvG,OAEd,OAAOmvG,mCAGXrmH,OAAAgC,eAAI+gH,EAAAriH,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK2W,KAAKooG,cAAc/+G,KAAK2W,KAAKooG,cAAcp+G,OAAS,KAAOX,sCAE3ER,OAAAgC,eAAI+gH,EAAAriH,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKmzG,QAAUnzG,KAAKkzG,SAAWlzG,KAAKmzG,OAASnzG,KAAKkzG,SAAW,mCAExE1zG,OAAAgC,eAAI+gH,EAAAriH,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAK47G,QAAU57G,KAAK66G,SAAW76G,KAAK47G,OAAS57G,KAAK66G,SAAW,mCAoExEr7G,OAAAgC,eAAI+gH,EAAAriH,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAK2W,KAAKsO,yBAAyB3N,KAAKtX,KAAKmgB,wCAoGxD3gB,OAAAgC,eAAc+gH,EAAAriH,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKmgB,QAAUnM,WAAahU,KAAK2W,OAAS3C,WAAahU,KAAKmgB,QAAUngB,KAAK2W,KAAKoF,4CAgCpFwmG,EAAAriH,UAAA4lH,YAAP,WACI9lH,KAAK+5G,QAAU1U,IACXrlG,KAAK2W,MACL3W,KAAKykH,kBAONlC,EAAAriH,UAAAm4D,mBAAP,WAaI,GAZIr4D,KAAKm7G,eACLn7G,KAAKmlH,cAAgBnlH,KAAKm7G,aAAappE,UAEvC/xC,KAAK+lH,cAAgB/lH,KAAK+lH,aAAaplH,SACvCX,KAAKolH,gBAAkBplH,KAAK+lH,aAAanzG,UAAU,GAAGm/B,UAEtD/xC,KAAKgmH,iBACLhmH,KAAKqlH,sBAAwBrlH,KAAKgmH,eAAej0E,UAEjD/xC,KAAKimH,8BACLjmH,KAAKslH,oBAAsBtlH,KAAKimH,4BAA4Bl0E,WAE3D/xC,KAAKkpD,UACN,OAAQlpD,KAAKmd,UACT,KAAKC,GAAS/C,OACd,KAAK+C,GAAS7C,QACVva,KAAKkpD,UAAYw4D,GACjB,MACJ,KAAKtkG,GAAS9C,OACVta,KAAKkpD,UAAY24D,GACjB,MACJ,KAAKzkG,GAASjN,KACVnQ,KAAKkpD,UAAY64D,GACjB,MACJ,QACI/hH,KAAKkpD,UAAYw4D,GAI7B,IAAK1hH,KAAKkmH,QACN,OAAQlmH,KAAKmd,UACT,KAAKC,GAAS7C,QACVva,KAAKkmH,QAAU5zC,GAA2Bj+D,WAC1C,MACJ,KAAK+I,GAAS9C,OACVta,KAAKkmH,QAAUjyC,GAA0B5/D,WACzC,MACJ,KAAK+I,GAASjN,KACVnQ,KAAKkmH,QAAU3zC,GAAwBl+D,WACvC,MACJ,KAAK+I,GAAS/C,OACd,QACIra,KAAKkmH,QAAUhyC,GAA0B7/D,aASzDkuG,EAAAriH,UAAAimH,gBAAA,SAAgBC,EAAgBj1G,GAC5B,GAAIi1G,EAAO,KACDC,EAAYrmH,KAAK2W,KAAK2vG,sBAC5B,OAAOn1G,EACH,SAASk1G,EAAS,IAClB,UAAUA,EAAS,QAEvB,OAAOrmH,KAAKumH,qBAAqBvmH,KAAK2S,WAIvC4vG,EAAAriH,UAAAsmH,2BAAP,SAAkC7zG,GAAlC,IAAAiC,EAAA5U,KACUymH,EAAmC,GAEzC9zG,EAASF,QAAQ,SAAAyN,GACb,GAAKA,EAAI26F,SAAT,KAGM6L,EAAcxmG,EAAImkG,gBAAkBoC,EAAYvmG,EAAI26F,SAAW,KAAO4L,EAAYvmG,EAAI26F,SAAW,GAAGwJ,eACpGsC,EAAiBF,EAAYvmG,EAAI26F,SAAW,IAAM4L,EAAYvmG,EAAI26F,SAAW,GAAG+L,QAAU1mG,EAAIy7F,eAC9FkL,EAAgB3mG,EAAImkG,gBAAkBoC,EAAYvmG,EAAI26F,SAAW,IAAM4L,EAAYvmG,EAAI26F,SAAW,GAAGwJ,eACrGyC,GAAoB5mG,EAAImkG,gBAAkBoC,EAAYvmG,EAAI26F,SAAW,KAAO4L,EAAYvmG,EAAI26F,SAAW,GAAGwJ,eAEhH,GAAIoC,EAAYvmG,EAAI26F,SAAW,KAAO7mG,UAGlCyyG,EAAYvmG,EAAI26F,SAAW,GAAK,CAC5BkM,IAAK7mG,EACLjP,MAAOiP,EAAImkG,gBAAkBzvG,EAAK+B,KAAKqwG,qBAAuBvtE,SAASv5B,EAAI+mG,UAAW,IAAM,KAC5FL,QAAS1mG,EAAIy7F,eACbC,OAAQ17F,EAAI26F,SAAW36F,EAAIy7F,eAC3B0I,eAAgBnkG,EAAImkG,qBAErB,GAAIqC,GAAgBC,IAAmB,GAAc,GAA2B,CAOnF,GAAIE,GAAiBF,EAIjB,IAAK,IAAInmH,EAAI0f,EAAI26F,SAAW,EAAI36F,EAAIy7F,eAAgBn7G,EAAIimH,EAAYvmG,EAAI26F,SAAW,GAAGe,OAAS,KACtF6K,EAAYjmH,KAAOimH,EAAYjmH,GAAG6jH,gBADuD7jH,IAE1FimH,EAAYjmH,GAAKimH,EAAYvmG,EAAI26F,SAAW,GAQxD4L,EAAYvmG,EAAI26F,SAAW,GAAK,CAC5BkM,IAAK7mG,EACLjP,MAAOiP,EAAImkG,gBAAkBzvG,EAAK+B,KAAKqwG,qBAAuBvtE,SAASv5B,EAAI+mG,UAAW,IAAM,KAC5FL,QAAS1mG,EAAIy7F,eACbC,OAAQ17F,EAAI26F,SAAW36F,EAAIy7F,eAC3B0I,eAAgBnkG,EAAImkG,qBAErB,GAAIwC,GAAiBJ,EAAYvmG,EAAI26F,SAAW,GAAG+L,QAAU1mG,EAAIy7F,eAIpE,IAASn7G,EAAI0f,EAAI26F,SAAW,EAAI4L,EAAYvmG,EAAI26F,SAAW,GAAG+L,QAASpmH,EAAI0f,EAAI26F,SAAW,EAAI36F,EAAIy7F,kBACzF8K,EAAYjmH,KAAOimH,EAAYjmH,GAAG6jH,gBADuE7jH,IAE1GimH,EAAYjmH,GAAK,CACbumH,IAAK7mG,EACLjP,MAAOiP,EAAImkG,gBAAkBzvG,EAAK+B,KAAKqwG,qBAAuBvtE,SAASv5B,EAAI+mG,UAAW,IAAM,KAC5FL,QAAS1mG,EAAIy7F,eACbC,OAAQ17F,EAAI26F,SAAW36F,EAAIy7F,eAC3B0I,eAAgBnkG,EAAImkG,mBAUxC,IAAK,IAAI7jH,EAAI,EAAGA,EAAIimH,EAAY9lH,OAAQH,IACpC,GAAIimH,EAAYjmH,IAAMimH,EAAYjmH,GAAGomH,QAAU,EAAG,CAI9C,QAHI1wG,EAAI,EAGDA,EAAIuwG,EAAYjmH,GAAGomH,SAAWpmH,EAAI0V,EAAI,EAAIuwG,EAAYjmH,GAAGo7G,UACxD6K,EAAYjmH,EAAI0V,OACbuwG,EAAYjmH,GAAGyQ,OAASw1G,EAAYjmH,EAAI0V,GAAGjF,QACxCw1G,EAAYjmH,GAAGyQ,QAAUw1G,EAAYjmH,EAAI0V,GAAGjF,OAASw1G,EAAYjmH,EAAI0V,GAAG0wG,SAAWH,EAAYjmH,GAAGomH,SACjGH,EAAYjmH,EAAI0V,GAAGjF,OAASw1G,EAAYjmH,EAAI0V,GAAG0wG,SAAWH,EAAYjmH,GAAGomH,UAJhB1wG,IAAK,KAS/DjF,EAAQw1G,EAAYjmH,GAAG6jH,eACzBoC,EAAYjmH,GAAGyQ,MAAQw1G,EAAYjmH,GAAGomH,QACtCH,EAAYjmH,GAAGyQ,MACnBw1G,EAAYjmH,EAAI0V,GAAK,CACjB6wG,IAAKN,EAAYjmH,GAAGumH,IACpB91G,MAAOA,EACP21G,QAAS,EACThL,OAAQ6K,EAAYjmH,GAAGo7G,OACvByI,eAAgBoC,EAAYjmH,GAAG6jH,gBAM3CoC,EAAYjmH,GAAGyQ,MAAQw1G,EAAYjmH,GAAG6jH,eAClCoC,EAAYjmH,GAAGyQ,MAAQw1G,EAAYjmH,GAAGomH,QACtCH,EAAYjmH,GAAGyQ,MACnBw1G,EAAYjmH,GAAGomH,QAAU,EAGzBpmH,GAAK0V,EAAI,EAIjB,OAAOuwG,GAGJlE,EAAAriH,UAAAgnH,0BAAP,SAAiCv0G,GAK7B,QAJM8zG,EAAczmH,KAAKwmH,2BAA2B7zG,GAG9CnC,EAAmB,GAChBhQ,EAAI,EAAGA,EAAIimH,EAAY9lH,OAAQH,IAChCimH,EAAYjmH,IAAQimH,EAAYjmH,GAAGyQ,MACnCT,EAAOhO,KAAKikH,EAAYjmH,GAAGyQ,MAAQ,MAEnCT,EAAOhO,KAAKi3C,SAASz5C,KAAK2W,KAAKwwG,yBAA0B,IAAM,MAGvE,OAAO32G,GAGD+xG,EAAAriH,UAAAqmH,qBAAV,SAA+B5zG,GAE3B,OADY3S,KAAKknH,0BAA0Bv0G,GAChCiiB,KAAK,MAGb2tF,EAAAriH,UAAAknH,wBAAP,WACI,GAAIpnH,KAAK2lH,eAAiB3lH,KAAKs7G,mBAAqBt7G,KAAKulH,YACrD,MAAO,CAAC,CAAEvkH,OAAQhB,KAAMqnH,SAAU,IAOtC,QAJMC,EAActnH,KAAKwmH,2BAA2BxmH,KAAK0W,OAAO/D,UAC1D40G,EAAiC,GACjC3L,EAAS57G,KAAK47G,OAAS57G,KAAK47G,OAAS57G,KAAK66G,SAAW,EAElDr6G,EAAI,EAAGA,EAAI8mH,EAAY3mH,OAAQH,IAChCR,KAAK66G,UAAYr6G,EAAI,GAAKA,EAAI,EAAIo7G,GAClC2L,EAAQ/kH,KAAK,CAAExB,OAAQsmH,EAAY9mH,GAAGumH,IAAKM,SAAU,IAK7D,QADMG,EAAyC,GACtCtxG,EAAI,EAAGA,EAAIqxG,EAAQ5mH,OAAQuV,IAC5BsxG,EAAgB7mH,QAAU6mH,EAAgBA,EAAgB7mH,OAAS,GAAGK,OAAOmf,QAAUonG,EAAQrxG,GAAGlV,OAAOmf,MACzGqnG,EAAgBA,EAAgB7mH,OAAS,GAAG0mH,WAE5CG,EAAgBhlH,KAAK+kH,EAAQrxG,IAIrC,OAAOsxG,GAeJjF,EAAAriH,UAAA2kH,IAAP,SAAWlxG,GAMP,GAHI3T,KAAK2W,MACL3W,KAAK2W,KAAKuO,SAAQ,GAElBllB,KAAKsjH,QACL,OAAO,EAGX,GAAItjH,KAAK0W,SAAW1W,KAAK0W,OAAO4T,OAC5B,OAAOtqB,KAAKynH,eAAe5C,IAAIlxG,OAG7BgD,EAAQ3W,KAAS,KACjB+yC,EAAWp/B,IAAUK,UAC3B,GAAI++B,IAAap/B,EAAQ,GAAKA,GAASgD,EAAKooG,cAAcp+G,QACtD,OAAO,EAGX,IAAKX,KAAK0W,SAAW1W,KAAK0nH,SACtB,OAAO,EAGX1nH,KAAKsjH,SAAU,EACftjH,KAAKqjH,aAAa9gG,KAAKviB,KAAKsjH,SAC5BtjH,KAAK2nH,eAAiBhxG,EAAKixG,iBAAiBt2G,QAAQtR,MACpD2T,EAAQA,IAAUK,UAAYL,EAAQgD,EAAKkxG,eAAelnH,WACpDmnH,EAAenxG,EAAKkxG,eAAel0G,GACnC3F,EAAO,CAAE4T,OAAQ5hB,KAAM4lB,cAAejS,EAAOo0G,UAAU,GA2B7D,OA1BApxG,EAAKqxG,gBAAgBzlG,KAAKvU,IAEiB,IAAvC2I,EAAKkxG,eAAev2G,QAAQtR,QAC5B2W,EAAKkxG,eAAe3sG,OAAOlN,EAAK4X,cAAe,EAAG5lB,OAEL,IAAzC2W,EAAKixG,iBAAiBt2G,QAAQtR,OAC9B2W,EAAKixG,iBAAiB1sG,OAAOvE,EAAKixG,iBAAiBt2G,QAAQtR,MAAO,IAItE+yC,GACAp8B,EAAKsxG,aAAajoH,KAAM8nH,GAGxB9nH,KAAKulH,cACLvlH,KAAKwhH,YAAY/uG,QAAQ,SAAAuwB,GAAS,OAAAA,EAAM6hF,QACxCluG,EAAKuxG,mBAGTvxG,EAAKmvG,cACLnvG,EAAKwQ,gBACDnnB,KAAKs7G,mBACLt7G,KAAK2W,KAAK4O,QAAQvL,OAAO,SAAA8C,GAAK,OAAAA,EAAE6oG,eAAclzG,QAAQ,SAAAqK,GAAK,OAAAA,EAAEqrG,2BAEjEnoH,KAAK2W,KAAKutG,iBAAiBC,sBAEpB,GAaJ5B,EAAAriH,UAAA4kH,MAAP,SAAanxG,GAIT,GAHI3T,KAAK2W,MACL3W,KAAK2W,KAAKuO,SAAQ,IAEjBllB,KAAKsjH,QACN,OAAO,EAGX,GAAItjH,KAAK0W,QAAU1W,KAAK0W,OAAO4T,OAC3B,OAAOtqB,KAAKynH,eAAe3C,MAAMnxG,OAG/BgD,EAAQ3W,KAAS,KACjB+yC,EAAWp/B,IAAUK,UAC3B,GAAI++B,IAAap/B,EAAQ,GAAKA,GAASgD,EAAKixG,iBAAiBjnH,QACzD,OAAO,EAGXgT,EAASA,IAAUK,UAAYL,EAC3B3T,KAAK2nH,iBAAmB3zG,UAAYhU,KAAK2nH,eAAiB3nH,KAAK2T,MACnE3T,KAAKsjH,SAAU,EACftjH,KAAKqjH,aAAa9gG,KAAKviB,KAAKsjH,aAEtBwE,EAAenxG,EAAKixG,iBAAiBj0G,GAE3CgD,EAAKixG,iBAAiB1sG,OAAOvH,EAAO,EAAG3T,OACI,IAAvC2W,EAAKkxG,eAAev2G,QAAQtR,OAC5B2W,EAAKkxG,eAAe3sG,OAAOvE,EAAKkxG,eAAev2G,QAAQtR,MAAO,GAG9D+yC,GACAp8B,EAAKsxG,aAAajoH,KAAM8nH,GAGxB9nH,KAAKulH,aACLvlH,KAAKwhH,YAAY/uG,QAAQ,SAAAuwB,GAAS,OAAAA,EAAM8hF,UAG5CnuG,EAAKuxG,kBACLvxG,EAAKmvG,kBAGC93G,EAAO,CAAE4T,OAAQ5hB,KAAM4lB,cADPjP,EAAKixG,iBAAiBt2G,QAAQtR,MACR+nH,UAAU,GAUtD,OATApxG,EAAKqxG,gBAAgBzlG,KAAKvU,GAE1B2I,EAAKwQ,gBACDnnB,KAAKs7G,mBACLt7G,KAAK2W,KAAK4O,QAAQvL,OAAO,SAAA8C,GAAK,OAAAA,EAAE6oG,eAAclzG,QAAQ,SAAAqK,GAAK,OAAAA,EAAEqrG,2BAEjEnoH,KAAK2W,KAAKutG,iBAAiBC,sBAGpB,GASX3kH,OAAAgC,eAAI+gH,EAAAriH,UAAA,iBAAc,KAAlB,WAEI,QADIwW,EAAS1W,KAAK0W,OACXA,GAAUA,EAAOA,QACpBA,EAASA,EAAOA,OAEpB,OAAOA,mCAWXlX,OAAAgC,eAAI+gH,EAAAriH,UAAA,aAAU,KAAd,WAAA,IAAA0U,EAAA5U,KACI,OAAOA,KAAK2W,KAAKyxG,eAAe9wG,KAAK,SAACqS,GAAW,OAAAA,EAAO/H,SAAWhN,qCAWvEpV,OAAAgC,eAAI+gH,EAAAriH,UAAA,aAAU,KAAd,WAAA,IAAA0U,EAAA5U,KACI,OAAOA,KAAK2W,KAAK0xG,eAAe/wG,KAAK,SAACgxG,GAAe,OAAAA,EAAW1mG,SAAWhN,qCAO/EpV,OAAAgC,eAAI+gH,EAAAriH,UAAA,cAAW,KAAf,WAAA,IAAA0U,EAAA5U,KACI,OAAOA,KAAK2W,KAAK4xG,iBAAiBjxG,KAAK,SAACkxG,GAAgB,OAAAA,EAAY5mG,SAAWhN,qCAY5E2tG,EAAAriH,UAAAuoH,SAAP,WACSzoH,KAAKulH,cAENvlH,KAAKiR,MAAQjR,KAAK0oH,sBAClB1oH,KAAK2W,KAAKgyG,WAOXpG,EAAAriH,UAAAwkH,aAAP,WACI,OAAwB,OAApB1kH,KAAKgjH,YAAwBxnG,MAAMxb,KAAKwkH,iBAG5CxkH,KAAKykH,iBACEzkH,KAAKgjH,YAHDhjH,KAAKgjH,YAiBbT,EAAAriH,UAAAwoH,oBAAP,eACU93G,EAAQ5Q,KAAK2W,KAAK0H,SAAS42F,cAC3B2T,EAAU,IAAIt4G,IAEpB,GAAItQ,KAAK2hB,MAAMhhB,OAAS,EAAG,KACnBkoH,EAAqB,GACrB7oH,KAAK2hB,MAAM,GAAG2e,cAAc3tB,SAAShS,OAAS,EAC9CX,KAAK2hB,MAAMlP,QAAQ,SAACuO,GAAS,OAAA6nG,EAAmBrmH,KAAKwe,EAAKo9F,mBAAmBxtG,MAE7Ei4G,EAAqB7oH,KAAK2hB,MAAMrF,IAAI,SAAC0E,GAAS,OAAArQ,GAAoBC,EAAOoQ,EAAKsf,qBAG5E3sB,EAAQk1G,EAAmBv3G,QAAQmK,KAAK4O,IAAGxpB,MAAR4a,KAAI/Y,EAAQmmH,KAC/CC,EAAY9oH,KAAK2W,KAAK0H,SAASkoB,YAAY4xB,iBAAiBn4D,KAAK2hB,MAAMhO,GAAO2sB,eAC9EyoF,EAAc1rG,WAAWyrG,EAAUE,aAAe3rG,WAAWyrG,EAAUG,cACzE5rG,WAAWyrG,EAAUI,kBAEzBN,EAAQlgG,IAAIjN,KAAK4O,IAAGxpB,MAAR4a,KAAI/Y,EAAQmmH,IAAqBE,GAGjD,GAAI/oH,KAAKmpH,WAAY,KACbA,OAAU,EAEVA,EADAnpH,KAAK0+F,gBAAkB1+F,KAAKmpH,WAAW9oF,WAAWC,cAAc3tB,SAAS,GAAGA,SAAShS,OAAS,EACjF8a,KAAK4O,IAAGxpB,MAAR4a,KAAI/Y,EAAQ/C,MAAMuT,KAAKlT,KAAKmpH,WAAW9oF,WAAWC,cAAc3tB,SAAS,GAAGA,UACpF2J,IAAI,SAAC0mB,GAAU,OAAAryB,GAAoBC,EAAOoyB,OAElCryB,GAAoBC,EAAO5Q,KAAKmpH,WAAW9oF,WAAWC,cAAc3tB,SAAS,KAG1F3S,KAAKwiH,UAAYxiH,KAAKw/F,cACtB2pB,GAAcnpH,KAAKmpH,WAAW9oF,WAAWC,cAAc3tB,SAAS,GAAGzB,wBAAwBD,WAGzFm4G,EAAcppH,KAAK2W,KAAK0H,SAASkoB,YAAY4xB,iBAAiBn4D,KAAKmpH,WAAW9oF,WAAWC,eACzF+oF,EAAgBhsG,WAAW+rG,EAAYJ,aAAe3rG,WAAW+rG,EAAYH,cAC/E5rG,WAAW+rG,EAAYF,kBAC3BN,EAAQlgG,IAAIygG,EAAYE,OAItBC,EAAc7tG,KAAK4O,IAAGxpB,MAAR4a,KAAI/Y,EAAQ/C,MAAMuT,KAAK01G,EAAQ54G,UAC7CiB,EAAQwK,KAAKC,KAAK4tG,EAAcV,EAAQ96G,IAAIw7G,IAElD,OAAIhvG,OAAOkB,MAAMvK,GACNjR,KAAKiR,MAELA,EAAQ,MAOhBsxG,EAAAriH,UAAAqpH,aAAP,eACUC,EAAWxpH,KAAKiR,MAChBw4G,EAAoBD,GAAgC,iBAAbA,IAAoD,IAA3BA,EAASl4G,QAAQ,KAEvF,GAAItR,KAAKs7G,kBACL,MAAO,GAGX,GAAIkO,IAAaC,EAAmB,KAE5BC,EAAYF,EAKhB,MAJyB,iBAAdE,IAAuD,IAA7BA,EAAU57F,SAAS,QACpD47F,GAAa,MAGVA,EAEP,OAAOF,GAQLjH,EAAAriH,UAAAukH,eAAV,eACU9tG,EAAO3W,KAAK+nB,QAAQpR,KACpB6yG,EAAWxpH,KAAKiR,MAChBw4G,EAAoBD,GAAgC,iBAAbA,IAAoD,IAA3BA,EAASl4G,QAAQ,KAEnFtR,KAAKgjH,WADLyG,EACkBhwE,SAAS+vE,EAAU,IAAM,KAAO7yG,EAAKswG,UAAYtwG,EAAKgzG,qBAChEH,EAIUxpH,KAAKiR,MAFLjR,KAAKukH,cAAgB5tG,EAAKwwG,yBAIhDnnH,KAAKwkH,eAAiB/qE,SAASz5C,KAAKgjH,WAAY,KAMpDxjH,OAAAgC,eAAW+gH,EAAAriH,UAAA,WAAQ,KAAnB,eACU0pH,EAAqB5pH,KAAS,KAAS6pH,kBAAiB,GACxDC,EAAe9pH,KAAK0W,OAAS+iC,SAASz5C,KAAKynH,eAAex2G,MAAO,IAAMwoC,SAASz5C,KAAKiR,MAAO,IAClG,OAAQjR,KAAS,KAASmgH,SAAYyJ,EAAoBE,EAAgB9pH,KAAK2W,KAAKozG,uDAMjFxH,EAAAriH,UAAAioH,uBAAP,aAKO5F,EAAAriH,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,gCAtpDrBqL,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,aACVqjC,SAAU,gDA3CLpyB,UAfLsvB,EAAAA,yBAaK0xE,qCA0DJhyG,EAAAA,sBAeAA,EAAAA,wBAcAA,EAAAA,yBAeAA,EAAAA,wBAWAA,EAAAA,0BA2CAA,EAAAA,yBAcAA,EAAAA,0BAWAA,EAAAA,sBA4BAA,EAAAA,4BAuCAgd,EAAAA,8BAWAhd,EAAAA,8BAWAA,EAAAA,uBAeAA,EAAAA,qBAWAA,EAAAA,2BAgCAgd,EAAAA,yBAwBAhd,EAAAA,wBAeAA,EAAAA,6BAsBAA,EAAAA,kCAeAA,EAAAA,2BAoBAA,EAAAA,0BAsBAA,EAAAA,yBAkCAA,EAAAA,mCAcAA,EAAAA,iCAcAA,EAAAA,wBAaAA,EAAAA,sBAUAA,EAAAA,4BAkCAgd,EAAAA,0BAyBAhd,EAAAA,0BAiCAA,EAAAA,uBASAA,EAAAA,4BAqBAA,EAAAA,gCAsBAA,EAAAA,4BAoDAA,EAAAA,MAAKX,KAAA,CAAC,wCAgCNW,EAAAA,oCAiCAA,EAAAA,MAAKX,KAAA,CAAC,kDA8BNW,EAAAA,MAAKX,KAAA,CAAC,sCAuJNW,EAAAA,sBAaAA,EAAAA,wBAYAA,EAAAA,wBAWAA,EAAAA,4BA8HAw9C,EAAAA,aAAYn+C,KAAA,CAACm0G,GAA0B,CAAEzrE,KAAMyrE,GAA0BxrE,UAAQ,0BAKjFyV,EAAAA,gBAAep+C,KAAA,CAACo0G,GAAgC,CAAE1rE,KAAM0rE,GAAgC91D,aAAa,4BAKrGH,EAAAA,aAAYn+C,KAAA,CAACs0G,GAAgC,CAAE5rE,KAAM4rE,GAAgC3rE,UAAQ,yCAO7FwV,EAAAA,aAAYn+C,KAAA,CAACk0G,GAAgC,CAAExrE,KAAMwrE,GAAgCvrE,UAAQ,OAtjC9F1D,EAAAA,CAHC9rB,KJrDM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,yDImDX/sE,EAAAA,CJtEO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,2DIkEX/sE,EAAAA,CAHC9rB,IAAc,GJlFR,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,4DI6EX/sE,EAAAA,CJhGO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,2FIwHX/sE,EAAAA,CAHC9rB,KJxIM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,6DIsIX/sE,EAAAA,CJzJO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,4DIiJX/sE,EAAAA,CAHC9rB,IAAc,GJjKR,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,2FI6KX/sE,EAAAA,CAHC9rB,IAAc,GJ7LR,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,yFI+NX/sE,EAAAA,CAHC9rB,KJ/OM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,gEI0OX/sE,EAAAA,CAHC9rB,KJ1PM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,iEIyPX/sE,EAAAA,CJ5QO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,GIuPV74F,4DAaD8rB,EAAAA,CAHC9rB,IAAc,GJpRR,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,sFI4TX/sE,EAAAA,CJ/UO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,2DI2UX/sE,EAAAA,CAHC9rB,KJ3VM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,yFIiWX/sE,EAAAA,CAHC9rB,KJjXM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,gEIgXX/sE,EAAAA,CAHC9rB,KJhYM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,qEIoYX/sE,EAAAA,CAHC9rB,KJpZM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,8DI0ZX/sE,EAAAA,CAHC9rB,KJ1aM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,6DI4bX/sE,EAAAA,CAHC9rB,KJ5cM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,8DI0cX/sE,EAAAA,CJ7dO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,sEIwdX/sE,EAAAA,CJ3eO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,oEI+eX/sE,EAAAA,CJlgBO,SAACjyC,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,yFI+hBX/sE,EAAAA,CADC/U,GAAkB,2HAYnB+U,EAAAA,CAHC9rB,IAAc,GJ1jBR,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,0FI2kBX/sE,EAAAA,CAHC9rB,KJ3lBM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,6DImrBX/sE,EAAAA,CAHC9rB,KJnsBM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,mBIssBgBp3D,EAAAA,oCAAAA,EAAAA,gDAa3B3V,EAAAA,CAHC9rB,KJnuBM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,mBIuuBkBp3D,EAAAA,oCAAAA,EAAAA,kDAa7B3V,EAAAA,CAHC9rB,KJpwBM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,mBIqwBwBp3D,EAAAA,oCAAAA,EAAAA,wDAanC3V,EAAAA,CAHC9rB,KJlyBM,SAACnmB,EAAaC,EAAa++G,OACxBC,EAAa,IAAMh/G,EAAIwP,YAC7BuvG,EAAWA,GAAY,CACnBvhF,cAAc,EACdC,YAAY,IAEP5wB,IAAMkyG,EAASlyG,KAAG,WAA4B,OAAO9N,KAAKigH,QAC7DC,EAAiBF,EAASt3F,KAAG,SAA0BpP,GAAYtZ,KAAKigH,GAAc3mG,GAY5F,OAVA0mG,EAASt3F,IAAM,SAAqBpP,GACnBtZ,KAAKmgH,UACZ19F,EAAWziB,KAAKiB,GACtBi/G,EAAet/G,KAAKZ,KAAMsZ,IACtBA,IAAQmJ,GAA4B,iBAARnJ,GAAoBA,IAAQmJ,IACpDziB,KAAKsgH,aAAaC,WAClBvgH,KAAKsgH,aAAaC,UAAUC,oBAIjCR,mBImyBsBp3D,EAAAA,oCAAAA,EAAAA,sDAy3BrC25D,EAxpDA,kBAq3DI,SAAAyH,EAAmBjiG,EAA8E6lB,EACtF0yE,GADX,IAAA1rG,EAGIkF,EAAAlZ,KAAAZ,KAAM+nB,EAAS6lB,EAAK0yE,IAAatgH,YAHlB4U,EAAAmT,QAAAA,EAA8EnT,EAAAg5B,IAAAA,EACtFh5B,EAAA0rG,aAAAA,EAnNX1rG,EAAAjC,SAAW,IAAIs3G,EAAAA,UAgCRr1G,EAAAupG,YAAa,EA6FbvpG,EAAA+tG,aAAe,IAAIx5F,EAAAA,eA0F9B,OAzN6CnR,EAAAA,EAAAA,GAUzCxY,OAAAgC,eACWwoH,EAAA9pH,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKujH,gBAShB,SAAqBvkD,qCAqBrBx/D,OAAAgC,eACWwoH,EAAA9pH,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAKwjH,cAShB,SAAmBxkD,qCASnBx/D,OAAAgC,eAAIwoH,EAAA9pH,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKmlH,mBAKhB,SAAiBpzE,qCASjBvyC,OAAAgC,eAAIwoH,EAAA9pH,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKqlH,2BAKhB,SAAyBtzE,qCAQzBvyC,OAAAgC,eAAIwoH,EAAA9pH,UAAA,QAAK,KAAT,WACI,MAAO,oCASXV,OAAAgC,eACIwoH,EAAA9pH,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKwhH,YAAY/tG,MAAM,SAAAtS,GAAK,OAAAA,EAAE0oB,cAczC,SAAW1nB,GACPnC,KAAK0jH,QAAUvhH,EACfnC,KAAK2iH,aAAapgG,KAAKviB,KAAK0jH,SAC5B1jH,KAAK2S,SAASF,QAAQ,SAAAuwB,GAAS,OAAAA,EAAMnZ,OAAS1nB,qCAYlD6nH,EAAA9pH,UAAAm4D,mBAAA,WAAA,IAAAzjD,EAAA5U,KAKQA,KAAK+lH,cAAgB/lH,KAAK+lH,aAAaplH,SACvCX,KAAKolH,gBAAkBplH,KAAK+lH,aAAanzG,UAAU,GAAGm/B,UAE1D/xC,KAAK2S,SAAS+yB,MAAM1lC,KAAK2S,SAASC,UAAUiF,MAAM,IAClD7X,KAAK2S,SAASF,QAAQ,SAAAuwB,GAClBA,EAAMtsB,OAAS9B,IAMnB5U,KAAK2S,SAASsvC,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WACrCwF,UAAU,SAACwH,GACJA,EAAOZ,QAAU/2B,IACjBA,EAAKjC,SAAS+yB,MAAM9wB,EAAKjC,SAASC,UAAUiF,MAAM,IAClDjD,EAAKjC,SAASF,QAAQ,SAAAuwB,GAClBA,EAAMtsB,OAAS9B,QAanCpV,OAAAgC,eAAIwoH,EAAA9pH,UAAA,cAAW,KAAf,WACI,OAAOsS,GAAQxS,KAAK2S,SAASC,4CASjCpT,OAAAgC,eAAIwoH,EAAA9pH,UAAA,cAAW,KAAf,WACI,OAAO,mCASXV,OAAAgC,eAAIwoH,EAAA9pH,UAAA,eAAY,KAAhB,WACI,OAAO,mCASXV,OAAAgC,eAAIwoH,EAAA9pH,UAAA,QAAK,KAAT,eAC0C+Q,EAAlCi5G,GAA2B,EAU/B,OATAj5G,EAAQ,GAAGjR,KAAK2S,SAASwY,OAAO,SAACs6B,EAAKnsC,GAClC,OAAIA,EAAIuQ,OACG47B,GAEc,iBAAdnsC,EAAIrI,QAAkD,IAA5BqI,EAAIrI,MAAMK,QAAQ,OACnD44G,GAA2B,GAExBzkE,EAAMhM,SAASngC,EAAIrI,MAAO,MAClC,GACIi5G,EAA2Bj5G,EAAQ,IAAMA,OAGpD,SAAUqI,yDAxNbw4B,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzCpvG,UAAW,CAAC,CAAE88C,QAASs2D,GAAoBr2D,YAAaG,EAAAA,WAAW,WAAM,OAAA29D,MACzEt7G,SAAU,mBACVqjC,SAAU,gDAtsDLpyB,UAfLsvB,EAAAA,yBAaK0xE,wCA2sDJv0D,EAAAA,gBAAep+C,KAAA,CAACu0G,GAAoB,CAAE7rE,KAAM6rE,wBAS5C5zG,EAAAA,0BAuBAA,EAAAA,uBASAA,EAAAA,sBA2DAA,EAAAA,4BAyBAgd,EAAAA,UA2FLq+F,GAzN6CzH,mBA2N7C,SAAA4H,IAAA,IAAAv1G,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAOW4U,EAAA6wG,uBAAyB,KAuIpC,OAxI8CztG,EAAAA,EAAAA,GAS1CxY,OAAAgC,eAAI2oH,EAAAjqH,UAAA,QAAK,KAAT,WAEI,OADcF,KAAKknH,0BAA0BlnH,KAAK2S,UAAUwY,OAAO,SAACs6B,EAAKnsC,GAAQ,OAAAmsC,EAAMhM,SAASngC,EAAK,KAAK,QAI9G,SAAUA,qCAEV9Z,OAAAgC,eAAI2oH,EAAAjqH,UAAA,eAAY,KAAhB,WACI,OAAO,mCAMJiqH,EAAAjqH,UAAAwkH,aAAP,eACQ0F,EAAc,EAElB,GAAIpqH,KAAKwoH,aAAexoH,KAAKwoH,YAAY6B,yBAA0B,KACzDC,EAAetqH,KAAK2W,KAAK0H,SAASkoB,YAAY4xB,iBAAiBn4D,KAAKwoH,YAAY1kF,QAAQxD,cAAc3tB,SAAS,IACrHy3G,EAAc3wE,SAAS6wE,EAAapB,iBAAkB,IAG1D,OAAOpvG,EAAA5Z,UAAMwkH,aAAY9jH,KAAAZ,MAAKoqH,GAWlC5qH,OAAAgC,eAAI2oH,EAAAjqH,UAAA,eAAY,KAAhB,WACI,IAAKsb,MAAMxb,KAAK+5G,SACZ,OAAO/5G,KAAK+5G,YAGViF,EAAkBh/G,KAAK2W,KAAKqoG,gBAAgBhlG,OAAO,SAAA7Y,GAAK,OAAAA,EAAEwkH,eAAiBxkH,EAAE0oB,SAC7Ek1F,EAAgB/+G,KAAK2W,KAAKooG,cAAc/kG,OAAO,SAAA7Y,GAAK,OAAAA,EAAEwkH,eAAiBxkH,EAAE0oB,SAC3E27F,GAAU,EAEd,GAAKxlH,KAAKsqB,OAINk7F,EAASzG,EAAcztG,QAAQtR,UAJjB,KACR0lH,EAAoB1G,EAAgB1tG,QAAQtR,MAClDwlH,GAAgC,IAAvBE,GAA4B,EAAI3G,EAAcp+G,OAAS+kH,EAKpE,OADA1lH,KAAK+5G,QAAUyL,EACRA,mCAUXhmH,OAAAgC,eACI2oH,EAAAjqH,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK0jH,aAUhB,SAAWvhH,GACPnC,KAAK0jH,QAAUvhH,EACfnC,KAAK2S,SAASF,QAAQ,SAAAuwB,GAAS,OAAAA,EAAMnZ,OAAS1nB,IAC1CnC,KAAK2W,MAAQ3W,KAAK2W,KAAK4O,SAAWvlB,KAAK2W,KAAK4O,QAAQ5kB,OAAS,GAE7DX,KAAK2W,KAAK4O,QAAQvL,OAAO,SAAA8C,GAAK,OAAAA,EAAEyoG,cAAa9yG,QAAQ,SAAAqK,GAAK,OAAAA,EAAEqrG,4DAOpEgC,EAAAjqH,UAAAm4D,mBAAA,WAAA,IAAAzjD,EAAA5U,KACI8Z,EAAA5Z,UAAMm4D,mBAAkBz3D,KAAAZ,MACnBA,KAAK6pB,OAGN7pB,KAAK2S,SAASF,QAAQ,SAAAuwB,GAAS,OAAAA,EAAMnZ,OAASjV,EAAKiV,SAFnD7pB,KAAK6pB,OAAS7pB,KAAKwhH,YAAY50F,KAAK,SAAA9P,GAAK,OAAAA,EAAE+M,SAK/C7pB,KAAK2S,SAASF,QAAQ,SAAAuwB,GAClBA,EAAM8/E,SAAU,KAWxBtjH,OAAAgC,eAAI2oH,EAAAjqH,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAK2S,SAASia,KAAK,SAAAoW,GAAS,OAAAA,EAAMunF,gDAMtCJ,EAAAjqH,UAAAioH,uBAAP,WAAA,IAAAvzG,EAAA5U,KACIA,KAAKylH,uBAAyB,OACxB9uG,EAAO3W,KAAK+nB,QAAQpR,KACpB4O,EAAU5O,GAAQA,EAAKooG,eAAiBpoG,EAAKqoG,gBAAkBroG,EAAKooG,cAAcp8G,OAAOgU,EAAKqoG,iBAAmB,GACjHwL,EAAcjlG,EACfvL,OAAO,SAAA8C,GAAK,OAACA,EAAEyoG,cAAgBzoG,EAAE+M,SACjCtV,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAEg+F,SAAW3zG,EAAE2zG,UAAY3tF,EAAQjU,QAAQ4D,EAAEwB,QAAU6O,EAAQjU,QAAQ/R,EAAEmX,SAAWxB,EAAE2lG,SAAWt7G,EAAEs7G,WACvH76G,KAAK2S,SAASF,QAAQ,SAAAuwB,OAEdwiF,EADEiF,EAAKznF,EAAMkwE,UAAY,EAK7BsS,EAFagF,EAAYxwG,OAAO,SAAA7Y,GAC5B,OAACA,EAAEokH,cAAgBpkH,EAAE+xG,UAAY,IAAMuX,IAC7Bn5G,QAAQ0xB,GACtBpuB,EAAK6wG,uBAAuBjjH,KAAK,CAAEof,OAAQohB,EAAOrvB,MAAO6xG,2BA3IpE1zE,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzCpvG,UAAW,CAAC,CAAE88C,QAASs2D,GAAoBr2D,YAAaG,EAAAA,WAAW,WAAM,OAAA89D,MACzEz7G,SAAU,oBACVqjC,SAAU,uCAsETpjC,EAAAA,SAoELw7G,GAxI8CH,ICv7D9CU,GAAA,WA0BI,SAAAA,EAAoBv1D,GAAAn1D,KAAAm1D,KAAAA,EAVbn1D,KAAA2qH,aAAuB,KAIvB3qH,KAAA4qH,aAAc,EA+MzB,OApMIprH,OAAAgC,eAAIkpH,EAAAxqH,UAAA,gBAAa,KAAjB,eACQiN,EAASnN,KAAK4hB,OAAOjL,KAAKk0G,0BAG1BC,EAAyB,EAS7B,OARI9qH,KAAK4hB,OAAO05F,oBACZwP,EAAyB9qH,KAAK4hB,OAAOjL,KAAK2vG,sBAAwBtmH,KAAK4hB,OAAOsxF,SAAW,GAGnE,IAAtBlzG,KAAK4hB,OAAOlO,QACZvG,GAAUnN,KAAK4hB,OAAO6lG,eAAee,YAAYr7G,OAASnN,KAAK4hB,OAAO4mG,YAAYr7G,OAAS29G,GAGxF39G,mCAMX3N,OAAAgC,eAAIkpH,EAAAxqH,UAAA,oBAAiB,KAArB,eACU6qH,EAAiB1tG,WAAWrd,KAAK4hB,OAAOopG,UACxCA,EAAWD,EAAiB1tG,WAAWrd,KAAK4hB,OAAO3Q,OAAS85G,EAAiB1tG,WAAWrd,KAAK4hB,OAAO3Q,OAE1G,OAAOjR,KAAK4hB,OAAOunG,WAAW9oF,WAAWC,cAAcpvB,wBAAwBD,MAAQ+5G,mCAM3FxrH,OAAAgC,eAAIkpH,EAAAxqH,UAAA,oBAAiB,KAArB,eACU+qH,EAAcjrH,KAAK4hB,OAAOunG,WAAW9oF,WAAWC,cAAcpvB,wBAAwBD,MAE5F,GAAIjR,KAAK4hB,OAAO0I,OAAQ,KACd4gG,EAAiBlrH,KAAKkrH,eACxBlrH,KAAK4hB,OAAOjL,KAAKw0G,4BAA8BnrH,KAAK4hB,OAAOjL,KAAKy0G,gBAAe,GAAQH,EAE3F,OAAIjrH,KAAK4hB,OAAOsV,UAAY7Z,WAAWrd,KAAK4hB,OAAOsV,UAAYg0F,GAC3DlrH,KAAKkrH,eAAiBlrH,KAAK4hB,OAAOsV,SAE3B7Z,WAAWrd,KAAK4hB,OAAOsV,UAAY+zF,GAEnCC,EAAiBD,EAG5B,OAAIjrH,KAAK4hB,OAAOsV,SACL7Z,WAAWrd,KAAK4hB,OAAOsV,UAAY+zF,EAEnC3wG,OAAO+wG,kDAYnBX,EAAAxqH,UAAAorH,yBAAP,eACUC,EAAkBvrH,KAAK4hB,OAAOunG,WAAW9oF,WAAWC,cAAcpvB,wBAAwBD,MAE1F2rB,EAAO58B,KAAK4hB,OAAO8mG,sBAErB1oH,KAAK4hB,OAAO0I,OACWtqB,KAAK4hB,OAAOjL,KAAKy0G,gBAAe,GAAQG,EAAkBluG,WAAWuf,IAEtE58B,KAAK4hB,OAAOjL,KAAKw0G,8BACnCnrH,KAAK4hB,OAAO3Q,MAAQ2rB,GAEjB58B,KAAK4hB,OAAOsV,UAAa7Z,WAAWuf,GAAQvf,WAAWrd,KAAK4hB,OAAOsV,UAC1El3B,KAAK4hB,OAAO3Q,MAAQoM,WAAWrd,KAAK4hB,OAAOsV,UAAY,KAChD7Z,WAAWuf,GAAQvf,WAAWrd,KAAK4hB,OAAOopG,UACjDhrH,KAAK4hB,OAAO3Q,MAAQjR,KAAK4hB,OAAOopG,SAAW,KAE3ChrH,KAAK4hB,OAAO3Q,MAAQ2rB,EAGxB58B,KAAKm1D,KAAKzS,IAAI,cAEd1iD,KAAK4hB,OAAOjL,KAAK60G,gBAAgBjpG,KAAK,CAClCX,OAAQ5hB,KAAK4hB,OACb6pG,UAAWF,EAAgB96G,WAC3Bi7G,SAAU1rH,KAAK4hB,OAAO3Q,SAOvBy5G,EAAAxqH,UAAAyrH,aAAP,SAAoBr5G,GAChBtS,KAAK4qH,aAAc,MACbpoE,EAAOlwC,EAAMq4D,QAAU3qE,KAAK4rH,eAE9BL,EAAkBluG,WAAWrd,KAAK4hB,OAAO3Q,OACvCg6G,EAAcjrH,KAAK4hB,OAAOunG,WAAW9oF,WAAWC,cAAcpvB,wBAAwBD,MAC5Fs6G,EAAkBjxG,OAAOkB,MAAM+vG,IAAqBA,EAAkBN,EAAeA,EAAcM,MAE7FM,EAAc7rH,KAAK8rH,eAAe9rH,KAAK4hB,QACvCmqG,EAAc/rH,KAAKgsH,eAAehsH,KAAK4hB,QACzC5hB,KAAK4hB,OAAOjL,KAAKk8F,iBACjB7yG,KAAKisH,sBAAsBjsH,KAAK4hB,OAAQ4gC,GAGpCxiD,KAAK4hB,OAAO3Q,MADZs6G,EAAkB/oE,EAAOqpE,EACLA,EAAc,KAC3BE,GAAgBR,EAAkB/oE,EAAOupE,EAC5BA,EAAc,KAEbR,EAAkB/oE,EAAQ,KAIvDxiD,KAAKm1D,KAAKzS,IAAI,cAEV6oE,IAAoBluG,WAAWrd,KAAK4hB,OAAO3Q,QAC3CjR,KAAK4hB,OAAOjL,KAAK60G,gBAAgBjpG,KAAK,CAClCX,OAAQ5hB,KAAK4hB,OACb6pG,UAAWF,EAAgB96G,WAC3Bi7G,SAAU1rH,KAAK4hB,OAAO3Q,QAI9BjR,KAAKksH,kBAAmB,GAGlBxB,EAAAxqH,UAAA4rH,eAAV,SAAyBlqG,OACjB2pG,EAAkBluG,WAAWuE,EAAO3Q,OAClCg6G,EAAcrpG,EAAOunG,WAAW9oF,WAAWC,cAAcpvB,wBAAwBD,MACvFs6G,EAAkBjxG,OAAOkB,MAAM+vG,IAAqBA,EAAkBN,EAAeA,EAAcM,MAE7FR,EAAiB1tG,WAAWuE,EAAOopG,UACzC,OAAOD,EAAiBQ,EAAkBR,EAAiBQ,GAGrDb,EAAAxqH,UAAA8rH,eAAV,SAAyBpqG,GACrB,OAAOA,EAAO0I,OAASjN,WAAWrd,KAAKkrH,gBAAkB7tG,WAAWuE,EAAOsV,WAGrEwzF,EAAAxqH,UAAA+rH,sBAAV,SAAgCrqG,EAA4B4gC,GAA5D,IAAA5tC,EAAA5U,KACUmsH,EAAkBvqG,EAAOwlG,0BACzBgF,EAAeD,EAAgBhhG,OAAO,SAACs6B,EAAKvlC,GAAS,OAAAulC,EAAMvlC,EAAImnG,UAAU,GAE/E,GAAIzlG,EAAO0I,OAAQ,KACT+hG,EAAcrsH,KAAK4hB,OAAOjL,KAAKy0G,gBAAe,GAC9CkB,EAAiBtsH,KAAK4hB,OAAOjL,KAAKw0G,4BAEpCkB,EAAc7pE,EAAO8pE,IACrB9pE,EAAO8pE,EAAiBD,OAK5BE,EAAe7pH,EAAOypH,GACtBK,EAAchqE,EACdiqE,EAAsBL,EACtBM,GAAgB,eAKhBA,GAAgB,MACZC,EAAkBF,EAChBG,EAAkB,GACxBL,EAAgB95G,QAAQ,SAACyN,OACf2sG,EAAqBxvG,WAAW6C,EAAIlf,OAAOimH,WAC3C6F,EAAgBtqE,EAAOiqE,EAAuBvsG,EAAIlf,OAAO26G,eAEzDqP,EAAWp2G,EAAKk3G,eAAe5rG,EAAIlf,QACnCk2B,EAAWtiB,EAAKo3G,eAAe9rG,EAAIlf,QACrC6rH,EAAqBC,EAAe9B,GACpC9qG,EAAIlf,OAAOiQ,MAAQ+5G,EAAW,KAC9BwB,GAAgBK,EAAqB7B,EACrC2B,GAAmBzsG,EAAImnG,SACvBqF,GAAgB,GACTx1F,GAAa21F,EAAqBC,EAAe51F,GACxDhX,EAAIlf,OAAOiQ,MAAQimB,EAAW,KAC9Bs1F,GAAgBt1F,EAAW21F,EAC3BF,GAAmBzsG,EAAImnG,SACvBqF,GAAgB,GAGhBE,EAAgBpqH,KAAK0d,KAI7BusG,EAAsBE,EACtBJ,EAAkBK,GA9BtB,aA+BSF,GAGTH,EAAgB95G,QAAQ,SAACyN,OACf2sG,EAAqBxvG,WAAW6C,EAAIlf,OAAOimH,WAC3C6F,EAAgBN,EAAcC,EAAuBvsG,EAAIlf,OAAO26G,eACtEz7F,EAAIlf,OAAOiQ,MAAS47G,EAAqBC,EAAgB,4BAhOpE96G,EAAAA,sDAJoB+0B,EAAAA,UAuOrB2jF,EAnOA,GCkCAqC,GAAA,WAqBI,SAAAA,EAAoB53D,EACDrxB,EACDkpF,GAFEhtH,KAAAm1D,KAAAA,EACDn1D,KAAA8jC,QAAAA,EACD9jC,KAAAgtH,mBAAAA,EATVhtH,KAAAitH,WAAY,EAKZjtH,KAAAu/B,SAAW,IAAIC,EAAAA,QA6E3B,OApEWutF,EAAA7sH,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAMXsmF,EAAA7sH,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,MACSA,KAAK4hB,OAAO2jG,aAAevlH,KAAK4hB,OAAO8gG,YACxC1iH,KAAKm1D,KAAKrrB,kBAAkB,WACxBlF,EAAAA,UAAUhwB,EAAKkvB,QAAQxD,cAAe,aAAauE,KAC/CqoF,EAAAA,aA7CE,KA8CFpoF,EAAAA,UAAUlwB,EAAK2qB,WACjBwF,UAAU,SAACzyB,GAELsC,EAAKq4G,UACLr4G,EAAKq4G,WAAY,EAIA,IAAjB36G,EAAMC,SACNqC,EAAKu4G,uBAAuB76G,GAC5BsC,EAAKgN,OAAOjL,KAAKy2G,WAAWC,QAAQC,YAAYh7G,QAK5DsyB,EAAAA,UAAU5kC,KAAK8jC,QAAQxD,cAAe,WAAWuE,KAC7CqoF,EAAAA,aA9DM,KA+DNpoF,EAAAA,UAAU9kC,KAAKu/B,WACjBwF,UAAU,WACRnwB,EAAKo4G,mBAAmBd,kBAAmB,EAC3Ct3G,EAAKo4G,mBAAmBpC,aAAc,EACtCh2G,EAAKgN,OAAOjL,KAAKi3B,IAAIrL,oBAS1BwqF,EAAA7sH,UAAAqtH,YADP,WAEIvtH,KAAKgtH,mBAAmBrC,aAAe,cAOpCoC,EAAA7sH,UAAA86G,cADP,WAEIh7G,KAAKitH,WAAY,EACjBjtH,KAAKgtH,mBAAmBprG,OAAS5hB,KAAK4hB,OACtC5hB,KAAKgtH,mBAAmB1B,4BAMpByB,EAAA7sH,UAAAitH,uBAAR,SAA+B76G,GAC3BtS,KAAKgtH,mBAAmBprG,OAAS5hB,KAAK4hB,OACtC5hB,KAAKgtH,mBAAmBd,kBAAmB,EAC3ClsH,KAAKgtH,mBAAmBpB,eAAiBt5G,EAAMq4D,QAE/C3qE,KAAKgtH,mBAAmBpC,aAAc,EACtC5qH,KAAK4hB,OAAOjL,KAAKi3B,IAAIrL,qCA9F5B9zB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iEA/BVq4B,EAAAA,cAJAzD,EAAAA,kBAyBKonF,sCAiBJ/7G,EAAAA,MAAKX,KAAA,CAAC,wCA8DNY,EAAAA,aAAYZ,KAAA,CAAC,oCAQbY,EAAAA,aAAYZ,KAAA,CAAC,eAkBlB++G,EAhGA,GAsGAS,GAAA,WAuBI,SAAAA,EAAmB1pF,EAA8CzlB,EAAiB82C,GAAlF,IAAAvgD,EAAA5U,KAAmBA,KAAA8jC,QAAAA,EAA8C9jC,KAAAqe,SAAAA,EAAiBre,KAAAm1D,KAAAA,EAjB3En1D,KAAAytH,mBAA6BnzG,OAAOozG,iBAGpC1tH,KAAA2tH,mBAA6BrzG,OAAO+wG,iBAGpCrrH,KAAA4tH,UAAY,IAAIpuF,EAAAA,QAGhBx/B,KAAA6tH,YAAc,IAAIruF,EAAAA,QAGlBx/B,KAAA8tH,OAAS,IAAItuF,EAAAA,QAGZx/B,KAAAg3D,SAAW,IAAIx3B,EAAAA,QAInBx/B,KAAK6tH,YAAYhpF,KACbvoB,EAAAA,IAAI,SAAChK,GAAU,OAAAA,EAAMq4D,UACrB7lC,EAAAA,UAAU9kC,KAAKg3D,UACfg4B,EAAAA,UAAU,SAACzqF,GAAW,OAAAqQ,EAAKk5G,OAAOjpF,KAC9BvoB,EAAAA,IAAI,SAAChK,GAAU,OAAAA,EAAMq4D,QAAUpmE,IAC/BugC,EAAAA,UAAUlwB,EAAKg5G,WACf9oF,EAAAA,UAAUlwB,EAAKoiD,cAErBjyB,UAAU,SAAC4/B,OAEHlqC,EAAO7lB,EAAKm5G,MAAQppD,EAEpB17B,EAAMr0B,EAAKm5G,MAAQn5G,EAAK64G,mBACxBpjG,EAAMzV,EAAKm5G,MAAQn5G,EAAK+4G,mBAE9B/4G,EAAK6lB,KAAOA,EAAOwO,EAAMA,EAAMxO,EAE3BA,EAAOpQ,IACPzV,EAAK6lB,KAAOpQ,KAkD5B,OA5CImjG,EAAAttH,UAAA2uC,SAAA,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKm1D,KAAKrrB,kBAAkB,WACxBlF,EAAAA,UAAUhwB,EAAKyJ,SAASkoB,YAAa,aAAa1B,KAC9C2zB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B5zB,EAAAA,UAAUlwB,EAAKoiD,WACjBjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKo5G,YAAYp4G,KAEtCgvB,EAAAA,UAAUhwB,EAAKyJ,SAASkoB,YAAa,WAAW1B,KAAKC,EAAAA,UAAUlwB,EAAKoiD,WAC/DjyB,UAAU,SAACnvB,GAAQ,OAAAhB,EAAKq5G,UAAUr4G,QAI/C43G,EAAAttH,UAAAsmC,YAAA,WACIxmC,KAAKg3D,SAAS90D,MAAK,GACnBlC,KAAKg3D,SAASvwB,YAGlBjnC,OAAAgC,eAAWgsH,EAAAttH,UAAA,OAAI,KAAf,SAAgBoZ,GAAhB,IAAA1E,EAAA5U,KACIu8C,sBAAsB,WAAM,OAAA3nC,EAAKkvB,QAAQxD,cAAcj9B,MAAMo3B,KAAOnhB,EAAM,wCAG9E9Z,OAAAgC,eAAWgsH,EAAAttH,UAAA,MAAG,KAAd,SAAeoZ,GAAf,IAAA1E,EAAA5U,KACIu8C,sBAAsB,WAAM,OAAA3nC,EAAKkvB,QAAQxD,cAAcj9B,MAAMs3B,IAAMrhB,EAAM,wCAG7Ek0G,EAAAttH,UAAA+tH,UAAA,SAAU37G,GACNtS,KAAK4tH,UAAU1rH,KAAKoQ,GACpBtS,KAAK4tH,UAAUnnF,YAGnB+mF,EAAAttH,UAAAotH,YAAA,SAAYh7G,GACRA,EAAM23B,qBACAvzB,EAAS1W,KAAK8jC,QAAQxD,cAAcvD,cAAcA,cAExD/8B,KAAKy6B,KAAOz6B,KAAK+tH,MAAQz7G,EAAMq4D,QAAUj0D,EAAOxF,wBAAwBupB,KACxEz6B,KAAK26B,IAAMroB,EAAMtR,OAAOkQ,wBAAwBypB,IAAMjkB,EAAOxF,wBAAwBypB,IAErF36B,KAAK6tH,YAAY3rH,KAAKoQ,IAG1Bk7G,EAAAttH,UAAA8tH,YAAA,SAAY17G,GACRA,EAAM23B,iBACNjqC,KAAK8tH,OAAO5rH,KAAKoQ,wBA3FxB7D,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,4DAzIV40B,EAAAA,8CA+JyCnxB,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBA3JhDC,EAAAA,sDAyICp4B,EAAAA,kCAGAA,EAAAA,yBAGAgd,EAAAA,4BAGAA,EAAAA,uBAGAA,EAAAA,UA4EL6hG,EA7FA,GAkGAU,GAAA,WAAA,SAAAA,YAUI1uH,OAAAgC,eAAI0sH,EAAAhuH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKmuH,aAEhB,SAAW70G,GACHA,IACAtZ,KAAKmuH,QAAU70G,oCAIvB9Z,OAAAgC,eAAI0sH,EAAAhuH,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKouH,WAEhB,SAAS90G,GACDA,IACAtZ,KAAKouH,MAAQ90G,wDAxBxBtH,EAAAA,WAAUhE,KAAA,CAAC,CACRiE,WAAY,kHADhB,OAiCIo8G,iBAAA,EACAC,gBAAA,EACAn7G,KAAA,0GAMJ,IAAAo7G,GAAA,SAAAz0G,GA4BI,SAAAy0G,EACIphE,EACA7W,EACAlX,EACAiG,EACAi3C,EACQkyC,GANZ,IAAA55G,EAQIkF,EAAAlZ,KAAAZ,KAAMs8E,EAAMnvB,EAAU7W,EAAgBlX,EAAOiG,IAAUrlC,YAF/C4U,EAAA45G,IAAAA,EAVJ55G,EAAA65G,YAAc,6BACd75G,EAAA85G,kBAAoB,kCACpB95G,EAAA+5G,uBAAyB,0CA6HrC,OApJkD32G,EAAAA,EAAAA,GAE9CxY,OAAAgC,eACI+sH,EAAAruH,UAAA,OAAI,KADR,SACSoZ,GACLtZ,KAAKmuH,QAAU70G,mCAGnB9Z,OAAAgC,eAAI+sH,EAAAruH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKmuH,yCAGhB3uH,OAAAgC,eAAI+sH,EAAAruH,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK4hB,SAAW5hB,KAAK4hB,OAAOkhG,SAAY9iH,KAAK4hB,OAAO6gG,YAAcziH,KAAK4hB,OAAO2jG,8CAGzF/lH,OAAAgC,eAAW+sH,EAAAruH,UAAA,OAAI,KAAf,WACI,OAAOF,KAAKwuH,IAAIp2C,sCAoBbm2C,EAAAruH,UAAAsmC,YAAP,WACIxmC,KAAK4uH,gBAGFL,EAAAruH,UAAAsoG,SAAP,SAAgBl2F,GACZtS,KAAKwuH,IAAIK,YAAa,EACtB7uH,KAAKq4C,YAAY/lC,IAGdi8G,EAAAruH,UAAAk4C,cAAP,SAAqB9lC,GAArB,IAAAsC,EAAA5U,KACI,GAAKA,KAAKg2F,WAAwD,UAA3C1jF,EAAMtR,OAAO67D,aAAa,aAAjD,CAIAvqD,EAAM23B,iBACN33B,EAAMmyB,kBAENzkC,KAAKi3D,kBAAmB,EACxBj3D,KAAKwuH,IAAI5sG,OAAS5hB,KAAK4hB,OACvB5hB,KAAKw1D,WAAax1D,KAAKyuH,YAEvB30G,EAAA5Z,UAAMk4C,cAAax3C,KAAAZ,KAACsS,GAEpBtS,KAAKwuH,IAAIM,gBAAiB,EAC1B9uH,KAAK4hB,OAAOjL,KAAKi3B,IAAIrL,oBAEfv0B,EAAO,CACTmmG,OAAQn0G,KAAK4hB,QAEjB5hB,KAAK4hB,OAAOjL,KAAKo4G,oBAAoBxsG,KAAKvU,GAE1ChO,KAAKgvH,cAAgBpqF,EAAAA,UAAU5kC,KAAK4hB,OAAOjL,KAAK0H,SAASkoB,YAAa,WAAWxB,UAAU,SAAC5E,GAC9E,WAANA,EAAGl/B,KAA6B,QAANk/B,EAAGl/B,KAC7B2T,EAAK4zF,SAASroE,OAKnBouF,EAAAruH,UAAAy4D,cAAP,SAAqBrmD,GASjB,GARAA,EAAM23B,iBACNnwB,EAAA5Z,UAAMy4D,cAAa/3D,KAAAZ,KAACsS,GAEhBtS,KAAK02D,cAAgB12D,KAAK23D,eAAiB33D,KAAK4hB,OAAOjL,KAAKs4G,gBAC5DjvH,KAAK4hB,OAAOjL,KAAKs4G,cAAgBjvH,KAAK4hB,OACtC5hB,KAAK4hB,OAAOjL,KAAKi3B,IAAIrL,iBAGrBviC,KAAKwuH,IAAIM,eAAgB,KACnB9gH,EAAO,CACTmmG,OAAQn0G,KAAK4hB,OACbQ,QAAQ,GAEZpiB,KAAK4hB,OAAOjL,KAAKu4G,eAAe3sG,KAAKvU,GAEjCA,EAAKoU,QACLpiB,KAAKwoG,SAASl2F,KAKnBi8G,EAAAruH,UAAAm4C,YAAP,SAAmB/lC,GAAnB,IAAAsC,EAAA5U,KAEIA,KAAKm1D,KAAKzS,IAAI,WACV5oC,EAAA5Z,UAAMm4C,YAAWz3C,KAAAgU,EAACtC,GAElBsC,EAAK45G,IAAIM,gBAAiB,EAC1Bl6G,EAAKgN,OAAOjL,KAAKs4G,cAAgB,KACjCr6G,EAAKgN,OAAOjL,KAAKi3B,IAAIrL,kBAGzBviC,KAAK4uH,gBAGCL,EAAAruH,UAAAg6D,YAAV,SAAsB7f,EAAOE,GACzBzgC,EAAA5Z,UAAMg6D,YAAWt5D,KAAAZ,KAACq6C,EAAOE,GAEzBv6C,KAAK23D,aAAat0D,MAAM8J,OAAS,KACjCnN,KAAK23D,aAAat0D,MAAM2nH,SAAW,KACnChrH,KAAK23D,aAAat0D,MAAM8rH,UAAY,KACpCnvH,KAAK23D,aAAat0D,MAAMq5B,SAAW,SAE7B07C,EAAO/5D,SAASC,cAAc,KAC9BkvD,EAAOnvD,SAAS+wG,eAAe,SACrCh3C,EAAKt5D,YAAY0uD,GAEjB4K,EAAKt7C,UAAUpvB,IAAI,kBACnB1N,KAAKwuH,IAAIp2C,KAAOA,EAEXp4E,KAAK4hB,OAAO2jG,aAQbvlH,KAAK23D,aAAa3zB,aAAao0C,EAAMp4E,KAAK23D,aAAa03D,WAAW,IAElErvH,KAAKo1D,SAASrC,SAASqlB,EAAMp4E,KAAK2uH,wBAClC3uH,KAAK23D,aAAahlD,SAAS,GAAGtP,MAAM2lH,YAAc,MAElDhpH,KAAK43D,UAAY53D,KAAKi5D,aAAe5e,EAAUr6C,KAAK23D,aAAazmD,wBAAwBD,MAAQ,EAAK,EACtGjR,KAAK83D,SAAW93D,KAAKk5D,aAAe3e,EAAUv6C,KAAK23D,aAAazmD,wBAAwB/D,OAAS,EAAK,IAbtGnN,KAAKo1D,SAASrC,SAASqlB,EAAMp4E,KAAK0uH,mBAElC1uH,KAAK23D,aAAa3zB,aAAao0C,EAAMp4E,KAAK23D,aAAa2V,mBAEvDttE,KAAK43D,UAAY53D,KAAKi5D,aAAe5e,EAAUr6C,KAAK23D,aAAazmD,wBAAwBD,MAAQ,EAAK,EACtGjR,KAAK83D,SAAW93D,KAAKk5D,aAAe3e,EAAUv6C,KAAK23D,aAAazmD,wBAAwB/D,OAAS,EAAK,IAYtGohH,EAAAruH,UAAA0uH,aAAR,WACQ5uH,KAAKgvH,gBACLhvH,KAAKgvH,cAAc9gF,cACnBluC,KAAKgvH,cAAgB,2BApJhCvgH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEApRV40B,EAAAA,kBAcAkT,EAAAA,wBAVAzP,EAAAA,cAMAssB,EAAAA,iBAZApkB,EAAAA,yBAuTiBi/E,oCA7BhBv/G,EAAAA,MAAKX,KAAA,CAAC,0BAkJXugH,EAvJA,CAGkDt5D,IAwJlDq6D,GAAA,SAAAx1G,GAsCI,SAAAw1G,EAAoBjvF,EAAgC+0B,EAA6BD,EAAsBq5D,GAAvG,IAAA55G,EACIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAY+0B,EAAUD,IAAKn1D,YADjB4U,EAAAyrB,WAAAA,EAAgCzrB,EAAAwgD,SAAAA,EAA6BxgD,EAAAugD,KAAAA,EAAsBvgD,EAAA45G,IAAAA,EAP/F55G,EAAA26G,eAAsB,KACtB36G,EAAA46G,mBAA0B,KAG1B56G,EAAA66G,WAAa,IAAIjwF,EAAAA,QACjB5qB,EAAA86G,oBAAsB,wCAkJlC,OAnLkD13G,EAAAA,EAAAA,GAC9CxY,OAAAgC,eACI8tH,EAAApvH,UAAA,OAAI,KADR,SACSoZ,GACDA,aAAeipG,KACfviH,KAAKmuH,QAAU70G,GAGfA,aAAewvC,KACf9oD,KAAK2vH,UAAYr2G,oCAIzB9Z,OAAAgC,eAAI8tH,EAAApvH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKmuH,yCAGhB3uH,OAAAgC,eAAI8tH,EAAApvH,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKmuH,SAAWnuH,KAAKmuH,QAAQx3G,KAAKi5G,mBAAqB5vH,KAAKwuH,IAAI5sG,OAAOkhG,WACvE9iH,KAAKmuH,QAAQ7jG,QAAUtqB,KAAKwuH,IAAI5sG,OAAOihG,iBAAoB7iH,KAAKwuH,IAAI5sG,OAAOihG,iDAGtFrjH,OAAAgC,eAAI8tH,EAAApvH,UAAA,mBAAgB,KAApB,WACI,GAAIF,KAAK2vH,UACL,OAAO3vH,KAAK2vH,2CAgBbL,EAAApvH,UAAAsmC,YAAP,WACIxmC,KAAKyvH,WAAWvtH,MAAK,GACrBlC,KAAKyvH,WAAWhpF,YAGb6oF,EAAApvH,UAAAi/D,WAAP,SAAkB7sD,GAEd,GADaA,EAAMitD,OAAOnE,iBACJmzD,IAIlBvuH,KAAK6vH,cACL7vH,KAAKwuH,IAAI5sG,SAAW5hB,KAAK4hB,QACzB5hB,KAAKwuH,IAAI5sG,OAAOlO,QAAU1T,KAAK4hB,OAAOlO,OACtC1T,KAAKwuH,IAAI5sG,OAAOlL,SAAW1W,KAAK4hB,OAAOlL,OAAQ,CAE3C1W,KAAKwvH,oBACLxvH,KAAKo1D,SAAStC,YAAY9yD,KAAKuvH,eAAgBvvH,KAAK0vH,yBAGlDI,EAAa9vH,KAAKqgC,WAAWC,cAAcpvB,wBAC3CyzD,EAAMmrD,EAAWr1F,KAAOq1F,EAAW7+G,MAAQ,EAE3CyL,EAAS1c,KAAKqgC,WAAWC,cAAcvD,cACzCzqB,EAAMitD,OAAOllB,MAAQsqB,GACrB3kE,KAAK+vH,SAAWC,GAAa3B,iBAC7BruH,KAAKwvH,mBAAqBxvH,KAAKuvH,eAAiB7yG,EAAO4wD,oBAEvDttE,KAAK+vH,SAAWC,GAAa1B,gBAC7BtuH,KAAKwvH,mBAAqBxvH,KAAKuvH,eAAiB7yG,EAAOuzG,kBAG3B,UAA5BjwH,KAAKwuH,IAAIp2C,KAAK83C,WACdlwH,KAAKo1D,SAASrC,SAAS/yD,KAAKuvH,eAAgBvvH,KAAK0vH,uBAKtDJ,EAAApvH,UAAA++D,YAAP,SAAmB3sD,GAAnB,IAAAsC,EAAA5U,KAEI,GADasS,EAAMitD,OAAOnE,iBACJmzD,GAItB,GAAIvuH,KAAK4hB,QAAU5hB,KAAKwuH,IAAI5sG,OAAOjL,KAAKhJ,KAAO3N,KAAK4hB,OAAOjL,KAAKhJ,GAC5D3N,KAAKwuH,IAAIp2C,KAAK83C,UAAY,YAD9B,CAKA,GAAIlwH,KAAK6vH,cACL7vH,KAAKwuH,IAAI5sG,SAAW5hB,KAAK4hB,QACzB5hB,KAAKwuH,IAAI5sG,OAAOlO,QAAU1T,KAAK4hB,OAAOlO,OACtC1T,KAAKwuH,IAAI5sG,OAAOlL,SAAW1W,KAAK4hB,OAAOlL,QAMnC,KAJK1W,KAAK4hB,OAAO0I,QAAWtqB,KAAK4hB,OAAO0I,QAAUtqB,KAAKwuH,IAAI5sG,OAAO0I,UAC9DtqB,KAAKwuH,IAAIp2C,KAAK83C,UAAY,eAGzBlwH,KAAKwuH,IAAI5sG,OAAO0I,QAAUtqB,KAAK4hB,OAAO0I,OACftqB,KAAK4hB,OAAOjL,KAAKy0G,gBAAe,GAAQ/tG,WAAWrd,KAAKwuH,IAAI5sG,OAAO3Q,QAEpEjR,KAAK4hB,OAAOjL,KAAKw0G,4BACpCnrH,KAAKwuH,IAAIp2C,KAAK83C,UAAY,OAE1BlwH,KAAKwuH,IAAIp2C,KAAK83C,UAAY,aAIlClwH,KAAKwuH,IAAIp2C,KAAK83C,UAAY,QAG1BlwH,KAAKmwH,mBACLnwH,KAAKwuH,IAAIp2C,KAAK83C,UAAgC,UAApB59G,EAAMtR,OAAO2M,GAAiB,gBAAkB,aAE1E8qD,EAAAA,SAAS,KAAK5zB,KAAKC,EAAAA,UAAU9kC,KAAKyvH,aAAa1qF,UAAU,WACrDnwB,EAAK45G,IAAI5sG,OAAOjL,KAAKy5G,eACD,UAApB99G,EAAMtR,OAAO2M,GAAiBiH,EAAKu7G,iBAAiBj1F,gBAAkB,GAClEtmB,EAAKu7G,iBAAiBj1F,gBAAkB,QAKrDo0F,EAAApvH,UAAAg/D,YAAP,SAAmB5sD,GACFA,EAAMitD,OAAOnE,iBACJmzD,KAItBvuH,KAAKwuH,IAAIp2C,KAAK83C,UAAY,QAEtBlwH,KAAKuvH,gBACLvvH,KAAKo1D,SAAStC,YAAY9yD,KAAKuvH,eAAgBvvH,KAAK0vH,qBAGpD1vH,KAAKmwH,kBACLnwH,KAAKyvH,WAAWvtH,MAAK,KAItBotH,EAAApvH,UAAAy/D,WAAP,SAAkBrtD,GAGd,GAFAA,EAAM23B,iBACO33B,EAAMitD,OAAOnE,iBACJmzD,MAIlBvuH,KAAK4hB,QAAW5hB,KAAKwuH,IAAI5sG,OAAOjL,KAAKhJ,KAAO3N,KAAK4hB,OAAOjL,KAAKhJ,MAI7D3N,KAAKmwH,kBACLnwH,KAAKyvH,WAAWvtH,MAAK,GAGrBlC,KAAK6vH,cAAc,KACb7hH,EAAO,CACTmmG,OAAQn0G,KAAKwuH,IAAI5sG,OACjB5gB,OAAQhB,KAAK4hB,QAGbyuG,OAAe,EAKnB,GAJIrwH,KAAK4hB,OAAO0I,SAAWtqB,KAAKwuH,IAAI5sG,OAAO0I,SACvC+lG,EAAkBrwH,KAAK4hB,OAAOjL,KAAKy0G,gBAAe,GAAQ/tG,WAAWrd,KAAKwuH,IAAI5sG,OAAO3Q,QAGpFo/G,GAAmBA,EAAkBrwH,KAAK4hB,OAAOjL,KAAKw0G,6BACvDnrH,KAAK4hB,OAAOlO,QAAU1T,KAAKwuH,IAAI5sG,OAAOlO,OACtC1T,KAAK4hB,OAAOlL,SAAW1W,KAAKwuH,IAAI5sG,OAAOlL,QACvC1W,KAAKwuH,IAAIK,WAGL,OAFA7uH,KAAKwuH,IAAIK,YAAa,OACtB7uH,KAAK4hB,OAAOjL,KAAK25G,kBAAkB/tG,KAAKvU,GAIhDhO,KAAK4hB,OAAOjL,KAAK45G,WAAWvwH,KAAKwuH,IAAI5sG,OAAQ5hB,KAAK4hB,OAAQ5hB,KAAK+vH,UAE/D/vH,KAAK4hB,OAAOjL,KAAKs4G,cAAgB,KACjCjvH,KAAK4hB,OAAOjL,KAAKi3B,IAAIrL,sCAnLhC9zB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEA/aV40B,EAAAA,kBAUA+vB,EAAAA,iBANAtsB,EAAAA,cAgd4GmnF,oCAlC3Gv/G,EAAAA,MAAKX,KAAA,CAAC,0BAkLXshH,EAtLA,CAGkD9wD,kBAoLlD,SAAAgyD,KAImC,2BAJlC/hH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gBACVS,UAAW,CAACwtC,QAEmB6zE,KAKnCC,GAAA,SAAA32G,GAII,SAAA22G,EAA+BvvC,UAE3BpnE,EAAAlZ,KAAAZ,KAAMkhF,IAAOlhF,KAarB,OAhB0CgY,EAAAA,EAAAA,GAKtCy4G,EAAAvwH,UAAAsE,UAAA,SAAUrC,EAAY++E,GAClB,OAAI/+E,GAASA,aAAiBgO,KACtB+wE,EACOpnE,EAAA5Z,UAAMsE,UAAS5D,KAAAZ,KAACmC,EA7lBX,aA6lBuC6R,UAAWktE,GAEvDpnE,EAAA5Z,UAAMsE,UAAS5D,KAAAZ,KAACmC,GAGpBA,uBAhBlBwmB,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,gFAGO7N,EAAAA,OAAMnE,KAAA,CAAC0iH,EAAAA,gBAexBD,EAnBA,CAG0CE,EAAAA,UAoB1CC,GAAA,SAAA92G,GAII,SAAA82G,EAA+B1vC,UAE3BpnE,EAAAlZ,KAAAZ,KAAMkhF,IAAOlhF,KAarB,OAhB6CgY,EAAAA,EAAAA,GAKzC44G,EAAA1wH,UAAAsE,UAAA,SAAUrC,EAAY++E,GAClB,OAAI/+E,GAA0B,iBAAVA,EACZ++E,EACOpnE,EAAA5Z,UAAMsE,UAAS5D,KAAAZ,KAACmC,EAAO6R,UAAWktE,GAElCpnE,EAAA5Z,UAAMsE,UAAS5D,KAAAZ,KAACmC,GAGpBA,uBAhBlBwmB,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,mFAGO7N,EAAAA,OAAMnE,KAAA,CAAC0iH,EAAAA,gBAexBE,EAnBA,CAG6CC,EAAAA,4BA4B7C,SAAAC,IAAA,IAAAl8G,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YACI4U,EAAAm8G,OAAQ,EACRn8G,EAAAo8G,qBAAuB,OAsB3B,OAxB6Ch5G,EAAAA,EAAAA,GAIzC84G,EAAA5wH,UAAAw8B,SAAA,SAASC,EAA6BC,EAAyCve,EAAqBwe,OAC1Fo0F,EAAYjxH,KAAKs6B,SAAS22F,UAC1BjwH,EAAsBhB,KAAKs6B,SAAe,OAMhDt6B,KAAK+wH,MAAsC,OAA9B/wH,KAAKgxH,qBACdhxH,KAAKgxH,qBACLC,EAAU//G,wBAAwBspB,OAC9Bx5B,EAAOkQ,wBAAwBspB,OAASmC,EAAezrB,wBAAwB/D,OAGvFwvB,EAAet5B,MAAM4N,MAAQjQ,EAAOg6B,YAAc,KAClDh7B,KAAKs6B,SAASgC,mBAAqBt8B,KAAKs6B,SAAS6B,kBAAoBn8B,KAAK+wH,MAAQ30F,GAAkBrC,IAAMqC,GAAkBnC,OAC5Hj6B,KAAKs6B,SAASiC,cAAgBv8B,KAAK+wH,MAAQvnH,GAAmBH,GAE9DyQ,EAAA5Z,UAAMw8B,SAAQ97B,KAAAZ,KAAC28B,EAAgB,CAAE1rB,MAAOjQ,EAAOg6B,YAAa7tB,OAAQnM,EAAOi6B,cAAgB5c,EAAUwe,IAE7Gi0F,GAxB6C7pF,IC7pB7CiqF,GAAA,WA0BI,SAAAA,EAAYC,GAFLnxH,KAAAoxH,aAAe,IAAIjoG,EAAAA,aAGtBnpB,KAAKqxH,UAAYF,EAUzB,OAjCI3xH,OAAAgC,eAAI0vH,EAAAhxH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKsxH,aAGhB,SAAWnvH,GACHA,IACAnC,KAAKsxH,QAAUnvH,oCAIvB3C,OAAAgC,eACI0vH,EAAAhxH,UAAA,QAAK,KADT,WAEI,OAAQF,KAAW,OAAIA,KAAK47B,OAAO57B,KAAKqxH,WAAa,UAGzD,SAAUlvH,GACNnC,KAAKuxH,eAAepvH,oCAUd+uH,EAAAhxH,UAAAqxH,eAAV,SAAyBpvH,OACf+/C,EAAeliD,KAAKmC,MACtBA,IAAU+/C,IACVliD,KAAK47B,OAAO57B,KAAKqxH,WAAalvH,EAC9BnC,KAAKoxH,aAAa7uG,KAAK,CAAEE,SAAUy/B,EAAc7lC,SAAUla,qCApBlEwM,EAAAA,4BASAgd,EAAAA,UAcLulG,EArCA,GAwCAM,GAAA,SAAA13G,GAkBI,SAAA03G,EAAmB9jF,GAAnB,IAAA94B,EACIkF,EAAAlZ,KAAAZ,KAAM0tC,IAAK1tC,YADI4U,EAAA84B,KAAAA,EALZ94B,EAAA68G,YAAc,KAoBzB,OAjC2Cz5G,EAAAA,EAAAA,GACvCxY,OAAAgC,eACIgwH,EAAAtxH,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK47B,YAGhB,SAAWz5B,GACHA,IACAnC,KAAK47B,OAASz5B,oCActB3C,OAAAgC,eAAIgwH,EAAAtxH,UAAA,OAAI,KAAR,WACI,OAAQF,KAAW,OAAMA,KAAK4hB,OAAa,OAAI5hB,KAAK4hB,OAAO+H,OAAS3pB,KAAK4hB,OAAOzB,MAAS,oCAG7F3gB,OAAAgC,eAAIgwH,EAAAtxH,UAAA,QAAK,KAAT,WACI,OAAOF,KAAK4hB,OAAOlO,uCAGvBlU,OAAAgC,eAAIgwH,EAAAtxH,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKyxH,YAAczxH,KAAK0T,uEA9BlC/E,EAAAA,2BAWAA,EAAAA,yBAGAA,EAAAA,SAkBL6iH,EAjCA,CAA2CN,ICxC3CQ,GAAA,SAAA53G,GAKI,SAAA43G,WACI53G,EAAAlZ,KAAAZ,KAAM,WAASA,KAMvB,OATkDgY,EAAAA,EAAAA,GAM9CxY,OAAAgC,eAAIkwH,EAAAxxH,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK4hB,OAAOghG,mEAV1Bn0G,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEAWdgjH,EAZA,CAGkDF,QCN9CG,aAAe,eACfC,aAAe,gBAGnBC,GAAA,SAAA/3G,GAAA,SAAA+3G,mDAiBA,OAjBsC75G,EAAAA,EAAAA,GAC3B65G,EAAA3xH,UAAA8Z,OAAP,SAAcxF,EAAawE,GAA3B,IAAApE,EAAA5U,KACU4V,EAA+B,GAarC,OAZApB,EAAK/B,QAAQ,SAACwJ,GACNrH,EAAK6E,YAAYwC,EAAMjD,EAAgBL,kBAAkB,IACzD/C,EAAIpT,KAAKyZ,GACFA,EAAK2F,OAAO2jG,aACftpG,EAAK2F,OAAO4/F,YAAY1oG,UAAU,SAACkqB,GACnC,OAAApuB,EAAK6E,YAAYupB,EAAOhqB,EAAgBL,kBAAkB,KAC1D/D,EAAK6E,YAAYupB,EAAOhqB,EAAgBL,kBAAkB,OAAgC,GAC1F/C,EAAIpT,KAAKyZ,KAKdrG,GAEfi8G,EAjBA,CAAsCh4G,IAoBtCi4G,GAAA,WA6MI,SAAAA,EAAmBlkF,GAAA5tC,KAAA4tC,IAAAA,EAnIZ5tC,KAAA+xH,eAAgB,EAwFhB/xH,KAAAgyH,qBAAuB,OAavBhyH,KAAAi1C,SAAW,oBAIVj1C,KAAAiyH,gBAAkB,GAIlBjyH,KAAAkyH,aAAe,GAIflyH,KAAAmyH,YAAc,GAIdnyH,KAAAoyH,oBAAsBC,GAAmBT,aAIzC5xH,KAAAsyH,gBAAkB,GAIlBtyH,KAAAuyH,qBAAuB,GAIvBvyH,KAAAwyH,OAAS,GA2ErB,OA7QIhzH,OAAAgC,eACIswH,EAAA5xH,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKkyH,kBAShB,SAAY/vH,GACJA,IACAnC,KAAKkyH,aAAe/vH,EACpBnC,KAAKyyH,oBACDzyH,KAAK0yH,gBACL1yH,KAAKga,2CAWjBxa,OAAAgC,eACIswH,EAAA5xH,UAAA,QAAK,KADT,WAEI,OAAOF,KAAKwyH,YAQhB,SAAUrwH,GACNnC,KAAKwyH,OAAS,GAAkB,oCASpChzH,OAAAgC,eACIswH,EAAA5xH,UAAA,sBAAmB,KADvB,WAEI,OAAOF,KAAKuyH,0BAShB,SAAwBpwH,GACpBnC,KAAKuyH,qBAAuB,GAAkB,oCAclD/yH,OAAAgC,eACIswH,EAAA5xH,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKiyH,iDAShBzyH,OAAAgC,eACIswH,EAAA5xH,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKsyH,qBAUhB,SAAmBnwH,GACf,IAAKA,GAA0B,IAAjBA,EAAMxB,OAIhB,OAHAX,KAAK2yH,iBACL3yH,KAAKsyH,gBAAkB,QACvBtyH,KAAK4tC,IAAIrL,gBAEFviC,KAAKsyH,iBAAmBtyH,KAAKsyH,gBAAgB3xH,OAASwB,EAAMxB,QACnEX,KAAK2yH,iBAGT3yH,KAAKsyH,gBAAkBnwH,EACvBnC,KAAKga,SACLha,KAAK4tC,IAAIrL,iDASb/iC,OAAAgC,eACIswH,EAAA5xH,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAKoyH,yBAShB,SAAuBjwH,GACfA,IAAU6R,YACVhU,KAAK4yH,aAAazwH,GACdnC,KAAKsyH,gBAAgB3xH,OAAS,GAC9BX,KAAKga,2CAqEjB83G,EAAA5xH,UAAAsmC,YAAA,uBACI,IAAmB,IAAA12B,EAAAC,EAAA/P,KAAKiyH,iBAAehiH,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA1B+N,EAAA9N,MACNivH,aAAaljF,qHAMlB4jF,EAAA5xH,UAAAuyH,kBAAR,WAAA,IAAA79G,EAAA5U,KACQA,KAAKkyH,aAAavxH,OAAS,IAC3BX,KAAKmyH,YAAc,GACnBnyH,KAAKkyH,aAAaz/G,QAAQ,SAACmP,OACjB3F,EAAOrH,EAAKi+G,iBAAiBj+G,EAAMgN,GACrC3F,GACArH,EAAKu9G,YAAY3vH,KAAKyZ,KAG9Bjc,KAAKiyH,gBAAkBjyH,KAAKmyH,YAAYt6G,MAAM,GAC9C7X,KAAK4yH,aAAa5yH,KAAKoyH,uBAUvBN,EAAA5xH,UAAA0yH,aAAR,SAAqBzwH,GACjBnC,KAAKoyH,oBAAsBjwH,EACvBA,IAAUkwH,GAAmBA,GAAmBV,eAChDxvH,IAAUkwH,GAAmBV,aAC7B3xH,KAAKiyH,gBAAkBjyH,KAAKmyH,YAAYt6G,MAAM,GAAGtD,KAAK,SAAC8/E,EAASnyF,GAC5D,OAAOmyF,EAAQr0E,KAAK3K,cAAcy9G,cAAc5wH,EAAK8d,KAAK3K,iBAG9DrV,KAAKiyH,gBAAkBjyH,KAAKmyH,aAM1BL,EAAA5xH,UAAA8Z,OAAV,eACUiL,EAA2B,IAAIxM,GAAyBmB,GAAetB,IAC7E2M,EAAyBtM,kBAAkBnW,KAAKxC,KAAK+yH,0BAA0B,SAC/E9tG,EAAyBtM,kBAAkBnW,KAAKxC,KAAK+yH,0BAA0B,UAC/E9tG,EAAyBtM,kBAAkBnW,KAAKxC,KAAK+yH,0BAA0B,eAEzEv8G,EAAW,IAAIq7G,GACrB7xH,KAAKiyH,gBAAkBz7G,EAASwD,OAAOha,KAAKiyH,gBAAiBhtG,IAKvD6sG,EAAA5xH,UAAA6yH,0BAAV,SAAoCn/G,GAChC,MAAO,CACHyF,UAAW66D,GAA0B7/D,WAAWgF,UAAU,YAC1DzF,UAAWA,EACXc,YAAY,EACZ8E,UAAWxZ,KAAKsyH,kBAMdR,EAAA5xH,UAAAyyH,eAAV,WACI3yH,KAAKyyH,sDA3QR9jH,EAAAA,qBA2BAA,EAAAA,mCAoBAA,EAAAA,6BAiBAA,EAAAA,2BASAA,EAAAA,8BAWAA,EAAAA,kCAiCAA,EAAAA,oCAmCAA,EAAAA,wBAaAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iBAwGjB8jH,EAtRA,kBCoFI,SAAAkB,EAAmBplF,GAAnB,IAAAh5B,EACIkF,EAAAlZ,KAAAZ,KAAM4tC,IAAI5tC,YADK4U,EAAAg5B,IAAAA,EAnCZh5B,EAAAq+G,YAAc,WAadr+G,EAAAs+G,YAAc,WAUdt+G,EAAAu+G,0BAA4B,IAAIhqG,EAAAA,aAuB/BvU,EAAA2qB,SAAW,IAAIC,EAAAA,UA0D3B,OAjK8CxnB,EAAAA,EAAAA,GAe1CxY,OAAAgC,eACIwxH,EAAA9yH,UAAA,iBAAc,KADlB,WAEI,OAAKF,KAAKozH,aAAepzH,KAAKozH,YAAYzyH,OAAS,GAC/CX,KAAKqzH,qBAAuBrzH,KAAKulB,QAAQ5kB,SAElCX,KAAKszH,eAAe3yH,OAAS,GACpCX,KAAKszH,eAAe3yH,SAAWX,KAAKszH,eAAet5G,OAAO,SAACkG,GAAQ,OAAAA,EAAI/d,QAAOxB,yCAatFnB,OAAAgC,eACIwxH,EAAA9yH,UAAA,iBAAc,KADlB,WAEI,OAAKF,KAAKozH,aAAepzH,KAAKozH,YAAYzyH,OAAS,GAC/CX,KAAKqzH,mBAAqB,GAAKrzH,KAAKszH,eAAe3yH,OAAS,GAErDX,KAAKszH,eAAe3yH,SAAWX,KAAKszH,eAAet5G,OAAO,SAACkG,GAAQ,OAACA,EAAI/d,QAAOxB,wCAiD9FnB,OAAAgC,eAAWwxH,EAAA9yH,UAAA,qBAAkB,KAA7B,WACI,OAAQF,KAAY,QAAIA,KAAKulB,QAAQvL,OAAO,SAACkG,GAAQ,OAAAA,EAAI2J,SAAQlpB,OAAS,mCAU9EnB,OAAAgC,eAAWwxH,EAAA9yH,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKozH,YAAYp5G,OAAO,SAACkG,GAAQ,OAACA,EAAI0xB,4CAOvCohF,EAAA9yH,UAAA2yH,iBAAV,SAA2B5B,EAAgBrvG,GAA3C,IAAAhN,EAAA5U,KACI,GAAI4hB,EAAOjL,KAAKk8F,mBAAqBjxF,EAAO+jG,aACxC,OAAO,SAEL1pG,EAAO,IAAIy1G,GAQjB,OAPAz1G,EAAKg1G,UAAYA,EACjBh1G,EAAK2F,OAASA,EAEd3F,EAAKm1G,aAAavsF,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAAC/2B,GACxD4G,EAAK2+G,oBAAoB,CAAE3xG,OAAQ3F,EAAK2F,OAAQvF,SAAUrO,EAAKqO,aAG5DJ,GASJ+2G,EAAA9yH,UAAAszH,eAAP,mBACU52G,EAAa5c,KAAKszH,mBACxB,IAAkB,IAAAG,EAAA1jH,EAAA6M,GAAU82G,EAAAD,EAAAvxH,QAAAwxH,EAAAtxH,KAAAsxH,EAAAD,EAAAvxH,OAAE,CAAhBwxH,EAAAvxH,MACNA,OAAQ,yGAUb6wH,EAAA9yH,UAAAyzH,eAAP,mBACU/2G,EAAa5c,KAAKszH,mBACxB,IAAkB,IAAAM,EAAA7jH,EAAA6M,GAAUi3G,EAAAD,EAAA1xH,QAAA2xH,EAAAzxH,KAAAyxH,EAAAD,EAAA1xH,OAAE,CAAhB2xH,EAAA1xH,MACNA,OAAQ,yGAMb6wH,EAAA9yH,UAAAqzH,oBAAP,SAA2BvlH,GACvBhO,KAAKmzH,0BAA0B5wG,KAAKvU,IAMjCglH,EAAA9yH,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,gCApKrBqL,EAAAA,UAAS9jC,KAAA,CAAC,CACPwnF,qBAAqB,EACrB9mF,SAAU,oBACVqjC,SAAA,8vCApBA9C,EAAAA,6DAqCCtgC,EAAAA,8BAmBAA,EAAAA,2BAsBAA,EAAAA,2BAaAA,EAAAA,yCAUAgd,EAAAA,UAkFLqnG,GAjK8ClB,IAsK9CgC,GAAA,WAAA,SAAAA,KAYA,2BAZC9kH,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC+jH,GAA0BtB,IACzCxiH,QAAS,CAAC8jH,IACVv2E,QAAS,CACL6W,GACAuiC,GACAlkC,GACAjV,EAAAA,aACAk1C,EAAAA,iBAIRkiC,EAZA,kBChLI,SAAAC,WACIj6G,EAAAlZ,KAAAZ,KAAM,WAASA,KAcvB,OAjBmDgY,EAAAA,EAAAA,GAc/CxY,OAAAgC,eAAIuyH,EAAA7zH,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK4hB,OAAO8lG,8DAlB1Bj5G,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAmBdqlH,GAjBmDvC,mBA0B/C,SAAAwC,EAAmBpmF,GAAnB,IAAAh5B,EACIkF,EAAAlZ,KAAAZ,KAAM4tC,IAAI5tC,YADK4U,EAAAg5B,IAAAA,IA2BvB,OA7B+C51B,EAAAA,EAAAA,GAS3Cg8G,EAAA9zH,UAAA2yH,iBAAA,SAAiB5B,EAAgBrvG,GAC7B,GAAqB,IAAjBA,EAAOlO,OAAekO,EAAOihG,eAC7B,OAAO,SAEL5mG,EAAO,IAAI83G,GAGjB,OAFA93G,EAAKg1G,UAAYA,EACjBh1G,EAAK2F,OAASA,EACP3F,GAMJ+3G,EAAA9zH,UAAA+zH,oBAAP,SAA2B3hH,EAAO4hH,GAC9B,GAAI5hH,EAAMy2D,UAAYmrD,EAAWxM,SAE7B,OADAp1G,EAAM8iF,SAASrsB,SAAU,GAClB,EAEXmrD,EAAW/xH,OAAS+xH,EAAW/xH,2BAhCtC2vC,EAAAA,UAAS9jC,KAAA,CAAC,CACPwnF,qBAAqB,EACrB9mF,SAAU,qBACVqjC,SAAA,s1BAhCqC9C,EAAAA,qBA+DzC+kF,GA7B+ClC,IAkC/CqC,GAAA,WAAA,SAAAA,KAWA,2BAXCnlH,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC+kH,GAA2BD,IAC1C7kH,QAAS,CAAC8kH,IACVv3E,QAAS,CACLo5C,GACAlkC,GACAjV,EAAAA,aACAk1C,EAAAA,iBAIRuiC,EAXA,GCnCAC,GAAA,SAAAt6G,GAqLI,SAAAs6G,EAAmBrsG,EACR6lB,EACYymF,EACAC,EACgCz/E,GAJvD,IAAAjgC,EAKQkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YALlB4U,EAAAmT,QAAAA,EACRnT,EAAAg5B,IAAAA,EACYh5B,EAAAy/G,cAAAA,EACAz/G,EAAA0/G,YAAAA,EACgC1/G,EAAAigC,uBAAAA,EAxJ/CjgC,EAAA29G,qBAAuB,0BA4JvB39G,EAAAo2F,kBAAsC,CAC1C/uE,oBAAqBC,GAAoBtC,KACzCyC,qBAAsBH,GAAoBpC,MAC1CqC,kBAAmBC,GAAkBnC,OACrCqC,mBAAoBF,GAAkBnC,QAGlCrlB,EAAA0pF,iBAAoC,CACxC7+D,iBAAkB,IAAIwH,GAA6BryB,EAAKo2F,mBACxDtrE,eAAgB,IAAI8J,GACpB7J,OAAO,EACPC,qBAAqB,EACrBc,uBAAuB,KAkJ/B,OAvV6C1oB,EAAAA,EAAAA,GAczCxY,OAAAgC,eACW4yH,EAAAl0H,UAAA,sBAAmB,KAD9B,WAEI,OAAOF,KAAKuyH,0BAShB,SAA+BpwH,GAC3BnC,KAAKuyH,qBAAuBpwH,mCAWhC3C,OAAAgC,eACI4yH,EAAAl0H,UAAA,4BAAyB,KAD7B,eAEUq0H,EAAav0H,KAAK2W,KAAK69G,WAC7B,OAAO,EAA4B,GAAbD,EAAmB,KAAO,wCAiFpD/0H,OAAAgC,eAAW4yH,EAAAl0H,UAAA,OAAI,KAAf,WACI,OAAOF,KAAK+nB,QAAQpR,sCASxBnX,OAAAgC,eAAW4yH,EAAAl0H,UAAA,yBAAsB,KAAjC,WACI,OAAqB,MAAbF,KAAK2W,OAAiB3W,KAAK2W,KAAK89G,aAAez0H,KAAK2W,KAAK+9G,4CASrEl1H,OAAAgC,eAAW4yH,EAAAl0H,UAAA,8BAA2B,KAAtC,WACI,OAAqB,MAAbF,KAAK2W,MAAgB3W,KAAK2W,KAAK89G,6CAS3Cj1H,OAAAgC,eAAW4yH,EAAAl0H,UAAA,4BAAyB,KAApC,WACI,OAAqB,MAAbF,KAAK2W,MAAgB3W,KAAK2W,KAAK+9G,2CAS3Cl1H,OAAAgC,eAAW4yH,EAAAl0H,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAK2W,KAAKooG,cAAc/kG,OAAO,SAAAkG,GAAO,OAACA,EAAIylG,eAAchlH,wCAUpEnB,OAAAgC,eACI4yH,EAAAl0H,UAAA,YAAS,KADb,WAEI,OAAOF,KAAK00C,yBAAyB,qDAgClC0/E,EAAAl0H,UAAAy0H,SAAP,WACI,OAAoB,MAAb30H,KAAK2W,KAAe3W,KAAK2W,KAAKi+G,aAAe,IASjDR,EAAAl0H,UAAA20H,cAAP,WACI,OAAoB,MAAb70H,KAAK2W,KAAe3W,KAAK2W,KAAKm+G,WAAa,IAS/CV,EAAAl0H,UAAA60H,mBAAP,WACI,OAAoB,MAAb/0H,KAAK2W,KAAe3W,KAAK2W,KAAKq+G,gBAAkB,IASpDZ,EAAAl0H,UAAA+0H,iBAAP,WACI,OAAoB,MAAbj1H,KAAK2W,KAAe3W,KAAK2W,KAAKu+G,cAAgB,IASlDd,EAAAl0H,UAAAi1H,cAAP,WACIn1H,KAAKs+F,iBAAiB7+D,iBAAiBnF,SAASt5B,OAAShB,KAAKo1H,aAAa90F,cAC3EtgC,KAAKs+F,iBAAiB55D,OAAS1kC,KAAK2W,KAAK0+G,gBACzCr1H,KAAKs1H,eAAevnH,OAAO/N,KAAKs+F,mBAS7B81B,EAAAl0H,UAAAq1H,qBAAP,WACIv1H,KAAKw1H,cAAcx1H,KAAKq0H,cAAe,UASpCD,EAAAl0H,UAAAu1H,mBAAP,WACIz1H,KAAKw1H,cAAcx1H,KAAKs0H,YAAa,QAGjCF,EAAAl0H,UAAAs1H,cAAR,SAAsBE,EAAsBC,GACxC31H,KAAKm1H,oBAGC7rG,EAAyB,UAAfqsG,EACZ,IAAIl8F,GAFS,gBAGb,IAAI1L,GAHS,eAGuBM,GAAaC,KAE/CtgB,EAAO,CAAE2I,KAAM3W,KAAK2W,KAAMi/G,SAAUF,EAAKpsG,QAASA,EAASlH,QAAQ,GAEzEpiB,KAAK2W,KAAKk/G,mBAAmBtzG,KAAKvU,GAC9BA,EAAKoU,QAGTszG,EAAIrsG,UAAOrpB,KAAK2W,KAAM2S,IASnB8qG,EAAAl0H,UAAA41H,qBAAP,WACI91H,KAAKs+F,iBAAiB7+D,iBAAiBnF,SAASt5B,OAAShB,KAAK+1H,mBAAmBz1F,cACjFtgC,KAAKs+F,iBAAiB55D,OAAS1kC,KAAK2W,KAAK0+G,gBACzCr1H,KAAKg2H,qBAAqBjoH,OAAO/N,KAAKs+F,mBASnC81B,EAAAl0H,UAAA+1H,sBAAP,WACIj2H,KAAKs+F,iBAAiB7+D,iBAAiBnF,SAASt5B,OAAShB,KAAKk2H,oBAAoB51F,cAClFtgC,KAAKs+F,iBAAiB55D,OAAS1kC,KAAK2W,KAAK0+G,gBACzCr1H,KAAKm2H,sBAAsBpoH,OAAO/N,KAAKs+F,mBAMpC81B,EAAAl0H,UAAAk2H,wBAAP,WACIp2H,KAAK2W,KAAK0/G,+BAUd72H,OAAAgC,eAAW4yH,EAAAl0H,UAAA,UAAO,KAAlB,WACI,MAAO,CAEHyW,KAAM3W,KAAK2W,KACX2/G,QAASt2H,uCAKjBR,OAAAgC,eAAW4yH,EAAAl0H,UAAA,wBAAqB,KAAhC,WACI,OAAiB,MAAbF,KAAK2W,MAA0D,MAA1C3W,KAAK2W,KAAK4/G,6BACxBv2H,KAAK2W,KAAK4/G,6BAA6BxkF,SAEvC,0DAxVlBD,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,mBACVqjC,SAAA,4lIAfKpyB,UArBLsvB,EAAAA,yBAkBA7W,GAAuBr3B,WAAA,CAAA,CAAAmR,KAuMlBg9B,EAAAA,kBAzMLngB,GAAqBhuB,WAAA,CAAA,CAAAmR,KA0MhBg9B,EAAAA,8CACAA,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,yCAjLvB1E,EAAAA,YAAWnhC,KAAA,CAAC,2BAAwB,CAAAkE,KACpCvD,EAAAA,mCASAA,EAAAA,yCAuBAA,EAAAA,oCAYA8nC,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE0oC,KAAM2T,GAAsB1T,UAAQ,4BASxEF,EAAAA,UAASzoC,KAAA,CAACglH,GAA0B,CAAEr8E,UAAQ,gCAS9CF,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAMgc,GAAoB/b,UAAQ,4BASpEF,EAAAA,UAASzoC,KAAA,CAAC,iBAAkB,CAAE0oC,KAAM2T,GAAsB1T,UAAQ,0BASlEF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMgc,GAAoB/b,UAAQ,mCAS3DF,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAM2T,GAAsB1T,UAAQ,6BASzEF,EAAAA,UAASzoC,KAAA,CAACgmH,GAA2B,CAAEr9E,UAAQ,iCAS/CF,EAAAA,UAASzoC,KAAA,CAAC,sBAAuB,CAAE0oC,KAAMgc,GAAoB/b,UAAQ,uBA4DrExH,EAAAA,YAAWnhC,KAAA,CAAC,iBA2KjBomH,EA3VA,CAI6CrgF,IA8V7CyiF,GAAA,WAII,SAAAA,EAAmBzkF,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yEA7XVk6C,EAAAA,eAiYJ4tE,EALA,GChYAC,GAAA,WAAA,SAAAA,KAG2C,2BAH1ChoH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mBAE6B+nH,EAH3C,GAMAC,GAAA,WAAA,SAAAA,KAGuC,2BAHtCjoH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uBAEyBgoH,EAHvC,GAMAC,GAAA,WAAA,SAAAA,KAG0C,2BAHzCloH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0BAE4BioH,EAH1C,GAQAC,GAAA,WAOI,SAAAA,EAAmBC,EAAqC/yF,GAAxD,IAAAlvB,EAAA5U,KAAmBA,KAAA62H,IAAAA,EAAqC72H,KAAA8jC,QAAAA,EAkDhD9jC,KAAA82H,aAAe,eACb91G,EAAOpM,EAAK+B,KAAK8M,cAAc9B,MAAMrK,KAAK,SAAAhV,GAAK,OAAAA,EAAE0f,qBAAuBpN,EAAKmiH,mBACnF/1G,EAAKsf,cAAciT,QACnBvyB,EAAKu6F,aAAY,GACjB3mG,EAAKmiH,kBAAoB,GAEjC,OAtDIv3H,OAAAgC,eAAIo1H,EAAA12H,UAAA,OAAI,KAAR,WACI,OAAOF,KAAK62H,IAAIlgH,sCAKbigH,EAAA12H,UAAA+8G,UAFP,SAEiB3qG,GACbA,EAAMmyB,mBACDzkC,KAAK2W,KAAKqgH,YAAYC,OAASj3H,OAASsS,EAAMinF,UAC9Cv5F,KAAK2W,KAAKqgH,YAAYrrF,QAAU3rC,MAAQsS,EAAMinF,WAE/Cv5F,KAAKk3H,KAAK5kH,IAKXskH,EAAA12H,UAAAi3H,aADP,SACoB7kH,GAChBtS,KAAK2W,KAAKuO,SAAQ,EAAO5S,OACnB8kH,EAAap3H,KAAK2W,KAAKkM,iBAAiB2tE,cAE1C4mC,GACap3H,KAAK2W,KAAKu8E,WAAWmkC,6BAC9BD,EAAW/1G,IACX+1G,EAAWzkC,OAASykC,EAAWzkC,OAAOogB,mBAAqBqkB,EAAWx1G,QACrE2xB,SASLqjF,EAAA12H,UAAAg3H,KAAR,SAAa5kH,GACTA,EAAM23B,iBACNjqC,KAAK+2H,iBAAmBzkH,EAAMinF,SAAWv5F,KAAK2W,KAAK2gH,wBAA0Bt3H,KAAK2W,KAAK4gH,yBAClFv3H,KAAK2W,KAAKu8E,WAAWskC,qBAAqBx3H,KAAK+2H,kBAIhD/2H,KAAK82H,eAHL92H,KAAK2W,KAAKu8E,WAAWukC,8BACjBz3H,KAAK2W,KAAK8M,cAAc9P,MAAO3T,KAAK+2H,kBAAkB,EAAO/2H,KAAK82H,mCA/CjFroH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAzBLiR,UADW2jB,EAAAA,iDAsCf10B,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,YAAS,CAAAkE,KACtCtD,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,iCAUnCY,EAAAA,aAAYZ,KAAA,CAAC,iBAAkB,CAAC,cAuCrC4oH,EA/DA,GCzBAc,GAAA,WA0BI,SAAAA,EAAmB3vG,EACP4vG,EACD7zF,EACA8J,GAHQ5tC,KAAA+nB,QAAAA,EACP/nB,KAAA23H,cAAAA,EACD33H,KAAA8jC,QAAAA,EACA9jC,KAAA4tC,IAAAA,EAKD5tC,KAAA0+G,gBAAkB,sBAKlB1+G,KAAA43H,2BAA6B,qCAkB7B53H,KAAA2uD,WAAY,EA+Df3uD,KAAA2oE,SAAW,EAkLtB,OAzOInpE,OAAAgC,eAAIk2H,EAAAx3H,UAAA,UAAO,KAAX,WACI,OAAOF,KAAK2uD,2CA6ChBnvD,OAAAgC,eACIk2H,EAAAx3H,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK2W,KAAKkhH,gBAAgB73H,KAAKiX,2CAY1CzX,OAAAgC,eACIk2H,EAAAx3H,UAAA,cAAW,KADf,eAEU43H,EAAY93H,KAAKiX,SAAShD,aAAeD,UAAYhU,KAAKiX,SAAShD,WAAWL,UAAY,GAChG,OAAO5T,KAAKq7G,OAAS,IAAMyc,mCAG/Bt4H,OAAAgC,eACIk2H,EAAAx3H,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK2T,uCAShBnU,OAAAgC,eAAIk2H,EAAAx3H,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CASxB9gC,OAAAgC,eACIk2H,EAAAx3H,UAAA,eAAY,KADhB,WAEI,OAAUF,KAAK0+G,gBAAe,IAAS1+G,KAAK43H,2BAA0B,IAAM53H,KAAKiX,SAASvD,OACrF1T,KAAKyyC,QAAU,IAAIzyC,KAAK0+G,gBAAe,WAAa,qCAOtDgZ,EAAAx3H,UAAAwuD,QADP,WAEI1uD,KAAK2uD,WAAY,GAOd+oE,EAAAx3H,UAAA0uD,OADP,WAEI5uD,KAAK2uD,WAAY,GASd+oE,EAAAx3H,UAAA6N,OAAP,eACUgqH,GAAiB/3H,KAAK2W,KAAKqhH,wBAAwB54E,GAAG/qC,SAASkiC,WAC/D0hF,EAAgBj4H,KAAK2T,MAE3B,GADA3T,KAAK2W,KAAKuhH,YAAYl4H,KAAKiX,UACvB8gH,EAAe,KACT9gH,EAAWjX,KAAK2W,KAAK2pB,cAAcmqC,cAAc,mBAAmBwtD,EAAa,MACnFhhH,GACAA,EAASs8B,UAKrB/zC,OAAAgC,eAAWk2H,EAAAx3H,UAAA,eAAY,KAAvB,WACI,OAAIF,KAAKuX,SACEvX,KAAK2W,KAAKwhH,8BAAgCn4H,KAAKo4H,+BAE/Cp4H,KAAK2W,KAAK0hH,+BAAiCr4H,KAAKs4H,iEAI/D94H,OAAAgC,eAAck2H,EAAAx3H,UAAA,gBAAa,KAA3B,WACI,MAAO,CACHmhB,IAAKrhB,KAAK2T,MACViO,OAAQ5hB,KAAK23H,cAAcnnC,cAAgBxwF,KAAK23H,cAAcnnC,cAAc5uE,OAAS,oCAQtF81G,EAAAx3H,UAAAwmE,UADP,SACiBp0D,OAEPrR,EAAMqR,EAAMrR,IAAIoU,cACtB,GAAKpC,GAAei+B,IAAIjwC,GAAxB,CAGAqR,EAAMmyB,sBACA+4E,EAAc,CAAEC,WAAY,WAAYz8G,OAAQhB,KAAMsS,MAAOA,EAAO8P,QAAQ,GAElF,GADApiB,KAAK2W,KAAK+mG,cAAcn7F,KAAKi7F,IACzBA,EAAYp7F,SAGhB9P,EAAM23B,iBAEDjqC,KAAKu4H,yBAAyBt3H,EAAKqR,EAAMinF,SAAUjnF,EAAMkoE,UAAWloE,EAAMmoG,SAE/E,GAAIz6G,KAAK88G,YAAY77G,EAAKqR,EAAMkoE,SACvBx6E,KAAKuX,UAAYvE,GAAkBk+B,IAAIjwC,KAAWjB,KAAKuX,UAAYzE,GAAgBo+B,IAAIjwC,KACxFjB,KAAK+N,aAFb,KAOMiiC,EAAYhwC,KAAK23H,cACvB3nF,EAAU4hE,cAAct2D,MAAQhpC,EAAMinF,YAAsB,QAARt4F,OAE9Cm2H,EAAapnF,EAAUwgD,cAAgBhxF,OAAOa,OAAO,GAAI2vC,EAAUwgD,eAAiBxwF,KAAKw6G,cAE/F,OADA4c,EAAW/1G,IAAMrhB,KAAK2T,MACd1S,GACJ,IAAK,YACL,IAAK,OACDjB,KAAK2W,KAAKu8E,WAAW4qB,aAAa99G,KAAKsgC,cAAe82F,GACtD,MACJ,IAAK,UACL,IAAK,KACDp3H,KAAK2W,KAAKu8E,WAAW0qB,WAAW59G,KAAKsgC,cAAe82F,GACpD,MACJ,IAAK,MACDp3H,KAAKw4H,aAAalmH,EAAMinF,SAAU69B,OAW9C53H,OAAAgC,eAAIk2H,EAAAx3H,UAAA,OAAI,KAAR,WACI,OAAOF,KAAK+nB,QAAQpR,sCAMxBnX,OAAAgC,eAAIk2H,EAAAx3H,UAAA,WAAQ,KAAZ,eACU0hB,EAAS5hB,KAAK2W,KAAK8hH,gBAAgBz4H,KAAKiX,SAAShD,WAAWL,WAClE,OAAQgO,GAAUA,EAAOzE,UAAaC,GAAS/C,wCAG3Cq9G,EAAAx3H,UAAAs4H,aAAR,SAAqBl9E,EAAgB87E,GACjC,GAAI97E,EACAt7C,KAAK2W,KAAKu8E,WAAWgqB,mBAAmBl9G,KAAKsgC,cAAe82F,QAE5D,GAAIp3H,KAAK2T,QAAU3T,KAAK2W,KAAK+hH,SAAS/3H,OAAS,GAAKX,KAAK2W,KAAKgiH,qBAC1D34H,KAAK2W,KAAKu8E,WAAW/J,cAAc,GAAG,OACnC,KACGyvC,EAAiB54H,KAAK2W,KAAKu8E,WAAW2lC,mBACtCC,EAAUF,EAAeA,EAAej4H,OAAS,GACvDy2H,EAAWx1G,OAASk3G,EAAQxd,kBAAoBwd,EAAQpiH,OAAOsT,aAAe8uG,EAAQ9uG,aACtFhqB,KAAK2W,KAAKu8E,WAAWiqB,WAAWn9G,KAAKsgC,cAAe82F,KAKxDM,EAAAx3H,UAAAq4H,yBAAR,SAAiCt3H,EAAKq6C,EAAey9E,GACjD,YADkC,IAAAz9E,IAAAA,GAAA,QAAe,IAAAy9E,IAAAA,GAAA,GAC7Cz9E,GACuE,IAAhE,CAAC,OAAQ,KAAM,YAAa,UAAW,OAAOhqC,QAAQrQ,KAE1DjB,KAAK88G,YAAY77G,EAAK83H,KAA8E,IAAhE,CAAC,OAAQ,KAAM,YAAa,UAAW,OAAOznH,QAAQrQ,IAG7Fy2H,EAAAx3H,UAAA48G,YAAR,SAAoB77G,EAAKu5E,GACrB,OAAOA,IAA+G,IAArG,CAAC,OAAQ,QAAS,KAAM,OAAQ,YAAa,aAAc,UAAW,aAAalpE,QAAQrQ,wBArRnH6wC,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,uBACVqjC,SAAA,07DATKpyB,UAEA+xF,UAXLpuE,EAAAA,kBAFA2L,EAAAA,6EA0CCwH,EAAAA,UAASzoC,KAAA,CAAC,iCAAkC,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,6CAMzEF,EAAAA,UAASzoC,KAAA,CAAC,kCAAmC,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,uBAM1EhoC,EAAAA,qBAmBAA,EAAAA,sBASAA,EAAAA,wBASAA,EAAAA,4BASA8nC,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE2oC,UAAQ,sBASpCxH,EAAAA,YAAWnhC,KAAA,CAAC,wCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAqBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0BASZY,EAAAA,aAAYZ,KAAA,CAAC,yBAQbY,EAAAA,aAAYZ,KAAA,CAAC,2BAyCbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAwF9B0pH,EA1SA,MCUW,UACC,QAIZsB,GAAA,WAAA,SAAAA,KAkpBA,OA9oBIx5H,OAAAgC,eAAIw3H,EAAA94H,UAAA,wBAAqB,KAAzB,WACI,OAAOub,KAAK4rB,MAAMrnC,KAAK2W,KAAKsiH,cAAc75E,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAc44F,8CAG/F15H,OAAAgC,eAAIw3H,EAAA94H,UAAA,6BAA0B,KAA9B,WACI,OAAOub,KAAKC,KAAK1b,KAAK2W,KAAKwiH,gBAAgBj+F,iDAG/C17B,OAAAgC,eAAIw3H,EAAA94H,UAAA,kCAA+B,KAAnC,WACI,OAAOF,KAAK2W,KAAKqhH,wBAAwB54E,GAAG/qC,SAASiiC,eAAexS,QAAQxD,+CAGzE04F,EAAA94H,UAAAiwH,iBAAP,SAAwB3uG,OAChB43G,EAAUp5H,KAAK2W,KAAKyK,YAAY9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,KAAaxhB,KAAK2W,KAAKyK,YAAYuqB,MAInG,OAHKytF,IACDA,EAAUp5H,KAAK2W,KAAK0iH,iBAAiB/hH,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,KAE9D43G,EAAQE,YAGZN,EAAA94H,UAAAq5H,uBAAP,SAA8Bv3G,OACpBJ,EAAS5hB,KAAK2W,KAAKqoG,gBAAgB1nG,KAAK,SAAC4I,GAAQ,OAACA,EAAIqlG,aAAerlG,EAAI8J,eAAiBhI,IAChG,OAAOhiB,KAAK2W,KAAKooG,cAAcp+G,OAASX,KAAK2W,KAAKqoG,gBAAgBhlG,OAAO,SAAC7Y,GAAM,OAACA,EAAEokH,cAAaj0G,QAAQsQ,GACpGI,GAGDg3G,EAAA94H,UAAAs3H,qBAAP,SAA4B11G,GACxB,OAAO9hB,KAAKw5H,yBAAyB13G,IAAgB9hB,KAAKy5H,wBAAwB33G,IAG/Ek3G,EAAA94H,UAAAs5H,yBAAP,SAAgC13G,OACtB43G,EAAmC15H,KAAK05H,WAC9C,GAAI15H,KAAK25H,eAAe73G,EAAa43G,GACjC,OAAO,MAEL/lH,EAAQ3T,KAAKu5H,uBAAuBz3G,GAC1C,OAAO9hB,KAAK45H,uBAAyBF,EAAS11E,oBAAoBrwC,EAAQ,GAAK3T,KAAK65H,4BAGjFb,EAAA94H,UAAAu5H,wBAAP,SAA+B33G,OACrB43G,EAAW15H,KAAK05H,WACtB,GAAI15H,KAAK25H,eAAe73G,EAAa43G,GACjC,OAAO,MAEL/lH,EAAQ3T,KAAKu5H,uBAAuBz3G,GAC1C,OAAO9hB,KAAK65H,4BAA8BH,EAAS11E,oBAAoBrwC,IAGnEqlH,EAAA94H,UAAAw5H,SAAR,WAOI,OALI15H,KAAK2W,KAAKyK,YAAYzgB,OAAS,EACpBX,KAAK2W,KAAKyK,YAAYuqB,MAAM2tF,WAE5Bt5H,KAAK2W,KAAKwiH,iBAKrBH,EAAA94H,UAAAy5H,eAAR,SAAuB73G,EAAqB43G,OAClCvJ,EAAmBuJ,EAASp6E,YAC5B19B,EAAS5hB,KAAK2W,KAAKsJ,WAAWjG,OAAO,SAAA7Y,GAAK,OAACA,EAAEokH,cAAajuG,KAAK,SAAC4I,GAAQ,OAAAA,EAAI8J,eAAiBlI,IACnG,OAASquG,EAAiBn1F,aAAepZ,EAAO0I,QAGpD9qB,OAAAgC,eAAWw3H,EAAA94H,UAAA,qBAAkB,KAA7B,WACI,OAAO45H,EAAI95H,KAAK2W,KAAKooG,cAAkB/+G,KAAK2W,KAAKqoG,iBAAiBhlG,OAAO,SAAA7Y,GAAK,OAACA,EAAEokH,+CAG9EyT,EAAA94H,UAAA65H,gBAAP,SAAuBv4G,GACnB,OAAOxhB,KAAK2W,KAAKwM,aAAgBnjB,KAAK2W,KAAK8M,eAAiBzjB,KAAK2W,KAAK8M,cAAc9P,QAAU6N,GAG3Fw3G,EAAA94H,UAAA85H,iBAAP,SAAwBxyH,EAAmBwa,OAGjCi4G,EAAcj6H,KAAK64H,mBACnBryE,EAAQxkC,EACVlB,EAAM,EACNu9D,EAAO,EACP7tE,GAAU,EACVhJ,IAAc0yH,IACdp5G,EAAM,EACNu9D,GAAQ,GACD72E,IAAc0yH,KACrBp5G,EAAMm5G,EAAYt5H,OAAS,EAC3B09E,EAAO,GAEX,IAAK,IAAIl9E,EAAIqlD,EAAQrlD,EAAIk9E,GAASv9D,EAAK3f,GAAKk9E,EAAM,CAE9C,GADe47C,EAAY94H,GAChB85G,SAAU,CACjBzqG,EAASrP,EACT,OAGR,OAAOqP,GAGJwoH,EAAA94H,UAAAm3H,6BAAP,SAAoC71G,EAAUQ,EAAoBm4G,QAAA,IAAAA,IAAAA,GAAA,OACxDC,EAAep6H,KAAKq6H,gBAAgBr4G,EAAoBm4G,GAC9D,OAAOn6H,KAAK2W,KAAK2pB,cAAcmqC,cACxB2vD,EAAY,mBAAmB54G,EAAQ,yBAAyBQ,EAAkB,OAGtFg3G,EAAA94H,UAAA+oF,oBAAP,SAA2BnlD,EAASw2F,OAC1B94G,EAAW84G,EAAaj5G,IACxBW,EAAqBs4G,EAAa14G,OAClCu4G,EAAYG,EAAaC,aAC3Bv6H,KAAK2W,KAAKqoG,gBAAgBh/G,KAAK2W,KAAKqoG,gBAAgBr+G,OAAS,GAAGqpB,eAAiBhI,IAGjFhiB,KAAKw5H,yBAAyBx3G,EAAqB,GAC/C8hB,EAAQhH,UAAUyD,SAAS,8BAAgCuD,EAAQhH,UAAUyD,SAAS,iCAClFvgC,KAAKy5H,wBAAwBz3G,EAAqB,GAClD8hB,EAAQkhB,mBAAmBsoB,kBAAkB/5B,MAAM,CAAEC,eAAe,KAEpExzC,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC7DxzC,KAAK2W,KAAKsiH,cAAc76E,YACnBvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACPjB,EAAQkhB,mBAAmBsoB,kBAAkB/5B,MAAM,CAAEC,eAAe,MAE5ExzC,KAAKmwH,iBAAiB3uG,GAAU6hC,SAAS,IAG7Cvf,EAAQkhB,mBAAmBzR,MAAM,CAAEC,eAAe,IAGtDxzC,KAAKy3H,8BAA8Bj2G,EAAUQ,EAAqB,EAAGm4G,KAItEnB,EAAA94H,UAAAgpF,mBAAP,SAA0BplD,EAASw2F,OACzB94G,EAAW84G,EAAaj5G,IACxBW,EAAqBs4G,EAAa14G,OAClCu4G,EAAYG,EAAaC,aAC/B,GAA2B,IAAvBv4G,EAAJ,KAGMrO,EAAQ3T,KAAKu5H,uBAAuBv3G,EAAqB,IAC1D8hB,EAAQ22F,wBAA0Bz6H,KAAK2W,KAAKooG,cAAcp+G,SAAsB,IAAZgT,EACrEmwB,EAAQb,WAAWw3F,uBAAuBlnF,MAAM,CAAEC,eAAe,IACzDxzC,KAAKy5H,wBAAwBz3G,EAAqB,GAG1D8hB,EAAQ22F,uBAAuBlnF,MAAM,CAAEC,eAAe,IAFtDxzC,KAAKy3H,8BAA8Bj2G,EAAUQ,EAAqB,EAAGm4G,KAOtEnB,EAAA94H,UAAAw6H,qBAAP,SAA4Bl5G,EAAkBm5G,OACtCC,EAA0B56H,KAAKg6H,iBAAiBE,GAAoBS,EAA4B,GACpG,IAAiC,IAA7BC,EAAgC,CAChC,GAAI56H,KAAK2W,KAAKqgH,YAAYr2H,OAItB,OAFCX,KAAS,KAAS+nB,QAAQ9F,oBAC3BjiB,KAAK2W,KAAKqgH,YAAYC,KAAKnzF,QAAQxD,cAAciT,QAIjDqnF,EAA0B56H,KAAK2W,KAAK2gH,wBAI5Ct3H,KAAK66H,oBAAoBr5G,EAAUo5G,IAGhC5B,EAAA94H,UAAA46H,iBAAP,SAAwBt5G,EAAkBm5G,OAClCI,EAA0B/6H,KAAKg6H,iBAAiBE,GAAqBS,EAA4B,GACrG,IAAiC,IAA7BI,EAAgC,CAChC,GAAK/6H,KAAK2W,KAAKqgH,YAAYr2H,OAIvB,OAFCX,KAAS,KAAS+nB,QAAQ9F,oBAC3BjiB,KAAK2W,KAAKqgH,YAAYrrF,MAAM7H,QAAQxD,cAAciT,QAIlDwnF,EAA0B/6H,KAAK2W,KAAK4gH,yBAG5Cv3H,KAAK66H,oBAAoBr5G,EAAUu5G,IAGhC/B,EAAA94H,UAAA26H,oBAAP,SAA2Br5G,EAAkBM,GACrC9hB,KAAKw3H,qBAAqB11G,GAC1B9hB,KAAKq3H,6BAA6B71G,EAAUM,GAAayxB,QAEzDvzC,KAAKy3H,8BAA8Bj2G,EAAUM,IAI9Ck3G,EAAA94H,UAAAipF,cAAP,SAAqB3nE,EAAU24G,QAAA,IAAAA,IAAAA,GAAA,OAEvBa,GADYb,EAAYn6H,KAAK2W,KAAK0iH,iBAAmBr5H,KAAK2W,KAAKyK,aAC1C9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,IAC/C44G,EAAep6H,KAAKq6H,gBAAgB,EAAGF,GAC7C,GAAKa,EAAL,KAEIC,GADJD,EAAaA,EAAW16F,eACGmqC,cAAc2vD,GACrCp6H,KAAK2W,KAAKooG,cAAcp+G,QAA8C,IAApCX,KAAK65H,2BACvCoB,EAAU1nF,MAAM,CAAEC,eAAe,KAEjCxzC,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC7DxzC,KAAK2W,KAAKsiH,cAAc76E,YACnBvZ,KAAK8G,EAAAA,SACL5G,UAAU,YACPk2F,EAAYD,EAAWvwD,cAAc2vD,IAC3B7mF,MAAM,CAAEC,eAAe,MAEzCxzC,KAAKmwH,iBAAiB3uG,GAAU6hC,SAAS,MAI1C21E,EAAA94H,UAAAkpF,aAAP,SAAoB5nE,EAAU24G,GAA9B,IAAAvlH,EAAA5U,UAA8B,IAAAm6H,IAAAA,GAAA,OACpBxmH,EAAQ3T,KAAK2W,KAAKqoG,gBAAgBh/G,KAAK2W,KAAKqoG,gBAAgBr+G,OAAS,GAAGqpB,aAE1EgxG,GADYb,EAAYn6H,KAAK2W,KAAK0iH,iBAAmBr5H,KAAK2W,KAAKyK,aAC1C9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,IACrD,GAAKw5G,EAEL,GADAA,EAAaA,EAAW16F,cACpBtgC,KAAKw5H,yBAAyB7lH,GAAQ,KAChCunH,EAAWF,EAAW1sD,iBAAiBtuE,KAAKq6H,iBAAiB,EAAGF,IACtEe,EAASA,EAASv6H,OAAS,GAAG4yC,MAAM,CAAEC,eAAe,SAErDxzC,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC7DxzC,KAAK2W,KAAKsiH,cAAc76E,YACnBvZ,KAAK8G,EAAAA,SACL5G,UAAU,eACDm2F,EAAWF,EAAW1sD,iBAAiB15D,EAAKylH,iBAAiB,EAAGF,IACtEe,EAASA,EAASv6H,OAAS,GAAG4yC,MAAM,CAAEC,eAAe,MAE7DxzC,KAAKmwH,iBAAiB3uG,GAAU6hC,SAASrjD,KAAKu5H,uBAAuB5lH,KAItEqlH,EAAA94H,UAAAy9G,YAAP,SAAmB37F,GAAnB,IAAApN,EAAA5U,KACU25F,EAAc35F,KAAKm7H,wBACnBC,EAAiBp7H,KAAK2W,KAAKqhH,wBAAwB14E,YACnD86E,EAAep6H,KAAKq6H,gBAAgBr4G,GACxBhiB,KAAK2W,KAAKqhH,wBAAwB5zE,kBAAkBu1C,GAAa,IAClEyhC,EAAe3/F,UACdz7B,KAAK2W,KAAK2pB,cAAcguC,iBAC/B8rD,EAAY,uBAAuBp4G,EAAkB,MACrD,GAAmBuxB,SAE3BvzC,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC5DxzC,KAAK2W,KAAKqhH,wBAAwB30E,UAA0B,IAAjBs2C,EAAqBA,EAAc,GAC9E35F,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SAAS5G,UAAU,eACfpjB,EAAQ/M,EAAK+B,KAAK2pB,cAAcguC,iBAC/B8rD,EAAY,uBAAuBp4G,EAAkB,MACxDL,EAAMhhB,OAAS,GAAMghB,EAAM,GAAmB4xB,YAK1DylF,EAAA94H,UAAAi7H,sBAAR,WAAA,IAAAvmH,EAAA5U,KAEI,OADWA,KAAK2W,KAAK+hH,SACX5/G,UAAU,SAAAK,GAAO,OAACvE,EAAK+B,KAAK0kH,gBAAgBliH,MAGlD6/G,EAAA94H,UAAAo7H,qBAAR,WAEI,QADI96H,EAAIR,KAAK2W,KAAK+hH,SAAS/3H,OACpBH,KAAK,KACF2Y,EAAMnZ,KAAK2W,KAAK+hH,SAASl4H,GAC/B,IAAKR,KAAK2W,KAAK0kH,gBAAgBliH,GAC1B,OAAO3Y,IAKbw4H,EAAA94H,UAAA29G,eAAP,SAAsB77F,GAAtB,IAAApN,EAAA5U,KACU25F,EAAc35F,KAAKs7H,uBACnBC,EAAYv7H,KAAK2W,KAAKqhH,wBAAwB5zE,kBAAkBu1C,GAAa,GAC7EyhC,EAAiBp7H,KAAK2W,KAAKqhH,wBAAwB14E,YACnD86E,EAAep6H,KAAKq6H,gBAAgBr4G,GAC1C,GAAoC,IAAhCo5G,EAAezwF,cACfywF,EAAe3/F,YAAc8/F,EAAW,KAClC55G,EAAQ3hB,KAAK2W,KAAK2pB,cAAcguC,iBAC/B8rD,EAAY,uBAAuBp4G,EAAkB,MAC3DL,EAAMA,EAAMhhB,OAAS,GAAmB4yC,aAE1CvzC,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC5DxzC,KAAK2W,KAAKqhH,wBAAwB30E,UAA0B,IAAjBs2C,EAAqBA,EAAc35F,KAAK2W,KAAK+hH,SAAS/3H,OAAS,GAC1GX,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SAAS5G,UAAU,eACfpjB,EAAQ/M,EAAK+B,KAAK2pB,cAAcguC,iBAC/B8rD,EAAY,uBAAuBp4G,EAAkB,MACxDL,EAAMhhB,OAAS,GACdghB,EAAMA,EAAMhhB,OAAS,GAAmB4yC,WAMtDylF,EAAA94H,UAAA09G,WAAP,SAAkBod,EAAYV,GAA9B,IAAA1lH,EAAA5U,KACUw7H,EAAkBlB,EAAaj5G,IAC/BW,EAAqBs4G,EAAa14G,OACxC,GAAwB,IAApB45G,EAAJ,KAGMC,EAAqBhiF,SAASz5C,KAAK07H,gCAAgCr4H,MAAMs3B,IAAK,KAC/EqgG,EAAWP,wBACZO,EAAWP,uBAAuBkB,UAAYlgH,KAAKutB,IAAIyyF,IACxDz7H,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC5DxzC,KAAK2W,KAAKqhH,wBAAwB30E,SAASm4E,EAAkB,GAC7Dx7H,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SACL5G,UAAU,eACD62F,EAAMZ,EAAW3rE,QAAQh6C,cACzB8L,EAAcvM,EAAKinH,iBAErBb,EADAY,IAAQz6G,GAAuB,yBAARy6G,EACVhnH,EAAKknH,cAAcN,EAAiBI,GAEpChnH,EAAK+B,KAAK2pB,cAAcmqC,cACjC,uCAAuC+wD,EAAe,MAE9D5mH,EAAKmnH,qBAAqBf,EAAYh5G,MAG9ChiB,KAAK+7H,qBAAqBf,EAAYh5G,KAIpCg3G,EAAA94H,UAAA67H,qBAAV,SAA+BC,EAAch6G,GACzChiB,KAAKi8H,UAAUD,EAAavB,uBAAwBz4G,IAGjDg3G,EAAA94H,UAAA49G,aAAP,SAAoBkd,EAAYV,GAAhC,IAAA1lH,EAAA5U,KACUw7H,EAAkBlB,EAAaj5G,IAC/BW,EAAqBs4G,EAAa14G,OACxC,GAAI45G,IAAoBx7H,KAAK2W,KAAK+hH,SAAS/3H,OAAS,IAC3B,IAApB66H,GAA8D,yBAArCR,EAAW3rE,QAAQh6C,eADjD,KAKMoe,EAAYzzB,KAAK2W,KAAKqhH,wBAAwB7zE,UAAUq3E,EAAkB,GAC1EU,EAAkBl8H,KAAK2W,KAAK69G,WAAa/4G,KAAKC,KAAK1b,KAAK2W,KAAK69G,YAAc,EAC3E2H,EAAqBnB,EAAWh2E,mBAClCg2E,EAAWh2E,mBAAmB22E,UAAYloG,EAAYgmB,SAASz5C,KAAK07H,gCAAgCr4H,MAAMs3B,IAAK,IAC/GuhG,EAAkBzoG,EAEtB,GADDzzB,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IACxD0oF,GAAmBA,EAAkBC,EAAoB,KACnDC,EAAYZ,EAAkB,EACpCx7H,KAAK2W,KAAKqhH,wBAAwB30E,SAAS+4E,GAC3Cp8H,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACPi2F,EAAapmH,EAAKynH,kBAAkBD,GACpCxnH,EAAKqnH,UAAUjB,EAAYh5G,UAGnChiB,KAAKs8H,iBAAiBtB,EAAYh5G,KAIhCg3G,EAAA94H,UAAA+7H,UAAV,SAAoBjB,EAAYh5G,GAC5B,GAAyC,yBAArCg5G,EAAW3rE,QAAQh6C,cACnB2lH,EAAWznF,YACR,KACGgnF,EAAoD,yBAArCS,EAAW3rE,QAAQh6C,cACxC,GAAIrV,KAAKw3H,qBAAqBx1G,GAAqB,KACzCo4G,EAAep6H,KAAKq6H,gBAAgBr4G,EAAoBu4G,GACxDv5G,EAAOg6G,EAAWvwD,cAAiB2vD,EAAY,uBAAuBp4G,EAAkB,MAE9F,OADAhB,EAAKuyB,QACEvyB,EAEXhhB,KAAKy3H,8BAA8Bh+E,SAC/BuhF,EAAWn+D,aAAa,iBAAkB,IAAK76C,EAAoBu4G,KAIrEvB,EAAA94H,UAAAo8H,iBAAV,SAA2BtB,EAAYh5G,GACnC,OAAOhiB,KAAKi8H,UAAUjB,EAAWh2E,mBAAoBhjC,IAGlDg3G,EAAA94H,UAAAq9G,cAAP,WAAA,IAAA3oG,EAAA5U,KACU25F,EAAc35F,KAAKm7H,wBACnBI,EAAYv7H,KAAK2W,KAAKqhH,wBAAwB5zE,kBAAkBu1C,GAAa,GAC5D35F,KAAK2W,KAAKqhH,wBAAwB14E,YACtC7jB,YAAc8/F,EAC7Bv7H,KAAKmpF,cAAcnpF,KAAK2W,KAAKyK,YAAYuqB,MAAMh4B,QAE/C3T,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC7DxzC,KAAK2W,KAAKqhH,wBAAwB30E,UAA0B,IAAjBs2C,EAAqBA,EAAc,GAC9E35F,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SAAS5G,UAAU,WACrBnwB,EAAKu0E,cAAcv0E,EAAK+B,KAAKyK,YAAYuqB,MAAMh4B,WAKxDqlH,EAAA94H,UAAAm9G,aAAP,WAAA,IAAAzoG,EAAA5U,KACU25F,EAAc35F,KAAKs7H,uBACnBC,EAAYv7H,KAAK2W,KAAKqhH,wBAAwB5zE,kBAAkBu1C,GAAa,GAC7EyhC,EAAiBp7H,KAAK2W,KAAKqhH,wBAAwB14E,YACzD,GAAoC,IAAhC87E,EAAezwF,cACfywF,EAAe3/F,YAAc8/F,EAAW,KAClC5kB,EAAO32G,KAAKu8H,aACZ/6G,EAAWi4B,SAASk9D,EAAKA,EAAKh2G,OAAS,GAAGk8D,aAAa,iBAAkB,IAC/E78D,KAAKopF,aAAa5nE,QAEnBxhB,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC5DxzC,KAAK2W,KAAKqhH,wBAAwB30E,UAA0B,IAAjBs2C,EAAqBA,EAAc35F,KAAK2W,KAAK+hH,SAAS/3H,OAAS,GAC1GX,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SAAS5G,UAAU,eACf4xE,EAAO/hG,EAAK2nH,aAClB,GAAI5lB,EAAKh2G,OAAS,EAAG,KACX6gB,EAAWi4B,SAASk9D,EAAKA,EAAKh2G,OAAS,GAAGk8D,aAAa,iBAAkB,IAC/EjoD,EAAKw0E,aAAa5nE,OAM/Bw3G,EAAA94H,UAAAs8H,oBAAP,WAAA,IAAA5nH,EAAA5U,KACUo7H,EAAiBp7H,KAAK2W,KAAKqhH,wBAAwB14E,YACzD,GAAoC,IAAhC87E,EAAezwF,cACfywF,EAAe3/F,YAAc2/F,EAAezwF,aAAe3qC,KAAK2W,KAAKqhH,wBAAwBz4E,oBAAqB,KAC5G/9B,EAAWxhB,KAAK2W,KAAK+hH,SAAS/3H,OAAS,EACvC0gB,EAAMrhB,KAAK2W,KAAK2pB,cAAcmqC,cAAc,mBAAmBjpD,EAAQ,MAC7E,GAAIH,GAAqC,yBAA9BA,EAAIguC,QAAQh6C,cAEnB,YADAgM,EAAIkyB,YAGF4mF,KAAa94G,GAAqC,yBAA9BA,EAAIguC,QAAQh6C,eACtCrV,KAAKopF,aAAa5nE,EAAU24G,QAE5Bn6H,KAAK2W,KAAKqhH,wBAAwB30E,SAASrjD,KAAK2W,KAAK+hH,SAAS/3H,OAAS,GACvEX,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SAAS5G,UAAU,eACfvjB,EAAW5M,EAAK+B,KAAK+hH,SAAS/3H,OAAS,EACvC0gB,EAAMzM,EAAK+B,KAAK2pB,cAAcmqC,cAAc,mBAAmBjpD,EAAQ,MAC7E,GAAIH,GAAqC,yBAA9BA,EAAIguC,QAAQh6C,cACnBgM,EAAIkyB,YADR,KAIM4mF,KAAa94G,GAAqC,yBAA9BA,EAAIguC,QAAQh6C,eACtCT,EAAKw0E,aAAa5nE,EAAU24G,OAKrCnB,EAAA94H,UAAAi9G,WAAP,SAAkB6e,EAAc1B,OACtB94G,EAAW84G,EAAaj5G,IACxBW,EAAqBs4G,EAAa14G,OAClC24G,EAAeD,EAAaC,aAClC,IAAIA,GAA6B,IAAb/4G,GAChBxhB,KAAK2W,KAAKqoG,gBAAgBh/G,KAAK2W,KAAKqoG,gBAAgBr+G,OAAS,GAAGqpB,eAAiBhI,EAIrF,GAAIhiB,KAAK+5H,gBAAgBv4G,GACrBxhB,KAAK86H,iBAAiBt5G,EAAUQ,QAIpC,GAAIhiB,KAAK2W,KAAKqoG,gBAAgBh/G,KAAK2W,KAAKqoG,gBAAgBr+G,OAAS,GAAGqpB,eAAiBhI,EAAoB,KAC/Fy6G,EAAQz8H,KAAK2W,KAAK8K,QAAQnK,KAAK,SAAA+J,GAAO,OAAAA,EAAI1N,QAAU6N,EAAW,IACjExhB,KAAK2W,KAAK8K,QAAQnK,KAAK,SAAA+J,GAAO,OAAAA,EAAI1N,QAAU6N,EAAW,IACvDxhB,KAAK2W,KAAK0iH,iBAAiB/hH,KAAK,SAAA+J,GAAO,OAAAA,EAAI1N,QAAU6N,EAAW,IACpE,GAAIA,IAAaxhB,KAAK2W,KAAK+hH,SAAS/3H,OAAS,GAAKX,KAAK2W,KAAKgiH,qBAExD,YADA34H,KAAKmpF,cAAc,GAAG,GAGtBszC,GACAz8H,KAAK89G,aAAake,EAAc,CAAE36G,IAAKG,EAAUI,OAAQ,QAE1D,KACGZ,EAAOhhB,KAAKq3H,6BAA6B71G,EAAUQ,EAAoBu4G,GACzEv5G,GACAhhB,KAAKipF,oBAAoBjoE,EAAMs5G,KAKpCtB,EAAA94H,UAAAw8H,sBAAP,SAA6BC,GACzB,GAAI38H,KAAK2W,KAAKutG,iBAAiB0Y,mBAC3B58H,KAAK2W,KAAKutG,iBAAiB2Y,gCAD/B,KAKMt3G,EAAUvlB,KAAK2W,KAAKutG,iBAAiB4Y,0BACrCnjC,EAAcgjC,EAAU,EAAIp3G,EAAQ5kB,OAAS,EAC7CqpB,EAAezE,EAAQo0E,GAAa3vE,cACxB2yG,EAAU38H,KAAKy5H,wBAAwBzvG,GAAgBhqB,KAAKw5H,yBAAyBxvG,IAEnGhqB,KAAK2W,KAAKutG,iBAAiB6Y,oBAAoBx3G,EAAQo0E,IAAc,GAErE35F,KAAK2W,KAAKutG,iBAAiB8Y,mBAAmBz3G,EAAQo0E,IAAc,KAIrEq/B,EAAA94H,UAAA+8H,uBAAP,SAA8Br7G,EAA4BggB,OAChD/P,EAAO7xB,KAAK2W,KAAKutG,iBAAiB4Y,0BAClCI,EAAsBrrG,EAAKvgB,QAAQsQ,GAAU,EAC7CoI,EAAepI,EAAOoI,aAC5B,GAAqB,IAAjBA,GAAsBkzG,EAAsB,EAAhD,KAEUC,EAAqBn9H,KAAKo9H,iCAC3BD,GAAsBv7G,IAAWu7G,GAClCv7F,EAAUqI,qBAJlB,KAQMozF,EAAaxrG,EAAKqrG,GAClBI,EAAmBD,EAAWrzG,aAEhCkzG,GAAuB,GAAKlzG,EAAe,IAAMhqB,KAAKy5H,wBAAwB6D,KAAsB17G,EAAO0I,SAC3GsX,EAAUqI,iBACVjqC,KAAK2W,KAAKutG,iBAAiB8Y,mBAAmBK,GAAY,MAI3DrE,EAAA94H,UAAAq9H,4BAAP,SAAmC37F,GAC/B,GAAI5hC,KAAK2W,KAAK8K,QAAQ9gB,OAAS,EAAG,CAC9B,GAAIX,KAAK2W,KAAK8K,QAAQzH,OAAO,SAAAqH,GAAO,OAAAA,aAAeq2G,KAA4B/2H,OAAS,EAEpF,YADAihC,EAAU6C,kBAGdzkC,KAAKu9G,qBACEv9G,KAAK2W,KAAKgiH,sBACjB34H,KAAKmpF,cAAc,GAAG,GAE1BvnD,EAAUqI,kBAGP+uF,EAAA94H,UAAAs9H,uBAAP,SAA8B57G,EAA4BggB,OAChD/P,EAAO7xB,KAAK2W,KAAKutG,iBAAiB4Y,0BAClCW,EAAsB5rG,EAAKvgB,QAAQsQ,GAAU,EACnD,GAAI67G,GAAuBz9H,KAAK2W,KAAKutG,iBAAiB4Y,0BAA0Bn8H,OAE5EX,KAAKu9H,4BAA4B37F,OAFrC,KAKM87F,EAAa7rG,EAAK4rG,GAClBE,EAAmBD,EAAW1zG,aAC/BpI,EAAO0I,QAAWtqB,KAAKw5H,yBAAyBmE,GAG1C/7G,IAAW5hB,KAAK49H,iCAAoC59H,KAAKw5H,yBAAyBmE,KACzF39H,KAAK2W,KAAKutG,iBAAiB8Y,mBAAmBU,GAAY,GAC1D97F,EAAU6C,oBAJV7C,EAAUqI,iBACVjqC,KAAK2W,KAAKutG,iBAAiB8Y,mBAAmBU,GAAY,MAO1D1E,EAAA94H,UAAA09H,8BAAR,eACUC,EACF79H,KAAK2W,KAAKooG,cAAc/kG,OAAO,SAAAkG,GAAO,OAAEA,EAAe,aAAKA,EAAIs/E,aACpE,OAAOq+B,EAAuBA,EAAuBl9H,OAAS,IAG1Dq4H,EAAA94H,UAAAk9H,+BAAR,WACI,OAAOp9H,KAAK2W,KAAKooG,cAAc/kG,OAAO,SAAAkG,GAAO,OAAEA,EAAe,aAAKA,EAAIs/E,aAAY,IAGhFw5B,EAAA94H,UAAAg9G,mBAAP,SAA0B8e,EAAc1B,OAC9B94G,EAAW84G,EAAaj5G,IACxBW,EAAqBs4G,EAAa14G,OAClCu4G,EAAYG,EAAaC,aAC/B,GAAIJ,GAA0B,IAAb34G,GAAyC,IAAvBQ,GAA4BhiB,KAAK2W,KAAK8K,QAAQ9gB,OAC7EX,KAAKw8H,2BAIT,GAAIx8H,KAAK+5H,gBAAgBv4G,GACrBxhB,KAAK06H,qBAAqBl5G,EAAUQ,QAIxC,GAA2B,IAAvBA,EACiB,IAAbR,GAAkBxhB,KAAK2W,KAAKmnH,gBAAkB99H,KAAK2W,KAAKonH,aAAeC,GAAW9kB,YAClFl5G,KAAK08H,wBAEL18H,KAAK49G,WAAWoe,EACZ,CACI36G,IAAKG,EACLI,OAAQ5hB,KAAK2W,KAAKqoG,gBAAgBh/G,KAAK2W,KAAKqoG,gBAAgBr+G,OAAS,GAAGqpB,mBAGjF,KACGhJ,EAAOhhB,KAAKq3H,6BAA6B71G,EAAUQ,EAAoBm4G,GACzEn5G,GACAhhB,KAAKkpF,mBAAmBloE,EAAMs5G,KAKnCtB,EAAA94H,UAAA+9H,4BAAP,SAAmCC,EAAwBl8G,OACjDy5G,EAAqBhiF,SAASz5C,KAAK07H,gCAAgCr4H,MAAMs3B,IAAK,IAC9EwjG,EAAYn+H,KAAK2W,KAAK0iH,iBAAiBr/G,OAAO,SAAAzZ,GAAK,OAAY,IAAZA,EAAEoT,QACtDhR,OAAO3C,KAAK2W,KAAK8K,QAAQ7O,WAAW0E,KAAK,SAAAlW,GAAK,OAAAA,EAAEuS,QAAUuqH,IACzDzqG,EAAYzzB,KAAK2W,KAAKqhH,wBAAwB7zE,UAAU+5E,GACxDhC,EAAkBl8H,KAAK2W,KAAK69G,WAAa/4G,KAAKC,KAAK1b,KAAK2W,KAAK69G,YAAc,EAC3E2H,EAAqBgC,EAAYA,EAAU79F,cAAcq7F,UAAYloG,EAAYgoG,EACnFS,EAAkBzoG,EACtB,UAAK0qG,GAAaA,EAAU79F,cAAcq7F,UAAYlgH,KAAKutB,IAAIyyF,IACxDS,GAAmBA,EAAkBC,IAOzCnD,EAAA94H,UAAAk+H,4BAAP,SAAmC58G,EAAkB68G,EAAyB/iD,GAC1Et7E,KAAK2W,KAAKqhH,wBAAwB30E,SAAS7hC,GAC3CxhB,KAAK2W,KAAKqhH,wBAAwB55E,YAC7BvZ,KAAK8G,EAAAA,SAAS5G,UAAU,WACrBu2C,OAIL09C,EAAA94H,UAAAu3H,8BAAP,SACIj2G,EAAkBQ,EAA4Bm4G,EAA4B7+C,GAD9E,IAAA1mE,EAAA5U,UACkD,IAAAm6H,IAAAA,GAAA,OACxCmE,EAAgBt+H,KAAKu5H,uBAAuBv3G,GACnDhiB,KAAKw6H,mBAAmBl6F,cAAciT,MAAM,CAAEC,eAAe,IAC5DxzC,KAAK2W,KAAKsiH,cAAc76E,YACnBvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACP,GAAIu2C,EACAA,QACG,KACGijD,EAAc3pH,EAAKyiH,6BAA6B71G,EAAUQ,EAAoBm4G,GAChFoE,GACAA,EAAYhrF,MAAM,CAAEC,eAAe,OAInDxzC,KAAKmwH,iBAAiB3uG,GAAU6hC,SAASi7E,IAGnCtF,EAAA94H,UAAAs6H,iBAAV,WACI,OAAOx6H,KAAK2W,MAGNqiH,EAAA94H,UAAA47H,cAAV,SAAwBnoH,EAAOjF,GAC3B,YAD2B,IAAAA,IAAAA,EAAW1O,KAAK67H,kBACpC77H,KAAK2W,KAAK2pB,cAAcmqC,cACxB/7D,EAAQ,mBAAmBiF,EAAK,OAGjCqlH,EAAA94H,UAAAm8H,kBAAV,SAA4BmC,GACxB,OAAOx+H,KAAK2W,KAAK8nH,MAAMn+F,cAAcmqC,cACjC,mBAAmB+zD,EAAS,OAG5BxF,EAAA94H,UAAAq8H,WAAR,eACU7tH,EAAW1O,KAAK67H,iBACtB,OAAO77H,KAAK2W,KAAK2pB,cAAcguC,iBAAiB5/D,IAG1CsqH,EAAA94H,UAAAm6H,gBAAV,SAA0BrwG,EAAuBmwG,GAC7C,YAD6C,IAAAA,IAAAA,GAAA,GACtCA,EAAY,wBAA0B,iBAGvCnB,EAAA94H,UAAA27H,eAAV,WACI,MAAO,oCAhpBd7pH,EAAAA,aAkpBDgnH,EAlpBA,GCdA0F,GAAe,CACX,CACI1+G,KAAM,aACN7d,MAAO,8KAIX,CACI6d,KAAM,WACN7d,MAAO,mwBAKX,CACI6d,KAAM,mBACN7d,MAAO,qvBAIX,CACI6d,KAAM,MACN7d,MAAO,6LAKX,CACI6d,KAAM,QACN7d,MAAO,0PAIX,CACI6d,KAAM,iBACN7d,MAAO,mPAKX,CACI6d,KAAM,YACN7d,MAAO,0mBAIX,CACI6d,KAAM,SACN7d,MAAO,iIAIX,CACI6d,KAAM,wBACN7d,MAAO,8KAIX,CACI6d,KAAM,eACN7d,MAAO,+JAKX,CACI6d,KAAM,WACN7d,MAAO,gNAIX,CACI6d,KAAM,YACN7d,MAAO,2NAIX,CACI6d,KAAM,WACN7d,MAAO,8cAKX,CACI6d,KAAM,cACN7d,MAAO,8WAIX,CACI6d,KAAM,UACN7d,MAAO,yMAIX,CACI6d,KAAM,UACN7d,MAAO,odAKX,CACI6d,KAAM,aACN7d,MAAO,6XAKX,CACI6d,KAAM,YACN7d,MAAO,2UAMX,CACI6d,KAAM,qBACN7d,MAAO,8KAIX,CACI6d,KAAM,YACN7d,MAAO,wJAIX,CACI6d,KAAM,aACN7d,MAAO,0XAKX,CACI6d,KAAM,YACN7d,MAAO,wUAMX,CACI6d,KAAM,YACN7d,MAAO,2TAIX,CACI6d,KAAM,YACN7d,MAAO,iOAIX,CACI6d,KAAM,mBACN7d,MAAO,+NAKX,CACI6d,KAAM,cACN7d,MAAO,0SAKX,CACI6d,KAAM,aACN7d,MAAO,oZAKX,CACI6d,KAAM,YACN7d,MAAO,iWAMX,CACI6d,KAAM,QACN7d,MAAO,ySAKX,CACI6d,KAAM,UACN7d,MAAO,mPAKX,CACI6d,KAAM,YACN7d,MAAO,2RAKX,CACI6d,KAAM,MACN7d,MAAO,iOAIX,CACI6d,KAAM,QACN7d,MAAO,wRAKX,CACI6d,KAAM,UACN7d,MAAO,4dCrMf,OANA,WAIWnC,KAAAotF,YAAa,EACbptF,KAAAq7F,WAAY,MAMvBsjC,GAAA,WAsBI,SAAAA,EAAoB52G,EAA+EkvD,GAA/Ej3E,KAAA+nB,QAAAA,EAA+E/nB,KAAAi3E,YAAAA,EAnB3Fj3E,KAAA4+H,yBAA2B,IAAIruH,IAC/BvQ,KAAA6+H,qBAAsB,EACtB7+H,KAAAu/B,SAAW,IAAIC,EAAAA,QACfx/B,KAAA8+H,aAAc,EACd9+H,KAAA++H,uBAAyB,IAAIzuH,IAE7BtQ,KAAAg/H,kBAAoB,EACpBh/H,KAAAi/H,wBAAyB,EAG1Bj/H,KAAA48H,oBAAqB,EACrB58H,KAAAk/H,eAAqC,KACrCl/H,KAAAm/H,mBAA2C,KAC3Cn/H,KAAAo/H,cAAoC,KACpCp/H,KAAAq/H,iBAAkB,EAClBr/H,KAAAs/H,uBAAyB,IAAIhvH,IAmexC,OA7dIquH,EAAAz+H,UAAAsmC,YAAA,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAGlBjnC,OAAAgC,eAAWm9H,EAAAz+H,UAAA,wBAAqB,KAAhC,WACI,OAAOu5C,SAASz5C,KAAK2W,KAAKsiH,cAAc75E,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAc44F,YAAa,qCAG1G15H,OAAAgC,eAAWm9H,EAAAz+H,UAAA,6BAA0B,KAArC,WACI,OAAOF,KAAK2W,KAAKwiH,gBAAgBj+F,gDAGrC17B,OAAAgC,eAAWm9H,EAAAz+H,UAAA,sBAAmB,KAA9B,WACI,OAA8G,IAAvGu5C,SAASz5C,KAAK2W,KAAKsiH,cAAc75E,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAc44F,YAAa,qCAG1G15H,OAAAgC,eAAWm9H,EAAAz+H,UAAA,4BAAyB,KAApC,WACI,OAAOF,KAAK2W,KAAKqoG,gBAAgBhlG,OAAO,SAAAkG,GAAO,OAACA,EAAIqlG,aAAerlG,EAAIs/E,8CAG3EhgG,OAAAgC,eAAWm9H,EAAAz+H,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK2W,KAAKqoG,gBAAgBhlG,OAAO,SAAAkG,GAAO,OAACA,EAAIqlG,+CAGxD/lH,OAAAgC,eAAWm9H,EAAAz+H,UAAA,WAAQ,KAAnB,WAII,OAHKF,KAAKu/H,YACNv/H,KAAKu/H,UAAY,IAAI9O,GAAqBzwH,KAAK2W,KAAKuqE,SAEjDlhF,KAAKu/H,2CAMTZ,EAAAz+H,UAAAs/H,kBAAP,WAAA,IAAA5qH,EAAA5U,KACSA,KAAK6+H,sBACN7+H,KAAK6+H,qBAAsB,EAE3B7+H,KAAK2W,KAAK60G,gBAAgB3mF,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAACnD,GAChEhtB,EAAK6qH,oBAAoB79F,EAAUhgB,UAGvC5hB,KAAK2W,KAAKsiH,cAAc76E,YAAYvZ,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAACnD,GACtEA,EAAU+T,aAAe/gC,EAAKoqH,mBAC9BpqH,EAAKoqH,iBAAmBp9F,EAAU+T,WAClC/gC,EAAK+B,KAAK0xG,eAAe51G,QAAQ,SAAC61G,GAC9BA,EAAWoX,0BAGf9qH,EAAKwqH,gBACLxqH,EAAKmoH,oBAAoBnoH,EAAKwqH,eAAe,GAC7CxqH,EAAKwqH,cAAgB,QAI7Bp/H,KAAK2W,KAAK25G,kBAAkBzrF,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,WACjEnwB,EAAK+B,KAAK0xG,eAAe51G,QAAQ,SAAC61G,GAC9BA,EAAWoX,6BASpBf,EAAAz+H,UAAAkkH,yCAAP,SAAgDlkG,OACtCy/G,EAAe3/H,KAAK2W,KAAKgpH,aAE3BA,GAAgBA,EAAa/9G,QAAU+9G,EAAa/9G,SAAW1B,GAC/Dy/G,EAAavxH,SAOduwH,EAAAz+H,UAAA0/H,eAAP,SAAsBz/G,EAAe3K,OAG7BwD,OAH6B,IAAAxD,IAAAA,EAAA,MACjCxV,KAAK8+H,aAAc,EAS8B,KAL7C9lH,EADAxD,aAAuBiD,GACLjD,EAEAxV,KAAK6/H,0BAA0B1/G,EAAO3K,IAGxCmD,kBAAkBhY,OAClCX,KAAK8/H,YAAY3/G,GAEjBngB,KAAKga,OAAOmG,EAAO,KAAMnH,GAG7BhZ,KAAK8+H,aAAc,GAMhBH,EAAAz+H,UAAA8Z,OAAP,SAAcmG,EAAehe,EAAY49H,EACrCrrH,GADJ,IAAAE,EAAA5U,KAEUkgB,EAAMlgB,KAAK+nB,QAAQhI,mBAAmBI,GACtCqF,EAAsB9Q,KAAewL,GAAMA,EAAIsF,oBAErD,GAAIu6G,EACA//H,KAAK+nB,QAAQ/N,OAAOmG,EAAOhe,EAAO49H,EAA2Bv6G,OAC1D,KACGw6G,EAA2BhgI,KAAK2W,KAAKsO,yBAAyB3N,KAAK6I,GACzE,IAAK6/G,EACD,MAAM,IAAInwH,MAAM,yCACb,GAAImwH,aAAoCvnH,GAC3CzY,KAAK+nB,QAAQ/N,OAAOmG,EAAOhe,EAAO69H,EAA0Bx6G,OACzD,KACGy6G,EAAmB,EACzBjgI,KAAK+nB,QAAQ/N,OAAOmG,EAAOhe,EAAO89H,EAAoB5mH,UAAWmM,IAKzE+2B,sBAAsB,WAAM,OAAA3nC,EAAK+B,KAAKupH,gBAAgB39G,KAAKrC,EAAI+E,6BAM5D05G,EAAAz+H,UAAA4/H,YAAP,SAAmB3/G,GAAnB,IAAAvL,EAAA5U,KACI,GAAImgB,IACengB,KAAK+nB,QAAQhI,mBAAmBI,GAE3C,QAIRngB,KAAK8+H,aAAc,EAEnB9+H,KAAK+nB,QAAQtC,aAAatF,GAG1Bo8B,sBAAsB,WAAM,OAAA3nC,EAAK+B,KAAKupH,gBAAgB39G,KAAK,QAEvDpC,KACoBngB,KAAKmgI,eAAehgH,GAC5Bxf,OAAS,GAGzBX,KAAK8+H,aAAc,GAMhBH,EAAAz+H,UAAAkgI,aAAP,SAAoBj+H,EAAYkX,EAAW3E,GAA3C,IAAAE,EAAA5U,KACIA,KAAK+nB,QAAQzC,cAAcnjB,EAAOkX,EAAW3E,GAG7C6nC,sBAAsB,WAAM,OAAA3nC,EAAK+B,KAAKupH,gBAAgB39G,KAAK3N,EAAK+B,KAAKsO,6BAMlE05G,EAAAz+H,UAAAmgI,iBAAP,mBACI,IAAKrgI,KAAKi/H,uBAAwB,KAC9B,IAAmB,IAAAqB,EAAAvwH,EAAA2uH,IAAK6B,EAAAD,EAAAp+H,QAAAq+H,EAAAn+H,KAAAm+H,EAAAD,EAAAp+H,OAAE,CAArB,IAAMk2E,EAAImoD,EAAAp+H,MACNnC,KAAKi3E,YAAYrB,gBAAgBwC,EAAKp4D,KA7M1B,oBA8MbhgB,KAAKi3E,YAAYxB,mBAAmB2C,EAAKp4D,KAAMo4D,EAAKj2E,MA9MvC,wHAiNrBnC,KAAKi/H,wBAAyB,IAO/BN,EAAAz+H,UAAAigI,eAAP,SAAsBK,GAClB,IAAKxgI,KAAK++H,uBAAuB7tF,IAAIsvF,GAAW,KACtC5+G,EAAS5hB,KAAK2W,KAAK4O,QAAQjO,KAAK,SAAC4I,GAAQ,OAAAA,EAAIC,QAAUqgH,IACvDC,EAAgB,IAAI9gI,MAK1B,OAJIiiB,IACA5hB,KAAK0gI,wBAAwB9+G,EAAOqD,yBAA0BjlB,KAAK2W,KAAKsO,yBAAyBvM,SAAU+nH,GAC3GzgI,KAAK++H,uBAAuBr2G,IAAI83G,EAAUC,IAEvCA,EAGX,OAAOzgI,KAAK++H,uBAAuBjxH,IAAI0yH,IAMpC7B,EAAAz+H,UAAAikH,mBAAP,WAAA,IAAAvvG,EAAA5U,KACSA,KAAK8+H,cACN9+H,KAAK4+H,yBAAyBrzF,QAE9BvrC,KAAK++H,uBAAuBtsH,QAAQ,SAACtQ,EAAuBlB,OAClD2gB,EAAShN,EAAK+B,KAAK4O,QAAQjO,KAAK,SAAC4I,GAAQ,OAAAA,EAAIC,QAAUlf,IACzD2gB,GACAzf,EAAMxB,OAAS,EAEfiU,EAAK8rH,wBAAwB9+G,EAAOqD,yBAA0BrQ,EAAK+B,KAAKsO,yBAAyBvM,SAAUvW,GAEzFyS,EAAK+rH,uBAAuB/+G,EAAOqD,2BAEjDrQ,EAAKgqH,yBAAyBlxH,IAAIzM,GAGtC2T,EAAK6qH,oBAAoB79G,IAEzBhN,EAAKmqH,uBAAuBnyF,UAAO3rC,OAS5C09H,EAAAz+H,UAAA0gI,iBAAP,SAAwBJ,EAAkBK,OAChCC,EAAkB9gI,KAAKmgI,eAAeK,GAEtB,IAAlBK,GAAuBC,EAAgBngI,OAAS,EAChDmgI,EAAgB,GAAGC,eAAiB,KAC7BF,IAAkBC,EAAgBngI,OAAS,EAClDmgI,EAAgBD,EAAgB,GAAGG,cAAgB,MAEnDF,EAAgBD,EAAgB,GAAGG,cAAgBF,EAAgBD,EAAgB,GAAGE,eACtFD,EAAgB,GAAGC,eAAiB,KACpCD,EAAgBA,EAAgBngI,OAAS,GAAGqgI,cAAgB,MAGhEF,EAAgB5lH,OAAO2lH,EAAe,IAMnClC,EAAAz+H,UAAA2/H,0BAAP,SAAiCW,EAAkBS,QAAA,IAAAA,IAAAA,EAAA,MAM/C,QAHIC,EACAC,EAHEL,EAAkBG,GAAsCjhI,KAAKmgI,eAAeK,GAC5ExnH,EAAkB,IAAIP,GAAyBmB,GAAetB,GAAIkoH,GAI/DhgI,EAAI,EAAGA,EAAIsgI,EAAgBngI,OAAQH,KACxC2gI,EAAmBL,EAAgBtgI,IAEbyT,WAAWoF,UAAU04D,SAAqD,OAA1CovD,EAAiBltH,WAAWuF,UAQ7E2nH,EAAiBJ,iBAAmB/sH,WAAiD,OAApCmtH,EAAiBJ,gBAClEI,EAAiBJ,iBAAmBnnH,GAAetB,IACpD6oH,EAAiBH,gBAAkBpnH,GAAevB,IAM3C8oH,EAAiBJ,iBAAmBnnH,GAAevB,IAC1D6oH,EAAcvoH,kBAAkBnW,KAAK2+H,EAAiBltH,aAEtD+E,EAAgBL,kBAAkBnW,KAAK2+H,EAAiBltH,YACxDitH,EAAgB,OARhBA,EAAgB,IAAIzoH,GAAyBmB,GAAevB,IAAKmoH,GACjExnH,EAAgBL,kBAAkBnW,KAAK0+H,GACvCA,EAAcvoH,kBAAkBnW,KAAK2+H,EAAiBltH,aAblDktH,EAAiBH,gBAAkBpnH,GAAevB,KAAQ6oH,IAC1DA,EAAgB,IAAIzoH,GAAyBmB,GAAevB,IAAKmoH,GACjExnH,EAAgBL,kBAAkBnW,KAAK0+H,IAqBnD,OAAOloH,GAMJ2lH,EAAAz+H,UAAAkhI,gBAAP,SAAuBZ,GACnB,GAAIxgI,KAAK4+H,yBAAyB1tF,IAAIsvF,GAClC,OAAO,MAGL5+G,EAAS5hB,KAAK2W,KAAK4O,QAAQjO,KAAK,SAAC4I,GAAQ,OAAAA,EAAIC,QAAUqgH,IACvDa,EAAYz/G,GAAU5hB,KAAK2gI,uBAAuB/+G,EAAOqD,0BAK/D,OAJIo8G,GACArhI,KAAK4+H,yBAAyBlxH,IAAI8yH,GAG/Ba,GAMJ1C,EAAAz+H,UAAAohI,oBAAP,SAA2B5oH,GACvB,OAAiB,IAAbA,EACO1Y,KAAK2W,KAAK4qH,gBAAgBC,6BAE1BxhI,KAAK2W,KAAK4qH,gBAAgBE,6BAOlC9C,EAAAz+H,UAAAwhI,aAAP,SAAoBztH,GAChB,OAAIA,EAAWoF,UAAU04D,QACd/xE,KAAK2W,KAAK4qH,gBAAgB,mBAAmBttH,EAAWoF,UAAU2G,OAAW/L,EAAWoF,UAAU2G,KAClG/L,EAAWuF,qBAAqBrJ,KAChCnQ,KAAK2hI,SAASn9H,UAAUyP,EAAWuF,UAAWxZ,KAAK2W,KAAKuqE,QAExDjtE,EAAWuF,WAOnBmlH,EAAAz+H,UAAAu/H,oBAAP,SAA2B79G,OACjB0mG,EAAa1mG,EAAO0mG,WACtBA,GACAA,EAAWoX,wBAOZf,EAAAz+H,UAAA68H,oBAAP,SAA2Bn7G,EAA4BggH,OAC7CtZ,EAAa1mG,EAAO0mG,WACtBA,GACAA,EAAWuZ,UAAUD,IAOtBjD,EAAAz+H,UAAA28H,0BAAP,WACI78H,KAAK2W,KAAKgpH,aAAamC,YAAYxhG,cAAciT,SAGrD/zC,OAAAgC,eAAWm9H,EAAAz+H,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK2W,KAAK0J,8CAMds+G,EAAAz+H,UAAA88H,mBAAP,SAA0Bp7G,EAA4By9G,GAClDr/H,KAAK2W,KAAK2pB,cAAciT,MAAM,CAACC,eAAe,IAC9CxzC,KAAKo/H,cAAgBx9G,EACrB5hB,KAAKq/H,gBAAkBA,EAIvB,QAFI0C,EAAqB,EACrBC,EAAoB,EACfruH,EAAQ,EAAGA,EAAQ3T,KAAKg/G,gBAAgBr+G,OAAQgT,IAErD,GADAouH,GAAsBtoF,SAASz5C,KAAKg/G,gBAAgBrrG,GAAO1C,MAAO,IAC9DjR,KAAKg/G,gBAAgBrrG,KAAWiO,EAAQ,CACxCogH,EAAoBD,EAAqBtoF,SAASz5C,KAAKg/G,gBAAgBrrG,GAAO1C,MAAO,IACrF,UAIFyoH,EAAW15H,KAAK2W,KAAKwiH,gBACrBloH,EAAQjR,KAAK45H,sBAAwB55H,KAAK65H,2BAC5CwF,EACA3F,EAASx+F,gBAAkB6mG,EAAqB9wH,EAEhDyoH,EAASx+F,eAAiB8mG,GAI1BrD,EAAAz+H,UAAAygI,uBAAR,SAA+BnrH,GAC3B,IAAKA,EACD,OAAO,EAGX,GAAIA,aAAuBiD,GAA0B,KAC3CO,EAAe,EACrB,GAAIA,EAAgBN,WAAakB,GAAetB,GAI5C,OAH0BtY,KAAKiiI,0BAA0BjpH,GAG9B,EAI/B,QADIqoH,GAAY,EACP7gI,EAAI,EAAGA,EAAIwY,EAAgBL,kBAAkBhY,OAAQH,IAC1D6gI,EAAYA,GAAarhI,KAAK2gI,uBAAuB3nH,EAAgBL,kBAAkBnY,IAG3F,OAAO6gI,EAGX,OAAO,GAGH1C,EAAAz+H,UAAA+hI,0BAAR,SAAkCzsH,GAG9B,QADImE,EADA2Y,EAAQ,EAEH9xB,EAAI,EAAGA,EAAIgV,EAAYmD,kBAAkBhY,OAAQH,KACtDmZ,EAAUnE,EAAYhV,cACCiY,KACfkB,EAAQjB,WAAakB,GAAevB,KACpCia,IAGJA,GAAgBtyB,KAAKiiI,0BAA0BtoH,IAIvD,OAAO2Y,GAGJqsG,EAAAz+H,UAAAwgI,wBAAP,SAA+BlrH,EAC3BkD,EACAwpH,GACAliI,KAAKmiI,iCAAiC3sH,EAAakD,EAAUwpH,GAGzDA,EAAevhI,SACfuhI,EAAeA,EAAevhI,OAAS,GAAGqgI,cAAgB,OAI1DrC,EAAAz+H,UAAAiiI,iCAAR,SAAyC3sH,EACTkD,EACAwpH,GAC5B,GAAK1sH,EAIL,GAAIA,aAAuBiD,GAA0B,CAEjD,QADMO,EAAe,EACZxY,EAAI,EAAGA,EAAIwY,EAAgBL,kBAAkBhY,OAAQH,IAC1DR,KAAKmiI,iCAAiCnpH,EAAgBL,kBAAkBnY,GAAIwY,EAAgBN,SAAUwpH,GAEtGA,EAAevhI,SACfuhI,EAAeA,EAAevhI,OAAS,GAAGqgI,cAAgBtoH,OAE3D,KACG0pH,EAAS,IAAIC,GACnBD,EAAOnuH,WAAU,EACjBmuH,EAAOpB,cAAgBtoH,MAEjB4pH,EAAaJ,EAAeA,EAAevhI,OAAS,GACtD2hI,IACAF,EAAOrB,eAAiBuB,EAAWtB,eAGvCkB,EAAe1/H,KAAK4/H,KAIrBzD,EAAAz+H,UAAAqiI,gCAAP,SAAuC1pH,GACnC,GAAIJ,GAAyBG,MAAMC,GAC/B,OAAO,EAKX,QAFI1C,EAEK3V,EAAI,EAAGA,EAAIqY,EAAeF,kBAAkBhY,OAAQH,IAAK,CAG9D,MAFA2V,EAAO0C,EAAeF,kBAAkBnY,cAEnBiY,IAMjB,OAAO,MALD+pH,EAAQ,EACd,GAAIA,EAAS7pH,mBAAqB6pH,EAAS7pH,kBAAkBhY,OACzD,OAAO,EAMnB,OAAO,uBAnfdqR,EAAAA,sDAnBQ2N,UAXA60D,MAmhBTmqD,EArfA,GC/BA8D,GAAA,WAqBI,SAAAA,EAAmB1wF,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEAXVk6C,EAAAA,eAeJ65E,EAtBA,GA2BAC,GAAA,WAoDI,SAAAA,EAAmB90F,GAAA5tC,KAAA4tC,IAAAA,EA+CvB,OAzFIpuC,OAAAgC,eAAWkhI,EAAAxiI,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK2iI,gBAGhB,SAAqBxgI,GACjBnC,KAAK2iI,WAAaxgI,EACZnC,KAAQ,IAAS+2C,WACnB/2C,KAAK4tC,IAAIrL,iDA2BjB/iC,OAAAgC,eAAWkhI,EAAAxiI,UAAA,wBAAqB,KAAhC,WACI,OAAIF,KAAK2W,KAAKisH,yCACH5iI,KAAK2W,KAAKisH,yCAAyC7wF,SAEnD/xC,KAAK6iI,wEAMbH,EAAAxiI,UAAAyhD,gBAAP,WACI3hD,KAAK8iI,eAGFJ,EAAAxiI,UAAA4iI,YAAP,WAAA,IAAAluH,EAAA5U,KACIu8C,sBAAsB,WAClB3nC,EAAK01C,QAAQ/F,uBAIdm+E,EAAAxiI,UAAA6iI,WAAP,WACI/iI,KAAKy/F,YAAc,MAGhBijC,EAAAxiI,UAAA8iI,iBAAP,SAAwBphG,GAAxB,IAAAhtB,EAAA5U,KAE0B,IADAA,KAAKwU,KAAKlD,QAAQswB,EAAUwzD,SAASjzF,OAEvDnC,KAAKwU,KAAK/B,QAAQ,SAAAqxB,GACdA,EAAQspD,WAAaxrD,EAAUmnC,QAC/Bn0D,EAAKJ,KAAK,GAAGygF,eAAgB,KAGjCrzD,EAAUwzD,SAASjzF,MAAMirF,WAAaxrD,EAAUmnC,QAC3C/oE,KAAKwU,KAAKqD,MAAM,EAAG7X,KAAKwU,KAAK7T,QAAQ2W,KAAK,SAAA5E,GAAM,OAAkB,IAAlBA,EAAG06E,aAG5CptF,KAAKwU,KAAKqD,MAAM,EAAG7X,KAAKwU,KAAK7T,QAAQ2W,KAAK,SAAA5E,GAAM,OAAkB,IAAlBA,EAAG06E,aAI3DptF,KAAKwU,KAAK,GAAGygF,eAAgB,GAH7Bj1F,KAAKwU,KAAK,GAAGygF,eAAgB,EAC7Bj1F,KAAKwU,KAAK,GAAG44E,YAAa,IAJ1BptF,KAAKwU,KAAK,GAAGygF,eAAgB,EAC7Bj1F,KAAKwU,KAAK,GAAG44E,YAAa,IAQlCxrD,EAAUwzD,SAASG,eAAej1D,cAAc+oC,QAGpD7pE,OAAAgC,eAAWkhI,EAAAxiI,UAAA,WAAQ,KAAnB,eACQ+iI,EAAW,OACf,OAAQjjI,KAAKwyC,gBACT,KAAK2B,GAAeR,KAAMsvF,EAAW,OAAQ,MAC7C,KAAK9uF,GAAeP,QAASqvF,EAAW,OAG5C,OAAOA,uDAjGdnxF,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,yBACVqjC,SAAA,uuDAzBA9C,EAAAA,mDA4CCtgC,EAAAA,oBAGAA,EAAAA,sBAGAA,EAAAA,2BAGA8nC,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE0oC,KAAMoX,GAAmBnX,UAAQ,4BAGtDhoC,EAAAA,uBAGA8nC,EAAAA,UAASzoC,KAAA,CAAC8vC,GAAmB,CAAEnH,UAAQ,oDAGvCF,EAAAA,UAASzoC,KAAA,CAAC,yCAA0C,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,OA0DtF+rF,EAnGA,GCMAQ,GAAA,WA6EI,SAAAA,EAAmBt1F,GAAA5tC,KAAA4tC,IAAAA,EArEX5tC,KAAAgqG,yBAA4C,CAChDpqE,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAIwH,GACtBvH,eAAgB,IAAI2K,IAmBjBrqC,KAAAmjI,oBAAsB,IAAIh6G,EAAAA,aAG1BnpB,KAAAojI,uBAAyB,IAAIj6G,EAAAA,aA8IxC,OAhII3pB,OAAAgC,eAAc0hI,EAAAhjI,UAAA,qBAAkB,KAAhC,WACI,OAAOF,KAAKqjI,sDAGhB7jI,OAAAgC,eAAI0hI,EAAAhjI,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK8gI,gBAAgB9gI,KAAK8gI,gBAAgBngI,OAAS,KAAOX,KAAKsjI,8CAG1E9jI,OAAAgC,eAAI0hI,EAAAhjI,UAAA,WAAQ,KAAZ,WACI,OAAuC,IAAhCF,KAAK8gI,gBAAgBngI,wCAGhCnB,OAAAgC,eAAI0hI,EAAAhjI,UAAA,6BAA0B,KAA9B,WACI,OAAOF,KAAK2W,KAAK4qH,gBAAuD,uEAG5E/hI,OAAAgC,eAAI0hI,EAAAhjI,UAAA,wBAAqB,KAAzB,WACI,OAAOF,KAAK2W,KAAK4qH,gBAAiD,iEAGtE/hI,OAAAgC,eAAI0hI,EAAAhjI,UAAA,OAAI,KAAR,WACI,OAAQF,KAAK4hB,OAAOzE,UAChB,KAAKC,GAAS9C,OACV,MAAO,SACX,QACI,MAAO,yCAMnB4oH,EAAAhjI,UAAAyhD,gBAAA,WACI3hD,KAAKgqG,yBAAyBtlE,OAAS1kC,KAAK4hB,OAAOjL,KAAK0+G,gBACxDr1H,KAAKgqG,yBAAyBvqE,iBAAiBnF,SAASt5B,OAAShB,KAAKujI,qBAAqBz/F,QAAQxD,eAGhG4iG,EAAAhjI,UAAAqzC,MAAP,WAAA,IAAA3+B,EAAA5U,KAGIu8C,sBAAsB,WAAM,OAAA3nC,EAAK4uH,mBAAmBjwF,WAGjD2vF,EAAAhjI,UAAAujI,oBAAP,SAA2BC,GACvB,OAAO1jI,KAAKsjI,aAAarvH,WAAWoF,WAAarZ,KAAKsjI,aAAarvH,WAAWoF,UAAU2G,OAAS0jH,GAG9FR,EAAAhjI,UAAAyjI,iBAAP,SAAwBtqH,GACpB,OAAOA,EAAYrZ,KAAK4jI,mBAAmBvqH,EAAU2G,MAAQ,MAG1DkjH,EAAAhjI,UAAA2jI,cAAP,WACI,OAAO7jI,KAAKujI,qBAAqBz/F,QAAQxD,cAAc44F,YAAc,MAGzE15H,OAAAgC,eAAI0hI,EAAAhjI,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK4hB,OAAOskG,QAAQh0C,iDAGxBgxD,EAAAhjI,UAAA0jI,mBAAP,SAA0BzhI,GACtB,OAAOnC,KAAK2W,KAAK4qH,gBAAgB,mBAAmBvhI,KAAK8jI,aAAa3hI,GAAO6d,OAAW7d,GAGrF+gI,EAAAhjI,UAAA6jI,YAAP,WACI,OAAI/jI,KAAK4hB,OAAOzE,WAAaC,GAAS7C,SAAsD,OAA3Cva,KAAKsjI,aAAarvH,WAAWoF,UACnErZ,KAAK8jI,aAAa9jI,KAAKgkI,WAAW,IAAIhyD,SACrChyE,KAAKsjI,aAAarvH,WAAWoF,UAG9BrZ,KAAKsjI,aAAarvH,WAAWoF,UAAU24D,SAFvC,eAMRkxD,EAAAhjI,UAAA+jI,2BAAP,WACIjkI,KAAKkkI,mBAAmBn2H,OAAO/N,KAAKgqG,2BAGjCk5B,EAAAhjI,UAAA4jI,aAAP,SAAoB3hI,GAChB,OAAOnC,KAAK4hB,OAAOskG,QAAQ7sG,UAAUlX,IAGlC+gI,EAAAhjI,UAAAikI,oBAAP,SAA2BviG,OACjBz/B,EAASy/B,EAAsB,aAA8Bz/B,MACnEnC,KAAKsjI,aAAarvH,WAAWoF,UAAYrZ,KAAK8jI,aAAa3hI,GAE3DnC,KAAKuzC,SAGF2vF,EAAAhjI,UAAAkkI,cAAP,SAAqBxiG,GACjB5hC,KAAKsjI,aAAarvH,WAAWuF,UAAYgB,GAAS0C,WAAWld,KAAK4hB,OAAOzE,SAAUykB,EAAU5gC,OAAOmB,QAGjG+gI,EAAAhjI,UAAAmkI,6BAAP,SAAoCziG,EAAW0iG,GACkB,IAAzDtkI,KAAKukI,yBAAyBC,gBAAgB7jI,QAC9CihC,EAAU6C,kBACVzkC,KAAKukI,yBAAyBnnD,aAAaknD,IAE3CtkI,KAAKojI,uBAAuB7gH,KAAK,CAC7BvhB,OAAQhB,KAAKsjI,aACbjnH,SAAQ,KAKb6mH,EAAAhjI,UAAAukI,uBAAP,SAA8B7iG,EAAW0iG,GACpB,UAAb1iG,EAAU3gC,MACVjB,KAAKukI,yBAAyBnnD,aAAaknD,GAC3CtkI,KAAKojI,uBAAuB7gH,KAAK,CAC7BvhB,OAAQhB,KAAKsjI,aACbjnH,SAAQ,MAKb6mH,EAAAhjI,UAAAwkI,oBAAP,WACI1kI,KAAKmjI,oBAAoB5gH,KAAKviB,KAAKsjI,eAGhCJ,EAAAhjI,UAAAykI,yBAAP,SAAgC/iG,IACxBA,EAAU44C,QAAwB,cAAb54C,EAAU3gC,KAAwC,SAAb2gC,EAAU3gC,KACpEjB,KAAKikI,6BAGQ,QAAbriG,EAAU3gC,KAAoB2gC,EAAU23D,UAAYv5F,KAAK8gI,gBAAgB,KAAO9gI,KAAKsjI,cACrF1hG,EAAUqI,iBAGd33B,MAAMmyB,uCA9KbqN,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,qCACVqjC,SAAA,y0FA9BA9C,EAAAA,qDAyCCtgC,EAAAA,4BAGAA,EAAAA,+BAGAA,EAAAA,oBAGAA,EAAAA,8BAGAA,EAAAA,mCAGAgd,EAAAA,uCAGAA,EAAAA,qCAGA8qB,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE0oC,KAAMqa,GAAwBpa,UAAQ,kCAG1EF,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE0oC,KAAMoX,GAAmBnX,UAAQ,gCAG5DF,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAM2T,GAAsB1T,UAAQ,sCAGtEF,EAAAA,UAASzoC,KAAA,CAAC,2BAA4B,CAAE0oC,KAAM2lC,GAAyB1lC,UAAQ,OAmIpFusF,EAhLA,GCpBA0B,GAAA,SAAA9qH,GAAA,SAAA8qH,mDAqBA,OAf0D5sH,EAAAA,EAAAA,GAKtDxY,OAAAgC,eAAcojI,EAAA1kI,UAAA,qBAAkB,KAAhC,WACI,OAAOF,KAAK+sG,WAAWjrC,kDAM3BtiE,OAAAgC,eAAIojI,EAAA1kI,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK2W,KAAK4qH,gBAAsD,0FAnB9EzvF,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,kCACVqjC,SAAA,otGAIC0E,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMqyD,GAAwBpyD,UAAQ,4BAOhEhoC,EAAAA,SAMLi2H,EArBA,CAM0D1B,ICqB1D2B,GAAA,WA6DI,SAAAA,EAAoBj3F,GAAA5tC,KAAA4tC,IAAAA,EApDb5tC,KAAA8gI,gBAAkB,IAAInhI,MAErBK,KAAA8kI,8BAAkD,CACtD3oG,kBAAmBC,GAAkBpC,OACrCiC,oBAAqBC,GAAoBrC,OACzCwC,qBAAsBH,GAAoBrC,OAC1CyC,mBAAoBF,GAAkBpC,QAGlCh6B,KAAA+kI,6BAAgD,CACpDnlG,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAIwH,GAA6BjnC,KAAK8kI,+BACxDplG,eAAgB,IAAI8J,IAgN5B,OAvKIq7F,EAAA3kI,UAAAyhD,gBAAA,WACI3hD,KAAK+kI,6BAA6BrgG,OAAS1kC,KAAK2W,KAAK+tB,QAGzDllC,OAAAgC,eAAIqjI,EAAA3kI,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAK4hB,OAAOzE,WAAaC,GAASjN,KAC3BnQ,KAAKglI,uBAGThlI,KAAKilI,2DAGhBzlI,OAAAgC,eAAIqjI,EAAA3kI,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKkkH,iBAAiBvtG,sCAG1BkuH,EAAA3kI,UAAAglI,sBAAP,WACQllI,KAAKmlI,kBACLnlI,KAAKolI,oCAINP,EAAA3kI,UAAAmlI,qBAAP,WACQrlI,KAAKslI,qBAAqB35F,OAC1B3rC,KAAKslI,qBAAqB35F,MAAM4H,SAIjCsxF,EAAA3kI,UAAAiO,KAAP,WACInO,KAAK+kI,6BAA6BtlG,iBAAiBnF,SAASt5B,OACxDhB,KAAK2W,KAAK4uH,SAAWvlI,KAAK2W,KAAK4uH,SAASjlG,cAAgBtgC,KAAK2W,KAAK2pB,cACtEtgC,KAAK+N,OAAOI,KAAKnO,KAAK+kI,+BAGnBF,EAAA3kI,UAAAslI,mBAAP,WACIxlI,KAAKkkH,iBAAiB4b,YAAY9/H,KAAK4hB,OAAOzB,OAC9CngB,KAAKolI,mCACLplI,KAAK4tC,IAAIrL,iBAGNsiG,EAAA3kI,UAAAulI,YAAP,WACQzlI,KAAK0lI,oBACL1lI,KAAKu9B,eAAeiE,KAAKxhC,KAAK0lI,qBAI/Bb,EAAA3kI,UAAAylI,mBAAP,WACI3lI,KAAK8gI,gBAAkB9gI,KAAK8gI,gBAAgB9mH,OACxC,SAAA8pB,GAAW,OAAAA,EAAQ7vB,WAAWoF,YAC7ByqB,EAAQ7vB,WAAWuF,WAA8C,IAAjCsqB,EAAQ7vB,WAAWuF,WAAmBsqB,EAAQ7vB,WAAWoF,UAAU04D,WAEpG/xE,KAAK8gI,gBAAgBngI,OAAS,IAC9BX,KAAK8gI,gBAAgB,GAAGC,eAAiB,KACzC/gI,KAAK8gI,gBAAgB9gI,KAAK8gI,gBAAgBngI,OAAS,GAAGqgI,cAAgB,MAG1EhhI,KAAKkkH,iBAAiB0b,eAAe5/H,KAAK4hB,OAAOzB,MAAOngB,KAAK8gI,iBAC7D9gI,KAAKylI,eAGFZ,EAAA3kI,UAAA0lI,iBAAP,eACUxD,EAAS,IAAIC,GACnBD,EAAOnuH,WAAa,CAChBoF,UAAW,KACXzF,UAAW5T,KAAK4hB,OAAOzB,MACvBzL,WAAY1U,KAAK4hB,OAAO4D,oBACxBhM,UAAW,MAGfxZ,KAAK8gI,gBAAgB9gI,KAAK8gI,gBAAgBngI,OAAS,GAAGqgI,cAAgBpnH,GAAevB,IACrF+pH,EAAOrB,eAAiB/gI,KAAK8gI,gBAAgB9gI,KAAK8gI,gBAAgBngI,OAAS,GAAGqgI,cAE9EhhI,KAAK8gI,gBAAgBt+H,KAAK4/H,GAE1BpiI,KAAK6lI,uBACL7lI,KAAK8lI,kBAGFjB,EAAA3kI,UAAAijI,oBAAP,SAA2B7wH,OACjBuuH,EAAgB7gI,KAAK8gI,gBAAgBxvH,QAAQgB,GAE7B,IAAlBuuH,GAAuB7gI,KAAK8gI,gBAAgBngI,OAAS,EACrDX,KAAK8gI,gBAAgB,GAAGC,eAAiB,KAClCF,IAAkB7gI,KAAK8gI,gBAAgBngI,OAAS,EACvDX,KAAK8gI,gBAAgBD,EAAgB,GAAGG,cAAgB,MAExDhhI,KAAK8gI,gBAAgBD,EAAgB,GAAGG,cAAgBhhI,KAAK8gI,gBAAgBD,EAAgB,GAAGE,eAChG/gI,KAAK8gI,gBAAgB,GAAGC,eAAiB,KACzC/gI,KAAK8gI,gBAAgB9gI,KAAK8gI,gBAAgBngI,OAAS,GAAGqgI,cAAgB,MAG1EhhI,KAAK8gI,gBAAgB5lH,OAAO2lH,EAAe,GAE3C7gI,KAAK4tC,IAAIrL,gBAETviC,KAAK6lI,wBAGFhB,EAAA3kI,UAAAkjI,uBAAP,SAA8B9wH,OACpBqB,EAAQ3T,KAAK8gI,gBAAgBxvH,QAAQgB,EAAMtR,QACjDsR,EAAMtR,OAAOggI,cAAgB1uH,EAAM+J,SAC/B1I,EAAQ,EAAI3T,KAAK8gI,gBAAgBngI,SACjCX,KAAK8gI,gBAAgBntH,EAAQ,GAAGotH,eAAiBzuH,EAAM+J,WAIxDwoH,EAAA3kI,UAAAs2F,UAAP,SAAiB50D,GACbA,EAAU6C,mBAGPogG,EAAA3kI,UAAA6lI,qBAAP,SAA4BnkG,GACP,QAAbA,EAAU3gC,KAAqB2gC,EAAU23D,WACzC33D,EAAU6C,kBACV7C,EAAUqI,mBAIV46F,EAAA3kI,UAAA8lI,gBAAR,SAAwBtC,GACpB,OAAQ1jI,KAAK4hB,OAAOzE,UAChB,KAAKC,GAAS7C,QACV,OAAO+3D,GAA2Bj+D,WAAWgF,UAAUqqH,GAC3D,KAAKtmH,GAAS9C,OACV,OAAO25D,GAA0B5/D,WAAWgF,UAAUqqH,GAC1D,KAAKtmH,GAASjN,KACV,OAAOoiE,GAAwBl+D,WAAWgF,UAAUqqH,GACxD,QACI,OAAOxvD,GAA0B7/D,WAAWgF,UAAUqqH,KAI1DmB,EAAA3kI,UAAA2lI,qBAAR,WACI7lI,KAAKslI,qBAAqB7yH,QAAQ,SAAAqK,GAAK,OAAAA,EAAE8wB,IAAI+U,iBAC7C3iD,KAAKimI,yBAAyBxzH,QAAQ,SAAAqK,GAAK,OAAAA,EAAE8wB,IAAI+U,kBAG7CkiF,EAAA3kI,UAAAklI,iCAAR,WACIplI,KAAK8gI,gBAAkB,OACjBoF,EAAc,IAAI7D,GAExB6D,EAAYjyH,WAAa,CACrBoF,UAAWrZ,KAAKgmI,gBAAgBhmI,KAAKmlI,kBACrCvxH,UAAW5T,KAAK4hB,OAAOzB,MACvBzL,WAAY1U,KAAK4hB,OAAO4D,oBACxBhM,UAAW,MAEf0sH,EAAYlF,cAAgBpnH,GAAevB,IAE3CrY,KAAK8gI,gBAAgBt+H,KAAK0jI,OAEpBC,EAAe,IAAI9D,GACzB8D,EAAalyH,WAAa,CACtBoF,UAAW,KACXzF,UAAW5T,KAAK4hB,OAAOzB,MACvBzL,WAAY1U,KAAK4hB,OAAO4D,oBACxBhM,UAAW,MAGf2sH,EAAapF,eAAiBnnH,GAAevB,IAE7CrY,KAAK8gI,gBAAgBt+H,KAAK2jI,IAGtBtB,EAAA3kI,UAAA4lI,eAAR,WAAA,IAAAlxH,EAAA5U,KACIu8C,sBAAsB,WAClB3nC,EAAKwxH,qBAAqB9lG,cAAc7E,UAAY7mB,EAAKwxH,qBAAqB9lG,cAAcqK,oCAnOvGmH,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,gCACVqjC,SAAA,o8FAxCA9C,EAAAA,8DA4CCtgC,EAAAA,sBAiBAA,EAAAA,gCAGAA,EAAAA,gCAGAA,EAAAA,kCAGAA,EAAAA,8BAGAA,EAAAA,8BAGAA,EAAAA,oCAGA+uE,EAAAA,aAAY1vE,KAAA,CAACk1H,sCAGbxlD,EAAAA,aAAY1vE,KAAA,CAAC42H,oBAGbnuF,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE0oC,KAAM/I,GAAoBgJ,UAAQ,uCAGxDF,EAAAA,UAASzoC,KAAA,CAAC,4BAA6B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,oCAGpEF,EAAAA,UAASzoC,KAAA,CAAC,yBAA0B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,kCAGjEF,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE2oC,UAAQ,OA4KjDkuF,EAtOA,GC3BAwB,GAAA,WAoBI,SAAAA,KAqBJ,OAnBWA,EAAAnmI,UAAAomI,oBAAP,SAA2BC,GAC6B,IAAhDvmI,KAAKwmI,gBAAgB7pD,gBAAgBh8E,OACjCX,KAAK2W,KAAK8vH,gBAAgBzmI,KAAK4hB,OAAOzB,OACtCngB,KAAKo9E,aAAampD,GAElBvmI,KAAK2W,KAAK+vH,UAAU1mI,KAAK4hB,OAAOzB,OAGpCngB,KAAK2W,KAAKpC,KAAK,CAAEX,UAAW5T,KAAK4hB,OAAOzB,MAAO1L,IAAK8xH,EAAe7xH,YAAY,KAIhF2xH,EAAAnmI,UAAAk9E,aAAP,SAAoBmpD,GACM,IAAlBA,EACAvmI,KAAKwmI,gBAAgBppD,aAAa,GAElCp9E,KAAKwmI,gBAAgBppD,aAAa,wBAtC7CtrC,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,0BACVqjC,SAAA,+lCAICpjC,EAAAA,oBAGAA,EAAAA,8BAGAA,EAAAA,+BAGA8nC,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE0oC,KAAM2lC,GAAyB1lC,UAAQ,OAwB3E0vF,EAzCA,iBCuCA,OAPA,WAKWrmI,KAAA2mI,WAAY,EACZ3mI,KAAA4mI,UAAW,oBAOlB,SAAAC,EAAmB90F,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEAjDVk6C,EAAAA,eAqDJi+E,mBAMI,SAAAC,EAAmB/0F,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEAxDVk6C,EAAAA,eA4DJk+E,mBAMI,SAAAC,EAAmBh1F,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEA/DVk6C,EAAAA,eAmEJm+E,mBAMI,SAAAC,EAAmBj1F,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEAtEVk6C,EAAAA,eA0EJo+E,KAKAC,GAAA,WA0FI,SAAAA,EAAoBr5F,GAAA5tC,KAAA4tC,IAAAA,EAjFZ5tC,KAAAknI,mBAAoB,EACpBlnI,KAAA8gI,gBAAkB,IAAInhI,MACtBK,KAAAu/B,SAAW,IAAIC,EAAAA,QACfx/B,KAAAmnI,qBAAsB,EACtBnnI,KAAAonI,mBAAoB,EACpBpnI,KAAAqnI,wBAAyB,EACzBrnI,KAAAsnI,aAAe,IAAI/2H,IAEjBvQ,KAAAunI,aAAe,IAAIC,EAAAA,aAItBxnI,KAAAynI,SAAW,IAAI9nI,MACfK,KAAA0nI,aAAe,GAId1nI,KAAA2nI,yBAA2B,CAC/BrrG,mBAAoBF,GAAkBrC,KAGlC/5B,KAAA4nI,wBAA2C,CAC/ChoG,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAIuI,GAAqBhoC,KAAK2nI,0BAChDjoG,eAAgB,IAAI8J,IAIxBxpC,KAAA60E,UAAY,mBA2mBhB,OA5kBIr1E,OAAAgC,eAAIylI,EAAA/mI,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKkkH,iBAAiBvtG,sCAGjCnX,OAAAgC,eAAIylI,EAAA/mI,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK4hB,OAAOskG,QAAQh0C,iDAG/B1yE,OAAAgC,eAAIylI,EAAA/mI,UAAA,cAAW,KAAf,WACI,OAAQF,KAAK4hB,OAAOzE,UAChB,KAAKC,GAAS7C,QACV,OAAOva,KAAK2W,KAAK4qH,gBAAgBsG,8BACrC,KAAKzqH,GAAS9C,OACV,OAAOta,KAAK2W,KAAK4qH,gBAAgBuG,6BACrC,KAAK1qH,GAASjN,KACV,OAAOnQ,KAAK2W,KAAK4qH,gBAAgBwG,2BACrC,QACI,OAAO/nI,KAAK2W,KAAK4qH,gBAAgByG,6DAM7Cf,EAAA/mI,UAAA2uC,SAAA,WACI7uC,KAAKioI,iBAAmBjoI,KAAK4hB,OAAO8lG,UAGxCuf,EAAA/mI,UAAAsmC,YAAA,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAGlBwgG,EAAA/mI,UAAAyhD,gBAAA,WAAA,IAAA/sC,EAAA5U,KASI,GARAA,KAAK8gI,gBAAkB,IAAInhI,MAC3BK,KAAKkkH,iBAAiBwc,wBAAwB1gI,KAAK4hB,OAAOqD,yBAA0BjlB,KAAK2W,KAAK8U,eAAgBzrB,KAAK8gI,iBAC/G9gI,KAAK8gI,iBAAmB9gI,KAAK8gI,gBAAgBngI,QACS,OAAtDX,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU2G,OAC7ChgB,KAAKkoI,aAAapH,gBAAkB9gI,KAAK8gI,iBAE7C9gI,KAAKmoI,qBAEDnoI,KAAKooI,kBAAmB,KAClBC,EAAKroI,KAAK2W,KAAK6N,mBAAmBlN,KAAK,SAAAnB,GAAQ,OAAAA,EAAKvC,YAAcgB,EAAKgN,OAAOzB,QAChFkoH,GACAroI,KAAKooI,kBAAkBhrD,aAAairD,EAAG5zH,KAI/C8nC,sBAAsB,WAClB3nC,EAAK0zH,iBAAiB9pC,YAAYl+D,cAAciT,WAIjD0zF,EAAA/mI,UAAAqoI,iBAAP,WACI,OAAIvoI,KAAK4hB,OAAOqD,yBACL,kCAGJ,6CAGJgiH,EAAA/mI,UAAAsoI,SAAP,WACI,OAAOxoI,KAAKioI,iBAAmB,gCAAkC,2CAG9DhB,EAAA/mI,UAAAo9B,WAAP,SAAkB1b,EAA4BsiG,EAAuC3mF,EACjFmoG,GADJ,IAAA9wH,EAAA5U,KAEIA,KAAK4hB,OAASA,EACd5hB,KAAKkkH,iBAAmBA,EACxBlkH,KAAKu9B,eAAiBA,EACtBv9B,KAAK0lI,mBAAqBA,EAE1B1lI,KAAK4nI,wBAAwBljG,OAAS1kC,KAAK2W,KAAK+tB,OAEhD1kC,KAAKunI,aAAevnI,KAAK2W,KAAKu4G,eAAerqF,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,WAClFnwB,EAAK6zH,mBAONxB,EAAA/mI,UAAA4jI,aAAP,SAAoB3hI,GAChB,OAAOnC,KAAK4hB,OAAOskG,QAAQ7sG,UAAUlX,IAMlC8kI,EAAA/mI,UAAA0jI,mBAAP,SAA0BzhI,GACtB,OAAOnC,KAAK2W,KAAK4qH,gBAAgB,mBAAmBvhI,KAAK8jI,aAAa3hI,GAAO6d,OAAW7d,GAGrF8kI,EAAA/mI,UAAAwoI,MAAP,WACI1oI,KAAK4hB,OAAO0I,QAAUtqB,KAAK4hB,OAAO0I,OAClCtqB,KAAKyoI,iBAGFxB,EAAA/mI,UAAAyoI,OAAP,WACI3oI,KAAK4hB,OAAOiI,QAAS,EACrB7pB,KAAK2W,KAAKw8G,0BAA0B5wG,KAAK,CAAEX,OAAQ5hB,KAAK4hB,OAAQvF,UAAU,IAC1Erc,KAAKyoI,iBAGFxB,EAAA/mI,UAAA0oI,kBAAP,SAAyBhnG,GACrB,GAAI5hC,KAAKknI,kBAAmB,CACxBlnI,KAAK4nI,wBAAwBnoG,iBAAiBnF,SAASt5B,OAAS4gC,EAAU+4B,kBAEpEkuE,EAAW7oI,KAAK2W,KAAK2pB,cAAcpvB,wBACnC43H,EAAe9oI,KAAK+oI,aAAazoG,cAAcpvB,wBAEjD4L,EAAIgsH,EAAaruG,KAAOquG,EAAa73H,MACrC+3H,EAAKH,EAASpuG,KAAOouG,EAAS53H,MAClC6L,GAAK/K,OAAO0rD,YACZurE,GAAMj3H,OAAO0rD,YACThiD,KAAKutB,IAAIlsB,EAAIksH,GAAM,KACnBhpI,KAAK4nI,wBAAwBnoG,iBAAiBnF,SAAS2B,oBAAsBC,GAAoBtC,KACjG55B,KAAK4nI,wBAAwBnoG,iBAAiBnF,SAAS+B,qBAAuBH,GAAoBtC,OAElG55B,KAAK4nI,wBAAwBnoG,iBAAiBnF,SAAS2B,oBAAsBC,GAAoBpC,MACjG95B,KAAK4nI,wBAAwBnoG,iBAAiBnF,SAAS+B,qBAAuBH,GAAoBpC,OAGtG95B,KAAKipI,QAAQ96H,KAAKnO,KAAK4nI,yBACvB5nI,KAAKknI,mBAAoB,IAI1BD,EAAA/mI,UAAAgpI,oBAAP,SAA2BtnG,GACN,UAAbA,EAAU3gC,KACVjB,KAAK4oI,kBAAkBhnG,IAIxBqlG,EAAA/mI,UAAAipI,gBAAP,WAAA,IAAAv0H,EAAA5U,KACIu8C,sBAAsB,WAClB3nC,EAAKsyH,mBAAoB,KAI1BD,EAAA/mI,UAAAkpI,mBAAP,SAA0BxnG,GACtB5hC,KAAKkoI,aAAa/C,iBAAmBvjG,EAAUsO,aAAa/tC,MAC5Dy/B,EAAUxf,QAAS,EACnBpiB,KAAK+oI,aAAazoG,cAAcj9B,MAAMg/D,QAAU,OAChDriE,KAAKipI,QAAQ76H,QACbpO,KAAKkoI,aAAa/5H,QAGd84H,EAAA/mI,UAAAmpI,yBAAR,WACI,OAAoC,IAAhCrpI,KAAK8gI,gBAAgBngI,SACkC,WAAtDX,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU2G,MACS,SAAtDhgB,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU2G,MACS,UAAtDhgB,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU2G,MACS,UAAtDhgB,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU2G,MACS,OAAtDhgB,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU2G,OAIfhgB,KAAK8gI,gBAAgB9mH,OAAO,SAAA07G,GAC3D,QAAwB,IAAvBA,EAAIqL,gBAA8C,IAAtBrL,EAAIsL,eACE,WAAlCtL,EAAIzhH,WAAWoF,UAAU2G,MACS,SAAlC01G,EAAIzhH,WAAWoF,UAAU2G,MACS,UAAlC01G,EAAIzhH,WAAWoF,UAAU2G,MACS,UAAlC01G,EAAIzhH,WAAWoF,UAAU2G,MACS,OAAlC01G,EAAIzhH,WAAWoF,UAAU2G,QAAgBrf,SAERX,KAAK8gI,gBAAgBngI,QAGvDsmI,EAAA/mI,UAAAopI,8BAAR,WACI,GAAItpI,KAAK4hB,OAAOzE,WAAaC,GAAS7C,QAClC,OAAO,EAGX,GAA+B,IAA3Bva,KAAKsnI,aAAa1qG,KAAY,KACxB2sG,EAAavpI,KAAKsnI,aAAa5xG,SAASxzB,OAAOC,MAErD,IAAKonI,GAA6B,IAAfA,EACf,OAAO,EAIf,IAAK,IAAI51H,EAAQ,EAAGA,EAAQ3T,KAAK0nI,aAAa/mI,OAAQgT,IAClD,GAAI3T,KAAKsnI,aAAap2F,IAAIlxC,KAAK0nI,aAAa/zH,IACxC,OAAO,EAIf,OAAO,GAGJszH,EAAA/mI,UAAAioI,mBAAP,WACQnoI,KAAK2W,KAAK6yH,2BACVxpI,KAAKypI,6BAELzpI,KAAK0pI,8BAILzC,EAAA/mI,UAAAupI,2BAAR,WAAA,IAAA70H,EAAA5U,KACIA,KAAKsoI,iBAAiBqB,WAAY,MAC5B3wH,EAA4ChZ,KAAK4pI,iCAEvD5pI,KAAK2W,KAAK6yH,2BAA2BxpI,KAAK4hB,OAAQ5I,EAAiB,SAAC6wH,OAC1DC,EAAgBl1H,EAAKgN,OAAOzE,WAAaC,GAASjN,KACpD05H,EAAQvtH,IAAI,SAAAhD,GAAO,OAAAA,EAAMA,EAAIywH,eAAiBzwH,IAAOuwH,EAEzDj1H,EAAKo1H,aAAaF,GAClBl1H,EAAK0zH,iBAAiBqB,WAAY,EAClC/0H,EAAK0zH,iBAAiBxF,iBAIvBmE,EAAA/mI,UAAAwpI,2BAAP,eACQl1H,EAAOxU,KAAK4hB,OAAOmG,QAAQrH,aAAa1gB,KAAK2W,KAAKhJ,IAChDqL,EAAkBhZ,KAAK4pI,iCAE7B,GAAI5wH,EAAgBL,kBAAkBhY,OAAQ,KACpC4N,EAAQ,CAAEyK,gBAAiBA,GACjCxE,EAAOgG,GAASR,OAAO5K,GAAWoF,GAAOjG,OAGvC07H,EAAcjqI,KAAK4hB,OAAOzB,MAC1B2pH,EAAgB9pI,KAAK4hB,OAAOzE,WAAaC,GAASjN,KACpDqE,EAAK8H,IAAI,SAAA2E,GAAU,OAAAA,EAAOgpH,GAAehpH,EAAOgpH,GAAaF,eAAiB9oH,EAAOgpH,KACrFz1H,EAAK8H,IAAI,SAAA2E,GAAU,OAAAA,EAAOgpH,KAE9BjqI,KAAKgqI,aAAaF,IAGd7C,EAAA/mI,UAAA8pI,aAAR,SAAqBF,GACjB9pI,KAAKkqI,qBAAqBJ,GAC1B9pI,KAAKmqI,qBAAqBnqI,KAAK4hB,OAAOzE,WAAaC,GAASjN,MAC5DnQ,KAAKoqI,oBAGDnD,EAAA/mI,UAAAgqI,qBAAR,SAA6BJ,GACzB9pI,KAAK0nI,aAAe/nI,MAAMuT,KAAK,IAAI3C,IAAIu5H,KAGnC7C,EAAA/mI,UAAAiqI,qBAAR,SAA6BE,QAAA,IAAAA,IAAAA,GAAA,GAErBrqI,KAAKsnI,aADL+C,EACoB,IAAI95H,IAASvQ,KAAK8gI,gBAAgB31G,OAAO,SAAC5b,EAAKjN,GAC/D,MAAoC,OAAhCA,EAAE2R,WAAWoF,UAAU2G,KACvBtd,EAAY6M,EAAQ5P,MAAMuT,KAAM5Q,EAAE2R,WAAoB,UAAcyhB,UAAUpZ,IAAI,SAAAuQ,GAC9E,OAAA,IAAI1c,KAAK0c,GAAGk9G,kBAEpBrnI,EAAY6M,EAAQ,CAACjN,EAAE2R,WAAWuF,UAAYlX,EAAE2R,WAAWuF,UAAUuwH,eAAiBznI,EAAE2R,WAAWuF,aACpG,KAEiB,IAAIjJ,IAASvQ,KAAK8gI,gBAAgB31G,OAAO,SAAC5b,EAAKjN,GAC/D,MAAoC,OAAhCA,EAAE2R,WAAWoF,UAAU2G,KACvBtd,EAAY6M,EAAQ5P,MAAMuT,KAAM5Q,EAAE2R,WAAoB,UAAcyhB,WAExEhzB,EAAY6M,EAAQ,CAACjN,EAAE2R,WAAWuF,aACnC,MAIHytH,EAAA/mI,UAAAkqI,iBAAR,WAAA,IAAAx1H,EAAA5U,KACIA,KAAKynI,SAAW,IAAI9nI,UAEd2qI,EAAwBtqI,KAAKqpI,4BAA8BrpI,KAAKspI,gCAElEtpI,KAAK4hB,OAAOzE,WAAaC,GAAS7C,QAClCva,KAAKuqI,kBAELvqI,KAAKwqI,SAASF,GAGlBtqI,KAAKynI,SAASlzH,KAAK,SAACW,EAAG3V,GAAM,OAAAqV,EAAK61H,SAASv1H,EAAG3V,KAE1CS,KAAK4hB,OAAOzE,WAAaC,GAASjN,OAClCnQ,KAAK0nI,aAAe1nI,KAAK0nI,aAAaprH,IAAI,SAAAna,GAAS,OAAA,IAAIgO,KAAKhO,MAG5DnC,KAAKmnI,qBACLnnI,KAAK0qI,cAAcJ,GAGvBtqI,KAAK2qI,mBAEC3qI,KAAQ,IAAS+2C,WACnB/2C,KAAK4tC,IAAIrL,iBAIT0kG,EAAA/mI,UAAA0pI,+BAAR,mBACUgB,EAAiD5qI,KAAK2W,KAAKsO,yBAC3DjM,EAAkB,IAAIP,GAAyBmyH,EAAoBlyH,SAAUkyH,EAAoBh3H,eAEvG,IAAsB,IAAA9D,EAAAC,EAAA66H,EAAoBjyH,mBAAiB1I,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAxD,IAAMyX,EAAO1J,EAAA9N,MACd,GAAIwX,aAAmBlB,GAEnB,GADoB,EACD7E,YAAc5T,KAAK4hB,OAAOzB,MACzC,MAGRnH,EAAgBL,kBAAkBnW,KAAKmX,wGAG3C,OAAOX,GAGHiuH,EAAA/mI,UAAAqqI,gBAAR,WAAA,IAAA31H,EAAA5U,KACIA,KAAKonI,mBAAoB,EACzBpnI,KAAKqnI,wBAAyB,EAC9BrnI,KAAK0nI,aAAaj1H,QAAQ,SAAAqxB,OAChB+mG,EAAiB,IAAIC,GACvBhnG,IAAY9vB,WAAyB,OAAZ8vB,GAAgC,KAAZA,GACzClvB,EAAKgN,OAAOqD,0BACI,IAAZ6e,GAAoBlvB,EAAKksH,gBAAgBxpH,KAAK,SAAAo+G,GAAO,MAAkC,SAAlCA,EAAIzhH,WAAWoF,UAAU2G,QAC9E6qH,EAAez9C,YAAa,EAC5Bx4E,EAAKyyH,wBAAyB,IACX,IAAZvjG,GAAqBlvB,EAAKksH,gBAAgBxpH,KAAK,SAAAo+G,GAAO,MAAkC,UAAlCA,EAAIzhH,WAAWoF,UAAU2G,QAClF6qH,EAAez9C,YAAa,EAC5Bx4E,EAAKyyH,wBAAyB,GAElCwD,EAAez9C,YAAa,EAGhCy9C,EAAez9C,YAAa,EAEhCy9C,EAAe1oI,MAAQ2hC,EACvB+mG,EAAe1xD,MAAQr1C,EACvB+mG,EAAe51C,eAAgB,EAC/BrgF,EAAK6yH,SAASjlI,KAAKqoI,IAEnBj2H,EAAKuyH,qBAAsB,KAK/BF,EAAA/mI,UAAAsqI,SAAR,SAAiBF,GAAjB,IAAA11H,EAAA5U,KACIA,KAAKonI,mBAAoB,EACzBpnI,KAAKqnI,wBAAyB,MAExB0D,EAAa,IAAIna,GAAwB5wH,KAAK4hB,OAAOjL,KAAKuqE,QAC1DygD,EAAW,IAAIlR,GAAqBzwH,KAAK4hB,OAAOjL,KAAKuqE,QAE3DlhF,KAAK0nI,aAAaj1H,QAAQ,SAAAqxB,GACtB,GAAIA,IAAY9vB,WAAyB,OAAZ8vB,GAAgC,KAAZA,EAAgB,KACvD+mG,EAAiB,IAAIC,GAgB3B,GAfIl2H,EAAKgN,OAAOqD,yBACRqlH,GACI11H,EAAK0yH,aAAap2F,IAAIpN,GACtB+mG,EAAez9C,YAAa,EAE5By9C,EAAez9C,YAAa,EAEhCx4E,EAAKyyH,wBAAyB,IAE9BwD,EAAez9C,YAAa,EAC5Bx4E,EAAKwyH,mBAAoB,GAG7ByD,EAAez9C,YAAa,EAE5Bx4E,EAAKgN,OAAOzE,WAAaC,GAASjN,KAAM,KAClCijE,EAAO,IAAIjjE,KAAK2zB,GAEtB+mG,EAAe1oI,MAAQixE,EAEvBy3D,EAAe1xD,MAAQvkE,EAAKgN,OAAOuI,UAC/BvV,EAAKgN,OAAOuI,UAAUipD,GACtBuuD,EAASn9H,UAAU4uE,EAAMx+D,EAAKgN,OAAOjL,KAAKuqE,aAEvCtsE,EAAKgN,OAAOzE,WAAaC,GAAS9C,QACzCuwH,EAAe1oI,MAAQ2hC,EAEvB+mG,EAAe1xD,MAAQvkE,EAAKgN,OAAOuI,UAC/BvV,EAAKgN,OAAOuI,UAAU2Z,GACtBinG,EAAWvmI,UAAUs/B,EAASlvB,EAAKgN,OAAOjL,KAAKuqE,UAGnD2pD,EAAe1oI,MAAQ2hC,EAEvB+mG,EAAe1xD,MAAQvkE,EAAKgN,OAAOuI,UAC/BvV,EAAKgN,OAAOuI,UAAU2Z,GACtBA,GAGR+mG,EAAe51C,eAAgB,EAC/BrgF,EAAK6yH,SAASjlI,KAAKqoI,QAEnBj2H,EAAKuyH,qBAAsB,KAK/BF,EAAA/mI,UAAAyqI,iBAAR,eACUK,EAAa,IAAIF,GACvBE,EAAU59C,WAAaptF,KAAKonI,kBAC5B4D,EAAU7oI,MAAQnC,KAAK2W,KAAK4qH,gBAAgB0J,0BAC5CD,EAAU7xD,MAAQn5E,KAAK2W,KAAK4qH,gBAAgB0J,0BAC5CD,EAAU/1C,cAAgBj1F,KAAKqnI,uBAC/B2D,EAAUrE,WAAY,EACtB3mI,KAAKynI,SAAStzH,QAAQ62H,IAGlB/D,EAAA/mI,UAAAwqI,cAAR,SAAsBJ,OACZY,EAAU,IAAIJ,GAChB9qI,KAAK4hB,OAAOqD,yBACRqlH,IACItqI,KAAKsnI,aAAap2F,IAAI,MACtBg6F,EAAO99C,YAAa,EAEpB89C,EAAO99C,YAAa,GAI5B89C,EAAO99C,YAAa,EAExB89C,EAAO/oI,MAAQ,KACf+oI,EAAO/xD,MAAQn5E,KAAK2W,KAAK4qH,gBAAgB4J,sBACzCD,EAAOj2C,eAAgB,EACvBi2C,EAAOvE,WAAY,EACnBuE,EAAOtE,UAAW,EAClB5mI,KAAKynI,SAAStzH,QAAQ+2H,IAGlBjE,EAAA/mI,UAAAuqI,SAAR,SAAiBv1H,EAAmB3V,OAC5B6rI,EAASl2H,EAAE/S,MACXkpI,EAAS9rI,EAAE4C,MAKf,cAJI,IAAcib,GAAS/C,SACvB+wH,EAASl2H,EAAE/S,MAAMqrD,cACjB69E,EAAS9rI,EAAE4C,MAAMqrD,eAEjB49E,EAASC,GACD,EACDD,EAASC,EACT,EAEA,GAIPpE,EAAA/mI,UAAAorI,qBAAR,WACItrI,KAAKynI,SAASh1H,QAAQ,SAAAo4H,GAClBA,EAAez9C,YAAa,EAC5By9C,EAAe51C,eAAgB,IAEnCj1F,KAAKsoI,iBAAiB16F,IAAIrL,iBAK9B/iC,OAAAgC,eAAIylI,EAAA/mI,UAAA,kBAAe,KAAnB,WACI,OAAIF,KAAK2W,KAAK40H,mCACHvrI,KAAK2W,KAAK40H,mCAAmCx5F,SAE7C/xC,KAAKwrI,kEAIpBhsI,OAAAgC,eAAIylI,EAAA/mI,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAK2W,KAAK80H,kCACHzrI,KAAK2W,KAAK80H,kCAAkC15F,SAE5C/xC,KAAK0rI,iEAIpBlsI,OAAAgC,eAAIylI,EAAA/mI,UAAA,kBAAe,KAAnB,WACI,OAAIF,KAAK2W,KAAKg1H,mCACH3rI,KAAK2W,KAAKg1H,mCAAmC55F,SAE7C/xC,KAAK4rI,kEAIpBpsI,OAAAgC,eAAIylI,EAAA/mI,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAK2W,KAAKk1H,kCACH7rI,KAAK2W,KAAKk1H,kCAAkC95F,SAE5C/xC,KAAK8rI,iEAIpBtsI,OAAAgC,eAAIylI,EAAA/mI,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKynI,SAAS,KAAOznI,KAAKynI,SAAS,GAAGr6C,aAAeptF,KAAKynI,SAAS,GAAGxyC,+CAG1EgyC,EAAA/mI,UAAA6rI,YAAP,WAAA,IAAAn3H,EAAA5U,KACUgsI,EAAa,IAAIvzH,GAAyBmB,GAAetB,GAAItY,KAAK4hB,OAAOzB,OACzE8hF,EAAgBjiG,KAAKynI,SAAS5vH,MAAM,EAAG7X,KAAKynI,SAAS9mI,QAAQqZ,OAAO,SAAAtH,GAAM,OAAkB,IAAlBA,EAAG06E,aAGnF,GAFuBptF,KAAKynI,SAAS5vH,MAAM,EAAG7X,KAAKynI,SAAS9mI,QAAQ2W,KAAK,SAAA5E,GAAM,OAAkB,IAAlBA,EAAG06E,aAE9D,CAChB,GAAI6U,EAActhG,QAAUsmI,EAAoCgF,4BAC5DhqC,EAAcxvF,QAAQ,SAAAqxB,OACdzqB,EAAY,KAGRA,EAFc,OAAlByqB,EAAQ3hC,OAAkB2hC,EAAQ3hC,QAAU6R,UACxCY,EAAKgN,OAAOzE,WAAaC,GAAS7C,QACtB3F,EAAKoxH,gBAAgBliG,EAAQ3hC,MAAMsO,YAEnCmE,EAAKoxH,gBAAgB,UAGzBpxH,EAAKoxH,gBAAgB,SAErCgG,EAAWrzH,kBAAkBnW,KAAK,CAC9B6W,UAAWA,EACXzF,UAAWgB,EAAKgN,OAAOzB,MACvBzL,WAAYE,EAAKgN,OAAO4D,oBACxBhM,UAAWsqB,EAAQ3hC,cAGxB,KACG+pI,EAAkBjqC,EAAcnpF,UAAU,SAAAxW,GAAK,OAAY,OAAZA,EAAEH,OAAkBG,EAAEH,QAAU6R,YACjFm4H,OAAU,EACVD,GAAmB,IACnBC,EAAalqC,EAAciqC,GAC3BjqC,EAAc/mF,OAAOgxH,EAAiB,IAG1CF,EAAWrzH,kBAAkBnW,KAAK,CAC9B6W,UAAWrZ,KAAKgmI,gBAAgB,MAChCpyH,UAAW5T,KAAK4hB,OAAOzB,MACvBzL,WAAY1U,KAAK4hB,OAAO4D,oBACxBhM,UAAW,IAAIjJ,IAAIvQ,KAAK4hB,OAAOzE,WAAaC,GAASjN,KACjD8xF,EAAc3lF,IAAI,SAAAhd,GAAK,OAAA,IAAI6Q,KAAK7Q,EAAE6C,MAAMuxE,cAAep0E,EAAE6C,MAAMwxE,WAAYr0E,EAAE6C,MAAM+wE,WAAWc,gBAC9FiuB,EAAc3lF,IAAI,SAAAha,GAAK,OAAAA,EAAEH,WAG7BgqI,GACAH,EAAWrzH,kBAAkBnW,KAAK,CAC9B6W,UAAWrZ,KAAKgmI,gBAAgB,SAChCpyH,UAAW5T,KAAK4hB,OAAOzB,MACvBzL,WAAY1U,KAAK4hB,OAAO4D,oBACxBhM,UAAW2yH,EAAWhqI,QAKlCnC,KAAK8gI,gBAAkB,IAAInhI,MAC3BK,KAAKkkH,iBAAiB0b,eAAe5/H,KAAK4hB,OAAOzB,MAAO6rH,QAExDhsI,KAAKkkH,iBAAiB4b,YAAY9/H,KAAK4hB,OAAOzB,OAGlDngB,KAAKyoI,iBAGFxB,EAAA/mI,UAAAuoI,cAAP,WACQzoI,KAAK0lI,qBACL1lI,KAAKu9B,eAAeiE,KAAKxhC,KAAK0lI,oBAC9B1lI,KAAK0lI,mBAAqB,OAI3BuB,EAAA/mI,UAAAs2F,UAAP,SAAiB50D,GACI,WAAbA,EAAU3gC,KAAoC,QAAb2gC,EAAU3gC,KAC3CjB,KAAKyoI,gBAET7mG,EAAU6C,mBAGPwiG,EAAA/mI,UAAA4/H,YAAP,WACI9/H,KAAKkkH,iBAAiB4b,YAAY9/H,KAAK4hB,OAAOzB,OAC9CngB,KAAKsrI,wBAGFrE,EAAA/mI,UAAAksI,qBAAP,SAA4BxqG,GACP,UAAbA,EAAU3gC,KACVjB,KAAK8/H,eAINmH,EAAA/mI,UAAAmsI,qBAAP,eACU7J,EAAWxiI,KAAK4hB,OAAOqD,yBAC7B,OAAOu9G,GAAYA,EAAS7pH,mBAAqB6pH,EAAS7pH,kBAAkBhY,UACrE6hI,EAAS7pH,kBAAkB,GAA4BU,WACiB,OAA1EmpH,EAAS7pH,kBAAkB,GAA4BU,UAAU2G,OAGlEinH,EAAA/mI,UAAA8lI,gBAAR,SAAwBtC,GACpB,OAAQ1jI,KAAK4hB,OAAOzE,UAChB,KAAKC,GAAS7C,QACV,OAAO+3D,GAA2Bj+D,WAAWgF,UAAUqqH,GAC3D,KAAKtmH,GAAS9C,OACV,OAAO25D,GAA0B5/D,WAAWgF,UAAUqqH,GAC1D,KAAKtmH,GAASjN,KACV,OAAOoiE,GAAwBl+D,WAAWgF,UAAUqqH,GACxD,QACI,OAAOxvD,GAA0B7/D,WAAWgF,UAAUqqH,KAvoB1CuD,EAAAgF,4BAA8B,sBAPzDn6F,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,iCACVqjC,SAAA,43MAxFA9C,EAAAA,wDAyHCE,EAAAA,YAAWnhC,KAAA,CAAC,gDAGZyoC,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,qBAGlDF,EAAAA,UAASzoC,KAAA,CAAC,UAAW,CAAE0oC,KAAM2T,GAAsB1T,UAAQ,0BAG3DF,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE0oC,KAAMmuF,GAAoCluF,UAAQ,8BAG9EF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMgsF,GAA8B/rF,UAAQ,+BAG5EF,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE0oC,KAAM2vF,GAA+B1vF,UAAQ,8CAG9EF,EAAAA,UAASzoC,KAAA,CAAC,mCAAoC,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,6CAG3EF,EAAAA,UAASzoC,KAAA,CAAC,kCAAmC,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,6CAG1EF,EAAAA,UAASzoC,KAAA,CAAC,kCAAmC,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,8CAG1EF,EAAAA,UAASzoC,KAAA,CAAC,mCAAoC,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,OAilBhFswF,EAjpBA,GClDAqF,GAAA,WA0FI,SAAAA,EACWvkH,EACAilG,EACAp/E,EACAvN,EACA80B,EACCo3E,EACAvjC,EAC2Br/D,GAP5B3pC,KAAA+nB,QAAAA,EACA/nB,KAAAgtH,mBAAAA,EACAhtH,KAAA4tC,IAAAA,EACA5tC,KAAAqgC,WAAAA,EACArgC,KAAAm1D,KAAAA,EACCn1D,KAAAusI,kBAAAA,EACAvsI,KAAAgpG,WAAAA,EAC2BhpG,KAAA2pC,gBAAAA,EAvF/B3pC,KAAAypG,UAAY,IAAIjqE,EAAAA,QAmEjBx/B,KAAAwsI,SAAW,eAGXxsI,KAAA2oE,UAAY,EAOT3oE,KAAAumI,cAAgBzxH,GAAiB3B,KA0I/C,OA/MI3T,OAAAgC,eACI8qI,EAAApsI,UAAA,eAAY,KADhB,mBAEUusI,EAAiB,CACnB,mBACAzsI,KAAK4hB,OAAOqhG,eAGVnmF,EAAY,CACd4vG,gBAAiB1sI,KAAK4hB,OAAO2jG,YAC7BonB,IAAO3sI,KAAK4sI,UACZ1rI,KAAQlB,KAAK6sI,WACbC,uBAAwB9sI,KAAK4hB,OAAOzE,WAAaC,GAAS9C,OAC1DyyH,yBAA0B/sI,KAAK4hB,OAAO4gG,SACtCwqB,0BAA2BhtI,KAAK4hB,OAAO49E,YAAcx/F,KAAK2W,KAAKutG,iBAAiB0Y,mBAChFqQ,uBAAwBjtI,KAAKktI,YAGjC,IAAoB,IAAAp9H,EAAAC,EAAAvQ,OAAOwQ,KAAK8sB,IAAU7sB,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAvC,IAAMirI,EAAKl9H,EAAA9N,MACR26B,EAAUqwG,IACVV,EAAejqI,KAAK2qI,wGAG5B,OAAOV,EAAe73G,KAAK,sCAG/Bp1B,OAAAgC,eACI8qI,EAAApsI,UAAA,SAAM,KADV,WAEI,OAAIF,KAAK2W,KAAKy2H,iBACFptI,KAAK2W,KAAK02H,oBAAsB,EAAIrtI,KAAK4hB,OAAOlO,OAAS1T,KAAK2W,KAAK22H,iBAAmBttI,KAAK2W,KAAK42H,cAErG,sCAGX/tI,OAAAgC,eAAI8qI,EAAApsI,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKumI,gBAAkBzxH,GAAiB1B,qCAGnD5T,OAAAgC,eAAI8qI,EAAApsI,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKumI,gBAAkBzxH,GAAiBzB,sCAGnD7T,OAAAgC,eAAI8qI,EAAApsI,UAAA,cAAW,KAAf,WACI,OAAIF,KAAKumI,gBAAkBzxH,GAAiB3B,KAGjCnT,KAAKumI,gBAAkBzxH,GAAiB1B,IAAM,eAAiB,iBAEnE,gDAGX5T,OAAAgC,eAAI8qI,EAAApsI,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKumI,gBAAkBzxH,GAAiB3B,sCAGnD3T,OAAAgC,eAAI8qI,EAAApsI,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAK4hB,OAAOqD,yBAA2B,mCAAqC,0DASvFzlB,OAAAgC,eACI8qI,EAAApsI,UAAA,WAAQ,KADZ,WAEI,OAAUF,KAAKq7G,OAAM,IAAIr7G,KAAK4hB,OAAOzB,uCAgBlCmsH,EAAApsI,UAAA2uC,SAAP,WACI7uC,KAAKwtI,yBAGFlB,EAAApsI,UAAA0yC,UAAP,WACI5yC,KAAKytI,mBACLztI,KAAK4tC,IAAI+U,gBAGb2pF,EAAApsI,UAAAsmC,YAAA,WACIxmC,KAAKypG,UAAUvnG,MAAK,GACpBlC,KAAKypG,UAAUhjE,WAEXzmC,KAAK0tI,qBACL1tI,KAAK2pC,gBAAgBnI,KAAKxhC,KAAK0tI,sBAKhCpB,EAAApsI,UAAAqvC,QADP,SACej9B,GACNtS,KAAKgtH,mBAAmBd,mBACzB55G,EAAMmyB,kBACFzkC,KAAK2W,KAAKutG,iBAAiB0Y,oBACvB58H,KAAK4hB,OAAO49E,YAAex/F,KAAK4hB,OAAO2jG,aACtCvlH,KAAK2W,KAAKutG,iBAAiBkd,gBAAgBphI,KAAK4hB,OAAOzB,SACxDngB,KAAK2W,KAAKutG,iBAAiBgb,eAAiBl/H,KAAK4hB,QAE9C5hB,KAAK4hB,OAAO4gG,UACnBxiH,KAAK2tI,gBAKVrB,EAAApsI,UAAA0tI,qBAAP,SAA4Bt7H,GACxBA,EAAMmyB,kBAENzkC,KAAK6tI,wBAGTruI,OAAAgC,eAAI8qI,EAAApsI,UAAA,OAAI,KAAR,WACI,OAAOF,KAAK+nB,QAAQpR,sCAGd21H,EAAApsI,UAAAutI,iBAAV,WAAA,IAAA74H,EAAA5U,KACUmW,EAAOnW,KAAK+nB,QAAQpR,KAAK6N,mBAAmBlN,KAAK,SAACwF,GAAM,OAAAA,EAAElJ,YAAcgB,EAAKgN,OAAOzB,QAC1FngB,KAAKumI,cAAgBpwH,EAAOA,EAAK1B,IAAMK,GAAiB3B,MAGrDm5H,EAAApsI,UAAA4tI,mBAAP,SAA0Bx7H,GAClBtS,KAAK2W,KAAKutG,iBAAiB0Y,qBAC3BtqH,EAAMmyB,kBACNzkC,KAAK2tI,gBAILrB,EAAApsI,UAAAytI,YAAR,WAAA,IAAA/4H,EAAA5U,KAGU+tI,GAFe/tI,KAAK2W,KAAKmoG,oBAC3B9+G,KAAK2W,KAAKmoG,oBAAoBxnG,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcgB,EAAKgN,OAAOzB,QAAS,MAErFngB,KAAKumI,cAAgB,EAAIzxH,GAAiBzB,KAAOyB,GAAiB1B,IAAM0B,GAAiBzB,KACvFrT,KAAKumI,cAAgB,EAAIzxH,GAAiBzB,KAAOyB,GAAiB3B,KAAOnT,KAAKumI,cAAgB,EACpGvmI,KAAKumI,cAAgBwH,EACrB/tI,KAAK2W,KAAKpC,KAAK,CAAEX,UAAW5T,KAAK4hB,OAAOzB,MAAO1L,IAAKzU,KAAKumI,cAAe7xH,WAAY1U,KAAK4hB,OAAOwhG,kBAC5F5sG,SAAUxW,KAAK4hB,OAAO+E,gBAGtB2lH,EAAApsI,UAAA2tI,qBAAR,WACI,IAAK7tI,KAAK0tI,oBAAqB,KAErBM,EADehuI,KAAKqgC,WAAWC,cACCmqC,cAAc,IAAMzqE,KAAKiuI,qBAE/DjuI,KAAKkuI,2BAA2BzuG,iBAAiBnF,SAASt5B,OAASgtI,EACnEhuI,KAAKkuI,2BAA2BxpG,OAAS1kC,KAAK2W,KAAK+tB,OAEnD1kC,KAAK0tI,oBACD1tI,KAAK2pC,gBAAgBnM,OAAOypG,GAAqCjnI,KAAKkuI,2BAA4BluI,KAAKgpG,YAC3GhpG,KAAK2pC,gBAAgBvI,KAAKphC,KAAK0tI,oBAAqB1tI,KAAKkuI,8BAIzD5B,EAAApsI,UAAAstI,sBAAR,WAAA,IAAA54H,EAAA5U,KACIA,KAAKmuI,4BAA8B,CAC/B7xG,mBAAoBF,GAAkBnC,OACtCsC,cAAe+zC,EAAAA,aAAavsE,EAAQ,CAChCE,OAAQ,CACJP,SAAU,WAGlB84B,eAAgB8zC,EAAAA,aAAapsE,EAAS,CAClCD,OAAQ,CACJP,SAAU,YAKtB1D,KAAKkuI,2BAA6B,CAC9BtuG,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAIuI,GAAqBhoC,KAAKmuI,6BAChDzuG,eAAgB,IAAI8J,IAGxBxpC,KAAK2pC,gBAAgB9J,UAAUgF,KAC3B7qB,EAAAA,OAAO,SAACkxF,GAAY,OAAAA,EAAQv9F,KAAOiH,EAAK84H,sBACxC5oG,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,SAACnD,GAClChtB,EAAKw5H,iBAAiBxsG,KAG9B5hC,KAAK2pC,gBAAgB3J,SAAS6E,KAC1B7qB,EAAAA,OAAO,SAAAkxF,GAAW,OAAAA,EAAQv9F,KAAOiH,EAAK84H,sBACtC5oG,EAAAA,UAAU9kC,KAAKypG,YAAY1kE,UAAU,WACjCnwB,EAAKy5H,qBAIT/B,EAAApsI,UAAAkuI,iBAAR,SAAyBxsG,OACfvtB,EAAWutB,EAAUC,aAAqB,SAC5CxtB,GACAA,EAASipB,WAAWt9B,KAAK4hB,OAAQ5hB,KAAKusI,kBAAmBvsI,KAAK2pC,gBAAiB/H,EAAUj0B,KAIzF2+H,EAAApsI,UAAAmuI,gBAAR,WACIruI,KAAK0tI,oBAAsB,0BAhOlC57F,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,kBACVqjC,SAAA,i6BAtBKpyB,UAIA+qG,UAnBLz7E,EAAAA,yBAGA3L,EAAAA,kBAIAyD,EAAAA,cAUK43F,UANL1wB,EAAAA,mBASKlvE,GAAiBh+B,WAAA,CAAA,CAAAmR,KA+GjBC,EAAAA,OAAMnE,KAAA,CAAC+wB,yCArFXpwB,EAAAA,sBAGAA,EAAAA,4BAGAwgC,EAAAA,YAAWnhC,KAAA,CAAC,yBAyBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAiCZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+BAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4BAoCZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cA2G5Bs+H,EAlOA,GCXAgC,GAAA,WAyCI,SAAAA,EAAmB1gG,EAA+Bs2E,EAA8C1V,GAA7ExuG,KAAA4tC,IAAAA,EAA+B5tC,KAAAkkH,iBAAAA,EAA8ClkH,KAAAwuG,WAAAA,EAjCxFxuG,KAAA20D,UAAY,qCACZ30D,KAAAuuI,gBAAkB,KAGnBvuI,KAAAwuI,iBAAmB,EA2BnBxuI,KAAAi1C,SAAW,2BAGdj1C,KAAKkkH,iBAAiBsb,oBAsS9B,OAnSI8O,EAAApuI,UAAA2uC,SAAA,WACI7uC,KAAKkkH,iBAAiBob,uBAAuB52G,IAAI1oB,KAAK4hB,OAAOzB,OAAO,IAGxEmuH,EAAApuI,UAAAyhD,gBAAA,WACI3hD,KAAK0/H,wBAGF4O,EAAApuI,UAAA0yC,UAAP,WACI5yC,KAAK0/H,wBAIF4O,EAAApuI,UAAAuuI,aADP,SACoB7sG,GAEZ5hC,KAAK0uI,wBACL1uI,KAAKkkH,iBAAiBvtG,KAAKu8E,WAAWsqC,uBAAuBx9H,KAAK4hB,OAAQggB,GAE9EA,EAAU6C,mBAIP6pG,EAAApuI,UAAAyuI,kBADP,SACyB/sG,GACjB5hC,KAAK4uI,yBACL5uI,KAAKkkH,iBAAiBvtG,KAAKu8E,WAAW+pC,uBAAuBj9H,KAAK4hB,OAAQggB,GAE9EA,EAAU6C,mBAMP6pG,EAAApuI,UAAA2uI,cAAP,SAAqBl7H,OACXM,EAAajU,KAAK8gI,gBAAgBntH,GACxC,SAAUM,IAAcA,EAAWonF,YAMhCizC,EAAApuI,UAAAw/H,qBAAP,WACI1/H,KAAK8gI,gBAAkB9gI,KAAKkkH,iBAAiBic,eAAengI,KAAK4hB,OAAOzB,OACxEngB,KAAK8uI,wBAGTtvI,OAAAgC,eAAI8sI,EAAApuI,UAAA,WAAQ,KAAZ,WACI,IAAKF,KAAK4hB,OAAO49E,WAEb,OADAx/F,KAAKuuI,gBAAkB,KAChB,KAGX,GAAIvuI,KAAK4hB,OAAOmtH,mBAEZ,OADA/uI,KAAKuuI,gBAAkBvuI,KAAK4hB,OAAOmtH,mBAC5B/uI,KAAK4hB,OAAOmtH,uBAGjBl2H,EAAiB7Y,KAAK4hB,OAAOqD,yBACnC,OAAKpM,GAA8D,IAA5CA,EAAeF,kBAAkBhY,OAKpDX,KAAKkkH,iBAAiBkd,gBAAgBphI,KAAK4hB,OAAOzB,QAClDngB,KAAKuuI,gBAAkBvuI,KAAKgvI,cACrBhvI,KAAKgvI,gBAGhBhvI,KAAKuuI,gBAAkBvuI,KAAKivI,cACrBjvI,KAAKivI,gBAVRjvI,KAAKuuI,gBAAkBvuI,KAAKkvI,YACrBlvI,KAAKkvI,8CAgBpB1vI,OAAAgC,eAAI8sI,EAAApuI,UAAA,UAAO,KAAX,WACI,MAAO,CACH0hB,OAAQ5hB,KAAK4hB,yCAOd0sH,EAAApuI,UAAAivI,cAAP,SAAqBl7H,GACbA,EACAjU,KAAK8gI,gBAAgBruH,QAAQ,SAACwJ,GAC1BA,EAAKmxE,WAAcnxE,EAAKhI,aAAeA,IAEpCjU,KAAK8gI,gBAAgBngI,OAAS,IACrCX,KAAK8gI,gBAAgBruH,QAAQ,SAACwJ,GAC1BA,EAAKmxE,YAAa,IAEtBptF,KAAK8gI,gBAAgB,GAAG1zC,YAAa,OAGnCz5E,EAAQ3T,KAAKkkH,iBAAiB4Y,0BAA0BxrH,QAAQtR,KAAK4hB,QACvEjO,GAAS,IAAM3T,KAAKovI,qBAAqBz7H,GACzC3T,KAAKkkH,iBAAiB8Y,mBAAmBh9H,KAAKkkH,iBAAiB4Y,0BAA0BnpH,IAAQ,GAC1FA,GAAS,IAAM3T,KAAKqvI,oBAAoB17H,IAC/C3T,KAAKkkH,iBAAiB8Y,mBAAmBh9H,KAAKkkH,iBAAiB4Y,0BAA0BnpH,IAAQ,GAGrG3T,KAAKkkH,iBAAiBgb,eAAiBl/H,KAAK4hB,OAC5C5hB,KAAKkkH,iBAAiB0Y,oBAAqB,EAC3C58H,KAAKkkH,iBAAiBib,mBAAqBlrH,GAMxCq6H,EAAApuI,UAAAovI,cAAP,SAAqB1tG,EAA+B3lB,OAC1C4kH,EAAgB7gI,KAAK8gI,gBAAgBxvH,QAAQ2K,GACnDjc,KAAK4gI,iBAAiBC,GACtB7gI,KAAK6hI,aAMFyM,EAAApuI,UAAAyyH,eAAP,WACI3yH,KAAKkkH,iBAAiB4b,YAAY9/H,KAAK4hB,OAAOzB,OAC9CngB,KAAK4tC,IAAIrL,iBAMN+rG,EAAApuI,UAAAu3F,cAAP,SAAqB71D,EAA0B3tB,GAC1B,UAAb2tB,EAAU3gC,MACV2gC,EAAUqI,iBACVjqC,KAAKmvI,cAAcl7H,KAOpBq6H,EAAApuI,UAAAqvI,wBAAP,iBACI,OAAArhI,EAAA,IACKlO,KAAK20D,YAAa30D,KAAKwvI,mBACxBthI,EAAIlO,KAAK20D,UAAS,YAAa30D,KAAKwvI,sBAOrClB,EAAApuI,UAAA2hI,UAAP,SAAiBD,QAAA,IAAAA,IAAAA,GAAA,GACT5hI,KAAKuuI,kBAAoBvuI,KAAKivI,cAC1BrN,EACA5hI,KAAKyvI,oBAELzvI,KAAK0vI,eAEF1vI,KAAKuuI,kBAAoBvuI,KAAKkvI,YACrClvI,KAAK2vI,UAAUtvG,WAAWC,cAAcmqC,cAAc,mBAAmBl3B,QAClEvzC,KAAKuuI,kBAAoBvuI,KAAKgvI,eACrChvI,KAAK4vI,YAAYvvG,WAAWC,cAAcmqC,cAAc,mBAAmBl3B,SAI3E+6F,EAAApuI,UAAA0gI,iBAAR,SAAyBC,GACC,IAAlBA,GAAuD,IAAhC7gI,KAAK8gI,gBAAgBngI,QAKhDX,KAAKkkH,iBAAiB0c,iBAAiB5gI,KAAK4hB,OAAOzB,MAAO0gH,GAE1D7gI,KAAK8uI,uBACL9uI,KAAKkkH,iBAAiB0b,eAAe5/H,KAAK4hB,OAAOzB,QAP7CngB,KAAK2yH,kBAUL2b,EAAApuI,UAAAsvI,iBAAR,WACI,OAAOxvI,KAAKkkH,iBAAiBob,uBAAuBxxH,IAAI9N,KAAK4hB,OAAOzB,QAGhEmuH,EAAApuI,UAAA4uI,qBAAR,WAQI,GAPA9uI,KAAK8gI,gBAAgBruH,QAAQ,SAACo9H,GAAO,OAAAA,EAAGx0C,WAAY,IAEhDr7F,KAAK8vI,UACL9vI,KAAKkkH,iBAAiBob,uBAAuB52G,IAAI1oB,KAAK4hB,OAAOzB,OAAO,GAExEngB,KAAK4tC,IAAIrL,gBAELviC,KAAK+vI,WAAa/vI,KAAK8gI,gBAAgBngI,OAAS,EAAG,CAQnD,QAPMqvI,EAAYhwI,KAAK+vI,UAAUjsG,QAAQxD,cAAc44F,YACnD+W,EAAY,EACVC,EAAoBlwI,KAAK+vI,UAAUjsG,QAAQxD,cAAc3tB,SAC3Dw9H,EAAoB,EAClBC,EAAgBpwI,KAAK8vI,SAASxvG,cAAc44F,YAC9Cz/E,SAASp7B,SAASkoB,YAAY4xB,iBAAiBn4D,KAAK8vI,SAASxvG,eAAe,eAAgB,IAEvF3sB,EAAQ,EAAGA,EAAQu8H,EAAkBvvI,OAAS,EAAGgT,IAAS,CAC/D,KAAIs8H,EAAYC,EAAkBv8H,GAAOulH,YAAc8W,GAQhD,CACCr8H,EAAQ,GAAM,GAAKs8H,EAAYG,EAAgBJ,EAC/CG,IACOA,EAAoB,GAAKF,EAAYC,EAAkBv8H,EAAQ,GAAGulH,YAAckX,EAAgBJ,GACvGG,IAEJnwI,KAAKwuI,iBAAmBxuI,KAAK8gI,gBAAgBngI,OAASwvI,EACtDnwI,KAAKkkH,iBAAiBob,uBAAuB52G,IAAI1oB,KAAK4hB,OAAOzB,OAAO,GACpE,MAfA8vH,GAAaC,EAAkBv8H,GAAOulH,YAClCvlH,EAAQ,GAAM,EACdw8H,KAEAF,GAAax2F,SAASp7B,SAASkoB,YAAY4xB,iBAAiB+3E,EAAkBv8H,IAAQ,eAAgB,IACtGs8H,GAAax2F,SAASp7B,SAASkoB,YAAY4xB,iBAAiB+3E,EAAkBv8H,IAAQ,gBAAiB,KAcnH,IAAK,IAAInT,EAAI2vI,EAAmB3vI,EAAIR,KAAK8gI,gBAAgBngI,OAAQH,IAC7DR,KAAK8gI,gBAAgBtgI,GAAG66F,WAAY,EAExCr7F,KAAK4tC,IAAIrL,kBAIT+rG,EAAApuI,UAAA0uI,sBAAR,WACI,QAAS5uI,KAAK+vI,WAAa/vI,KAAK+vI,UAAUl3C,UAAUl4F,OAAS,GACzDX,KAAK+vI,UAAUl3C,UAAUltD,MAAMtL,WAAWC,cAAcmqC,cAAc,qBAAuBpsD,SAASmyE,gBAGtG89C,EAAApuI,UAAAwuI,qBAAR,WACI,GAAI1uI,KAAK+vI,UAAW,CAChB,GAAI/vI,KAAKwvI,oBAAsBxvI,KAAK+vI,UAAUl3C,UAAUo+B,KAAK52F,WAAWC,cAAcmqC,cAAc,uBAChGpsD,SAASmyE,cACT,OAAO,EACJ,IAAKxwF,KAAKwvI,oBAAsBxvI,KAAK8vI,SAASxvG,gBAAkBjiB,SAASmyE,cAC5E,OAAO,EAGf,OAAO,GAGH89C,EAAApuI,UAAAuvI,kBAAR,WACQzvI,KAAK+vI,UAAUl3C,UAAUl4F,OAAS,EAClCX,KAAK+vI,UAAUl3C,UAAUltD,MAAMtL,WAAWC,cAAcmqC,cAAc,mBAAmBl3B,QAEzFvzC,KAAK8vI,SAASxvG,cAAciT,SAI5B+6F,EAAApuI,UAAAwvI,aAAR,WACQ1vI,KAAKkkH,iBAAiBmb,gBACjBr/H,KAAKwvI,oBAA0D,IAApCxvI,KAAK+vI,UAAUl3C,UAAUl4F,OAGrDX,KAAK+vI,UAAUl3C,UAAUltD,MAAMtL,WAAWC,cAAcmqC,cAAc,mBAAmBl3B,QAFzFvzC,KAAK8vI,SAASxvG,cAAciT,QAK3BvzC,KAAKwvI,mBAGNxvI,KAAK+vI,UAAUl3C,UAAUo+B,KAAK52F,WAAWC,cAAcmqC,cAAc,qBAAqBl3B,QAF1FvzC,KAAK8vI,SAASxvG,cAAciT,SAOhC+6F,EAAApuI,UAAAkvI,qBAAR,SAA6BttH,GACzB,GAAI9hB,KAAKkkH,iBAAiBmsB,oBACtB,OAAO,EAGX,QADItO,EAAqB,EAChBpuH,EAAQ,EAAGA,EAAQ3T,KAAKkkH,iBAAiBlF,gBAAgBr+G,SAC9DohI,GAAsBtoF,SAASz5C,KAAKkkH,iBAAiBlF,gBAAgBrrG,GAAO1C,MAAO,IAC/EjR,KAAKkkH,iBAAiBlF,gBAAgBrrG,KAAW3T,KAAKkkH,iBAAiB4Y,0BAA0Bh7G,IAF/BnO,KAO1E,OAAOouH,GADO/hI,KAAKkkH,iBAAiB0V,sBAAwB55H,KAAKkkH,iBAAiB2V,4BAI9EyU,EAAApuI,UAAAmvI,oBAAR,SAA4BvtH,GACxB,GAAI9hB,KAAKkkH,iBAAiBmsB,oBACtB,OAAO,EAGX,QADIrO,EAAoB,EACfruH,EAAQ,EAAGA,EAAQ3T,KAAKkkH,iBAAiBlF,gBAAgBr+G,QAC1DX,KAAKkkH,iBAAiBlF,gBAAgBrrG,KAAW3T,KAAKkkH,iBAAiB4Y,0BAA0Bh7G,GAD/BnO,IAItEquH,GAAqBvoF,SAASz5C,KAAKkkH,iBAAiBlF,gBAAgBrrG,GAAO1C,MAAO,IAEtF,OAAO+wH,GAAqBhiI,KAAKkkH,iBAAiB2V,gDA9UzD/nF,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,0BACVqjC,SAAA,ywEA3BA9C,EAAAA,yBAgBK0vF,UAEA3F,sCAmBJrqH,EAAAA,2BAGA8nC,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,2BAGtDF,EAAAA,UAASzoC,KAAA,CAAC,gBAAiB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,2BAGxDF,EAAAA,UAASzoC,KAAA,CAAC,gBAAiB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,uBAGxDF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMgiD,GAAuB/hD,UAAQ,sBAG9DF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,uBAGlDF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMq/C,GAAkBp/C,UAAQ,yBAGzDF,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE0oC,KAAMq/C,GAAkBp/C,UAAQ,sBAG3DxH,EAAAA,YAAWnhC,KAAA,CAAC,wDAmBZY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,sCAS7BY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,cA8QxCsgI,EAhVA,GCIAgC,GAAA,WAiMI,SAAAA,EAAoB1iG,EACD7lB,EACA+b,EACAkpF,EACA9I,GAJClkH,KAAA4tC,IAAAA,EACD5tC,KAAA+nB,QAAAA,EACA/nB,KAAA8jC,QAAAA,EACA9jC,KAAAgtH,mBAAAA,EACAhtH,KAAAkkH,iBAAAA,EACvB,OA9LI1kH,OAAAgC,eACI8uI,EAAApwI,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK4hB,OAAO85F,6CAGvBl8G,OAAAgC,eACI8uI,EAAApwI,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAK4hB,OAAO+5F,gDAIvBn8G,OAAAgC,eACI8uI,EAAApwI,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK4hB,OAAOuxF,wCAGvB3zG,OAAAgC,eACI8uI,EAAApwI,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK4hB,OAAOg6F,wCAGvBp8G,OAAAgC,eAEI8uI,EAAApwI,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAK4hB,OAAOsxF,0CAGvB1zG,OAAAgC,eAEI8uI,EAAApwI,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAK4hB,OAAOi5F,0CAwCvBr7G,OAAAgC,eAEI8uI,EAAApwI,UAAA,QAAK,KAFT,WAGI,OAAOF,KAAK2W,KAAK45H,oBAAoBvwI,KAAK4hB,yCAO9CpiB,OAAAgC,eACI8uI,EAAApwI,UAAA,eAAY,KADhB,mBAEUusI,EAAiB,CACnB,uBACAzsI,KAAK4hB,OAAOshG,oBAGVpmF,EAAY,CACd0zG,uBAAwBxwI,KAAK+nH,SAC7B0oB,4BAA6BzwI,KAAKuqH,aAClCmmB,4BAA6B1wI,KAAK2wI,gBAClCC,0BAA2B5wI,KAAK6wI,gBAGpC,IAAwB,IAAA/gI,EAAAC,EAAAvQ,OAAOwQ,KAAK8sB,IAAU7sB,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA3C,IAAM2yE,EAAS5kE,EAAA9N,MACZ26B,EAAU+3C,IACV43D,EAAejqI,KAAKqyE,wGAG5B,OAAO43D,EAAe73G,KAAK,sCAM/Bp1B,OAAAgC,eACI8uI,EAAApwI,UAAA,SAAM,KADV,WAEI,OAAKF,KAAK4hB,OAAO0I,OAxHT,KA2HStqB,KAAK2W,KAAKooG,cAAcztG,QAAQtR,KAAK4hB,QAF3C,sCASfpiB,OAAAgC,eAAI8uI,EAAApwI,UAAA,OAAI,KAAR,WACI,OAAOF,KAAK+nB,QAAQpR,sCAOxBnX,OAAAgC,eAAI8uI,EAAApwI,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKkkH,iBAAiBgb,iBAAmBl/H,KAAK4hB,wCAOzDpiB,OAAAgC,eAAI8uI,EAAApwI,UAAA,eAAY,KAAhB,WACI,OAAQF,KAAK2W,KAAKk8F,kBAAmB7yG,KAAK4hB,OAAO2oG,8CAGrD/qH,OAAAgC,eACI8uI,EAAApwI,UAAA,oBAAiB,KADrB,WAEI,OAAOF,KAAK2W,KAAKk8F,kBAAoB7yG,KAAK4hB,OAAOjP,WAAaxB,KAAS,OAAS,oCAOpF3R,OAAAgC,eAAI8uI,EAAApwI,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK4hB,OAAO0I,wCAOvB9qB,OAAAgC,eAAI8uI,EAAApwI,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK2W,KAAKs4G,gBAAmBjvH,KAAK4hB,wCAM7CpiB,OAAAgC,eAAI8uI,EAAApwI,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAK4hB,OAAO4/F,YAAY50F,KAAK,SAAAoW,GAAS,OAAAA,EAAMunF,gDAMvD/qH,OAAAgC,eAAI8uI,EAAApwI,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK8jC,QAAQxD,cAAcpvB,wBAAwB/D,wCAOvDmjI,EAAApwI,UAAAgqE,YADP,SACmB53D,GAEfA,EAAM23B,kBAGHqmG,EAAApwI,UAAA0yC,UAAP,WACI5yC,KAAK4tC,IAAI+U,oCA9LhB7Q,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,wBACVqjC,SAAA,s8GAvBA9C,EAAAA,yBAOKtvB,UALL2jB,EAAAA,kBAOKonF,UAHAiU,2CAqBJxvF,EAAAA,YAAWnhC,KAAA,CAAC,mDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,8CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCi9B,EAAAA,YAAWnhC,KAAA,CAAC,0CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0BAAuB,CAAAkE,KACnCi9B,EAAAA,YAAWnhC,KAAA,CAAC,2CAUZW,EAAAA,sBAOAA,EAAAA,0BAMA8nC,EAAAA,UAASzoC,KAAA,CAACs+H,GAAwB,CAAE31F,UAAQ,wBAM5CF,EAAAA,UAASzoC,KAAA,CAACsgI,GAA+B,CAAE33F,UAAQ,sBAMnD+mC,EAAAA,aAAY1vE,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAAikF,IAA8B,CAAE55F,KAAM45F,mBAOpEnhG,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7Bi9B,EAAAA,YAAWnhC,KAAA,CAAC,0CASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yBAyBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAgCZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAsCZY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,cAehCsiI,EAtMA,GClBaQ,GAAyB,CAClCC,eAAgBvhI,GCiFuC,CACvDwhI,6BAA8B,iEAC9BC,mCAAoC,oBACpCC,2BAA4B,oBAC5BC,gBAAiB,SACjBC,0BAA2B,QAC3BC,0BAA2B,QAC3BC,gCAAiC,mBACjCC,wCAAyC,MACzCC,qCAAsC,eACtChQ,6BAA8B,MAC9BC,4BAA6B,KAC7BgQ,wBAAyB,iBACzBC,yBAA0B,WAC1BC,+BAAgC,mBAChCC,2BAA4B,cAC5BC,yBAA0B,YAC1BC,uBAAwB,SACxBC,6BAA8B,iBAC9BC,sBAAuB,QACvBC,yBAA0B,YAC1BC,qBAAsB,OACtBC,wBAAyB,WACzBC,uBAAwB,SACxBC,sBAAuB,QACvBC,sBAAuB,QACvBC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,0BAA2B,aAC3BC,0BAA2B,aAC3BC,yBAA0B,YAC1BC,yBAA0B,YAC1BC,yBAA0B,YAC1BC,4BAA6B,eAC7BC,yBAA0B,YAC1BC,qCAAsC,2BACtCC,kCAAmC,wBACnCC,qBAAsB,OACtBC,sBAAuB,QACvBC,oBAAqB,MACrBC,sCAAuC,gBACvCC,uBAAwB,QACxBC,qBAAsB,MACtBC,qBAAsB,MACtBC,qBAAsB,MACtBC,yBAA0B,MAC1BC,0BAA2B,WAC3BC,wBAAyB,SACzBC,kCAAmC,YACnCC,wCAAyC,OACzCC,mCAAoC,aACpCC,yCAA0C,QAC1CC,oCAAqC,OACrCC,kCAAmC,YACnCC,wCAAyC,MACzCC,mCAAoC,aACpCC,yCAA0C,OAC1CC,qCAAsC,OACtCC,4BAA6B,uBAC7BC,iCAAkC,aAClCC,mCAAoC,eACpCC,oCAAqC,iCACrCC,sBAAuB,SACvBC,qBAAsB,QACtBC,kCAAmC,SACnC5J,0BAA2B,aAC3BE,sBAAuB,WACvB2J,oBAAqB,cACrBC,mBAAoB,aACpBC,qBAAsB,eACtBhN,2BAA4B,cAC5BF,6BAA8B,gBAC9BC,2BAA4B,cAC5BF,8BAA+B,iBAC/BoN,6BAA8B,mBAC9BC,+BAAgC,qBAChCC,mCAAoC,cACpCC,kCAAmC,aACnCC,mCAAoC,YACpCC,0CAA2C,qBAC3CC,yCAA0C,oBAC1CC,mCAAoC,MACpCC,kCAAmC,KACnCC,uCAAwC,YACxCC,iCAAkC,UAClCC,gCAAiC,SACjCC,wCAAyC,iBACzCC,sCAAuC,sEACvCC,4CAA6C,gBAC7CC,2CAA4C,UDzK5CC,qBAAsBzmI,GEP6C,CACnE0mI,mBAAoB,KACpBC,uBAAwB,WFMxBC,oBAAqB5mI,GGT4C,CACjE6mI,oBAAqB,oBHWzB,SAASC,GAAsBC,EAAkCC,eAC7D,IAAkB,IAAA1mI,EAAAC,EAAAvQ,OAAOwQ,KAAKwmI,IAAWvmI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAtC,IAAMjB,EAAGgP,EAAA9N,MACNlB,KAAOs1I,IACPA,EAAet1I,GAAOu1I,EAAWv1I,0GIb7C,IAAAw1I,GAAA,WAAA,SAAAA,IAEcz2I,KAAA02I,gBAAmD,IAAIpmI,IAE1DtQ,KAAA22I,cAAgB,qBAChB32I,KAAA42I,cAAgB,EAChB52I,KAAA62I,mBAAqB,EACrB72I,KAAA8+G,oBAAsB,GACtB9+G,KAAA82I,kBAAoB,EACpB92I,KAAA+2I,iBAAkB,EAmN7B,OAjNWN,EAAAv2I,UAAA82I,qBAAP,WACIh3I,KAAKikH,qBACLjkH,KAAK2W,KAAKwQ,eAAc,IAGrBsvH,EAAAv2I,UAAAyiB,kBAAP,SAAyB3U,GACrB,GAAKhO,KAAK02I,gBAAgB95G,KAA1B,CACA,IAAK5uB,EAKD,OAJAhO,KAAK02I,gBAAgBnrG,aACjBvrC,KAAK2W,MAAQ3W,KAAK2W,KAAKgiH,sBACvB34H,KAAK82I,qBAIb,GAAI9oI,EAAKwG,KAAM,KACLuG,EAAQ/a,KAAK2W,KAAKoF,WAAa/N,EAAKwG,KAAKxU,KAAK2W,KAAKoF,YAAc/N,EAAKwG,KAC5ExU,KAAKkjB,gBAAgBnI,GAEzB,GAAI/M,EAAK+M,QAAU/G,WAA4B,OAAfhG,EAAK+M,MAAgB,KAC7C8Z,EAAa7mB,EAAK0iG,OAAS1wG,KAAK2W,KAAKsJ,WAAW3I,KAAK,SAAA4I,GAAO,OAAAA,EAAIvM,QAAU3F,EAAK0iG,OAAOM,WAAU7wF,MAAQnM,UAC5G,GAAI6gB,GAAc70B,KAAK2W,KAAKwM,YAAe,WAErC8zH,EAAkBj3I,KAAK2W,KAAKmoG,sBACyD,IAAnF9+G,KAAK2W,KAAKmoG,oBAAoBxiG,IAAI,SAAAnG,GAAQ,OAAAA,EAAKvC,YAAWtC,QAAQujB,GACtEA,GAAcoiH,IACdpiH,EAAa7gB,WAEjBhU,KAAKkjB,gBAAgBlV,EAAK+M,MAAO8Z,MAIlC4hH,EAAAv2I,UAAAgjB,gBAAP,SAAuBnI,EAAO8Z,GAA9B,IAAAjgB,EAAA5U,KAEI,GADAA,KAAKk3I,mBAAmBl3I,KAAK22I,cAAe9hH,GACV,IAA9B70B,KAAK02I,gBAAgB95G,OAAc58B,KAAK02I,gBAAgBxlG,IAAIlxC,KAAK22I,eACrE,GAAI32I,KAAKm3I,WAAY,CACjB,GAAIn3I,KAAK2W,KAAKmF,aAAawE,SAAWtgB,KAAK+2I,gBAIvC,OAHA/2I,KAAK+2I,iBAAkB,OAEvB/2I,KAAK02I,gBAAgBnrG,QAGzBvrC,KAAKo3I,2BAA2Br8H,EAAO8Z,QACpC,GAAI70B,KAAKq3I,mBACRr3I,KAAK2W,KAAKmF,aAAawE,SAAWtgB,KAAK+2I,kBACvC/2I,KAAK+2I,iBAAkB,EACvB/2I,KAAK02I,gBAAgBnrG,aAEtB,CACevrC,KAAKs3I,aAAav8H,EAAO/a,KAAK2W,KAAKmoG,qBAC3CrsG,QAAQ,SAAA9E,GACfiH,EAAKsiI,mBAAmBvpI,EAAIknB,OAKhC4hH,EAAAv2I,UAAA6kH,8BAAP,SAAqClwF,GACjC70B,KAAK02I,gBAAgBjkI,QAAQ,SAAC8kI,GACtBA,EAAMzpI,IAAI+mB,IACV0iH,EAAM3qG,UAAO/X,KAGjB70B,KAAK2W,KAAKgiH,sBAAyB34H,KAAK82I,qBAGzCL,EAAAv2I,UAAAs3I,qBAAP,WACI,GAAIx3I,KAAK42I,cACL,OAAO52I,KAAK42I,cAEhB,IAAK52I,KAAK2W,KAAKnC,KAAO,OAAOxU,KAAK42I,cAAgB,MAC9Ca,EAAmB,EAWvB,OAVAz3I,KAAK2W,KAAKsJ,WAAWjG,OAAO,SAACkG,GAAQ,OAAAA,EAAIw3H,aAAex3H,EAAI2J,SAAQpX,QAAQ,SAACmP,OACnE+1H,EAA0B/1H,EAAOsnC,UAAUy4D,QAAQ,GAAI,GAAI//F,EAAOzB,OAAOxf,OAC3Eg3I,GACIF,EAAmBE,IACnBF,EAAmBE,KAI/B33I,KAAK62I,mBAAqBY,EAC1Bz3I,KAAK42I,cAAiBa,EAAmBz3I,KAAK2W,KAAKihI,qBAC5C53I,KAAK42I,eAGTH,EAAAv2I,UAAA23I,mBAAP,SAA0B98H,EAAOvG,OACzBsjI,EAAe93I,KAAK02I,gBAAgB5oI,IAAIiN,GAK5C,OAJK+8H,IACDA,EAAe,IAAIxnI,IACnBtQ,KAAK02I,gBAAgBhuH,IAAI3N,EAAO+8H,IAE/B93I,KAAKijB,sBAAyBzO,GACnCxU,KAAK2W,KAAKsJ,WAAWjG,OAAO,SAAAkG,GAAO,OAAAA,EAAIw3H,aAAYjlI,QAAQ,SAACmP,GACnDk2H,EAAahqI,IAAI8T,EAAOzB,QACzB23H,EAAapvH,IAAI9G,EAAOzB,MACpByB,EAAOsnC,UAAUy4D,QAAQntG,EAAK8H,IAAI,SAAAlb,GAAK,OAAAA,EAAEwgB,EAAOzB,SAAS3L,EAAMoN,EAAOzB,UAG3E23H,GAP0CA,GAU9CrB,EAAAv2I,UAAA+jH,mBAAP,WACIjkH,KAAK42I,cAAgB,EACpB52I,KAAS,KAASglH,sBACfhlH,KAAK2W,KAAKgiH,sBACV34H,KAAK82I,qBAINL,EAAAv2I,UAAA63I,mBAAP,SAA0BC,GACtB,GAAkC,IAA9Bh4I,KAAK02I,gBAAgB95G,MAAe58B,KAAKijB,qBAC7C,GAAwC,IAApCjjB,KAAK8+G,oBAAoBn+G,OAA7B,CAIA,GAA4B,IAAxBq3I,EAAar3I,OAGb,OAFAX,KAAK8+G,oBAAsB,QAC3B9+G,KAAK2iB,oBAGT3iB,KAAKi4I,2BAA2Bj4I,KAAK8+G,oBAAqBk5B,GAC1Dh4I,KAAK8+G,oBAAsBk5B,EAAaxiI,YAAY8G,IAAI,SAAA2E,GAAU,OAAAA,EAAOrN,iBATrE5T,KAAK8+G,oBAAsBk5B,EAAaxiI,YAAY8G,IAAI,SAAA2E,GAAU,OAAAA,EAAOrN,aAYjFpU,OAAAgC,eAAWi1I,EAAAv2I,UAAA,uBAAoB,KAA/B,WAEI,OAD0BF,KAAK2W,KAAKsJ,WAAWjG,OAAO,SAAAkG,GAAO,OAAAA,EAAIw3H,aAAex3H,EAAI2J,SAC3DlpB,OAAS,mCAG9B81I,EAAAv2I,UAAAg3I,mBAAR,SAA2BvpI,EAAIknB,GAC3B,GAAI70B,KAAK02I,gBAAgB5oI,IAAIH,GAAK,KACxBuqI,EAAmBrjH,GAAc70B,KAAK2W,KAAKsO,2BACmE,IAA5GjlB,KAAK2W,KAAKsO,yBAAyBtM,kBAAkB2D,IAAI,SAACnG,GAAS,OAAAA,EAAKvC,YAAWtC,QAAQujB,GAC/FA,GAAc70B,KAAK02I,gBAAgB5oI,IAAIH,GAAIG,IAAI+mB,KAAgBqjH,EAC/Dl4I,KAAK02I,gBAAgB5oI,IAAIH,GAAIi/B,UAAO/X,GAEpC70B,KAAK02I,gBAAgB9pG,UAAOj/B,GAE5BA,IAAO3N,KAAK22I,eAAiB32I,KAAK2W,KAAKgiH,sBACvC34H,KAAK82I,sBAKTL,EAAAv2I,UAAAo3I,aAAR,SAAqBv8H,EAAO+jG,GAA5B,IAAAlqG,EAAA5U,KACI,GAAmC,IAA/B8+G,EAAoBn+G,OAAgB,MAAO,OACzCw3I,EAAa,GACf3jI,EAAOxU,KAAK2W,KAAKnC,KACjBxU,KAAK2W,KAAKmF,aAAawE,UACvB9L,EAAOgG,GAASqB,kBACZzM,GAAWpP,KAAK2W,KAAKnC,MACrBxU,KAAK2W,KAAKmF,aAAayE,sBAAqB,GAC5CvgB,KAAK2W,KAAKoF,iBAGZuF,EAAUthB,KAAK2W,KAAKoF,WAAavH,EAAK8C,KAAK,SAAA6B,GAAO,OAAAA,EAAIvE,EAAK+B,KAAKoF,cAAgBhB,IAASA,EAC3FpN,EAAK,KAMT,OALAmxG,EAAoBrsG,QAAQ,SAAA0D,GACxBxI,GAAM,IAAIwI,EAAKvC,UAAS,OAAO0N,EAAQnL,EAAKvC,WAAU,IAClDukI,EAAW31I,KAAKmL,EAAGhL,OAAO,OAC1BgL,GAAM,OAEPwqI,GAGH1B,EAAAv2I,UAAAk3I,2BAAR,SAAmCr8H,EAAO8Z,OAClCxT,EAAMrhB,KAAK2W,KAAKO,QAAQpJ,IAAIiN,GAChC,GAAKsG,EAEL,IADAA,EAAMA,EAAI1O,SAAW0O,EAAMA,EAAI3K,OACxB2K,GACHtG,EAAQsG,EAAItG,MACZ/a,KAAKk3I,mBAAmBn8H,EAAO8Z,GAC/BxT,EAAMA,EAAI3K,QAKV+/H,EAAAv2I,UAAAk4I,wBAAR,SAAgCr9H,EAAO8Z,KAG/B4hH,EAAAv2I,UAAA+3I,2BAAR,SAAmC5jD,EAAS2jD,GAA5C,IAAApjI,EAAA5U,KACUq4I,EAAiBL,EAAaxiI,YAAY8G,IAAI,SAAA2E,GAAU,OAAAA,EAAOrN,YAC/D0kI,EAAcN,EAAaO,iBACjC,GAAIlkD,EAAQ1zF,QAAU03I,EAAe13I,OAAQ,KACnC63I,EAAUH,EAAexgI,MAAM,EAAGw8E,EAAQ1zF,QAAQ8P,WACpD4jF,EAAQ5jF,aAAe+nI,GACvBx4I,KAAK2iB,wBAEN,CAEH,GADiB0xE,EAAQx8E,MAAM,EAAGwgI,EAAe13I,QAAQ8P,aACxC4nI,EAAe5nI,WAE5B,YADAzQ,KAAK2iB,oBAGT21H,EAAYh8H,IAAI,SAAA4D,GAAO,OAAAA,EAAIC,QAAO1N,QAAQ,SAAAgmI,GACtC7jI,EAAK8hI,gBAAgBjkI,QAAQ,SAAC8kI,EAAO5pI,IACL,IAAzBA,EAAG2D,QAAQmnI,IACX7jI,EAAK8hI,gBAAgB9pG,UAAOj/B,SAM/CnO,OAAAgC,eAAYi1I,EAAAv2I,UAAA,aAAU,KAAtB,WACI,MAAyD,kBAAlDF,KAAK2W,KAAK2pB,cAAc+uB,QAAQh6C,+CAG3C7V,OAAAgC,eAAYi1I,EAAAv2I,UAAA,qBAAkB,KAA9B,WACI,MAAyD,0BAAlDF,KAAK2W,KAAK2pB,cAAc+uB,QAAQh6C,mEAzN9CrD,EAAAA,aA4NDykI,EA5NA,GCNAiC,GAAA,WA8BI,SAAAA,EAAoB50G,GAAA9jC,KAAA8jC,QAAAA,EARb9jC,KAAA24I,qBAAuB,EAGvB34I,KAAA03I,YAAa,EAkBb13I,KAAA2oE,SAAW,EAgItB,OAtIInpE,OAAAgC,eACIk3I,EAAAx4I,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAK4hB,OAAOoI,8CAMvBxqB,OAAAgC,eACWk3I,EAAAx4I,UAAA,aAAU,KADrB,WAEI,MAAO,WAAWF,KAAK4hB,OAAOzB,uCAO3Bu4H,EAAAx4I,UAAAwuD,QADP,WAEI1uD,KAAKyyC,SAAU,GAIZimG,EAAAx4I,UAAA0uD,OADP,WAEI5uD,KAAKyyC,SAAU,GAGnBjzC,OAAAgC,eAAck3I,EAAAx4I,UAAA,gBAAa,KAA3B,WACI,MAAO,CACHmhB,IAAKrhB,KAAKwhB,SACVI,OAAQ5hB,KAAK4hB,OAAO05F,kBAAoBt7G,KAAK4hB,OAAOlL,OAAOsT,aAAehqB,KAAKgiB,mBAC/Eu4G,cAAc,oCAKtBme,EAAAx4I,UAAA48D,cADA,SACcxqD,OAEJrR,EAAMqR,EAAMrR,IAAIoU,cAChBm9F,EAAOlgG,EAAMmoG,QACbn/D,EAAQhpC,EAAMinF,SAEpB,GAAKtmF,GAAei+B,IAAIjwC,GAAxB,CAGAqR,EAAMmyB,sBACAz2B,EAAO,CAAEyvG,WAAY,cAAez8G,OAAQhB,KAAMsS,MAAOA,EAAO8P,QAAQ,GAE9E,GADApiB,KAAK2W,KAAK+mG,cAAcn7F,KAAKvU,IACzBA,EAAKoU,SAGT9P,EAAM23B,iBAEDjqC,KAAK44I,qBAAqB33I,EAAKuxG,IAApC,CAEAxyG,KAAK2W,KAAKkM,iBAAiB+uF,cAAct2D,MAAQA,KAAmB,QAARr6C,OACtDogB,EAAMrhB,KAAK64I,qBAAqB74I,KAAKwhB,UAC3C,OAAQvgB,GACJ,IAAK,MACD,GAAIq6C,EAAO,CACPt7C,KAAK2W,KAAKu8E,WAAWgqB,mBAAmB77F,EAAKrhB,KAAKw6G,eAClD,MAEJx6G,KAAK2W,KAAKu8E,WAAWiqB,WAAW97F,EAAKrhB,KAAKw6G,eAC1C,MACJ,IAAK,YACL,IAAK,OACL,IAAK,OACD,GAAIhI,GAAgB,SAARvxG,EAAgB,CACxBjB,KAAK2W,KAAKu8E,WAAW/J,cAAcnpF,KAAKwhB,UAAU,GAClD,MAEJxhB,KAAK2W,KAAKu8E,WAAWhK,mBAAmBlpF,KAAKsgC,cAAetgC,KAAKw6G,eACjE,MACJ,IAAK,MACL,IAAK,aACL,IAAK,QACD,GAAIhI,GAAgB,QAARvxG,EAAe,CACvBjB,KAAK2W,KAAKu8E,WAAW9J,aAAappF,KAAKwhB,UAAU,GACjD,MAEJxhB,KAAK2W,KAAKu8E,WAAWjK,oBAAoBjpF,KAAKsgC,cAAetgC,KAAKw6G,eAClE,MACJ,IAAK,UACL,IAAK,KACGx6G,KAAK2W,KAAKu8E,WAAW0qB,WAAWv8F,EAAKrhB,KAAKw6G,eAC9C,MACJ,IAAK,YACL,IAAK,OACGx6G,KAAK2W,KAAKu8E,WAAW4qB,aAAaz8F,EAAKrhB,KAAKw6G,mBAK5Dh7G,OAAAgC,eAGIk3I,EAAAx4I,UAAA,QAAK,KAHT,WAII,OAAOF,KAAK4hB,OAAO2nG,gDAGvB/pH,OAAAgC,eAAIk3I,EAAAx4I,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAGxB9gC,OAAAgC,eAAIk3I,EAAAx4I,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAK4hB,OAAOzE,0CAGvB3d,OAAAgC,eAAIk3I,EAAAx4I,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK4hB,OAAOjL,KAAKihI,sDAM5Bp4I,OAAAgC,eAAWk3I,EAAAx4I,UAAA,OAAI,KAAf,WACI,OAAQF,KAAK4hB,OAAW,sCAGpB82H,EAAAx4I,UAAA24I,qBAAR,SAA6Br3H,GAEzB,OADoBxhB,KAAK2W,KAAK0iH,iBAAiBzmH,UAC5B0E,KAAK,SAACwhI,GAAO,OAAAA,EAAGC,eAAiBv3H,IAAU8e,eAG1Do4G,EAAAx4I,UAAA04I,qBAAR,SAA6B33I,EAAKuxG,GAC9B,OAAIA,GAC8E,IAAxE,CAAC,UAAW,YAAa,KAAM,OAAQ,MAAO,QAAQlhG,QAAQrQ,IAE0D,IAA3H,CAAC,OAAQ,KAAM,OAAQ,QAAS,YAAa,UAAW,YAAa,aAAc,OAAQ,MAAO,OAAOqQ,QAAQrQ,IAGrHy3I,EAAAx4I,UAAA84I,iBAAP,SAAwBC,GACpB,OAAOj5I,KAAK2W,KAAK4qH,gBAAgB,oBAAoB0X,EAAQh4I,MAAUg4I,EAAQ9/D,2BAlKtFrnC,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,wBACVqjC,SAAA,+pCAX2EzO,EAAAA,sDAe1E30B,EAAAA,sBAGAA,EAAAA,oCAGAA,EAAAA,0BAGAA,EAAAA,uBAGAA,EAAAA,wBAMAA,EAAAA,OAAK,CAAAuD,KACLi9B,EAAAA,YAAWnhC,KAAA,CAAC,kDAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mDAGZY,EAAAA,aAAYZ,KAAA,CAAC,yBAKbY,EAAAA,aAAYZ,KAAA,CAAC,+BAabY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,0BA2DzBmhC,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7Bi9B,EAAAA,YAAWnhC,KAAA,CAAC,oBAAiB,CAAAkE,KAC7Bi9B,EAAAA,YAAWnhC,KAAA,CAAC,uBAuCjB0qI,EA3KA,GCAAQ,GAAA,WA4DI,SAAAA,EAAmBnxH,EACA+b,EACA8J,GAFA5tC,KAAA+nB,QAAAA,EACA/nB,KAAA8jC,QAAAA,EACA9jC,KAAA4tC,IAAAA,EAtBZ5tC,KAAA24I,sBAAwB,EAyDnC,OAvDIn5I,OAAAgC,eACI03I,EAAAh5I,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK2T,uCAGhBnU,OAAAgC,eAAI03I,EAAAh5I,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK2W,KAAK+L,eAAe80H,uBAAyB,mCAgBtD0B,EAAAh5I,UAAA0yC,UAAP,WACI5yC,KAAK4tC,IAAI+U,gBAGbnjD,OAAAgC,eAAW03I,EAAAh5I,UAAA,OAAI,KAAf,WACI,OAAOF,KAAK+nB,QAAQpR,sCAGxBnX,OAAAgC,eAAW03I,EAAAh5I,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAGjB44G,EAAAh5I,UAAAi5I,mBAAP,SAA0BtkH,GACtB,OAAK70B,KAAKkpD,UAAUp7C,IAAI+mB,GAGjB70B,KAAKkpD,UAAUp7C,IAAI+mB,GAFf,IASfr1B,OAAAgC,eAAW03I,EAAAh5I,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK2W,KAAKooG,+CAMrBv/G,OAAAgC,eAAW03I,EAAAh5I,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK2W,KAAKqoG,qEA1ExBltE,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,uBACVqjC,SAAA,2wEACA5iC,UAAW,CAACwtC,iDAXPh9B,UARL2jB,EAAAA,kBAEA2L,EAAAA,wDAqBCtgC,EAAAA,sBAGAA,EAAAA,qBAGAA,EAAAA,oCAGAA,EAAAA,4BAGAwgC,EAAAA,YAAWnhC,KAAA,CAAC,4CASZ0vE,EAAAA,aAAY1vE,KAAA,CAAC0qI,GAAyB,CAAEhiG,KAAMgiG,yBAM9CjiG,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMoS,GAAuBnS,UAAQ,OAwCnEuiG,EAjGA,OCKIpkF,KAAA,EACAglB,KAAA,EACAs/D,IAAA,EACAr/D,MAAA,EACAs/D,OAAA,EACAC,QAAA,EACAC,SAAA,EACAC,WAAA,EACAC,YAAA,0NAIJ,IAAAC,GAAA,WAqCI,SAAAA,EAAoB3yB,EAAyB5xD,GAA7C,IAAAvgD,EAAA5U,KAAoBA,KAAA+mH,IAAAA,EAAyB/mH,KAAAm1D,KAAAA,EAlB7Cn1D,KAAA25I,WAAa,IAAIxwH,EAAAA,aAGjBnpB,KAAA45I,aAAe,IAAIzwH,EAAAA,aAUTnpB,KAAA65I,KAAO,IAAIr6G,EAAAA,QACXx/B,KAAA85I,cAAgBC,GAAoBjlF,KA4B9C90D,KAAAg6I,mBAAqB,SAAC75G,GAClB,GAAKvrB,EAAKqlI,WAAV,KAGMn9H,EAAIqjB,EAAGwqC,QACPxwC,EAAIgG,EAAGyqC,QACPpjE,EAAYoN,EAAKslI,mBAAmBp9H,EAAGqd,GACzC3yB,IAAcoN,EAAKklI,gBAGvBllI,EAAKs5B,cACLt5B,EAAKulI,KAAOvlI,EAAKwlI,WAAWr1G,UAAU,WAAM,OAAAnwB,EAAKglI,aAAar3H,KAAK/a,KACnEoN,EAAKklI,cAAgBtyI,KAGzBxH,KAAAq6I,kBAAoB,WACXzlI,EAAKqlI,aAGVrlI,EAAK+kI,WAAWp3H,MAAK,GACrB3N,EAAKs5B,cACLt5B,EAAKklI,cAAgBC,GAAoBjlF,OA5CzC90D,KAAKo6I,WAAa3hF,EAAAA,SAAS,KAAK5zB,KAC5BC,EAAAA,UAAU9kC,KAAK65I,MACf7/H,EAAAA,OAAO,WAAM,OAAApF,EAAKqlI,cAuF9B,OAzHIz6I,OAAAgC,eACIk4I,EAAAx5I,UAAA,aAAU,KADd,WAEI,OAAOF,KAAKs6I,iBAGhB,SAAehhI,GACPA,IAAQtZ,KAAKs6I,cACbt6I,KAAKkuC,cACLluC,KAAKs6I,YAAchhI,oCAU3B9Z,OAAAgC,eAAIk4I,EAAAx5I,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK+mH,IAAIzmF,+CAGpB9gC,OAAAgC,eAAIk4I,EAAAx5I,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKsgC,cAAcpvB,yDAe9BwoI,EAAAx5I,UAAA2uC,SAAA,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKm1D,KAAKrrB,kBAAkB,WACxBl1B,EAAK0rB,cAAckE,iBAAiB,cAAe5vB,EAAKolI,oBACxDplI,EAAK0rB,cAAckE,iBAAiB,eAAgB5vB,EAAKylI,sBAIjEX,EAAAx5I,UAAAsmC,YAAA,WAAA,IAAA5xB,EAAA5U,KACIA,KAAKm1D,KAAKrrB,kBAAkB,WACxBl1B,EAAK0rB,cAAc+F,oBAAoB,cAAezxB,EAAKolI,oBAC3DplI,EAAK0rB,cAAc+F,oBAAoB,eAAgBzxB,EAAKylI,qBAEhEr6I,KAAKkuC,cACLluC,KAAK65I,KAAKpzG,YA4BdizG,EAAAx5I,UAAAg6I,mBAAA,SAAmBp9H,EAAWqd,OAGpBmhE,EAAOt7F,KAAK8vH,WAEZxwD,EAAU7jD,KAAK8+H,MAAMz9H,EAAIw+E,EAAK7gE,MAC9B+kC,EAAU/jD,KAAK8+H,MAAMpgH,EAAImhE,EAAK3gE,KAE9BF,EAAO6kC,GAJC,IAIUg8B,EAAKrqF,MACvBypB,EAAQ4kC,GAAqB,IAAVg8B,EAAKrqF,MACxB0pB,EAAM6kC,GANE,IAMS87B,EAAKnuF,OACtBqtB,EAASglC,GAAsB,IAAX87B,EAAKnuF,OAsB/B,OApBIwtB,GAAOF,EACKs/G,GAAoBT,QACzB3+G,GAAOD,EACFq/G,GAAoBR,SACzB/+G,GAAUC,EACLs/G,GAAoBP,WACzBh/G,GAAUE,EACLq/G,GAAoBN,YACzB9+G,EACKo/G,GAAoBX,IACzB5+G,EACKu/G,GAAoBV,OACzB5+G,EACKs/G,GAAoBjgE,KACzBp/C,EACKq/G,GAAoBhgE,MAEpBggE,GAAoBjlF,MAO9B4kF,EAAAx5I,UAAAguC,YAAV,WACQluC,KAAKm6I,MACLn6I,KAAKm6I,KAAKjsG,mCA5HrBz/B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAlBmC40B,EAAAA,kBAAuByD,EAAAA,8CAuBnEp4B,EAAAA,MAAKX,KAAA,CAAC,yCAYN2d,EAAAA,6BAGAA,EAAAA,UA0GL+tH,EA/HA,GCNAc,GAAA,WA0BI,SAAAA,EAAmBC,EAA6Cr7G,EAAsBwO,GAAnE5tC,KAAAy6I,kBAAAA,EAA6Cz6I,KAAAo/B,MAAAA,EAAsBp/B,KAAA4tC,IAAAA,EAlB9E5tC,KAAA06I,kBAAuD,IAAIpqI,IAO5DtQ,KAAA26I,cAAgB,IAAIxxH,EAAAA,aAGpBnpB,KAAA46I,YAAc,IAAIzxH,EAAAA,aAGlBnpB,KAAA66I,mBAAqB,IAAI1xH,EAAAA,aAGzBnpB,KAAA86I,mBAAqB,IAAI3xH,EAAAA,aAuJpC,OAlJIqxH,EAAAt6I,UAAA8hD,YAAA,SAAYC,GAER,OADyCjiD,KAAK+6I,eAAe94F,IAEzD,KAAK+4F,GAAqBC,WAAYj7I,KAAKk7I,gBAAiB,MAC5D,KAAKF,GAAqBG,SAAUn7I,KAAKo7I,YAAa,MACtD,KAAKJ,GAAqBK,cAAer7I,KAAKs7I,iBAAkB,MAChE,KAAKN,GAAqBO,kBAAmBv7I,KAAKw7I,uBAAuBx7I,KAAKy7I,4BAI/EjB,EAAAt6I,UAAAw7I,WAAP,WACI17I,KAAK06I,kBAAkBjoI,QAAQ,SAACwJ,GACvBA,EAAK86B,WACN96B,EAAK+lB,YAGbhiC,KAAK06I,kBAAkBnvG,SAGpBivG,EAAAt6I,UAAAy7I,UAAP,SAAiBC,OACPn1F,EAAUzmD,KAAK06I,kBAAkB5sI,IAAI8tI,GACvCn1F,IACAA,EAAQzkB,UACRhiC,KAAK06I,kBAAkB9tG,UAAOgvG,KAI9BpB,EAAAt6I,UAAAg7I,cAAR,YAEQl7I,KAAK67I,WACL77I,KAAK86I,mBAAmBv4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,2BAC/Ez7I,KAAKy6I,kBAAkBh9G,OAAOz9B,KAAKy6I,kBAAkBnpI,QAAQtR,KAAK67I,YAElE77I,KAAK87I,qBACL97I,KAAK67I,SAAW77I,KAAKy6I,kBAAkB95F,mBACnC3gD,KAAK87I,kBAAmB97I,KAAKy7I,0BACjCz7I,KAAK26I,cAAcp4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,2BAC3Dz7I,KAAKy7I,yBAAqC,aAKzCz7I,KAAK06I,kBAAkB5sI,IAAI9N,KAAKy7I,yBAAqC,aAE7Ez7I,KAAK06I,kBAAkBhyH,IAAI1oB,KAAKy7I,yBAAqC,WAAGz7I,KAAK67I,aAMrFrB,EAAAt6I,UAAAk7I,UAAR,eAEU/7H,EAAOrf,KAAKy7I,yBAAmC,SAC/CrgF,EAAQp7D,KAAKy7I,yBAAgC,MAC/Cp8H,IAASrf,KAAK67I,WACiC,IAA3CzgF,EAAMq/E,kBAAkBnpI,QAAQ+N,KAEhCrf,KAAK86I,mBAAmBv4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,2BAC/ErgF,EAAMq/E,kBAAkBh9G,OAAO29B,EAAMq/E,kBAAkBnpI,QAAQ+N,KAE/Drf,KAAK67I,WAA+D,IAAnD77I,KAAKy6I,kBAAkBnpI,QAAQtR,KAAK67I,YACrD77I,KAAK86I,mBAAmBv4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,2BAC/Ez7I,KAAKy6I,kBAAkBh9G,OAAOz9B,KAAKy6I,kBAAkBnpI,QAAQtR,KAAK67I,YAEtE77I,KAAK67I,SAAWx8H,EAChBrf,KAAKy6I,kBAAkB7zF,OAAOvnC,EAAM,GACpCrf,KAAKw7I,uBAAuBx7I,KAAKy7I,0BACjCz7I,KAAK46I,YAAYr4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,4BAExEz7I,KAAKw7I,uBAAuBx7I,KAAKy7I,2BAGjCjB,EAAAt6I,UAAAo7I,eAAR,eAEUM,EAAS57I,KAAKy7I,yBAAqC,WACnDM,EAAaH,EACf57I,KAAK06I,kBAAkB5sI,IAAI8tI,GAC3B,KAIJ57I,KAAK86I,mBAAmBv4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,2BAC/Ez7I,KAAKy6I,kBAAkBh9G,OAAOz9B,KAAKy6I,kBAAkBnpI,QAAQtR,KAAK67I,WAClE77I,KAAK67I,SAAWE,MACVC,EAAah8I,KAAKi8I,cAAcF,EAAWp1F,SACjD3mD,KAAKy6I,kBAAkB7zF,OAAO5mD,KAAK67I,SAAU,GAC7C77I,KAAKw7I,uBAAuBx7I,KAAKy7I,0BACjCz7I,KAAK66I,mBAAmBt4H,KAAK,CAAE64C,MAAOp7D,KAAMqf,KAAMrf,KAAK67I,SAAUl1F,QAAS3mD,KAAKy7I,yBAA0BO,WAAUA,KAG/GxB,EAAAt6I,UAAAg8I,oBAAR,SAA4Bj6F,OAClBk6F,EAAYl6F,EAAkC,yBACpD,QAASA,EAA2B,mBAAMk6F,GAAan8I,KAAKo8I,wBAAwBD,IAGhF3B,EAAAt6I,UAAAk8I,wBAAR,SAAgCD,WACtBE,EAAc78I,OAAOwQ,KAAKmsI,EAAU76E,eAAiB,IACrDg7E,EAAc98I,OAAOwQ,KAAKmsI,EAAUj6F,cAAgB,IAE1D,GAAIm6F,EAAY17I,SAAW27I,EAAY37I,OAAQ,KAC3C,IAAuB,IAAA47I,EAAAxsI,EAAAusI,GAAWE,EAAAD,EAAAr6I,QAAAs6I,EAAAp6I,KAAAo6I,EAAAD,EAAAr6I,OAAE,CAA/B,IAAMivH,EAAQqrB,EAAAr6I,MACf,IAAuC,IAAnCk6I,EAAY/qI,QAAQ6/G,GACpB,OAAO,uGAGf,OAAO,EAEP,OAAO,GAIPqpB,EAAAt6I,UAAAs7I,uBAAR,SAA+BiB,eAC3B,IAAuB,IAAA3sI,EAAAC,EAAAvQ,OAAOwQ,KAAKysI,IAAIxsI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAApC,IAAMivH,EAAQlhH,EAAA9N,MACTnC,KAAK67I,SAAgB,QAAE1qB,GAAkBnxH,KAA6B,yBAAEmxH,0GAI9EqpB,EAAAt6I,UAAA+7I,cAAR,SAAsBQ,WACZt/G,EAAQ,OACd,IAAuB,IAAArtB,EAAAC,EAAAvQ,OAAOwQ,KAAKysI,IAAIxsI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAApC,IAAMivH,EAAQlhH,EAAA9N,MACfg7B,EAAMg0F,GAAYsrB,EAAItrB,wGAE1B,OAAOh0F,GAGHq9G,EAAAt6I,UAAA66I,eAAR,SAAuB94F,OACby6F,EAAY18I,KAAKy7I,yBAAmC,SACpDG,EAAS57I,KAAKy7I,yBAAqC,WACnDM,EAAaH,EACf57I,KAAK06I,kBAAkB5sI,IAAI8tI,GAC3B,KACEe,EAAiB38I,KAAKk8I,oBAAoBj6F,GAChD,OAAIy6F,EAEO1B,GAAqBG,SACrBwB,GAAkBZ,EAElBf,GAAqBK,eACpBr7I,KAAK67I,UAAYc,EAElB3B,GAAqBC,WACrBj7I,KAAKy7I,yBAELT,GAAqBO,uBAFzB,uBA1Kd9sI,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,mEATuB8nC,EAAAA,wBAA4BzP,EAAAA,cADxBkI,EAAAA,uEAoB7CtgC,EAAAA,iCAEAA,EAAAA,6BAEAgd,EAAAA,4BAGAA,EAAAA,mCAGAA,EAAAA,mCAGAA,EAAAA,UAwJL6uH,EA/KA,OAiLIS,WAAA,EACAE,SAAA,EACAE,cAAA,EACAE,kBAAA,+IAgBJ,IAAAqB,GAAA,WAAA,SAAAA,KAQA,2BARC5tI,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACurI,IACfpwF,gBAAiB,GACjBl7C,QAAS,CAACsrI,IACV/9F,QAAS,CAACC,EAAAA,kBAIdkgG,EARA,GC/MAC,GAAA,WAWI,SAAAA,EAAmB7vB,GAAAhtH,KAAAgtH,mBAAAA,EAIvB,2BAXCl7E,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,0BACVqjC,SAAA,8XAPK24E,uCAYJj0E,EAAAA,UAASzoC,KAAA,CAACw/G,GAA2B,CAAE72E,UAAQ,OAEpDkmG,EAfA,GCgCAC,GAAA,WAmHI,SAAAA,EAAmB54B,EAA8CpgF,EAA4B8J,GAA1E5tC,KAAAkkH,iBAAAA,EAA8ClkH,KAAA8jC,QAAAA,EAA4B9jC,KAAA4tC,IAAAA,EA3GrF5tC,KAAAgrG,kBAAoB,CACxB3uE,qBAAsBH,GAAoBtC,KAC1C0C,mBAAoBF,GAAkBnC,QAGlCj6B,KAAA+8I,2BAA8C,CAClDr8G,uBAAuB,EACvBd,qBAAqB,EACrBD,OAAO,EACPD,eAAgB,IAAI8J,GACpB/J,iBAAkB,IAAIwH,GAA6BjnC,KAAKgrG,oBAGpDhrG,KAAAg9I,0BAA6C,CACjDt8G,uBAAuB,EACvBd,qBAAqB,EACrBD,OAAO,EACPD,eAAgB,IAAI8J,GACpB/J,iBAAkB,IAAIwH,GAA6BjnC,KAAKgrG,oBAIpDhrG,KAAAi9I,qBAAuB,EACvBj9I,KAAAmuH,QAAU,KACVnuH,KAAAk9I,cAAe,EACfl9I,KAAAm9I,aAAc,EACdn9I,KAAAo9I,kBAAmB,EA+EpBp9I,KAAAi1C,SAAW,0BAyoBtB,OAltBIz1C,OAAAgC,eACIs7I,EAAA58I,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKmuH,aAGhB,SAAW70G,GACHtZ,KAAKmuH,SACLnuH,KAAK8gI,gBAAgBruH,QAAQ,SAAAijH,GAAO,OAAAA,EAAItoC,YAAa,IAErD9zE,IACAtZ,KAAKmuH,QAAU70G,EAEftZ,KAAK8gI,gBAAkB9gI,KAAKkkH,iBAAiBic,eAAengI,KAAKmuH,QAAQhuG,OACzEngB,KAAKq9I,kBAELr9I,KAAKi9I,qBAAuB,EAC5Bj9I,KAAKwE,UAAUxE,KAAKi9I,wDAI5Bz9I,OAAAgC,eACIs7I,EAAA58I,UAAA,QAAK,KADT,WAEI,OAAOF,KAAKiU,WAAajU,KAAKiU,WAAWuF,UAAY,UAGzD,SAAUF,GAAV,IAAA1E,EAAA5U,KACSsZ,GAAe,IAARA,GAIRtZ,KAAKiU,WAAWuF,UAAYgB,GAAS0C,WAAWld,KAAK4hB,OAAOzE,SAAU7D,GAClEtZ,KAAK8gI,gBAAgBxpH,KAAK,SAAA2E,GAAQ,OAAAA,EAAKhI,aAAeW,EAAKX,eAAgBD,WAC3EhU,KAAKs9I,eAAc,KALvBt9I,KAAKiU,WAAWuF,UAAY,KAC5BxZ,KAAKu9I,wBAQTv9I,KAAKga,0CAyCT8iI,EAAA58I,UAAAyhD,gBAAA,WACI3hD,KAAK+8I,2BAA2Br4G,OAAS1kC,KAAK4hB,OAAOjL,KAAK0+G,gBAC1Dr1H,KAAKg9I,0BAA0Bt4G,OAAS1kC,KAAK4hB,OAAOjL,KAAK0+G,oBAEnDviF,EAAe9yC,KAAK8gI,gBAAgBxpH,KAAK,SAAAnB,GAAQ,OAAoB,IAApBA,EAAKi3E,aACxDt6C,IACA9yC,KAAKiU,WAAa6+B,EAAa7+B,YAGnCjU,KAAKwgD,MAAMlgB,cAAciT,SAKtBupG,EAAA58I,UAAAs9I,aAFP,SAEoBlrI,GAChBA,EAAMmyB,kBACFpmB,SAASmyE,gBAAkBxwF,KAAK8hI,YAAYxhG,eAAkBhuB,EAAMinF,UACpEv5F,KAAKkkH,iBAAiBvtG,KAAKu8E,WAAWqqC,4BAA4BjrH,IAKnEwqI,EAAA58I,UAAAu9I,aADP,SACoBnrI,GAChBA,EAAM23B,iBACN33B,EAAMmyB,kBACNzkC,KAAKoO,SAGT5O,OAAAgC,eAAIs7I,EAAA58I,UAAA,WAAQ,KAAZ,WACI,QAASF,KAAK4hB,OAAOqD,0BAA4BjlB,KAAK4hB,OAAOqD,yBAAyBtM,kBAAkBhY,OAAS,oCAGrHnB,OAAAgC,eAAIs7I,EAAA58I,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAK4hB,OAAOzE,WAAaC,GAASjN,KAC3BnQ,KAAK09I,cAGT19I,KAAK29I,iDAGhBn+I,OAAAgC,eAAIs7I,EAAA58I,UAAA,OAAI,KAAR,WACI,OAAQF,KAAK4hB,OAAOzE,UAChB,KAAKC,GAAS/C,OACd,KAAK+C,GAAS7C,QACV,MAAO,OACX,KAAK6C,GAAS9C,OACV,MAAO,2CAInB9a,OAAAgC,eAAIs7I,EAAA58I,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK4hB,OAAOskG,QAAQh0C,iDAG/B1yE,OAAAgC,eAAIs7I,EAAA58I,UAAA,mBAAgB,KAApB,WACI,OAAIF,KAAKiU,WAAWoF,WACTrZ,KAAKiU,WAAWoF,UAAU04D,yCAMzCvyE,OAAAgC,eAAIs7I,EAAA58I,UAAA,cAAW,KAAf,WACI,OAAIF,KAAKiU,WAAWoF,WAAarZ,KAAKiU,WAAWoF,UAAU04D,QAChD/xE,KAAKkkH,iBAAiBwd,aAAa1hI,KAAKiU,YACxCjU,KAAK4hB,OAAOzE,WAAaC,GAASjN,KAClCnQ,KAAKkkH,iBAAiBvtG,KAAK4qH,gBAAgBiQ,qCAC3CxxI,KAAK4hB,OAAOzE,WAAaC,GAAS7C,QAClCva,KAAKkkH,iBAAiBvtG,KAAK4qH,gBAAgBgQ,wCAE3CvxI,KAAKkkH,iBAAiBvtG,KAAK4qH,gBAAgB+P,iEAOnDwL,EAAA58I,UAAA09I,gBAAP,SAAuBtrI,GACL,UAATA,EAAMrR,KAA+B,MAATqR,EAAMrR,KAA+B,aAATqR,EAAMrR,MAA0BjB,KAAK69I,mBAAmB1vG,UAGjG,QAAT77B,EAAMrR,MACTqR,EAAMinF,UACNjnF,EAAM23B,iBACN33B,EAAMmyB,mBACEzkC,KAAK69I,mBAAmB1vG,WAChCnuC,KAAK89I,yBAAyB99I,KAAK+9I,iBAAiBz9G,iBAPxDtgC,KAAK89I,yBAAyB99I,KAAK+9I,iBAAiBz9G,eACpDhuB,EAAM0rI,6BAcPlB,EAAA58I,UAAA+9I,eAAP,SAAsB3rI,GAGlB,GAFAtS,KAAKk9I,cAAe,EAEhBl9I,KAAK4hB,OAAOzE,WAAaC,GAAS7C,UACrB,UAATjI,EAAMrR,KAA+B,MAATqR,EAAMrR,KAA+B,aAATqR,EAAMrR,KAI9D,OAHAjB,KAAK+9I,iBAAiBz9G,cAAciT,QACpCvzC,KAAK89I,yBAAyB99I,KAAK+9I,iBAAiBz9G,oBACpDhuB,EAAMmyB,kBAKd,GAAa,UAATnyB,EAAMrR,IAAoB,CAC1B,GAAIjB,KAAKm9I,YACL,OAEJn9I,KAAKk+I,mBACE5rI,EAAMkoE,QAAoB,cAATloE,EAAMrR,KAAoC,SAATqR,EAAMrR,IAG/C,WAATqR,EAAMrR,KAAgC,QAATqR,EAAMrR,MAC1CqR,EAAM23B,iBACNjqC,KAAKoO,UAJLpO,KAAK+9I,iBAAiBz9G,cAAciT,QACpCvzC,KAAK89I,yBAAyB99I,KAAK+9I,iBAAiBz9G,gBAKxDhuB,EAAMmyB,mBAMHq4G,EAAA58I,UAAAi+I,aAAP,SAAoBv8G,GAChB5hC,KAAKk9I,cAAe,GAMjBJ,EAAA58I,UAAA8uD,QAAP,SAAeptB,IAGPrwB,MAAYvR,KAAKk9I,cAAgBt7G,EAAU5gC,OAAOmB,SAClDnC,KAAKmC,MAAQy/B,EAAU5gC,OAAOmB,QAO/B26I,EAAA58I,UAAAk+I,mBAAP,WACIp+I,KAAKm9I,aAAc,GAMhBL,EAAA58I,UAAAm+I,iBAAP,WACIr+I,KAAKm9I,aAAc,GAMhBL,EAAA58I,UAAA4/F,aAAP,WACQ9/F,KAAK4hB,OAAOzE,WAAaC,GAAS7C,SAAWva,KAAK69I,mBAAmB1vG,YACrEnuC,KAAK+9I,iBAAiBz9G,cAAciT,QACpCvzC,KAAK89I,yBAAyB99I,KAAK+9I,iBAAiBz9G,iBAOrDw8G,EAAA58I,UAAAo+I,gBAAP,WACIt+I,KAAKwgD,MAAMlgB,cAAciT,SAMtBupG,EAAA58I,UAAA4jI,aAAP,SAAoB3hI,GAChB,OAAOnC,KAAK4hB,OAAOskG,QAAQ7sG,UAAUlX,IAMlC26I,EAAA58I,UAAA0jI,mBAAP,SAA0BzhI,GACtB,OAAOnC,KAAKkkH,iBAAiBvtG,KAAK4qH,gBAAgB,mBAAmBvhI,KAAK8jI,aAAa3hI,GAAO6d,OAAW7d,GAMtG26I,EAAA58I,UAAA6jI,YAAP,WACI,OAAI/jI,KAAK4hB,OAAOzE,WAAaC,GAAS7C,SAAyC,OAA9Bva,KAAKiU,WAAWoF,UACtDrZ,KAAK8jI,aAAa9jI,KAAKgkI,WAAW,IAAIhyD,SAEtChyE,KAAKiU,WAAWoF,UAAU24D,UAOlC8qE,EAAA58I,UAAAujI,oBAAP,SAA2BC,GACvB,QAAI1jI,KAAKiU,WAAWoF,WACTrZ,KAAKiU,WAAWoF,UAAU2G,OAAS0jH,GAS3CoZ,EAAA58I,UAAAyyH,eAAP,WACI3yH,KAAKkkH,iBAAiB4b,YAAY9/H,KAAK4hB,OAAOzB,OAC9CngB,KAAKq9I,kBACDr9I,KAAKwgD,OACLxgD,KAAKwgD,MAAMlgB,cAAciT,QAE7BvzC,KAAK4tC,IAAIrL,gBAETviC,KAAKi9I,qBAAuB,EAC5Bj9I,KAAKwE,UAAUxE,KAAKi9I,uBAMjBH,EAAA58I,UAAAg+I,YAAP,WACyBl+I,KAAK8gI,gBAAgB9mH,OAAO,SAAA61H,GAAM,OAAkB,IAAlBA,EAAGziD,aAC7C36E,QAAQ,SAAAnQ,GAAK,OAAAA,EAAE8qF,YAAa,IAGzC,QADImxD,GAAmB,EACd5qI,EAAQ,EAAGA,EAAQ3T,KAAK8gI,gBAAgBngI,OAAQgT,IAAS,KACxDM,EAAajU,KAAK8gI,gBAAgBntH,GAAOM,WAClB,OAAzBA,EAAWuF,WAAuBvF,EAAWoF,UAAU04D,UACvDwsE,EAAkB5qI,IAGD,IAArB4qI,GACAv+I,KAAK4gI,iBAAiB2d,EAAiBv+I,KAAKiU,YAEhDjU,KAAKq9I,kBACLr9I,KAAKw+I,mCAMF1B,EAAA58I,UAAA6iI,WAAP,WACI/iI,KAAKmC,MAAQ,MAMV26I,EAAA58I,UAAAu+I,eAAP,SAAsB78G,GACD,UAAbA,EAAU3gC,KAAmC,MAAb2gC,EAAU3gC,KAAmC,aAAb2gC,EAAU3gC,MAC1E2gC,EAAUqI,iBACVjqC,KAAK+iI,aACL/iI,KAAKwgD,MAAMlgB,cAAciT,UAO1BupG,EAAA58I,UAAAw+I,aAAP,WACI1+I,KAAK+iI,aACL/iI,KAAKwgD,MAAMlgB,cAAciT,SAMtBupG,EAAA58I,UAAAy+I,gBAAP,SAAuB/8G,GACF,UAAbA,EAAU3gC,KAAmC,MAAb2gC,EAAU3gC,KAAmC,aAAb2gC,EAAU3gC,MAC1E2gC,EAAUqI,iBACVjqC,KAAKk+I,cACLl+I,KAAKwgD,MAAMlgB,cAAciT,UAO1BupG,EAAA58I,UAAA0+I,cAAP,WACI5+I,KAAKk+I,cACLl+I,KAAKwgD,MAAMlgB,cAAciT,SAMtBupG,EAAA58I,UAAA2+I,qBAAP,WAAA,IAAAjqI,EAAA5U,MACSA,KAAKmC,OAAwB,IAAfnC,KAAKmC,QACpBnC,KAAKiU,WAAWoF,WAAcrZ,KAAKiU,WAAWoF,UAAU04D,UAG5Dx1B,sBAAsB,eACZuiG,EAAiBzgI,SAASmyE,cAEC,qBAA7BsuD,EAAejqE,WAA+D,iBAA3BiqE,EAAezvF,UAIhEyvF,GAAkBlqI,EAAKm5C,WAAWztB,cAAcC,SAASu+G,KACxDlqI,EAAKipI,mBAAmB1vG,WAC3Bv5B,EAAKspI,kBAQVpB,EAAA58I,UAAAkO,MAAP,WAAA,IAAAwG,EAAA5U,KACI,GAAoC,IAAhCA,KAAK8gI,gBAAgBngI,QAC4B,OAAjDX,KAAK8gI,gBAAgB,GAAG7sH,WAAWuF,YACsB,IAAzDxZ,KAAK8gI,gBAAgB,GAAG7sH,WAAWoF,UAAU04D,QAC7C/xE,KAAKkkH,iBAAiBic,eAAengI,KAAK4hB,OAAOzB,OAAOyO,MAExD5uB,KAAKga,aACF,KACG+kI,EAAe/+I,KAAK8gI,gBAAgB9mH,OAAO,SAAA61H,GAAM,OAA4B,OAA5BA,EAAG57H,WAAWuF,YAAuBq2H,EAAG57H,WAAWoF,UAAU04D,UAChHgtE,GAAgBA,EAAap+I,OAAS,IACtCo+I,EAAatsI,QAAQ,SAAAtR,GAAK,OAAAyT,EAAKsvG,iBAAiB0c,iBAAiBhsH,EAAKgN,OAAOzB,MAAOvL,EAAKksH,gBAAgBxvH,QAAQnQ,MACjHnB,KAAKga,UAIbha,KAAKkkH,iBAAiB0Y,oBAAqB,EAE3C58H,KAAKkkH,iBAAiBub,oBAAoBz/H,KAAK4hB,QAC/C5hB,KAAKkkH,iBAAiB6Y,oBAAoB/8H,KAAK4hB,QAAQ,GAEvD5hB,KAAKkkH,iBAAiBgb,eAAiB,KACvCl/H,KAAKkkH,iBAAiBib,mBAAqB,KAE3Cn/H,KAAKi9I,qBAAuB,EAC5Bj9I,KAAKwE,UAAUxE,KAAKi9I,uBAMjBH,EAAA58I,UAAA+lE,KAAP,aAKO62E,EAAA58I,UAAA8+I,eAAP,SAAsB78I,GAClBnC,KAAKmC,MAAQA,GAMV26I,EAAA58I,UAAA49I,yBAAP,SAAgC98I,GAC5BhB,KAAK+8I,2BAA2Bt9G,iBAAiBnF,SAASt5B,OAASA,EACnEhB,KAAK69I,mBAAmB9vI,OAAO/N,KAAK+8I,6BAMjCD,EAAA58I,UAAA++I,wBAAP,SAA+Br9G,EAAWjuB,GACtC3T,KAAKg9I,0BAA0Bv9G,iBAAiBnF,SAASt5B,OAAS4gC,EAAU5gC,OAAO+7B,cACnF/8B,KAAKk/I,kBAAkBtsI,UAAUe,GAAO5F,OAAO/N,KAAKg9I,4BAMjDF,EAAA58I,UAAAikI,oBAAP,SAA2BviG,GAA3B,IAAAhtB,EAAA5U,KACUmC,EAASy/B,EAAsB,aAA8Bz/B,MACnEnC,KAAKiU,WAAWoF,UAAYrZ,KAAK8jI,aAAa3hI,GAC1CnC,KAAKiU,WAAWoF,UAAU04D,QAG1Bx1B,sBAAsB,WAAM,OAAA3nC,EAAKuqI,kCAEjC5iG,sBAAsB,WAAM,OAAA3nC,EAAKwqI,6BAGjCp/I,KAAKwgD,OAGLjE,sBAAsB,WAAM,OAAA3nC,EAAK4rC,MAAMlgB,cAAciT,WAKtDupG,EAAA58I,UAAAm/I,kBAAP,SAAyBrxI,EAAMuqF,OACrB/H,EAAgBnyE,SAASmyE,cAC/BxwF,KAAKo9I,iBAAmB7kD,EAAKx0E,UAAYysE,GACrCxwF,KAAK+tD,WAAWztB,cAAcC,SAASiwD,IAGxCssD,EAAA58I,UAAAo/I,YAAP,SAAmBtxI,EAAMiO,GACjBjc,KAAKo9I,iBACLp9I,KAAKo9I,kBAAmB,GAI5Bp9I,KAAK8gI,gBAAgBruH,QAAQ,SAAAo9H,GAAM,OAAAA,EAAGziD,YAAa,IAEnDptF,KAAKu/I,WAAWtjI,KAGb6gI,EAAA58I,UAAAq/I,WAAP,SAAkBtjI,GACdA,EAAKmxE,YAAcnxE,EAAKmxE,WACpBnxE,EAAKmxE,aACLptF,KAAKiU,WAAagI,EAAKhI,WAEnBjU,KAAKwgD,OACLxgD,KAAKwgD,MAAMlgB,cAAciT,UAQ9BupG,EAAA58I,UAAAu3F,cAAP,SAAqB71D,EAA0B3lB,GAC1B,UAAb2lB,EAAU3gC,MACV2gC,EAAUqI,iBAEVjqC,KAAKu/I,WAAWtjI,KAOjB6gI,EAAA58I,UAAAs/I,mBAAP,SAA0BltI,GACT,QAATA,EAAMrR,MACNjB,KAAKi9I,qBAAuB,EAC5Bj9I,KAAKwE,UAAUxE,KAAKi9I,wBAOrBH,EAAA58I,UAAAovI,cAAP,SAAqB1tG,EAA+B3lB,OAC1C4kH,EAAgB7gI,KAAK8gI,gBAAgBxvH,QAAQ2K,GACnDjc,KAAK4gI,iBAAiBC,EAAe5kH,EAAKhI,YAE1CjU,KAAKy/I,uBAMF3C,EAAA58I,UAAAkjI,uBAAP,SAA8BxhG,EAAgC3tB,GAA9D,IAAAW,EAAA5U,KACQ4hC,EAAUyT,eACVphC,EAAW+sH,cAAiBp/F,EAAsB,aAA8Bz/B,MAChFnC,KAAK8gI,gBAAgB9gI,KAAK8gI,gBAAgBxvH,QAAQ2C,GAAc,GAAG8sH,eAAiB9sH,EAAW+sH,cAI/FzkF,sBAAsB,WAAM,OAAA3nC,EAAKoF,aAOlC8iI,EAAA58I,UAAAw/I,wBAAP,SAA+BC,OACvBrtH,EAAQ,EACNstH,EAAmB5/I,KAAK+vI,UAAUjsG,QAAQxD,cAAc3tB,SACxDktI,EAAgB7/I,KAAKixH,UAAU3wF,cAAcpvB,wBAEnD,GAAsB,UAAlByuI,EAA2B,CAC3B,IAAK,IAAIhsI,EAAQ,EAAGA,EAAQisI,EAAiBj/I,OAAQgT,IAC7C8H,KAAKC,KAAKkkI,EAAiBjsI,GAAOzC,wBAAwBwpB,OAASjf,KAAKC,KAAKmkI,EAAcnlH,QAC3FpI,IAIJA,EAAQstH,EAAiBj/I,SACzBX,KAAKi9I,sBAAwBxhI,KAAKC,KAAKkkI,EAAiBttH,GAAOphB,wBAAwBwpB,OACnFjf,KAAKC,KAAKmkI,EAAcnlH,OAAS,EACrC16B,KAAKwE,UAAUxE,KAAKi9I,uBAI5B,GAAsB,SAAlB0C,EAA0B,CAC1B,IAAShsI,EAAQ,EAAGA,EAAQisI,EAAiBj/I,OAAQgT,IAC7C8H,KAAKC,KAAKkkI,EAAiBjsI,GAAOzC,wBAAwBupB,MAAQhf,KAAKC,KAAKmkI,EAAcplH,OAC1FnI,IAIJA,EAAQ,IACRtyB,KAAKi9I,sBAAwBxhI,KAAKC,KAAKmkI,EAAcplH,MACjDhf,KAAKC,KAAKkkI,EAAiBttH,EAAQ,GAAGphB,wBAAwBupB,MAAQ,EAC1Ez6B,KAAKwE,UAAUxE,KAAKi9I,yBAKxBH,EAAA58I,UAAAq9I,qBAAR,WAAA,IAAA3oI,EAAA5U,KACIu8C,sBAAsB,WAClB,GAAI3nC,EAAKsvG,iBAAiB0Y,mBAAoB,KACpCkjB,EAAiBlrI,EAAKq8G,UAAU3wF,cAAcpvB,wBAAwBD,MAC5E2D,EAAKmrI,eAAiBnrI,EAAKm7H,UAAUjsG,QAAQxD,cAAcpvB,wBAAwBD,MAEnF2D,EAAKorI,WAAaprI,EAAKmrI,gBAAkBD,GAAkBlrI,EAAKqrI,iBAG1DrrI,EAAQ,IAAamiC,WACvBniC,EAAKg5B,IAAIrL,oBAMjBu6G,EAAA58I,UAAAo9I,cAAR,SAAsBlwD,OACZg1C,EAAS,IAAIC,GACnBD,EAAOnuH,WAAajU,KAAKiU,WACzBmuH,EAAOrB,eAAiB/gI,KAAK8gI,gBAAgBngI,OAAS,EAAIiZ,GAAevB,IAAM,KAC/E+pH,EAAOh1C,WAAaA,EAEpBptF,KAAK8gI,gBAAgBt+H,KAAK4/H,OAEpBzhI,EAASX,KAAK8gI,gBAAgBngI,OAChCX,KAAK8gI,gBAAgBngI,EAAS,KAC9BX,KAAK8gI,gBAAgBngI,EAAS,GAAGqgI,cAAgBhhI,KAAK8gI,gBAAgBngI,EAAS,GAAGogI,gBAGtF/gI,KAAKu9I,wBAGDT,EAAA58I,UAAA0gI,iBAAR,SAAyBC,EAAuB5sH,GACtB,IAAlB4sH,GAAuD,IAAhC7gI,KAAK8gI,gBAAgBngI,QAKhDX,KAAKkkH,iBAAiB0c,iBAAiB5gI,KAAK4hB,OAAOzB,MAAO0gH,GAE1D7gI,KAAKga,SAEDha,KAAKiU,aAAeA,GACpBjU,KAAKq9I,kBAGTr9I,KAAKu9I,wBAZDv9I,KAAK2yH,kBAeLmqB,EAAA58I,UAAAm9I,gBAAR,WACIr9I,KAAKiU,WAAa,CACdL,UAAW5T,KAAK4hB,OAAOzB,MACvB9G,UAAW,KACXG,UAAW,KACX9E,WAAY1U,KAAK4hB,OAAO4D,qBAGxBxlB,KAAK4hB,OAAOzE,WAAaC,GAAS7C,UAClCva,KAAKiU,WAAWoF,UAAYrZ,KAAK8jI,aAAa9jI,KAAKgkI,WAAW,KAG9DhkI,KAAK4hB,OAAOzE,WAAaC,GAASjN,MAAQnQ,KAAKwgD,QAC/CxgD,KAAKwgD,MAAMlgB,cAAcn+B,MAAQ,MAGrCnC,KAAKu9I,wBAGDT,EAAA58I,UAAAs+I,gCAAR,eACUoB,EAAmB5/I,KAAK+vI,UAAUjsG,QAAQxD,cAAc3tB,SAC9D,GAAKitI,GAAgD,IAA5BA,EAAiBj/I,OAA1C,KAIMu/I,EAAqBzkI,KAAKC,KAAK1b,KAAKixH,UAAU3wF,cAAcpvB,wBAAwBwpB,OAEpFylH,EAAoB1kI,KAAKC,KAAKkkI,EAAiBA,EAAiBj/I,OAAS,GAAGuQ,wBAAwBwpB,OACtGylH,GAAqBD,IACrBlgJ,KAAKi9I,sBAAwBkD,EAAoBD,EACjDlgJ,KAAKwE,UAAUxE,KAAKi9I,yBASrBH,EAAA58I,UAAAkgJ,eAAP,WACIpgJ,KAAKi9I,qBAAuB,EAC5Bj9I,KAAKwE,UAAUxE,KAAKi9I,sBACpBj9I,KAAKu9I,wBAGDT,EAAA58I,UAAAsE,UAAR,SAAkBD,GAAlB,IAAAqQ,EAAA5U,KACIu8C,sBAAsB,WAClB3nC,EAAKm7H,UAAUjsG,QAAQxD,cAAcj9B,MAAMmB,UAAY,aAAaD,EAAM,SAI1Eu4I,EAAA58I,UAAAu/I,oBAAR,WAKI,QAJIntH,EAAQ,EACNstH,EAAmB5/I,KAAK+vI,UAAUjsG,QAAQxD,cAAc3tB,SACxDktI,EAAgB7/I,KAAKixH,UAAU3wF,cAAcpvB,wBAE1CyC,EAAQ,EAAGA,EAAQisI,EAAiBj/I,OAAQgT,IAC7C8H,KAAKC,KAAKkkI,EAAiBjsI,GAAOzC,wBAAwBwpB,OAASjf,KAAKC,KAAKmkI,EAAcplH,OAC3FnI,IAIR,GAAIA,GAAS,EACTtyB,KAAKi9I,qBAAuB,MACzB,KACGoD,EAAqC,SAA/BT,EAAiBttH,GAAO3kB,GAAgB2kB,EAAQ,EAAIA,EAAQ,EACxEtyB,KAAKi9I,sBAAwBxhI,KAAKC,KAAKmkI,EAAcplH,MAAQhf,KAAKC,KAAKkkI,EAAiBS,GAAKnvI,wBAAwBupB,MAAQ,EAGjIz6B,KAAKwE,UAAUxE,KAAKi9I,uBAGhBH,EAAA58I,UAAAk/I,yBAAR,WACUp/I,KAAKiU,WAAWuF,WAA2C,IAA9BxZ,KAAKiU,WAAWuF,UAC/CxZ,KAAKga,SACEha,KAAKmC,QACZnC,KAAKmC,MAAQ,OAIb26I,EAAA58I,UAAAi/I,8BAAR,WAAA,IAAAvqI,EAAA5U,KACQA,KAAKmC,QACLnC,KAAKmC,MAAQ,MAEbnC,KAAK8gI,gBAAgBxpH,KAAK,SAAA2E,GAAQ,OAAAA,EAAKhI,aAAeW,EAAKX,eAAgBD,WAC3EhU,KAAKs9I,eAAc,GAEvBt9I,KAAKga,UAGD8iI,EAAA58I,UAAA8Z,OAAR,WACIha,KAAKkkH,iBAAiB0b,eAAe5/H,KAAK4hB,OAAOzB,QAGrD3gB,OAAAgC,eAAYs7I,EAAA58I,UAAA,mBAAgB,KAA5B,WACI,OAAOF,KAAK4hB,OAAOqD,0BAA4BjlB,KAAK4hB,OAAOqD,yBAAyBtM,kBAAkBhY,OAAS,uDAxvBtHmxC,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,yBACVqjC,SAAA,2vNAXK4sF,UAhBLr7F,EAAAA,kBAPA2L,EAAAA,qDAsECtgC,EAAAA,qBAoBAA,EAAAA,+BAmBA8nC,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,2BAG1DF,EAAAA,UAASzoC,KAAA,CAAC,gBAAiB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,mBAGxDF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,gCAG/CF,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE0oC,KAAM2T,GAAsB1T,UAAQ,uBAGxEF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMgiD,GAAuB/hD,UAAQ,+BAG9D+mC,EAAAA,aAAY1vE,KAAA,CAAC,YAAa,CAAE0oC,KAAM2T,yBAGlC5T,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,8BAGpDF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,uBAG1DF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE2oC,UAAQ,qBAGjCF,EAAAA,UAASzoC,KAAA,CAAC,UAAW,CAAE2oC,UAAQ,yBAG/BF,EAAAA,UAASzoC,KAAA,CAAC,cAAe,CAAE2oC,UAAQ,sBAGnCxH,EAAAA,YAAWnhC,KAAA,CAAC,uDAiBZY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAkE,KAC5CtD,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,iCAQ7BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,cAgnBlC8uI,EA1vBA,kBC7BA,SAAAwD,mDA+DA,OA3D4CtoI,EAAAA,EAAAA,GAkBxCxY,OAAAgC,eACW8+I,EAAApgJ,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKugJ,WAGhB,SAAgB/yE,GACZxtE,KAAKugJ,MAAQ/yE,mCAIjBhuE,OAAAgC,eAAW8+I,EAAApgJ,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKugJ,QAAUvsI,UACRhU,KAAKugJ,MAGTvgJ,KAAKqgC,WAAWC,cAAcugC,YAAYnhD,wCAWrDlgB,OAAAgC,eAAW8+I,EAAApgJ,UAAA,WAAQ,KAAnB,WACI,OAAQF,KAAK82B,WAAa92B,KAAK4xC,UAAY5xC,KAAKgwC,UAAUiB,iBAAiBjxC,KAAKiyC,SAAStkC,GAAI3N,WAGjG,SAAoBmC,IACZA,GAAUnC,KAAK82B,UAAa92B,KAAK4xC,UACjC5xC,KAAKiyC,SAASe,WAAWhzC,uCAOjCsgJ,EAAApgJ,UAAA0yC,UAAA,iCA7DHd,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,kBACVqjC,SAAU,8DAoBTpjC,EAAAA,SAyCL2xI,GA3D4CptG,QCExCnZ,KAAA,EACAE,OAAA,EACA9mB,KAAA,8DAIJ,mBAaI,SAAAqtI,EAAmBvuF,EAAuB33B,GAA1C,IAAA1lB,EACIkF,EAAAlZ,KAAAZ,OAAOA,YADQ4U,EAAAq9C,OAAAA,EAXXr9C,EAAA6rI,uBAAyB,CAC7Bz/I,OAAQ,KACRi7B,oBAAqBC,GAAoBpC,MACzCqC,kBAAmBC,GAAkBnC,OACrCoC,qBAAsBH,GAAoBtC,KAC1C0C,mBAAoBF,GAAkBrC,IACtCwC,cAAex4B,EACfy4B,eAAgBt4B,GASZ0Q,EAAA8rI,0BAA4B,EAC5B9rI,EAAA+rI,SAAWvmH,GAAKU,gBAAgBzc,UAJpCzJ,EAAK0lB,SAAW96B,OAAOa,OAAO,GAAIuU,EAAK6rI,uBAAwBnmH,KAwMvE,OAvN+CtiB,EAAAA,EAAAA,GA2BnCwoI,EAAAtgJ,UAAA0gJ,wBAAR,SAAgCjkH,EAA6BkkH,GACzDlkH,EAAet5B,MAAMs3B,IAAS36B,KAAK2gJ,SAASnmH,OAASx6B,KAAK8gJ,uBAAuB3zI,OAASnN,KAAK0gJ,0BAAyB,KACxH/jH,EAAe2wC,kBAAkB7xC,WAAaolH,EAAmB7gJ,KAA8B,0BAC/FA,KAAKo5C,OAASp5C,KAAK2gJ,SAASnmH,OAASx6B,KAAK8gJ,uBAAuB3zI,OAC7DnN,KAAK0gJ,0BAA6B1gJ,KAAKiyD,OAAOzR,MAAMlgB,cAAcpvB,wBAAoCypB,KAGtG6lH,EAAAtgJ,UAAA6gJ,iBAAR,SAAyBpkH,EAA6BqkH,GAClDrkH,EAAet5B,MAAMs3B,IAASqmH,EAAqBhhJ,KAAKihJ,wBAAuB,KAC/EjhJ,KAAKo5C,OAAS4nG,EACThhJ,KAAKiyD,OAAOzR,MAAMlgB,cAAcpvB,wBAAoCypB,IAAM36B,KAAKihJ,yBAGhFT,EAAAtgJ,UAAAghJ,qBAAR,SAA6BvkH,EAA6BkkH,GACtDlkH,EAAet5B,MAAMs3B,IAAS36B,KAAK2gJ,SAAShmH,IAAM36B,KAAK0gJ,0BAAyB,KAChF/jH,EAAe2wC,kBAAkB7xC,WAAaolH,EAAkB7gJ,KAAKihJ,wBAA0BjhJ,KAAK0gJ,0BACpG1gJ,KAAKo5C,OAASp5C,KAAK2gJ,SAAShmH,IAAM36B,KAAK0gJ,0BAClC1gJ,KAAKiyD,OAAOzR,MAAMlgB,cAAcpvB,wBAAoCypB,KAGrE6lH,EAAAtgJ,UAAAihJ,kBAAR,SAA0BxkH,EAA6Bw+D,GAInD,GAAIx+D,EAAe2wC,kBAAkB3iC,cAAgBhO,EAAe2wC,kBAAkBryC,aAClF,MAAO,CACHmmH,cAAiB,EACjBC,gBAAmB,OAGrBD,EAAgBzkH,EAAe2wC,kBAAkB7xC,UAEvD,MAAO,CACH2lH,cAAiBA,EACjBC,gBAHoBrhJ,KAAKiyD,OAAOvf,MAAM/xC,OAASw6F,EAAaimD,EAAgBphJ,KAAK8gJ,uBAAuB3zI,SAOxGqzI,EAAAtgJ,UAAAohJ,gBAAR,SAAwBC,EAAmDljI,OAIjE4yG,EACGswB,EAAiB5mH,IADpBs2F,EAEMswB,EAAiB/mH,OAEvBmmH,EAAWvmH,GAAKU,gBAAgBzc,GAChC0c,EACG4lH,EAAShmH,IADZI,EAEM4lH,EAASnmH,OAEfgnH,EAAa,CACf31D,UAAWA,GAAU14E,KACrBsuI,OAAQ,GAEZ,GAAI1mH,EAAsB/6B,KAAK0gJ,0BAA4BzvB,EACvDuwB,EAAW31D,UAAYA,GAAU9xD,IACjCynH,EAAWC,OAAS1mH,EAAsBk2F,MACvC,CAAA,KAAIl2F,EAAyB/6B,KAAK0gJ,0BAA4BzvB,GAIjE,OAAO,KAHPuwB,EAAW31D,UAAYA,GAAU5xD,OACjCunH,EAAWC,OAASxwB,EAAmBl2F,EAI3C,OAAOymH,GAGXhB,EAAAtgJ,UAAAw8B,SAAA,SAASC,EAA6BC,EAAYve,EAAqBwe,OAC7D6kH,EAAe1hJ,KAAKiyD,OAAOzR,MAAMlgB,cACjCqhH,EAAYD,EAAaxwI,wBAC/BlR,KAAK8gJ,uBAAyBnkH,EAAezrB,4BACvC0wI,EAAc5hJ,KAAK8gJ,uBAAuB3zI,OAChD,IAAK0vB,EAAa,CACd78B,KAAKi5C,OAAS0oG,EAAUlnH,KAAOz6B,KAAK6hJ,gBAAkB7hJ,KAAK8hJ,mBACrDC,EAAQ,IAAI7nH,GAAMl6B,KAAKi5C,OAAQ0oG,EAAUhnH,IAAM36B,KAAKo5C,QAG1D,OAFAp5C,KAAKs6B,SAASt5B,OAAS+gJ,OACvBjoI,EAAA5Z,UAAMw8B,SAAQ97B,KAAAZ,KAAC28B,EAAgBC,OAS/BolH,EALEh1F,EAAQ,CACVi1F,EAAGN,EAAUlnH,KACbynH,EAAGP,EAAUhnH,KAIb36B,KAAKiyD,OAAOnf,cACZkvG,EAAchiJ,KAAKiyD,OAAOnf,aAAahP,QAAQxD,cAE3CnvB,OACAwrB,EAAe2wC,kBAAkB7xC,UAAYz7B,KAAKiyD,OAAOrG,wBAAwB5rD,KAAKiyD,OAAOnf,gBAGjGkvG,EAAchiJ,KAAKiyD,OAAOkwF,0BAExBC,EAAcT,EAAUx0I,OACxBk1I,EAAgBL,EAAY9wI,wBAC5BoxI,EAAoBD,EAAc1nH,IAAM36B,KAAK8gJ,uBAAuBnmH,IACpEwgE,EAAaknD,EAAcl1I,OAE3Bo1I,EAAgBxwI,OAAOomD,iBAAiBupF,GAAcc,SACtDC,EAAuBhpG,SAAS8oG,EAAc1qI,MAAM,EAAG0qI,EAAcjxI,QAAQ,MAAO,KAAO,EAC3FoxI,EAAe3wI,OAAOomD,iBAAiB6pF,GAAaQ,SAEpDG,GAAuBP,EAAcK,GAAwB,EAC7DG,GAAqBznD,GAFC1hD,SAASipG,EAAa7qI,MAAM,EAAG6qI,EAAapxI,QAAQ,MAAO,KAAO,IAE/B,EAC/DtR,KAAKihJ,wBAA0B2B,EAAoBD,MAE/C3B,EAAqBh0F,EAAMk1F,EAAII,EAC7BO,EAAmB7B,EAAqBhhJ,KAAK8gJ,uBAAuB3zI,OAEpE21I,EAGF9iJ,KAAKshJ,gBAAgB,CAAE3mH,IAAKqmH,EAAoBxmH,OAAQqoH,GAAoBxkI,GAC5EykI,IACIA,EAAcj3D,YAAcA,GAAU9xD,IACtCinH,EAAqBh0F,EAAMk1F,GAE3BlB,GAAsB,GAAKY,GAAezmD,GAAcA,EAAainD,GAAe,IACpFpB,GAAsBh0F,EAAMk1F,QAI9Ba,EAAkBhxI,OAAOomD,iBAAiB6pF,GAAah5B,YACvD84B,EAAiB/vI,OAAOomD,iBAAiB6pF,GAAagB,WACtDC,EAAqBxpG,SAASspG,EAAgBlrI,MAAM,EAAGkrI,EAAgBzxI,QAAQ,MAAO,KAAO,EAC7F4xI,EAAoBzpG,SAASqoG,EAAejqI,MAAM,EAAGiqI,EAAexwI,QAAQ,MAAO,KAAO,EAChGtR,KAAK6hJ,gBAAkBoB,EACvBjjJ,KAAK8hJ,eAAiBoB,EACtBvmH,EAAet5B,MAAMo3B,MAAWuyB,EAAMi1F,EAAIgB,EAAqBC,EAAiB,KAChFvmH,EAAet5B,MAAM4N,MAAQ0wI,EAAU1wI,MAAQ,GAAKkyI,GAAkC,KACtFnjJ,KAAKi5C,OAAS+T,EAAMi1F,EAAIgB,EAAqBC,MACvC9B,EAAgBphJ,KAAKmhJ,kBAAkBxkH,EAAgBw+D,GAA2B,cAClFkmD,EAAkBrhJ,KAAKmhJ,kBAAkBxkH,EAAgBw+D,GAA6B,gBAO5F,GAJwB,IAApBkmD,GAA2C,IAAlBD,GACzBphJ,KAAK+gJ,iBAAiBpkH,EAAgBqkH,GAGlB,IAApBK,GAA2C,IAAlBD,EAAqB,CAK9C,GAJwB,IAApBC,GAA0ByB,GAC1B9iJ,KAAK+gJ,iBAAiBpkH,EAAgBqkH,GAGlB,IAApBK,GAAyByB,EAAe,CAExC,GAAIzB,EAAkBlmD,EAAY,CAC9B,GAAI2nD,EAAcj3D,YAAcA,GAAU9xD,IAEtC,YADA/5B,KAAKkhJ,qBAAqBvkH,EAAgBmmH,EAAcrB,QAG5D,GAAIqB,EAAcj3D,YAAcA,GAAU5xD,OAEtC,OAAsB,IAAlBmnH,OACAphJ,KAAK+gJ,iBAAiBpkH,EAAgBqkH,QAItChhJ,KAAK4gJ,wBAAwBjkH,EAAgBmmH,EAAcrB,QAMnEJ,EAAkBlmD,IACd2nD,EAAcj3D,YAAcA,GAAU9xD,KACtC/5B,KAAK+gJ,iBAAiBpkH,EAAgBqkH,GAGtC8B,EAAcj3D,YAAcA,GAAU5xD,QACtCj6B,KAAK4gJ,wBAAwBjkH,EAAgBmmH,EAAcrB,SAKvE,GAAwB,IAApBJ,GAA2C,IAAlBD,EAAqB,CAC9C,GAAI0B,GACIA,EAAcj3D,YAAcA,GAAU5xD,OAEtC,YADAj6B,KAAK4gJ,wBAAwBjkH,EAAgBmmH,EAAcrB,QAInEzhJ,KAAK+gJ,iBAAiBpkH,EAAgBqkH,MAItDR,GAvN+Cv5G,ICY/Cm8G,GAAA,WAAA,SAAAA,KAIA,2BAJC30I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,4BAGd00I,EAJA,GAMMn9E,GAAO,aAkBbo9E,GAAA,SAAAvpI,GA+II,SAAAupI,EACchjH,EACAuN,EACAoC,EAEyC6E,EAC3C3V,GANZ,IAAAtqB,EAOIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAYuN,EAAKoC,EAAW6E,IAAuB70C,YAN/C4U,EAAAyrB,WAAAA,EACAzrB,EAAAg5B,IAAAA,EACAh5B,EAAAo7B,UAAAA,EAEyCp7B,EAAAigC,uBAAAA,EAC3CjgC,EAAAsqB,UAAAA,EAtIJtqB,EAAAi6C,UAAuB,KAMxBj6C,EAAAqgC,UAAW,EAgBXrgC,EAAA0+B,iBAAkB,EA8CT1+B,EAAAg9B,UAAW,EAapBh9B,EAAAogC,UAAY,QAaZpgC,EAAA1C,KAAO,OAqBP0C,EAAAmqF,mBAAuC,KA0BtCnqF,EAAA0xD,kBAAsCL,GAEtCrxD,EAAAyxD,mBAAiCJ,GAGlCrxD,EAAAqzD,WAAa,SAAC9lE,GACjByS,EAAKzS,MAAQA,KA+KrB,OArUwC6V,EAAAA,EAAAA,GA8CpCxY,OAAAgC,eACW6hJ,EAAAnjJ,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKipE,YAEhB,SAAiBp8C,GAAjB,IAAAjY,EAAA5U,KACQA,KAAKipE,SAAWp8C,IAGpB7sB,KAAKipE,OAASp8C,EACd7sB,KAAKoiG,aAAapiG,KAAK0yC,MAAMp7B,KAAK,SAAAwF,GAAK,OAAAA,EAAE3a,QAAUyS,EAAKzS,SACxDnC,KAAK4tC,IAAIrL,kDAiEb/iC,OAAAgC,eAAW6hJ,EAAAnjJ,UAAA,iBAAc,KAAzB,eACU4yC,EAAe9yC,KAAK8yC,aAC1B,OAAOA,EAAeA,EAAawwG,SAAW,oCAIlD9jJ,OAAAgC,eAAW6hJ,EAAAnjJ,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKgwC,UAAUmB,WAAWnxC,KAAK2N,qCA0BnC01I,EAAAnjJ,UAAAgoE,iBAAP,SAAwBphB,GACpB9mD,KAAKsmE,kBAAoBxf,GAItBu8F,EAAAnjJ,UAAAioE,kBAAP,SAAyBrhB,GACrB9mD,KAAKqmE,mBAAqBvf,GAIvBu8F,EAAAnjJ,UAAA2hG,iBAAP,SAAwB/W,GACpB9qF,KAAK4xC,SAAWk5C,GAKbu4D,EAAAnjJ,UAAA4hE,eAAP,WACI,OAAO9hE,KAAKwgD,MAAMlgB,eAIf+iH,EAAAnjJ,UAAA8yC,WAAP,SAAkB9C,EAAmC59B,OAC3C+iC,EAAer1C,KAAK8yC,aAK1B,GAHIxgC,GACAtS,KAAKuqD,gBAAgBn8C,QAEJ,OAAjB8hC,GAAyBA,IAAiBmF,IAAgBnF,EAAa0B,WAAY1B,EAAapZ,SAApG,KAIM9oB,EAA4B,CAAEqnC,aAAYA,EAAEnF,aAAYA,EAAE9tB,QAAQ,GACxEpiB,KAAK+0C,YAAYxyB,KAAKvU,GAElBA,EAAKoU,SAITpiB,KAAKoiG,aAAalyD,GAClBlwC,KAAKipE,OAAS/4B,EAAa/tC,MAC3BnC,KAAK4tC,IAAIrL,gBACTviC,KAAKsmE,kBAAkBtmE,KAAKmC,UAIzBkhJ,EAAAnjJ,UAAAiiJ,oBAAP,WACI,OAAOniJ,KAAK2S,SAASg5B,MAAM7H,QAAQxD,eAUhC+iH,EAAAnjJ,UAAAiO,KAAP,SAAYigC,GACJpuC,KAAK4xC,UAAkC,IAAtB5xC,KAAK0yC,MAAM/xC,SAG3BX,KAAK8yC,cACN9yC,KAAK+1C,gBAGTj8B,EAAA5Z,UAAMiO,KAAIvN,KAAAZ,KAACR,OAAOa,OAAO,GAAIL,KAAKsvC,iBAAkBtvC,KAAKouC,gBAAiBA,MAI9Ei1G,EAAAnjJ,UAAAm4D,mBAAA,WAAA,IAAAzjD,EAAA5U,KACIA,KAAKsvC,iBAAmB,CACpB3P,OAAO,EACPC,qBAAqB,EACrBH,iBAAkB,IAAI+gH,GAA0BxgJ,KAAM,CAAEgB,OAAQhB,KAAK+tD,WAAWjqB,QAAQxD,gBACxFZ,eAAgB,IAAI8J,GACpB9I,uBAAuB,GAE3B1gC,KAAK2S,SAASsvC,QAAQld,UAAU,WAC5BnwB,EAAKwtF,aAAaxtF,EAAK89B,MAAMp7B,KAAK,SAAAwF,GAAK,OAAAA,EAAE3a,QAAUyS,EAAKzS,SACxDyS,EAAKg5B,IAAIrL,kBAEb24C,QAAQC,UAAU9hD,KAAK,WAAM,OAAAzkB,EAAKjC,SAAS4wI,qBAIxCF,EAAAnjJ,UAAAorD,gBAAP,SAAuBh5C,GACnBtS,KAAK6/B,UAAUtd,KAAKjQ,GAChBA,EAAM8P,QAGVpiB,KAAKurD,aAAavrD,KAAK8yC,eAGjBuwG,EAAAnjJ,UAAAo1C,SAAV,SAAmB9tC,EAAqB+tC,GAChCv1C,KAAKmuC,WAAanuC,KAAK8yC,cACvB9yC,KAAK01C,aAAa11C,KAAK8yC,aAAaP,WAExCz4B,EAAA5Z,UAAMo1C,SAAQ10C,KAAAZ,KAACwH,EAAW+tC,IAGpB8tG,EAAAnjJ,UAAAw/F,uBAAV,WACI,GAAI1/F,KAAK6uD,WAAa7uD,KAAK6uD,UAAUK,QAAQC,UAAW,KAE9C1sD,EAAQzC,KAAK6uD,UAAUK,QAAQC,UAAS,IAC9CnvD,KAAK+tD,WAAWU,WAAahsD,GAASA,EAAM+rD,SAC5CxuD,KAAK4tC,IAAI+U,iBAGT0gG,EAAAnjJ,UAAAkiG,aAAR,SAAqBnmF,GACbA,GAAQA,EAAK9Z,QAAU6R,WAA4B,OAAfiI,EAAK9Z,MACzCnC,KAAKgwC,UAAUtnB,IAAI1oB,KAAK2N,GAAI,IAAI4C,IAAI,CAAC0L,KAErCjc,KAAKgwC,UAAUzE,MAAMvrC,KAAK2N,KAK3B01I,EAAAnjJ,UAAA0uD,OAAP,WACI5uD,KAAKqmE,qBACDrmE,KAAK6uD,YAAc7uD,KAAK6uD,UAAUC,MACjC9uD,KAAKwgD,MAAMsO,MAAQX,GAAcN,QAElC7tD,KAAKwgD,MAAMsO,MAAQX,GAAcR,QAEhC3tD,KAAKmuC,WACNnuC,KAAKuqD,gBAAgBn8C,SAKtBi1I,EAAAnjJ,UAAAwuD,QAAP,WACI1uD,KAAKqmE,sBAGCg9E,EAAAnjJ,UAAAsvD,gBAAV,YACSxvD,KAAK6uD,UAAUK,QAAQQ,SAAW1vD,KAAK6uD,UAAUK,QAAQS,SACzD3vD,KAAK6uD,UAAUK,QAAQC,WAAanvD,KAAK6uD,UAAUK,QAAQO,kBACxDzvD,KAAK+tD,WAAWY,UAChB3uD,KAAKwgD,MAAMsO,MAAQ9uD,KAAK6uD,UAAUC,MAAQX,GAAcP,MAAQO,GAAcN,QAE9E7tD,KAAKwgD,MAAMsO,MAAQ9uD,KAAK6uD,UAAUC,MAAQX,GAAcR,QAAUQ,GAAcN,SAGxF7tD,KAAK0/F,0BAKF2jD,EAAAnjJ,UAAA2uC,SAAP,WACI7uC,KAAK6uD,UAAY7uD,KAAKk/B,UAAUpxB,IAAe6zF,EAAS,UAAqB,OAM1E0hD,EAAAnjJ,UAAAyhD,gBAAP,WACQ3hD,KAAK6uD,YACL7uD,KAAKsvD,gBAAkBtvD,KAAK6uD,UAAUU,cAAcxqB,UAAU/kC,KAAKwvD,gBAAgBvO,KAAKjhD,OACxFA,KAAK0/F,0BAET1/F,KAAK4tC,IAAIrL,iBAMN8gH,EAAAnjJ,UAAAsmC,YAAP,WACIxmC,KAAKgwC,UAAUzE,MAAMvrC,KAAK2N,IACtB3N,KAAKsvD,iBACLtvD,KAAKsvD,gBAAgBphB,mCA9UhC4D,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,aACVqjC,SAAA,03DACA5iC,UAAW,CACP,CAAE88C,QAAS8V,EAAAA,kBAAmB7V,YAAam3F,EAAoBj7E,OAAO,GACtE,CAAEnc,Q5IfuB,uB4IeKC,YAAam3F,YACtC,gHAtD8C//G,EAAAA,kBAAY2L,EAAAA,yBAoB9Dc,sCAgLAb,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,aAnMxBjN,EAAAA,gDAuEC6P,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMqa,GAAwBpa,UAAQ,mBAGhEF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE0oC,KAAMoX,GAAmBnX,UAAQ,sBAGtDyV,EAAAA,gBAAep+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAAi0F,KAAyB,CAAEh0F,aAAa,mBAIzEH,EAAAA,aAAYn+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAA8D,KAAoB,CAAExZ,UAAQ,mBAwB5DhoC,EAAAA,2BAgBAA,EAAAA,wBASAA,EAAAA,+BAQAA,EAAAA,yBAIAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iCAaZW,EAAAA,kCAqBAw9C,EAAAA,aAAYn+C,KAAA,CAACo1I,GAA8B,CAAE1sG,KAAMkS,EAAAA,YAAajS,UAAQ,OAgN7E0sG,EAjVA,CAYwCh5F,kBChCxC,OALI,SAAY3zC,GACR1W,KAAK0W,OAASA,qBAUlB,SAAA8sI,EAAY9qI,EAA0BhC,GAAtC,IAAA9B,EACIkF,EAAAlZ,KAAAZ,KAAM0W,IAAO1W,YACb4U,EAAK8D,SAAWA,EAChB9D,EAAKjC,SAAW,KAIxB,OARkCqF,EAAAA,EAAAA,GAQlCwrI,GARkCC,mBAc9B,SAAAC,EAAYzvI,EAAkCyC,GAA9C,IAAA9B,EACIkF,EAAAlZ,KAAAZ,KAAM0W,IAAO1W,YACb4U,EAAKX,WAAaA,IAO1B,OAVoC+D,EAAAA,EAAAA,GAUpC0rI,GAVoCD,IAepCE,GAAA,WAiJI,SAAAA,EAAoB7/G,EAA4B8J,GAA5B5tC,KAAA8jC,QAAAA,EAA4B9jC,KAAA4tC,IAAAA,EAjIzC5tC,KAAA4jJ,oBAA+C,GAE/C5jJ,KAAA6jJ,eAAwC,GAexC7jJ,KAAAgrG,kBAAoB,CACvB3uE,qBAAsBH,GAAoBpC,MAC1CwC,mBAAoBF,GAAkBrC,KAEnC/5B,KAAAs+F,iBAAoC,CACvC1+D,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAIwH,GAA6BjnC,KAAKgrG,mBACxDtrE,eAAgB,IAAI2K,IAGjBrqC,KAAA8jJ,4BAA+C,CAClDpkH,eAAgB,IAAI8J,GACpB7J,OAAO,EACPC,qBAAqB,EACrBc,uBAAuB,GAGpB1gC,KAAA+jJ,+BAAkD,CACrDrkH,eAAgB,IAAI8J,GACpB7J,OAAO,EACPC,qBAAqB,EACrBc,uBAAuB,GA+E3B1gC,KAAAqiE,QAAU,QAEFriE,KAAAu/B,SAAW,IAAIC,EAAAA,QAGfx/B,KAAAgkJ,eAAiB,IACjBhkJ,KAAAikJ,mBAAoB,EAmoBhC,OAtsBIzkJ,OAAAgC,eACWmiJ,EAAAzjJ,UAAA,yBAAsB,KAWjC,WACI,OAAOF,KAAKkkJ,6BAbhB,SACkC/hJ,GADlC,IAAAyS,EAAA5U,MAESmC,IAAUnC,KAAKkkJ,yBACf/hJ,GAASnC,KAAKkkJ,yBAA2BlkJ,KAAKkkJ,wBAAwB5jH,gBAAkBn+B,EAAMm+B,gBAC/Fic,sBAAsB,WAClB3nC,EAAKuvI,sBAAsBhiJ,EAAMm+B,iBAIzCtgC,KAAKkkJ,wBAA0B/hJ,mCAOnC3C,OAAAgC,eACWmiJ,EAAAzjJ,UAAA,mBAAgB,KAW3B,WACI,OAAOF,KAAKokJ,uBAbhB,SAC4BjiJ,GAD5B,IAAAyS,EAAA5U,MAESmC,IAAUnC,KAAKokJ,mBACfjiJ,GAASnC,KAAKokJ,mBAAqBpkJ,KAAKokJ,kBAAkB9jH,gBAAkBn+B,EAAMm+B,gBACnFic,sBAAsB,WAClB3nC,EAAKuvI,sBAAsBhiJ,EAAMm+B,iBAIzCtgC,KAAKokJ,kBAAoBjiJ,mCAO7B3C,OAAAgC,eACWmiJ,EAAAzjJ,UAAA,+BAA4B,KAWvC,WACI,OAAOF,KAAKqkJ,mCAbhB,SACwCliJ,GADxC,IAAAyS,EAAA5U,MAESmC,IAAUnC,KAAKqkJ,+BACfliJ,GAASnC,KAAKqkJ,+BAAiCrkJ,KAAKqkJ,8BAA8B/jH,gBAAkBn+B,EAAMm+B,gBAC3Gic,sBAAsB,WAClB3nC,EAAKuvI,sBAAsBhiJ,EAAMm+B,iBAIzCtgC,KAAKqkJ,8BAAgCliJ,mCAiClCwhJ,EAAAzjJ,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACIA,KAAKs+F,iBAAiB55D,OAAS1kC,KAAKskJ,cACpCtkJ,KAAK8jJ,4BAA4Bp/G,OAAS1kC,KAAKskJ,cAC/CtkJ,KAAK+jJ,+BAA+Br/G,OAAS1kC,KAAKskJ,cAElDtkJ,KAAKukJ,kBAAkBvkH,SAAS6E,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAAC/2B,GACtE4G,EAAK4vI,gBAAkB,QAIxBb,EAAAzjJ,UAAAsmC,YAAP,WACIxmC,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,YAGlBjnC,OAAAgC,eAAWmiJ,EAAAzjJ,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAK2W,KAAK67B,gDAGrBhzC,OAAAgC,eAAWmiJ,EAAAzjJ,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKykJ,qBAGhB,SAA0BtiJ,OAChBsgB,EAAWziB,KAAKykJ,gBAElBzkJ,KAAKykJ,kBAAoBtiJ,IACzBnC,KAAKykJ,gBAAkBtiJ,EACnBsgB,GAAYziB,KAAKykJ,iBAAmBzkJ,KAAKykJ,gBAAgBtnI,WAAasF,EAAStF,WAC/End,KAAK0kJ,kBAAoB,KACzB1kJ,KAAKy/F,YAAc,KACnBz/F,KAAK4tC,IAAIrL,mDAKrB/iC,OAAAgC,eAAImiJ,EAAAzjJ,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKkkH,iBAAiBvtG,sCAGjCnX,OAAAgC,eAAImiJ,EAAAzjJ,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAK2W,KAAK4O,QAAQvL,OAAO,SAACkG,GAAQ,OAACA,EAAIqlG,aAAerlG,EAAIs/E,8CAG9DmkD,EAAAzjJ,UAAAy1D,UAAP,SAAiBgvF,GACR3kJ,KAAKukJ,kBAAkBp2G,YACxBnuC,KAAKukJ,kBAAkBzgH,QAAQzgC,MAAMg/D,QAAU,SAIhDshF,EAAAzjJ,UAAA21D,QAAP,SAAe8uF,GACN3kJ,KAAKukJ,kBAAkBp2G,YACxBnuC,KAAK4kJ,6BACL5kJ,KAAKukJ,kBAAkBxjH,aACvB/gC,KAAKukJ,kBAAkBzgH,QAAQzgC,MAAMg/D,QAAU,KAIhDshF,EAAAzjJ,UAAA2kJ,aAAP,SAAoBnuI,EAA6BouI,GAC7C9kJ,KAAK+kJ,uBAECC,EAAc,IAAItB,GAAsB,CAC1C9vI,UAAW,KACXyF,UAAW,KACX3E,YAAY,EACZ8E,UAAW,MACZ9C,GAEH,GAAIouI,EAAiB,KACXnxI,EAAQ+C,EAAO/D,SAASrB,QAAQwzI,GACtCpuI,EAAO/D,SAASuI,OAAOvH,EAAQ,EAAG,EAAGqxI,QAErCtuI,EAAO/D,SAASnQ,KAAKwiJ,GAGzBhlJ,KAAKilJ,oBAAoBD,IAGtBrB,EAAAzjJ,UAAAglJ,YAAP,SAAmBxuI,EAA8BouI,GAC7C9kJ,KAAKmlJ,SAASvrI,GAAevB,IAAK3B,EAAQouI,IAGvCnB,EAAAzjJ,UAAAklJ,WAAP,SAAkB1uI,EAA8BouI,GAC5C9kJ,KAAKmlJ,SAASvrI,GAAetB,GAAI5B,EAAQouI,IAGtCnB,EAAAzjJ,UAAAmlJ,SAAP,SAAgBztI,GACZ5X,KAAKslJ,aAAe1tI,EAAUlB,QAG3BitI,EAAAzjJ,UAAAqlJ,kBAAP,WACQvlJ,KAAKwlJ,mBACLxlJ,KAAKwlJ,iBAAiBvxI,WAAWL,UAAY5T,KAAKylJ,eAAetlI,MACjEngB,KAAKwlJ,iBAAiBvxI,WAAWoF,UAAYrZ,KAAKylJ,eAAev/B,QAAQ7sG,UAAUrZ,KAAK0kJ,mBACxF1kJ,KAAKwlJ,iBAAiBvxI,WAAWuF,UAAYgB,GAAS0C,WAAWld,KAAKylJ,eAAetoI,SAAUnd,KAAKy/F,aACpGz/F,KAAKwlJ,iBAAiB97H,aAAe1pB,KAAKylJ,eAAe97H,OAEzD3pB,KAAKwlJ,iBAAiBzpC,YAAa,EACnC/7G,KAAKwlJ,iBAAmB,OAIzB7B,EAAAzjJ,UAAA6kJ,iBAAP,WACQ/kJ,KAAK0lJ,oBACL1lJ,KAAK0lJ,kBAAkBC,WAAY,EACnC3lJ,KAAK0lJ,kBAAoB,OAI1B/B,EAAAzjJ,UAAA0lJ,kBAAP,WACQ5lJ,KAAKwlJ,mBACLxlJ,KAAKwlJ,iBAAiBzpC,YAAa,EAE9B/7G,KAAKwlJ,iBAAiBvxI,WAAWL,WAClC5T,KAAK6lJ,WAAW7lJ,KAAKwlJ,kBAGzBxlJ,KAAKwlJ,iBAAmB,OAIzB7B,EAAAzjJ,UAAA4lJ,sBAAP,WACI,OAAO9lJ,KAAKylJ,gBAAkBzlJ,KAAK0kJ,sBAC5B1kJ,KAAKy/F,aAAez/F,KAAKylJ,eAAev/B,QAAQ7sG,UAAUrZ,KAAK0kJ,mBAAmB3yE,UAGtF4xE,EAAAzjJ,UAAA6lJ,gBAAP,WACS/lJ,KAAKwlJ,mBAINxlJ,KAAK8lJ,wBACL9lJ,KAAKulJ,oBAELvlJ,KAAK4lJ,sBAINjC,EAAAzjJ,UAAA8lJ,kBAAP,SAAyB/xI,GACrB,OAAOA,aAAsBuvI,IAGzBG,EAAAzjJ,UAAAilJ,SAAR,SAAiBzsI,EAA0BhC,EAA8BouI,GACrE9kJ,KAAK+kJ,uBAECntI,EAAY,IAAI4rI,GAAoB9qI,EAAUhC,GAEpD,GAAIA,EACA,GAAIouI,EAAiB,KACXnxI,EAAQ+C,EAAO/D,SAASrB,QAAQwzI,GACtCpuI,EAAO/D,SAASuI,OAAOvH,EAAQ,EAAG,EAAGiE,QAErClB,EAAO/D,SAASnQ,KAAKoV,QAGzB5X,KAAKimJ,UAAYruI,EAGrB5X,KAAK6kJ,aAAajtI,GAClB5X,KAAKslJ,aAAe1tI,GAGhB+rI,EAAAzjJ,UAAAgmJ,0BAAR,SAAkCrtI,EAA2CnC,WACrEkB,EACJ,GAAIiB,EAAgB,CAChBjB,EAAY,IAAI4rI,GAAoB3qI,EAAeH,SAAUhC,OAE7D,IAAmB,IAAA5G,EAAAC,EAAA8I,EAAeF,mBAAiB1I,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAhD,IAAMiU,EAAIlG,EAAA9N,MACX,GAAIgU,aAAgBsC,GAChBb,EAAUjF,SAASnQ,KAAKxC,KAAKkmJ,0BAA0B/vI,EAAMyB,QAC1D,KACGuuI,EAAa,EACbC,EAAiC,CACnCxyI,UAAWuyI,EAAcvyI,UACzByF,UAAW8sI,EAAc9sI,UACzBG,UAAW2sI,EAAc3sI,UACzB9E,WAAYyxI,EAAczxI,YAExBswI,EAAc,IAAItB,GAAsB0C,EAAUxuI,GAClDgK,EAAS5hB,KAAK2W,KAAK8hH,gBAAgB0tB,EAAcvyI,WACvDoxI,EAAYt7H,aAAe9H,EAAO+H,OAClC/R,EAAUjF,SAASnQ,KAAKwiJ,0GAKpC,OAAOptI,GAGH+rI,EAAAzjJ,UAAAmmJ,mCAAR,SAA2CzuI,WACvC,IAAKA,EACD,OAAO,SAGLoB,EAAkB,IAAIP,GAAyBb,EAAUc,cAE/D,IAAmB,IAAA5I,EAAAC,EAAA6H,EAAUjF,UAAQ1C,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAlC,IAAM+Z,EAAIhM,EAAA9N,MACX,GAAI8Z,aAAgBunI,GAAqB,KAC/B8C,EAAUtmJ,KAAKqmJ,mCAAkC,GACvDrtI,EAAgBL,kBAAkBnW,KAAK8jJ,QAEvCttI,EAAgBL,kBAAkBnW,KAAK,EAAgCyR,iHAI/E,OAAO+E,GAGJ2qI,EAAAzjJ,UAAAqmJ,aAAP,SAAoBC,GACjBxmJ,KAAK6lJ,WAAWW,IAGZ7C,EAAAzjJ,UAAAo/I,YAAP,SAAmBkH,GAAnB,IAAA5xI,EAAA5U,KACIA,KAAKymJ,YAAc56F,WAAW,WACrBj3C,EAAKqvI,mBACNrvI,EAAK8xI,mBAAmBF,GAE5B5xI,EAAKqvI,mBAAoB,GAC1BjkJ,KAAKgkJ,iBAGLL,EAAAzjJ,UAAAymJ,eAAP,SAAsBH,GAClB91E,aAAa1wE,KAAKymJ,aAClBzmJ,KAAKikJ,mBAAoB,EACzBjkJ,KAAKilJ,oBAAoBuB,IAGtB7C,EAAAzjJ,UAAA+kJ,oBAAP,SAA2BuB,GACvBxmJ,KAAKywC,iBACLzwC,KAAK+lJ,kBACL/lJ,KAAK+kJ,mBAED/kJ,KAAKwlJ,mBACLxlJ,KAAKwlJ,iBAAiBzpC,YAAa,GAGvCyqC,EAAeI,SAAU,EAEzB5mJ,KAAKylJ,eAAiBe,EAAevyI,WAAWL,UAC5C5T,KAAK2W,KAAK8hH,gBAAgB+tB,EAAevyI,WAAWL,WAAa,KACrE5T,KAAK0kJ,kBAAoB8B,EAAevyI,WAAWoF,UAC/CmtI,EAAevyI,WAAWoF,UAAU2G,KAAO,KAC/ChgB,KAAKy/F,YAAc+mD,EAAevyI,WAAWuF,UAE7CgtI,EAAezqC,YAAa,EAC5B/7G,KAAKwlJ,iBAAmBgB,EAExBxmJ,KAAK4tC,IAAIrL,gBAETviC,KAAK8jJ,4BAA4BrkH,iBAAmB,IAAIuI,GAAqB,CAAChnC,OAAQhB,KAAK6mJ,aAAa/iH,UACxG9jC,KAAK+jJ,+BAA+BtkH,iBAAmB,IAAIuI,GAAqB,CAAChnC,OAAQhB,KAAK8mJ,gBAAgBhjH,UAEzG9jC,KAAKylJ,eAECzlJ,KAAKylJ,eAAev/B,QAAQ7sG,UAAUrZ,KAAK0kJ,mBAAmB3yE,QACrE/xE,KAAK8mJ,gBAAgBtmG,MAAMlgB,cAAciT,QAEzCvzC,KAAK+mJ,iBAAiBzmH,cAAciT,QAJpCvzC,KAAK6mJ,aAAarmG,MAAMlgB,cAAciT,SAQvCowG,EAAAzjJ,UAAAuwC,eAAP,2BACI,IAAoB,IAAAxgC,EAAAF,EAAA/P,KAAK6jJ,gBAActrH,EAAAtoB,EAAA/N,QAAAq2B,EAAAn2B,KAAAm2B,EAAAtoB,EAAA/N,OAAE,CAAzBq2B,EAAAp2B,MACN4hB,UAAW,uGAErB/jB,KAAK6jJ,eAAiB,OAEtB,IAAmB,IAAAjrH,EAAA7oB,EAAA/P,KAAK4jJ,qBAAmB/qH,EAAAD,EAAA12B,QAAA22B,EAAAz2B,KAAAy2B,EAAAD,EAAA12B,OAAE,CAA9B22B,EAAA12B,MACN4hB,UAAW,uGAEpB/jB,KAAK4jJ,oBAAsB,GAE3B5jJ,KAAKgnJ,qBAGFrD,EAAAzjJ,UAAA+mJ,mBAAP,SAA0BT,GACtBxmJ,KAAKywC,iBACLzwC,KAAK+lJ,kBAED/lJ,KAAK0lJ,oBACL1lJ,KAAK0lJ,kBAAkBC,WAAY,GAGvCa,EAAeb,WAAY,EAC3B3lJ,KAAK0lJ,kBAAoBc,EACrBA,EAAeziI,UACf/jB,KAAKknJ,iBAAiBV,IAItB7C,EAAAzjJ,UAAAwmJ,mBAAR,SAA2BF,GACvBxmJ,KAAK+lJ,kBACL/lJ,KAAKknJ,iBAAiBV,GAEtBxmJ,KAAKgnJ,qBAGDrD,EAAAzjJ,UAAAgnJ,iBAAR,SAAyBV,GAGrB,GAFAA,EAAeziI,UAAYyiI,EAAeziI,SAEtCyiI,EAAeziI,SACf/jB,KAAK4jJ,oBAAoBphJ,KAAKgkJ,OAC3B,KACG7yI,EAAQ3T,KAAK4jJ,oBAAoBtyI,QAAQk1I,GAC/CxmJ,KAAK4jJ,oBAAoB1oI,OAAOvH,EAAO,GACvC3T,KAAKmnJ,wBAAwBX,KAI7B7C,EAAAzjJ,UAAA8mJ,kBAAR,eACUxC,EAAkBxkJ,KAAKonJ,0BAEzB5C,GAAmBxkJ,KAAK4jJ,oBAAoBjjJ,OAAS,GACrDX,KAAKwkJ,gBAAkBA,EAEnBA,IACAxkJ,KAAKqnJ,gBAAkB,CACnB,CACIluE,MAAOn5E,KAAK2W,KAAK4qH,gBAAgBC,6BACjCz9G,SAAUygI,EAAgB9rI,WAAakB,GAAevB,KAE1D,CACI8gE,MAAOn5E,KAAK2W,KAAK4qH,gBAAgBE,4BACjC19G,SAAUygI,EAAgB9rI,WAAakB,GAAetB,OAKlEtY,KAAKukJ,kBAAkBn2I,SAIvBu1I,EAAAzjJ,UAAAknJ,wBAAR,WAAA,QAAAxyI,EAAA5U,gBACe+W,GAGP,GAFuCC,EAAK4sI,oBAAoBnwI,MAAM,SAAA6zI,GAAM,OAAA1yI,EAAK2yI,cAAcD,EAAIvwI,kBAGxFA,eAJf,IAAoB,IAAAjH,EAAAC,EAAA/P,KAAK6jJ,gBAAc5zI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAA,CAAlC,QAAW+N,EAAA9N,iJAQhB,OAAO,MAGHwhJ,EAAAzjJ,UAAAqnJ,cAAR,SAAsBtrI,EAAsBlF,GACxC,QAAKkF,IAIDA,EAAKvF,SAAWK,GAIb/W,KAAKunJ,cAActrI,EAAKvF,OAAQK,KAGnC4sI,EAAAzjJ,UAAA2lJ,WAAR,SAAmBW,GACf,IAAKA,EAAe9vI,OAGhB,OAFA1W,KAAKimJ,UAAY,UACjBjmJ,KAAKslJ,aAAe,MAIpBkB,IAAmBxmJ,KAAKslJ,eACxBtlJ,KAAKslJ,aAAetlJ,KAAKslJ,aAAa5uI,YAGpC/D,EAAW6zI,EAAe9vI,OAAO/D,SACjCgB,EAAQhB,EAASrB,QAAQk1I,GAC/B7zI,EAASuI,OAAOvH,EAAO,GAElBhB,EAAShS,QACVX,KAAK6lJ,WAAWW,EAAe9vI,SAIhCitI,EAAAzjJ,UAAAs2F,UAAP,SAAiB50D,GACbA,EAAU6C,kBACLzkC,KAAKukJ,kBAAkBp2G,WACV,WAAbvM,EAAU3gC,KAAoC,QAAb2gC,EAAU3gC,KAC5CjB,KAAKywC,kBAINkzG,EAAAzjJ,UAAAsnJ,eAAP,WACIxnJ,KAAKynJ,YAAY7tI,GAAevB,MAG7BsrI,EAAAzjJ,UAAAwnJ,cAAP,WACI1nJ,KAAKynJ,YAAY7tI,GAAetB,KAG5BqrI,EAAAzjJ,UAAAunJ,YAAR,SAAoB/uI,WACVivI,EAAQ3nJ,KAAK2nJ,MAAM/0I,UACnBg1I,EAAW5nJ,KAAK4jJ,oBAAoBz4H,OAAO,SAAC3qB,EAAG8B,GAAM,OAAAmZ,KAAKwtB,IAAIzoC,EAAGmnJ,EAAM7uI,UAAU,SAAA3X,GAAK,OAAAA,EAAEqT,OAASlS,MAAKgY,OAAOutI,WAC7GC,EAAkBH,EAAMC,GAAUpzI,KAElCkC,EAASoxI,EAAgBpxI,OACzBkB,EAAY,IAAI4rI,GAAoB9qI,EAAUhC,GAE9C/C,EAAQ+C,EAAO/D,SAASrB,QAAQw2I,GACtCpxI,EAAO/D,SAASuI,OAAOvH,EAAO,EAAGiE,OAEjC,IAAmB,IAAA9H,EAAAC,EAAA/P,KAAK4jJ,qBAAmB3zI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAxC,IAAMiU,EAAIlG,EAAA9N,MACXnC,KAAK6lJ,WAAW1vI,GAChByB,EAAUjF,SAASnQ,KAAK2T,GACxBA,EAAKO,OAASkB,uGAGlB5X,KAAKywC,kBAGFkzG,EAAAzjJ,UAAA6nJ,cAAP,uBACI,IAAmB,IAAAj4I,EAAAC,EAAA/P,KAAK4jJ,qBAAmB3zI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAxC,IAAMiU,EAAIlG,EAAA9N,MACXnC,KAAK6lJ,WAAW1vI,wGAGpBnW,KAAKywC,kBAGFkzG,EAAAzjJ,UAAA8nJ,aAAP,SAAoBpwI,GAChB5X,KAAKk4H,YAAYtgH,IAGb+rI,EAAAzjJ,UAAAg4H,YAAR,SAAoBtgH,GAChB5X,KAAK+lJ,kBACDnuI,EAAUjF,UAAYiF,EAAUjF,SAAShS,SACzCX,KAAKioJ,qBAAqBrwI,GAAYA,EAAUmM,UAC3CnM,EAAUmM,UACX/jB,KAAKmnJ,wBAAwBvvI,GAEjC5X,KAAKgnJ,sBAILrD,EAAAzjJ,UAAA+nJ,qBAAR,SAA6BrwI,EAAgCmM,WACzD,GAAInM,EAAUmM,WAAaA,EAGvB,GAFAnM,EAAUmM,SAAWA,EAEjBnM,EAAUmM,SACV/jB,KAAK6jJ,eAAerhJ,KAAKoV,OACtB,KACGjE,EAAQ3T,KAAK6jJ,eAAevyI,QAAQsG,GAC1C5X,KAAK6jJ,eAAe3oI,OAAOvH,EAAO,OAI1C,IAAmB,IAAA7D,EAAAC,EAAA6H,EAAUjF,UAAQ1C,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAlC,IAAMiU,EAAIlG,EAAA9N,MACX,GAAIgU,aAAgBqtI,GAChBxjJ,KAAKioJ,qBAAqB9xI,EAAM4N,OAC7B,KACGmkI,EAAiB,EACnBA,EAAkBnkI,WAAaA,GAC/B/jB,KAAKknJ,iBAAiBgB,2GAM9BvE,EAAAzjJ,UAAAinJ,wBAAR,SAAgCX,OACtB9vI,EAAS8vI,EAAe9vI,OAC9B,GAAIA,EAAQ,CACR,GAAIA,EAAOqN,SAAU,CACjBrN,EAAOqN,UAAW,MACZpQ,EAAQ3T,KAAK6jJ,eAAevyI,QAAQoF,GAC1C1W,KAAK6jJ,eAAe3oI,OAAOvH,EAAO,GAEtC3T,KAAKmnJ,wBAAwBzwI,KAI7BitI,EAAAzjJ,UAAA0kJ,2BAAR,WAAA,IAAAhwI,EAAA5U,KACU6/I,EAAgB7/I,KAAKomI,qBAAqB9lG,cAAcpvB,wBACxDy2I,EAAQ3nJ,KAAK2nJ,MAAM3tI,OAAO,SAAA7Y,GAAK,OAA8C,IAA9CyT,EAAKgvI,oBAAoBtyI,QAAQnQ,EAAEqT,QACpE2zI,EAASR,EAAMx8H,OAAO,SAAC7qB,EAAGa,GAC1B,OAAAsa,KAAKwtB,IAAI3oC,EAAGa,EAAEk/B,WAAWC,cAAcpvB,wBAAwBypB,MAAMrgB,OAAOutI,WAChFM,EAAS1sI,KAAK4O,IAAIw1H,EAAcllH,IAAKwtH,GACrCA,EAAS1sI,KAAKwtB,IAAI42G,EAAcrlH,OAAQ2tH,OACpCC,EAAWT,EAAMx8H,OAAO,SAAC/pB,EAAGD,GAC5B,OAAAsa,KAAK4O,IAAIjpB,EAAGD,EAAEk/B,WAAWC,cAAcpvB,wBAAwBwpB,QAAQ,GAC3E0tH,EAAW3sI,KAAK4O,IAAI+9H,EAAUvI,EAAcplH,MAC5C2tH,EAAW3sI,KAAKwtB,IAAIm/G,EAAUvI,EAAcnlH,OAC5C16B,KAAKs+F,iBAAiB7+D,iBAAiBnF,SAASt5B,OAAS,IAAIk5B,GAAMkuH,EAAUD,IAGzExE,EAAAzjJ,UAAAikJ,sBAAR,SAA8BnjJ,OACpBiwH,EAAYjxH,KAAKomI,qBAAqB9lG,cACtC+nH,EAAernJ,EAAO26H,UAAY1K,EAAU0K,UAG9C1K,EAAUx1F,UAFA,GAEoB4sH,EAC9Bp3B,EAAUx1F,UAAY4sH,EAHZ,GAIHp3B,EAAUx1F,UAAYw1F,EAAUh2F,aAAeotH,EAAernJ,EAAO84C,aAJlE,KAKVm3E,EAAUx1F,UAAY4sH,EAAernJ,EAAO84C,aALlC,GAKyDm3E,EAAUh2F,eAI9E0oH,EAAAzjJ,UAAAooJ,QAAP,qBACUC,EAAgBvoJ,KAAKwkJ,gBACrB9tI,EAAS6xI,EAAc7xI,OAC7B,GAAIA,EAAQ,KACF/C,EAAQ+C,EAAO/D,SAASrB,QAAQi3I,IACtCr6I,EAAAwI,EAAO/D,UAASuI,OAAMra,MAAAqN,EAAAxL,EAAA,CAACiR,EAAO,GAAM40I,EAAc51I,eAElD,IAAmB,IAAA1C,EAAAF,EAAAw4I,EAAc51I,UAAQ4lB,EAAAtoB,EAAA/N,QAAAq2B,EAAAn2B,KAAAm2B,EAAAtoB,EAAA/N,OAAE,CAA5Bq2B,EAAAp2B,MACNuU,OAASA,wGAItB1W,KAAKywC,kBAGFkzG,EAAAzjJ,UAAAsoJ,YAAP,eACUD,EAAgBvoJ,KAAKwkJ,gBACrB9tI,EAAS6xI,EAAc7xI,OAC7B,GAAIA,EAAQ,KACF/C,EAAQ+C,EAAO/D,SAASrB,QAAQi3I,GACtC7xI,EAAO/D,SAASuI,OAAOvH,EAAO,QAE9B3T,KAAKimJ,UAAY,KAGrBjmJ,KAAKywC,kBAGFkzG,EAAAzjJ,UAAAuoJ,qBAAP,SAA4Bn2I,GACxBtS,KAAKwkJ,gBAAgB9rI,SAAWpG,EAAW,OAGxCqxI,EAAAzjJ,UAAAwoJ,yBAAP,SAAgC1oI,GAC5B,OAAOhgB,KAAK2W,KAAK4qH,gBAAgB,mBAAmBvhH,IAAWA,GAG5D2jI,EAAAzjJ,UAAAgQ,OAAP,SAAc/N,GACV,OAAOA,aAAiBgO,MAGrBwzI,EAAAzjJ,UAAAyoJ,sBAAP,WACS3oJ,KAAKukJ,kBAAkBp2G,YACxBnuC,KAAK4kJ,6BACL5kJ,KAAKukJ,kBAAkBxjH,eAIxB4iH,EAAAzjJ,UAAA0oJ,YAAP,SAAmBhnH,GACE,UAAbA,EAAU3gC,KAAmC,MAAb2gC,EAAU3gC,KAAmC,aAAb2gC,EAAU3gC,MAC1E2gC,EAAUqI,iBACTrI,EAAuB,cAAiB7iB,UAI1C4kI,EAAAzjJ,UAAA2oJ,oBAAP,SAA2Bv2I,GAEvBA,EAAM23B,kBAGH05G,EAAAzjJ,UAAA4oJ,iBAAP,WACI,OAAO9oJ,KAAKylJ,eAAiBzlJ,KAAKylJ,eAAev/B,QAAQh0C,gBAAkB,IAGxEyxE,EAAAzjJ,UAAAo9B,WAAP,SAAkB4mF,EAAuC3mF,EACrDmoG,GADJ,IAAA9wH,EAAA5U,KAEIA,KAAKkkH,iBAAmBA,EACxBlkH,KAAKu9B,eAAiBA,EACtBv9B,KAAK0lI,mBAAqBA,EAE1B1lI,KAAKkkH,iBAAiBmc,mBAGtBrgI,KAAKu9B,eAAeuC,SAAS+E,KAAK8G,EAAAA,SAAS5G,UAAU,WAC7CnwB,EAAKkvB,QAAQxD,cAAcvD,gBAC3BnoB,EAAKkvB,QAAQxD,cAAcvD,cAAc15B,MAAM,kBAAoB,UAIvErD,KAAK2W,KAAKuR,mCACVloB,KAAKimJ,UAAYjmJ,KAAKkmJ,0BAA0BlmJ,KAAK2W,KAAKuR,kCAC1DloB,KAAKslJ,aAAetlJ,KAAKimJ,YAO1BtC,EAAAzjJ,UAAA6oJ,kBAAP,WACQ/oJ,KAAKgpJ,sBACLhpJ,KAAKgpJ,sBAAsB1oH,cAAciT,QAClCvzC,KAAKipJ,oBACZjpJ,KAAKipJ,mBAAmB3oH,cAAciT,SAIvCowG,EAAAzjJ,UAAAymD,QAAP,SAAe1yC,EAA4B6wI,GACvC,MAAO,CACHlnG,UAAW3pC,EACX6wI,gBAAeA,IAIhBnB,EAAAzjJ,UAAAslI,mBAAP,WACIxlI,KAAKywC,iBACLzwC,KAAK+kJ,mBACL/kJ,KAAK4lJ,oBACL5lJ,KAAKslJ,aAAe,KACpBtlJ,KAAKimJ,UAAY,KACjBjmJ,KAAK2W,KAAKuR,iCAAmC,MAG1Cy7H,EAAAzjJ,UAAAulI,YAAP,WACQzlI,KAAK0lI,oBACL1lI,KAAKu9B,eAAeiE,KAAKxhC,KAAK0lI,qBAI/Bie,EAAAzjJ,UAAAgpJ,aAAP,WACIlpJ,KAAK+lJ,kBACL/lJ,KAAK2W,KAAKuR,iCAAmCloB,KAAKqmJ,mCAAmCrmJ,KAAKimJ,YAGvFtC,EAAAzjJ,UAAAylI,mBAAP,WACI3lI,KAAKkpJ,eACLlpJ,KAAKylI,eAGFke,EAAAzjJ,UAAAipJ,mBAAP,eACU3E,EAAkBxkJ,KAAKonJ,2BACzB5C,GAAmBxkJ,KAAK4jJ,oBAAoBjjJ,OAAS,KACrDX,KAAKwkJ,gBAAkBA,EACvBxkJ,KAAK4kJ,6BACD5kJ,KAAKukJ,kBAAkBp2G,UACvBnuC,KAAKukJ,kBAAkBp2I,KAAKnO,KAAKs+F,kBAEjCt+F,KAAKukJ,kBAAkBxjH,mCA3wBtC+Q,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,gCACVqjC,SAAA,+4iBAjEyEzO,EAAAA,kBAA5C2L,EAAAA,+DAoE5BtgC,EAAAA,kCAGAA,EAAAA,8BAGAA,EAAAA,4BA+CA8nC,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE0oC,KAAM2sG,GAAoB1sG,UAAQ,6BAG9DF,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE0oC,KAAM2sG,GAAoB1sG,UAAQ,8BAGjEF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,mCAG1DF,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,gCAG/DF,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,oCAG5DF,EAAAA,UAASzoC,KAAA,CAAC,yBAA0B,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,8BAgBhEF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,0CAgB1DF,EAAAA,UAASzoC,KAAA,CAAC,+BAAgC,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,+BAgBtEF,EAAAA,UAASzoC,KAAA,CAAC2/B,GAAoB,CAAEgJ,UAAQ,mBAGxC+mC,EAAAA,aAAY1vE,KAAA,CAAC+nF,kCAGbt/C,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE2oC,UAAQ,2BAG5CF,EAAAA,UAASzoC,KAAA,CAAC,gBAAiB,CAAE0oC,KAAM/G,GAA2BgH,UAAQ,qBAGtExH,EAAAA,YAAWnhC,KAAA,CAAC,oBA0oBjB21I,EA/wBA,GC3DAyF,GAAA,WAII,SAAAA,EAAmBC,GAAArpJ,KAAAqpJ,YAAAA,EACvB,2BALC56I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gEANgBk6C,EAAAA,eAU9BwgG,EALA,GAUAE,GAAA,WAII,SAAAA,EAAmBD,GAAArpJ,KAAAqpJ,YAAAA,EACvB,2BALC56I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iEAhBgBk6C,EAAAA,eAoB9B0gG,EALA,GAUAC,GAAA,WAAA,SAAAA,KAKA,2BALCv6I,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACm6I,GAAyBE,IACxCp6I,QAAS,CAACk6I,GAAyBE,QAGvCC,EALA,GCfAC,GAAA,WAKI,SAAAA,EAAmBz3G,GAAA/xC,KAAA+xC,SAAAA,EAEvB,2BAPCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+DAXkDk6C,EAAAA,eAiBhE4gG,EAPA,GAYAC,GAAA,WAAA,SAAAA,KAIA,2BAJCh7I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gCAGd+6I,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCj7I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iCAGdg7I,EAJA,GAUAC,GAAA,WAAA,SAAAA,KAIA,2BAJCl7I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mCAGdi7I,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCn7I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,oCAGdk7I,EAJA,GASAC,GAAA,SAAA/vI,GAKI,SAAA+vI,EAAoBxpH,EAAgC+0B,EAA6BD,GAAjF,IAAAvgD,EACIkF,EAAAlZ,KAAAZ,KAAMqgC,EAAY+0B,EAAUD,IAAKn1D,YADjB4U,EAAAyrB,WAAAA,EAAgCzrB,EAAAwgD,SAAAA,EAA6BxgD,EAAAugD,KAAAA,EAK1EvgD,EAAAgyI,SAAU,IAiErB,OAxE+C5uI,EAAAA,EAAAA,GAUpC6xI,EAAA3pJ,UAAA++D,YAAP,SAAmB3sD,OACT4hD,EAAqC5hD,EAAMitD,OAAOnE,MAClDx5C,EAA6BsyC,EAAKtyC,OACxC,GAAK5hB,KAAK8pJ,oBAAoBloI,GAA9B,KAIMmoI,GAA+F,IADtEnoI,EAAW,KACnBk9F,oBAAoBhmG,UAAU,SAACmD,GAAS,OAAAA,EAAKrI,YAAcgO,EAAOzB,QACrFyB,EAAO6gG,YAAcsnC,IAAcnoI,EAAO2jG,aAAiB3jG,EAAOzB,OAClE+zC,EAAKkkB,KAAK83C,UAAY,aACtBlwH,KAAK4mJ,SAAU,IAEf1yF,EAAKkkB,KAAK83C,UAAY,QACtBlwH,KAAK4mJ,SAAU,KAIhBiD,EAAA3pJ,UAAAg/D,YAAP,SAAmB5sD,OAETsP,EADqCtP,EAAMitD,OAAOnE,MAChBx5C,OACnC5hB,KAAK8pJ,oBAAoBloI,KAG9BtP,EAAMitD,OAAOnE,MAAMgd,KAAK83C,UAAY,QACpClwH,KAAK4mJ,SAAU,IAGZiD,EAAA3pJ,UAAAy/D,WAAP,SAAkBrtD,OACR4hD,EAAqC5hD,EAAMitD,OAAOnE,MACxD,GAAIlH,aAAgBq6D,GAA8B,KACxCy7B,EAA6B91F,EAAKtyC,OACxC,IAAK5hB,KAAK8pJ,oBAAoBE,GAC1B,WAEErzI,EAAyBqzI,EAAW,KACpCD,GAA+F,IAAnFpzI,EAAKmoG,oBAAoBhmG,UAAU,SAACmD,GAAS,OAAAA,EAAKrI,YAAco2I,EAAO7pI,QACrF6pI,EAAOvnC,YAAcsnC,IAAcC,EAAOzkC,aAAiBykC,EAAO7pI,OAClExJ,EAAKuB,QAAQ,CAAEtE,UAAWo2I,EAAO7pI,MAAO1L,IAAKK,GAAiB1B,IAAKsB,WAAYs1I,EAAO5mC,kBAClF5sG,SAAUwzI,EAAOrjI,aAAc3Q,iBAAkBg0I,EAAOh0I,qBAKhE6zI,EAAA3pJ,UAAA+pJ,oBAAR,SAA4BziG,EAAM0iG,GAC9B,OAAO1iG,EAAK+G,aAAa27F,GACrB1iG,EACAxnD,KAAKiqJ,oBAAoBziG,EAAKzqB,cAAemtH,IAG7CL,EAAA3pJ,UAAA4pJ,oBAAR,SAA4BloI,OAClB4lC,EAAOxnD,KAAKqgC,WAAWC,cACvB6pH,EAAgBnqJ,KAAKiqJ,oBAAoBziG,EAAM,oBAAoBqV,aAAa,UACtF,GAAKj7C,EAEE,KACGjL,EAAyBiL,EAAW,KAC1C,SAAKjL,GAAQA,EAAKhJ,KAAOw8I,GAHzB,OAAO,uBAlElB17I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEA5DM40B,EAAAA,kBAAY+vB,EAAAA,iBAAWtsB,EAAAA,2CAoEtCoI,EAAAA,YAAWnhC,KAAA,CAAC,iCAkEjB67I,EA3EA,CAG+CrrF,IC5C/C4rF,GAAA,SAAAtwI,GAAA,SAAAswI,IAAA,IAAAx1I,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAMY4U,EAAAy1I,iBAAkB,EA8HlBz1I,EAAA01I,mBAAqB,SAACvyG,GACtBnjC,EAAK+iD,cACL/iD,EAAK+iD,aAAatxB,oBAAoB,gBAAiBzxB,EAAK01I,oBAAoB,GAEpF11I,EAAK21I,iBAMb,OA3IyCvyI,EAAAA,EAAAA,GAKrCxY,OAAAgC,eACI4oJ,EAAAlqJ,UAAA,OAAI,KAIR,WACI,OAAOF,KAAKqhB,SANhB,SACS/H,GACLtZ,KAAKqhB,IAAM/H,mCAOR8wI,EAAAlqJ,UAAAk4C,cAAP,SAAqB9lC,GACjBA,EAAM23B,iBACNjqC,KAAKqqJ,iBAAkB,EACvBrqJ,KAAKi3D,kBAAmB,EACxBn9C,EAAA5Z,UAAMk4C,cAAax3C,KAAAZ,KAACsS,IAGjB83I,EAAAlqJ,UAAAy4D,cAAP,SAAqBrmD,GAArB,IAAAsC,EAAA5U,KAEI,GADA8Z,EAAA5Z,UAAMy4D,cAAa/3D,KAAAZ,KAACsS,GAChBtS,KAAK02D,eAAiB12D,KAAKqqJ,gBAAiB,CAC5CrqJ,KAAKqqJ,iBAAkB,MACjBr8I,EAA+B,CACjCkqF,cAAel4F,KACfy/D,SAAUz/D,KAAKqhB,IACfe,QAAQ,EACRg5C,MAAOp7D,KAAKqhB,IAAI1K,MAIpB,GADA3W,KAAKqhB,IAAI1K,KAAK6zI,eAAejoI,KAAKvU,GAC9BA,EAAKoU,OAKL,OAJApiB,KAAK23D,aAAa10B,WAAWjkB,YAAYhf,KAAK23D,cAC9C33D,KAAK23D,aAAe,KACpB33D,KAAK02D,cAAe,OACpB12D,KAAK82D,UAAW,GAGpB92D,KAAKqhB,IAAIo9F,UAAW,EACpBz+G,KAAKqhB,IAAI1K,KAAKmpG,aAAc,EAC5B9/G,KAAKqhB,IAAI1K,KAAKgsC,eAEd3iD,KAAKgvH,cAAgBpqF,EAAAA,UAAU5kC,KAAKqhB,IAAI1K,KAAK0H,SAASkoB,YAAa,WAAWxB,UAAU,SAAC5E,GAC3E,WAANA,EAAGl/B,KAA6B,QAANk/B,EAAGl/B,MAC7B2T,EAAKmiD,eAAgB,EACrBniD,EAAKyjC,YAAY/lC,QAM1B83I,EAAAlqJ,UAAAm4C,YAAP,SAAmB/lC,GAAnB,IAAAsC,EAAA5U,KAEI,GAAKA,KAAK82D,SAAV,KAIM9oD,EAA6B,CAC/BkqF,cAAel4F,KACfy/D,SAAUz/D,KAAKqhB,IACfrd,WAAW,EACXo3D,MAAOp7D,KAAKqhB,IAAI1K,MAEpB3W,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAKyM,IAAI1K,KAAK8zI,aAAaloI,KAAKvU,SAG9B08I,EAAW1qJ,KAAK+2D,cACtBj9C,EAAA5Z,UAAMm4C,YAAWz3C,KAAAZ,KAACsS,IACbo4I,GAAY1qJ,KAAK23D,aAClB33D,KAAK23D,aAAanzB,iBAAiB,gBAAiBxkC,KAAKsqJ,oBAAoB,GAE7EtqJ,KAAKuqJ,gBAIHH,EAAAlqJ,UAAAg6D,YAAV,SAAsB7f,EAAOE,GAWzB,GAVAv6C,KAAKqhB,IAAI1K,KAAKuO,SAAQ,GACtBllB,KAAKqhB,IAAI1K,KAAKgsC,eACd3iD,KAAKq1D,aAAe,CAChBzX,UAAW59C,KAAKqhB,IAAIC,QACpB9M,KAAMxU,KAAKqhB,IAAIC,QACf3K,KAAM3W,KAAKqhB,IAAI1K,MAEnBmD,EAAA5Z,UAAMg6D,YAAWt5D,KAAAZ,KAACq6C,EAAOE,EAAOv6C,KAAKqhB,IAAIif,eAGrCtgC,KAAKq3I,mBAAoB,KACnBh2H,EAAMrhB,KAAQ,IACpB,GAAIqhB,EAAIspI,SAAU,KACRC,EAAgBvpI,EAAIspI,SAASrqH,cAAcpvB,wBAAwBD,MACzEjR,KAAK22D,aAAei0F,OAItBr1F,EAAQv1D,KAAK23D,aAEbkxE,EAAW7oI,KAAKqhB,IAAI1K,KAAK2pB,cAAcpvB,wBACvC25I,EAAU7qJ,KAAKqhB,IAAIif,cAAcpvB,wBACvCqkD,EAAMlyD,MAAMyN,SAAW,SACvBykD,EAAMlyD,MAAM4N,MAAQ43H,EAAS53H,MAAQ,KACrCskD,EAAMlyD,MAAM8J,OAAS09I,EAAQ19I,OAAS,KAEtCnN,KAAKo1D,SAASrC,SAASwC,EArHF,uBAsHrBv1D,KAAKo1D,SAAStC,YAAYyC,EApHT,0BAuHjB,QADMu1F,EAAav1F,EAAMw1F,uBAvHX,gBAwHLp3I,EAAQ,EAAGA,EAAQm3I,EAAWnqJ,OAAQgT,IAC3C3T,KAAKo1D,SAAStC,YAAYg4F,EAAWn3I,GAvHvB,0BAwHd3T,KAAKo1D,SAAStC,YAAYg4F,EAAWn3I,GAvHzB,yBA2HZy2I,EAAAlqJ,UAAA0uH,aAAR,WACQ5uH,KAAKgvH,gBAAkBhvH,KAAKgvH,cAAcjgF,QAC1C/uC,KAAKgvH,cAAc9gF,eAInBk8G,EAAAlqJ,UAAAqqJ,YAAR,WACIvqJ,KAAK84D,gBAAgB,MACrB94D,KAAKqhB,IAAIo9F,UAAW,EACpBz+G,KAAKqhB,IAAI1K,KAAKmpG,aAAc,EAC5B9/G,KAAKqhB,IAAI1K,KAAKgsC,eACd3iD,KAAK4uH,gBAUTpvH,OAAAgC,eAAY4oJ,EAAAlqJ,UAAA,qBAAkB,KAA9B,WACI,MAA6D,0BAAtDF,KAAKqhB,IAAI1K,KAAK2pB,cAAc+uB,QAAQh6C,mEA5IlD5G,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iDAOTC,EAAAA,MAAKX,KAAA,CAAC,iBAsIXo8I,EA9IA,CAGyCn1F,IAgJzC+1F,GAAA,WAAA,SAAAA,KAKA,2BALCv8I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6BAIds8I,EALA,GAUAC,GAAA,WAKI,SAAAA,EAAmB5B,GAAArpJ,KAAAqpJ,YAAAA,EACvB,2BANC56I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iEAhLkCk6C,EAAAA,eAqLhDqiG,EANA,iBAQA,SAAAC,KAQA,2BARCl8I,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACm7I,GAAqBY,GAA+BC,IACnE7gG,gBAAiB,GACjBl7C,QAAS,CAACk7I,GAAqBY,GAA+BC,IAC9DxuG,QAAS,OAIbyuG,KCzEaC,GAAqB,IAAIr3G,EAAAA,eAAuB,sBA6G7Ds3G,GAAA,SAAAtxI,GA+rFI,SAAAsxI,EACWvoI,EACAhC,EACAmsG,EACGjlG,EAC4B+jB,EAC9BzL,EACA80B,EACiB92C,EAClBuvB,EACGqQ,EACAotG,EACAC,EACHp4D,EACAgxB,EAC8B3mF,EAC9B7a,EAC4CmyB,GAjBvD,IAAAjgC,EAkBQkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAjB1B4U,EAAAiO,iBAAAA,EACAjO,EAAAiM,YAAAA,EACAjM,EAAAo4G,mBAAAA,EACGp4G,EAAAmT,QAAAA,EAC4BnT,EAAAk3B,cAAAA,EAC9Bl3B,EAAAyrB,WAAAA,EACAzrB,EAAAugD,KAAAA,EACiBvgD,EAAAyJ,SAAAA,EAClBzJ,EAAAg5B,IAAAA,EACGh5B,EAAAqpC,SAAAA,EACArpC,EAAAy2I,QAAAA,EACAz2I,EAAA02I,QAAAA,EACH12I,EAAAs+E,WAAAA,EACAt+E,EAAAsvG,iBAAAA,EAC8BtvG,EAAA2oB,eAAAA,EAC9B3oB,EAAA8N,eAAAA,EAC4C9N,EAAAigC,uBAAAA,EA3sF7CjgC,EAAAurG,OAAQ,EAEVvrG,EAAA22I,cAAe,EACb32I,EAAA42I,oBAAqB,EAMvB52I,EAAA62I,iBAAmB3a,GAAuBC,eAC1Cn8H,EAAA82I,kBAAoB,KACpB92I,EAAA+2I,0BAA4B,KAC5B/2I,EAAA+tH,YAAa,EACb/tH,EAAAqvE,QAAU,KACXrvE,EAAAg/E,YAAa,EACZh/E,EAAAg3I,WAAa,GAKbh3I,EAAAi3I,mCAAuD,CAC3D1vH,kBAAmBC,GAAkBpC,OACrCiC,oBAAqBC,GAAoBrC,OACzCwC,qBAAsBH,GAAoBrC,OAC1CyC,mBAAoBF,GAAkBpC,QAGlCplB,EAAAk3I,kCAAqD,CACzDlsH,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAIwH,GAA6BryB,EAAKi3I,qCA4CrDj3I,EAAAm3I,cAAe,EA0Gfn3I,EAAAo3I,+BAAiC,IAAI7iI,EAAAA,aAiBrCvU,EAAAq3I,uCAAyC,IAAI9iI,EAAAA,aA+I7CvU,EAAAs3I,WAAa,IAAI/iI,EAAAA,aA2CjBvU,EAAAu3I,cAAgB,IAAIhjI,EAAAA,aA8FpBvU,EAAAkrG,aAAc,EA0GdlrG,EAAAyqG,WAAa,qBAUbzqG,EAAA0qG,UAAY,oBA4IZ1qG,EAAAw3I,kBAAoB,GAwCpBx3I,EAAAy3I,mBAAqB,GA+MrBz3I,EAAA8nG,YAAc,IAAIvzF,EAAAA,aAelBvU,EAAAmgC,YAAc,IAAI5rB,EAAAA,aAelBvU,EAAAqiG,qBAAuB,IAAI9tF,EAAAA,aAe3BvU,EAAAozG,gBAAkB,IAAI7+F,EAAAA,aAkCtBvU,EAAAqpG,iBAAmB,IAAI90F,EAAAA,aAiCvBvU,EAAA28F,gBAAkB,IAAIpoF,EAAAA,aAmCtBvU,EAAA0N,WAAa,IAAI6G,EAAAA,aA+BjBvU,EAAAs8F,eAAiB,IAAI/nF,EAAAA,aAqCrBvU,EAAAqP,UAAY,IAAIkF,EAAAA,aAmChBvU,EAAA03I,gBAAkB,IAAInjI,EAAAA,aAkBtBvU,EAAA23I,aAAe,IAAIpjI,EAAAA,aAenBvU,EAAA43I,cAAgB,IAAIrjI,EAAAA,aAgBpBvU,EAAAsrH,gBAAkB,IAAI/2G,EAAAA,aAetBvU,EAAA63I,aAAe,IAAItjI,EAAAA,aAgBnBvU,EAAA83I,WAAa,IAAIvjI,EAAAA,aAgBjBvU,EAAAqS,aAAe,IAAIkC,EAAAA,aA4BnBvU,EAAAyqF,cAAgB,IAAIl2E,EAAAA,aAgBpBvU,EAAA42G,gBAAkB,IAAIriG,EAAAA,aAgBtBvU,EAAA+nG,cAAgB,IAAIxzF,EAAAA,aAgBpBvU,EAAAomG,cAAgB,IAAI7xF,EAAAA,aAepBvU,EAAAu+G,0BAA4B,IAAIhqG,EAAAA,aAehCvU,EAAAm6G,oBAAsB,IAAI5lG,EAAAA,aAgB1BvU,EAAAs6G,eAAiB,IAAI/lG,EAAAA,aAgBrBvU,EAAA07G,kBAAoB,IAAInnG,EAAAA,aAgBxBvU,EAAA8oG,cAAgB,IAAIv0F,EAAAA,aAOpBvU,EAAA41I,eAAiB,IAAIrhI,EAAAA,aAOrBvU,EAAA61I,aAAe,IAAIthI,EAAAA,aAO1BvU,EAAA+3I,WAAa,IAAIxjI,EAAAA,aAwBVvU,EAAAqL,WAA4C,IAAIgqG,EAAAA,UAoVhDr1G,EAAAg4I,WAA6B,IAAI3iC,EAAAA,UAqDlCr1G,EAAAujH,6BAAiD,KAMjDvjH,EAAAyjH,8BAAkD,KAMlDzjH,EAAAi4I,8BAAkD,KAMlDj4I,EAAAk4I,gCAAoD,KAyDnDl4I,EAAA+zD,SAAW,EAmBX/zD,EAAA43H,SAAW,OA8DX53H,EAAAm4I,yBAA2B,IAAI5jI,EAAAA,aAuF/BvU,EAAAo4I,uBAAyB,KAGxBp4I,EAAAq4I,cAAe,EACfr4I,EAAAs4I,cAAe,EACft4I,EAAAu4I,YAAa,EACbv4I,EAAAw4I,cAAwB,KACxBx4I,EAAAy4I,YAAsB,KACtBz4I,EAAA04I,iBAA2B,KAC3B14I,EAAA24I,eAAyB,KACzB34I,EAAA44I,cAAe,EAEf54I,EAAA64I,oBAAsB,KAgBvB74I,EAAA0hH,QAAmC,KAGlC1hH,EAAA84I,YAA0B,KAiNlC94I,EAAA+4I,iBAAmB,CAIfrtI,SAAS,EAITstI,aAAa,EAIbC,gBAAgB,EAIhBC,UAAW,MAkERl5I,EAAAihH,mBAAqB,IAAI1sG,EAAAA,aAShCvU,EAAAkmG,iBAAmB,IAAI3xF,EAAAA,aAahBvU,EAAA4/G,WAAa,EAQb5/G,EAAAm5I,wBAA0B,GAe1Bn5I,EAAAugF,oBAAqB,EAKrBvgF,EAAAqnG,eAA8B,CACjCrtC,WAAY,GACZzB,eAAe,EACfC,YAAY,EACZ4gF,iBAAkB,EAClBC,eAAgB,IAMbr5I,EAAAoyG,sBAAuB,EAQpBpyG,EAAA2qB,SAAW,IAAIC,EAAAA,QAKf5qB,EAAAs5I,SAAW,GAIXt5I,EAAAu5I,MAAQ,EAIRv5I,EAAAw5I,SAAU,EAIVx5I,EAAAy5I,mBAAoB,EAIpBz5I,EAAA05I,UAAW,EAIX15I,EAAAwO,aAAe,EAIfxO,EAAA25I,sBAAwB,EAIxB35I,EAAAowG,oBAAsB,EAItBpwG,EAAA45I,SAAiC,GAIjC55I,EAAAizG,eAAuC,GAIvCjzG,EAAAgzG,iBAAyC,GAIzChzG,EAAA65I,0BAAuD,IAAIh2I,GAAyBmB,GAAevB,KAQnGzD,EAAAkpF,oBAAiD,GAIjDlpF,EAAA85I,qBAAuB,KAIvB95I,EAAA+5I,eAAgB,EAIhB/5I,EAAAg6I,gBAAiB,EAOjBh6I,EAAAi6I,iBAAkB,EAClBj6I,EAAAk6I,yBAA0B,EAC1Bl6I,EAAAm6I,YAAc/wB,GAAW9kB,YAEzBtkG,EAAAo6I,SAA2B,IAAIntG,EAAe,cAE9CjtC,EAAAq6I,aAAe,IAAIzvH,EAAAA,QAIrB5qB,EAAAs6I,mBAAqB,GACrBt6I,EAAAu6I,mBAAqB,GACrBv6I,EAAAw6I,QAAU,OACVx6I,EAAA0vG,OAAS,OAGT1vG,EAAAy6I,kBAAuD,GACvDz6I,EAAA06I,uBAAyB,EAIzB16I,EAAA26I,YAAclqD,IACdzwF,EAAA46I,eAAiB,GACjB56I,EAAA66I,iBAAmB,GACnB76I,EAAA86I,aAAerqD,IACfzwF,EAAA+6I,eAAiBtqD,IACjBzwF,EAAAg7I,gBAAkB,GAClBh7I,EAAAi7I,eAAgB,EAIdj7I,EAAAk7I,2BAA6B,GAE/Bl7I,EAAAm7I,iBAAmBC,GAAoBx1H,OACvC5lB,EAAAq7I,wBAA0BC,GAA2B52C,mBACrD1kG,EAAAu7I,mBAAqB71C,GAAkBV,SACvChlG,EAAAw7I,kBAAoB91C,GAAkBZ,KAEtC9kG,EAAAy7I,2BAA6B,IAAIv/B,GAAwB,CAC7D70F,oBAAqBC,GAAoBpC,MACzCqC,kBAAmBC,GAAkBnC,OACrCoC,qBAAsBH,GAAoBtC,KAC1C0C,mBAAoBF,GAAkBnC,OACtCuC,eAAgB,OAGZ5nB,EAAA07I,gBAAkB,CACtB5wH,eAAgB,IAAI8J,GACpB7J,OAAO,EACPC,qBAAqB,EACrB8E,OAAQ9vB,EAAK27I,mBACb9wH,iBAAkB7qB,EAAKy7I,4BAGnBz7I,EAAA+qC,sBAAwB,SAACrtC,GAC7BsC,EAAKojH,wBAAwBtuF,SAASp3B,GAClCf,MAAYqD,EAAKw7G,cAAa,GAClCx7G,EAAKugF,oBAAqB,EAE1BvgF,EAAKugD,KAAKzS,IAAI,WACV9tC,EAAKugD,KAAKlL,SAASplB,KAAK8G,EAAAA,SAAS5G,UAAU,WACvCnwB,EAAKojH,wBAAwB55E,YAAY77B,KAAK3N,EAAKojH,wBAAwBzpH,SAG3EqG,EAAKuO,aACLvO,EAAK47I,qCAAqC57I,EAAK6O,eAEnD7O,EAAKugF,oBAAqB,IAG9BvgF,EAAK67I,gBAGD77I,EAAA87I,wBAA0B,SAACp+I,OACzBgpB,EAAahpB,EAAMtR,OAAOs6B,WAC5B/pB,MAAYqD,EAAKw7G,cAAa,GAClCx7G,EAAKukH,gBAAgB33E,UAAUlmB,GAC/B1mB,EAAKy6I,kBAAkB58I,QAAQ,SAAAk+I,GAAQ,OAAAA,EAAKnvG,UAAUlmB,KACtD1mB,EAAKg5B,IAAI+U,eAET/tC,EAAKugD,KAAKzS,IAAI,WACV9tC,EAAKugD,KAAKlL,SAASplB,KAAK8G,EAAAA,SAAS5G,UAAU,WACvCnwB,EAAKqkH,cAAc76E,YAAY77B,KAAK3N,EAAKukH,gBAAgB5qH,WAIjEqG,EAAK67I,gBAkBD77I,EAAAg8I,eAAiB,SAACt+I,OAChBrR,EAAMqR,EAAMrR,IAAIoU,e/LvpF9B,SAAgCpU,GAC5B,OAcoB,IAdb,CACH,OACA,KACA,OACA,QACA,YACA,UACA,YACA,aACA,OACA,MACA,QACA,WACA,KACFqQ,QAAQrQ,G+LyoFD4vJ,CAAgB5vJ,IAA0B,KAAlBqR,EAAMq0D,SAA2B,QAAR1lE,GAAyB,aAARA,GAA8B,WAARA,KACzFqR,EAAM23B,iBACM,aAARhpC,GACA2T,EAAKojH,wBAAwBl0E,iBAC7BlvC,EAAK0rB,cAAciT,SACJ,WAARtyC,IACP2T,EAAKojH,wBAAwBj0E,iBAC7BnvC,EAAK0rB,cAAciT,WA21ExB3+B,EAAA+mF,cAAgB,SAACrpF,GACpBsC,EAAKukH,gBAAgBj+F,gBAAkB5oB,EAAMtR,OAAOs6B,WACpD1mB,EAAKojH,wBAAwB98F,gBAAkB5oB,EAAMtR,OAAOy6B,UAC5DnpB,EAAMtR,OAAOs6B,WAAa,EAC1BhpB,EAAMtR,OAAOy6B,UAAY,GAyMtB7mB,EAAAw7G,aAAe,SAAC0gC,QAAA,IAAAA,IAAAA,GAAA,GACfl8I,EAAKyJ,SAASmyE,gBAEb57E,EAAKyJ,SAASmyE,cAAcugE,wBAAwBn8I,EAAK6pH,MAAMn+F,eAAiBwkB,KAAKksG,4BAErFp8I,EAAKyJ,SAASmyE,cACXugE,wBAAwBn8I,EAAKq8I,MAAM3wH,eAAiBwkB,KAAKksG,4BAA8BF,IAC1Fl8I,EAAKyJ,SAAsB,cAAiBgrD,QA+b7Cz0D,EAAAs8I,uBAAyB,SAAC5+I,GAC1BA,EAAM8mC,OAAS,EACfxkC,EAAKojH,wBAAwBt0E,aAE7B9uC,EAAKojH,wBAAwBn0E,cA19F7BjvC,EAAKg5B,IAAInQ,WA0nGrB,OA30LmDzlB,EAAAA,EAAAA,GAS/CxY,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKmxJ,8CA6ChB3xJ,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,kBAAe,KAOnB,WACI,OAAOF,KAAKyrJ,sBAThB,SACoBtpJ,GAChBnC,KAAKyrJ,iBAAmBjsJ,OAAOa,OAAO,GAAIL,KAAKyrJ,iBAAkBtpJ,oCA+CrE3C,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKyuJ,0BAA0B/1I,cAW1C,SAA0BvW,GACtBnC,KAAKyuJ,0BAA0B/1I,SAAWvW,mCAY9C3C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAKyuJ,+BAsBhB,SAA6BtsJ,GACzB,GAAIA,GAASA,aAAiBsW,GAA0B,CAEpD,QADMa,EAAG,EACA3F,EAAQ,EAAGA,EAAQ2F,EAAIX,kBAAkBhY,OAAQgT,IACtD,KAAM2F,EAAIX,kBAAkBhF,aAAkB8E,IAA2B,KAC/DoN,EAAqB,IAAIpN,GAAyBmB,GAAevB,IAAKiB,EAAIX,kBAAkBhF,GAAOC,WACzGiS,EAAmBlN,kBAAkBnW,KAAK8W,EAAIX,kBAAkBhF,IAChE2F,EAAIX,kBAAkBhF,GAASkS,EAIvC1jB,EAAM+P,KAAOk/I,GAA6B74I,QAC1CvY,KAAKyuJ,0BAA4BtsJ,EACjCnC,KAAKuuJ,wBACLvuJ,KAAKgsJ,+BAA+BzpI,KAAKviB,KAAKyuJ,2BAE1CzuJ,KAAKkkH,iBAAiBqe,gCAAgCviI,KAAKyuJ,6BAC1DzuJ,KAAKkoB,mCACNloB,KAAKqgB,aAAe,MAGxBrgB,KAAKkkH,iBAAiBC,qBACtBnkH,KAAK6iB,iBAAiBqE,qBACtBlnB,KAAK0iB,eAAeC,oBACpB3iB,KAAKmnB,kDAoCb3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,mCAAgC,KAApC,WACI,OAAOF,KAAKqxJ,uCAuBhB,SAAqClvJ,GAArC,IAAAyS,EAAA5U,KACQmC,GAASA,aAAiBsW,IAC1BtW,EAAM+P,KAAOk/I,GAA6B54I,SAC1CxY,KAAKqxJ,kCAAoClvJ,EACzCnC,KAAKuuJ,yBAELvuJ,KAAKqxJ,kCAAoC,KAE7CrxJ,KAAKisJ,uCAAuC1pI,KAAKviB,KAAKqxJ,mCAElDrxJ,KAAKkkH,iBAAiBqe,gCAAgCviI,KAAKqxJ,qCAC1DrxJ,KAAKkoB,mCACNloB,KAAKqgB,aAAe,MAGxBrgB,KAAK6iB,iBAAiBqE,qBACtBlnB,KAAK0iB,eAAeC,oBACpB3iB,KAAKmnB,gBAGLo1B,sBAAsB,WAAM,OAAA3nC,EAAKsrH,gBAAgB39G,KAAK3N,EAAKy8I,sEAO/D7xJ,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,SAAM,KADV,WAEI,OAAIF,KAAKikF,QACEjkF,KAAKikF,QAEL,UAOf,SAAW9hF,GACPnC,KAAKikF,QAAU9hF,mCAWnB3C,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKouJ,aAUhB,SAAWjsJ,GACPnC,KAAKouJ,QAAUjsJ,EACfnC,KAAKojB,eACLpjB,KAAKmnB,eAAc,oCAUvB3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,OAAI,KADR,WAEI,OAAOF,KAAKmuJ,WAchB,SAAS70I,GACDA,IAAQtZ,KAAKmuJ,OAAS70I,EAAM,GAAKA,EAAMtZ,KAAK0nB,WAAa,IAG7D1nB,KAAK6iB,iBAAiB0oB,OAAM,GAC5BvrC,KAAKysJ,aAAalqI,KAAK,CAAE+uI,SAAUtxJ,KAAKmuJ,MAAO95D,QAAS/6E,IACxDtZ,KAAKmuJ,MAAQ70I,EACbtZ,KAAKksJ,WAAW3pI,KAAKviB,KAAKmuJ,OAC1BnuJ,KAAKuxJ,WAAW,GAChBvxJ,KAAKmnB,kDAiBT3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKkuJ,cAehB,SAAY50I,GACJA,EAAM,IAGVtZ,KAAK6iB,iBAAiB0oB,OAAM,GAC5BvrC,KAAKkuJ,SAAW50I,EAChBtZ,KAAKmsJ,cAAc5pI,KAAKviB,KAAKkuJ,UAC7BluJ,KAAKmb,KAAO,EACZnb,KAAKklB,SAAQ,GACbllB,KAAKmnB,kDA2BT3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK2uJ,mBAWhB,SAAiBxsJ,GACTnC,KAAK2uJ,gBAAkBxsJ,IACvBnC,KAAK2uJ,cAAgBxsJ,EAChBnC,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAQ/B3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK+1G,qBAGhB,SAAkBz8F,GACdtZ,KAAKgyG,aAAe14F,EAAMghG,GAAkBV,SAAWU,GAAkBZ,sCAS7El6G,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAKquJ,uBAQhB,SAAqBlsJ,GACjBnC,KAAKquJ,kBAAoBlsJ,EACzBnC,KAAKmnB,eAAc,oCAGvB3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKsuJ,UAAYtuJ,KAAKwxJ,uBAUjC,SAAiBl4I,GACbtZ,KAAKsuJ,SAAWh1I,EAChBtZ,KAAKmnB,eAAc,oCAoBvB3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKwtJ,kBAShB,SAAgBl0I,GACPtZ,KAAKmgH,OACNngH,KAAKyxJ,mBAETzxJ,KAAKwtJ,aAAel0I,EACpBtZ,KAAKmnB,iDAaT3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKovJ,aAUhB,SAAkBjtJ,GACVnC,KAAKovJ,UAAYjtJ,IACjBnC,KAAKovJ,QAAUjtJ,EACfnC,KAAKsgC,cAAcj9B,MAAM8J,OAAShL,EAClCnC,KAAKmnB,eAAc,qCAO3B3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,YAAS,KADb,WAEI,OAAOF,KAAKskH,QAAUtkH,KAAK0xJ,4CAW/BlyJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,QAAK,KAAT,WACI,OAAOF,KAAKskH,YAEhB,SAAUniH,GACFnC,KAAKskH,SAAWniH,IAChBnC,KAAKskH,OAASniH,EACdnC,KAAKsgC,cAAcj9B,MAAM4N,MAAQ9O,EACjCnC,KAAKmnB,eAAc,qCAW3B3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,cAAW,KAAf,WACI,OAAOu5C,SAASz5C,KAAKiR,MAAO,IAAM,oCAgCtCzR,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK25B,WAAa35B,KAAK25B,WAAa35B,KAAKstI,sBAUpD,SAAqBnrI,GACjBnC,KAAK25B,WAAa8f,SAASt3C,EAAO,qCAYtC3C,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK05B,kBAEhB,SAAuBv3B,GACnBnC,KAAK05B,aAAev3B,EACpBnC,KAAKgnH,sBAAuB,EAC5BhnH,KAAKmnB,eAAc,oCAqBvB3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,mBAAgB,KAOpB,WACI,OAAOF,KAAK0rJ,mBAAqB1rJ,KAAKuhI,gBAAgB2P,gCAT1D,SACqB/uI,GACjBnC,KAAK0rJ,kBAAoBvpJ,mCAmB7B3C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,YAAS,KAcb,WACI,OAAOF,KAAK2iI,gBAfhB,SAAcxgI,GAFd,IAAAyS,EAAA5U,KAGQA,KAAK2iI,aAAexgI,IACpBnC,KAAK2iI,WAAaxgI,EAClBnC,KAAK2xJ,wBAETz2E,QAAQC,UAAU9hD,KAAK,WAEnBzkB,EAAKuS,mDA8Bb3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,2BAAwB,KAO5B,WACI,OAAOF,KAAK2rJ,2BAA6B3rJ,KAAKuhI,gBAAgB0P,wCATlE,SAC6B9uI,GACzBnC,KAAK2rJ,0BAA4BxpJ,mCA6BrC3C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK4uJ,oBAWhB,SAAkBzsJ,GACVnC,KAAK4uJ,iBAAmBzsJ,IACxBnC,KAAK4uJ,eAAiBzsJ,EACjBnC,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAsB/B3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAK6uJ,qBAWhB,SAAmB1sJ,GACXnC,KAAK6uJ,kBAAoB1sJ,IACzBnC,KAAK6uJ,gBAAkB1sJ,EACvBnC,KAAKkkH,iBAAiBmc,mBAEjBrgI,KAAKmgH,OACNngH,KAAK4xJ,kBAGT5xJ,KAAKkkH,iBAAiB0Y,oBAAqB,EAC3C58H,KAAKkkH,iBAAiBgb,eAAiB,KAEvCl/H,KAAKmnB,eAAc,qCAW3B3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,yBAAsB,KAD1B,WAEI,OAAOF,KAAK8uJ,6BAWhB,SAA2B3sJ,GACnBnC,KAAK8uJ,0BAA4B3sJ,IACjCnC,KAAK8uJ,wBAA0B3sJ,EAC/BnC,KAAKkkH,iBAAiBmc,mBAEjBrgI,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAY/B3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,aAAU,KADd,WAEI,OAAOF,KAAK+uJ,iBAWhB,SAAe5sJ,GACXnC,KAAK+uJ,YAAc5sJ,EAEfnC,KAAKkkH,iBAAiB0Y,oBACtB58H,KAAK2/H,aAAavxH,QAEtBpO,KAAKmnB,eAAc,oCAUvB3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,kBAAe,KADnB,WAEI,OAAOF,KAAK+vJ,sBAWhB,SAAoB5tJ,GAChBnC,KAAK+vJ,iBAAmB5tJ,EACxBnC,KAAKmnB,iDAUT3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,yBAAsB,KAD1B,WAEI,OAAOF,KAAKiwJ,6BAWhB,SAA2B9tJ,GACvBnC,KAAKiwJ,wBAA0B9tJ,EAC1BnC,KAAKmgH,QACNngH,KAAKklB,SAAQ,GACbllB,KAAK0iB,eAAeuhG,qBACpBjkH,KAAKmnB,eAAc,qCAU3B3nB,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAK6xJ,wBAShB,SAAmB7yF,GACfh/D,KAAK6xJ,mBAAqB7yF,mCAwY9Bx/D,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKg4H,wBAAwBzpH,WAMxC,SAAwBA,GACpBvO,KAAKg4H,wBAAwBzpH,MAAQA,mCAmOzC/O,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAK8xJ,aAAet/I,GAAQxS,KAAK8xJ,aAAal/I,WAAa,oCAUtEpT,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKuoH,iBAAiBjsG,IAAI,SAACksG,GAAgB,OAAAA,EAAYW,aAAYnvG,OAAO,SAACmvG,GAAe,OAAAA,qCAUrG3pH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKuoH,iBAAiBjsG,IAAI,SAACksG,GAAgB,OAAAA,EAAYF,aAAYtuG,OAAO,SAACsuG,GAAe,OAAAA,qCASrG9oH,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,mBAAgB,KAA3B,eACU0V,EAAM,IAAIq0G,EAAAA,UAChB,IAAKjqH,KAAK+xJ,gBACN,OAAOn8I,MAELo8I,EAAUhyJ,KAAK+xJ,gBAAgB/3I,OAAO,SAACiC,GACzC,OAAoD,OAA7CA,EAAK6nB,QAAQxD,cAAcvD,gBAGtC,OADAnnB,EAAI8vB,MAAMssH,GACHp8I,mCAUXpW,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,UAAO,KAAlB,eACU0V,EAAM,IAAIq0G,EAAAA,UAChB,IAAKjqH,KAAKiyJ,SACN,OAAOr8I,MAELs8I,EAAQlyJ,KAAKiyJ,SACdj4I,OAAO,SAACiC,GACL,OAAoD,OAA7CA,EAAK6nB,QAAQxD,cAAcvD,gBAErCxoB,KAAK,SAACW,EAAG3V,GACN,OAAO2V,EAAEvB,MAAQpU,EAAEoU,QAG3B,OADAiC,EAAI8vB,MAAMwsH,GACHt8I,mCAaXpW,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,cAAW,KAAtB,eACU0V,EAAM,IAAIq0G,EAAAA,UAChB,IAAKjqH,KAAKmyJ,aACN,OAAOv8I,MAELs8I,EAAQlyJ,KAAKmyJ,aAAan4I,OAAO,SAACiC,GACpC,OAAoD,OAA7CA,EAAK6nB,QAAQxD,cAAcvD,gBACnCxoB,KAAK,SAACW,EAAG3V,GACR,OAAO2V,EAAEvB,MAAQpU,EAAEoU,QAGvB,OADAiC,EAAI8vB,MAAMwsH,GACHt8I,mCAuCXpW,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,+BAA4B,KAAvC,WACI,OAAOF,KAAKoyJ,8BAA8BzmH,uCAc9CnsC,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,uBAAoB,KAA/B,WACI,OAAIF,KAAKqyJ,wBAA0BryJ,KAAKqyJ,uBAAuB1mH,MACpD3rC,KAAKqyJ,uBAAuB1mH,MAAM09G,YAGtC,sCAcX7pJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,sBAAmB,KAA9B,WACI,OAAIF,KAAKsyJ,uBAAyBtyJ,KAAKsyJ,sBAAsB3mH,MAClD3rC,KAAKsyJ,sBAAsB3mH,MAAM09G,YAGrC,sCA0BX7pJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,4BAAyB,KAApC,WACI,OAAOF,KAAKuyJ,kCAAoCvyJ,KAAKwyJ,2BAA2B7mH,WAGpF,SAAqCryB,GACjCtZ,KAAKuyJ,iCAAmCj5I,mCAoF5C9Z,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKyyJ,kDAmBhBjzJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAK0yJ,2DAMhBlzJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,2BAAwB,KAAnC,WACI,OAAOF,KAAKq1H,iDAuBhB71H,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAK2yJ,cAAgB3yJ,KAAK2yJ,cAAgB3yJ,KAAK4yJ,wDAsC1DpzJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,gBAAa,KAAxB,eACU2f,EAAe7f,KAAK6gB,YAAYQ,IACtC,OAAwB,OAAjBxB,EAAwB7f,KAAKyhB,QAAQnK,KAAK,SAAAhV,GAAK,OAAAA,EAAEyY,QAAU8E,EAAalS,KAAM,sCAMzFnO,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,2BAAwB,KAAnC,eACUyT,EAAQ3T,KAAKkzF,WAAW2lC,mBAAmB//G,UAAU,SAAAxW,GAAK,OAAAA,EAAE24G,WAClE,OAAkB,IAAXtnG,EAAeA,EAAQ,sCAMlCnU,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,0BAAuB,KAAlC,eACU04H,EAAiB54H,KAAKkzF,WAAW2lC,mBACjCllH,EAAQilH,EAAe/jH,UAAUiE,UAAU,SAAAxW,GAAK,OAAAA,EAAE24G,WACxD,OAAkB,IAAXtnG,EAAeilH,EAAej4H,OAAS,EAAIgT,EAAQ,sCAmB9DnU,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK6yJ,kBAAkBlyJ,OAASX,KAAK6yJ,kBAAoB7yJ,KAAK8yJ,oDAkBzEtzJ,OAAAgC,eACI4pJ,EAAAlrJ,UAAA,YAAS,KADb,WAEI,OAAOF,KAAK00C,yBAAyB,6CAGzCl1C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,cAAW,KAAf,eACUw8B,EAAW18B,KAAKqwJ,2BAA2Bt/B,MAAQ,yBAA2B,4BACpF,OAAU/wH,KAAK00C,yBAAyB,cAAa,IAAIhY,mCAY7Dl9B,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKojB,8CAMhB5jB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKuuJ,uDAMhB/uJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKglH,qDAYhBxlH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK89F,yBAmBhB,SAAuB37F,GACnBnC,KAAK89F,oBAAsB1uF,GAAWjN,GACtCnC,KAAK+sJ,yBAAyBxqI,KAAKviB,KAAK89F,qBACxC99F,KAAKmnB,iDAYT3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,sBAAmB,KAAvB,WAMI,OALkC,OAA9BF,KAAK0uJ,uBACL1uJ,KAAK0uJ,qBAAuB1uJ,KAAK6yG,iBAC7B7yG,KAAKigB,WAAWkL,OAAO,SAACs6B,EAAKvlC,GAAQ,OAAAzE,KAAK4O,IAAIo7B,EAAKvlC,EAAIgzF,WAAW,GAClElzG,KAAKigB,WAAWkL,OAAO,SAACs6B,EAAKvlC,GAAQ,OAAAzE,KAAK4O,IAAIo7B,EAAKvlC,EAAIxM,QAAQ,IAEhE1T,KAAK0uJ,sDAShBlvJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKigB,WAAWjG,OAAO,SAACkG,GAAQ,OAAoB,IAApBA,EAAIqlG,cAAwC,IAAfrlG,EAAI2J,SAAiBlpB,wCAa7FnB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKkvJ,wBAWhB,SAAsB/sJ,GAClBnC,KAAKkvJ,mBAAqB/sJ,mCAc9B3C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKmvJ,wBAWhB,SAAsBhtJ,GAClBnC,KAAKmvJ,mBAAqBhtJ,mCAM9B3C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK8rC,+CAsBhBtsC,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK+yJ,kDAyBhBvzJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKitJ,kBAUhB,SAAuB5wI,GACfrc,KAAKitJ,eAAiB5wI,IACtBrc,KAAKitJ,aAAe5wI,EACfrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAc/B3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKotJ,mBAUhB,SAAwB/wI,GAChBrc,KAAKotJ,gBAAkB/wI,IACvBrc,KAAKotJ,cAAgB/wI,EAChBrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAc/B3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKgzJ,sBAUhB,SAAuB32I,GACfrc,KAAKktJ,eAAiB7wI,IACtBrc,KAAKktJ,aAAe7wI,EACfrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAc/B3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKizJ,oBAUhB,SAAqB52I,GACbrc,KAAKmtJ,aAAe9wI,IACpBrc,KAAKmtJ,WAAa9wI,EACbrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAc/B3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKqtJ,iBAUhB,SAAsBhxI,GACdrc,KAAKqtJ,cAAgBhxI,IACrBrc,KAAKqtJ,YAAchxI,EACdrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAc/B3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKstJ,sBAUhB,SAA2BjxI,GACnBrc,KAAKstJ,mBAAqBjxI,IAC1Brc,KAAKstJ,iBAAmBjxI,EACnBrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAc/B3nB,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKutJ,oBAUhB,SAAyBlxI,GACjBrc,KAAKutJ,iBAAmBlxI,IACxBrc,KAAKutJ,eAAiBlxI,EACjBrc,KAAKmgH,OACNngH,KAAKmnB,eAAc,qCAkC/B3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKmwJ,wBAShB,SAAkB+C,GACdlzJ,KAAKmwJ,mBAAqB+C,EACtBlzJ,KAAK+nB,QAAQpR,OACb3W,KAAK6iB,iBAAiB0oB,OAAM,GAC5BvrC,KAAKmnB,kDAUb3nB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKowJ,uBAShB,SAAiB8C,GACblzJ,KAAKowJ,kBAAoB8C,EACrBlzJ,KAAK+nB,QAAQpR,MAAQ3W,KAAKigB,aAC1BjgB,KAAK6iB,iBAAiBq0F,uBACtBl3G,KAAKmnB,eAAc,qCAiQpBikI,EAAAlrJ,UAAAuwJ,aAAP,WAAA,IAAA77I,EAAA5U,KACIA,KAAK4rJ,WAAWn5I,QAAQ,SAAA0gJ,GACpBv+I,EAAK2oB,eAAeiE,KAAK2xH,GACzBv+I,EAAK2oB,eAAeyC,SAAS6E,KACzB7qB,EAAAA,OAAO,SAAAlY,GAAK,OAAAA,EAAE6L,KAAOwlJ,IACrBruH,EAAAA,UAAUlwB,EAAK2qB,WAAWwF,UAAU,WAChCnwB,EAAK0rB,cAAciT,aAyCnC63G,EAAAlrJ,UAAAkzJ,eAAA,WACIpzJ,KAAK+nB,QAAQpR,KAAO3W,KACpBA,KAAK6gB,YAAYlK,KAAO3W,KACxBA,KAAK6iB,iBAAiBlM,KAAO3W,KAC7BA,KAAKkzF,WAAWv8E,KAAO3W,KACvBA,KAAKkkH,iBAAiBvtG,KAAO3W,KAC7BA,KAAK0iB,eAAe/L,KAAO3W,MAG/BorJ,EAAAlrJ,UAAAmzJ,gBAAA,WAAA,IAAAz+I,EAAA5U,KACUkhD,EAAapc,EAAAA,UAAe9kC,KAAKu/B,UAEvCv/B,KAAK0sJ,WAAW7nH,KAAKqc,GAAYnc,UAAU,SAAA/2B,GAAQ,OAAA4G,EAAK68I,iBAAiBzjJ,KACzEhO,KAAKinB,aAAa4d,KAAKqc,GAAYnc,UAAU,SAAA/2B,GACzC4G,EAAK8N,eAAeq0H,iBAAkB,EACtCniI,EAAK8N,eAAeC,kBAAkB3U,KAG1ChO,KAAK8b,aAAakvB,cAAcnG,KAAKqc,GAAYnc,UAAU,WACvDnwB,EAAKiO,iBAAiBqE,qBACtBtS,EAAK8N,eAAeC,oBACpB/N,EAAKwO,eACLxO,EAAKuS,gBACwD,IAAzDvS,EAAKkH,aAAayE,sBAAqB,GAAO5f,QAE1CiU,EAAKmT,QAAQN,oBACb7S,EAAKuG,SAKjBnb,KAAKivJ,aAAapqH,KAAKqc,EAAYlnC,EAAAA,OAAO,WAAM,OAACpF,EAAKurG,QAAQh/D,EAAAA,aAAa,MACtEpc,UAAU,WACPnwB,EAAKugD,KAAKzS,IAAI,WACV9tC,EAAKuS,eAAc,OAI/BnnB,KAAKysJ,aAAa5nH,KAAKqc,GAAYnc,UAAU,WACzCnwB,EAAKsQ,SAAQ,GACbtQ,EAAKiO,iBAAiB0oB,OAAM,KAGhCvrC,KAAKkvH,eAAerqF,KAAKqc,GAAYnc,UAAU,WAAM,OAAAnwB,EAAKsQ,SAAQ,KAClEllB,KAAKwrH,gBAAgB3mF,KAAKqc,GAAYnc,UAAU,WAAM,OAAAnwB,EAAKsQ,SAAQ,KAEnEllB,KAAKu9B,eAAesC,UAAUgF,KAAKqc,GAAYnc,UAAU,SAACzyB,GACtD,GAAIsC,EAAK0+I,8BAAgChhJ,EAAM3E,GAAI,KACzC0G,EAAW/B,EAAMuvB,aAAqB,SACxCxtB,GACAA,EAASipB,WAAW1oB,EAAKsvG,iBAAkBtvG,EAAK2oB,eAAgBjrB,EAAM3E,OAKlF3N,KAAKu9B,eAAeuC,SAAS+E,KAAKqc,GAAYnc,UAAU,SAACzyB,GAErD,GAAIsC,EAAK0+I,8BAAgChhJ,EAAM3E,GAQ3CiH,EAAK2oB,eAAe+D,eAAehvB,EAAM3E,IAAI2sB,SAASoK,SAAW9vB,EAAKygH,iBACtEzgH,EAAKg3I,WAAWt6I,QAAQgB,EAAM3E,IAAM,GACpCiH,EAAKg3I,WAAWppJ,KAAK8P,EAAM3E,QAV/B,KACU0G,EAAW/B,EAAMuvB,aAAqB,SACxCxtB,GACAA,EAAS00I,uBAWrB/oJ,KAAKu9B,eAAeyC,SAAS6E,KAAKqc,EAAYlnC,EAAAA,OAAO,WAAM,OAACpF,EAAKurG,SAAQp7E,UAAU,SAACzyB,GAChF,GAAIsC,EAAK0+I,8BAAgChhJ,EAAM3E,GAA/C,KAKM4lJ,EAAM3+I,EAAKg3I,WAAWt6I,QAAQgB,EAAM3E,KAC7B,IAAT4lJ,GACA3+I,EAAKg3I,WAAW1wI,OAAOq4I,EAAK,QAN5B3+I,EAAK0+I,4BAA8B,OAU3CtzJ,KAAKg4H,wBAAwBhvE,eAAenkB,KAAKqc,EAAYlnC,EAAAA,OAAO,WAAM,OAACpF,EAAKurG,SAAQp7E,UAAU,SAACyuH,GACtE5+I,EAAK6+I,mBAC1B7+I,EAAK4/G,YAAc5/G,EAAK4/G,aAAe5/G,EAAK8+I,0BAC9C9+I,EAAK4/G,aAAe5/G,EAAKwC,kBAAoBxC,EAAKk7I,8BAEhDl7I,EAAK++I,sBACLH,EAAOxwG,cAAgBpuC,EAAK4/G,YAEhC5/G,EAAK+8I,yBAGT3xJ,KAAKg4H,wBAAwB35E,6BAA6BxZ,KAAKqc,EAAYlnC,EAAAA,OAAO,WAAM,OAACpF,EAAKurG,SAAQp7E,UAAU,WAG5GnwB,EAAKuS,eAAc,KAGvBnnB,KAAKg4H,wBAAwB15E,oBAAoBzZ,KAAKqc,EAAYlnC,EAAAA,OAAO,WAAM,OAACpF,EAAKurG,SAAQp7E,UAAU,SAACyuH,GACpG5+I,EAAKg/I,uBAGT5zJ,KAAKi0C,iBAAiBpP,KAAKqc,GAAYnc,UAAU,WAC7CnwB,EAAK8N,eAAek0H,cAAgB,EACpChiI,EAAKsQ,SAAQ,GACbtQ,EAAKg5B,IAAI+U,kBAOVyoG,EAAAlrJ,UAAA2uC,SAAP,WACI/0B,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,MACdA,KAAKozJ,iBACLpzJ,KAAKqzJ,kBACLrzJ,KAAK6zJ,iBAAmB7zJ,KAAKqrJ,QAAQ/zI,KAAK,IAAInX,OAAO,MACrDH,KAAKinH,UAAYjnH,KAAKiR,QAAsC,IAA7BjR,KAAKiR,MAAMK,QAAQ,KAAcmoC,SAASz5C,KAAKiR,MAAO,IAAM,EAC3FjR,KAAK8zJ,eAAiB9zJ,KAAK+rJ,aAC3B/rJ,KAAKmxJ,aAAenxJ,KAAK+zJ,kBAGnB3I,EAAAlrJ,UAAA8zJ,aAAV,WAAA,IAAAp/I,EAAA5U,KACQA,KAAK+rJ,cACL/rJ,KAAKi0J,sBAGTj0J,KAAKk0J,YAAYl0J,KAAKigB,WAAY,SAACC,GAA4B,OAAAtL,EAAK23I,aAAahqI,KAAKrC,KACtFlgB,KAAK6zJ,iBAAiBrxG,KAAKxiD,KAAKigB,YAEhCjgB,KAAKigB,WAAWgiC,QACXpd,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WACpBwF,UAAU,SAACwH,GAA4C33B,EAAKu/I,iBAAiB5nH,MAO/E6+G,EAAAlrJ,UAAAk0J,mBAAP,WACIp0J,KAAKigB,WAAWxN,QAAQ,SAAAmP,GAAU,OAAAA,EAAOkkG,iBAOtCslC,EAAAlrJ,UAAAm0J,gBAAP,eACUC,EAAet0J,KAAKohB,YAAYuqB,MAClC2oH,IACIt0J,KAAKurJ,cACL+I,EAAah7B,WAAW1rF,IAAIrL,gBAEhC+xH,EAAah7B,WAAWtvE,iBAQzBohG,EAAAlrJ,UAAAq0J,uBAAP,WACIv0J,KAAK4vJ,gBAAgBjvJ,OAAS,EAC9BX,KAAKwvJ,eAAe7uJ,OAAS,EAC7BX,KAAKyvJ,iBAAiB9uJ,OAAS,GAO5ByqJ,EAAAlrJ,UAAAs0J,kBAAP,WACIx0J,KAAK2vJ,eAAiBtqD,IACtBrlG,KAAK0vJ,aAAerqD,IACpBrlG,KAAKuvJ,YAAclqD,KAOhB+lD,EAAAlrJ,UAAA4lH,YAAP,WACI9lH,KAAKq0J,kBACLr0J,KAAKo0J,qBACLp0J,KAAKu0J,yBACLv0J,KAAKw0J,oBACLx0J,KAAKwxJ,kBAAoBx9I,UACzBhU,KAAK6vJ,cAAgB7vJ,KAAKigB,WAAW2M,KAAK,SAAA1M,GAAO,OAAAA,EAAIqlG,eAMlD6lC,EAAAlrJ,UAAAm4D,mBAAP,WACIr4D,KAAKg0J,gBAGF5I,EAAAlrJ,UAAAu0J,mBAAP,WAAA,IAAA7/I,EAAA5U,KACU00J,EAAgB,SAACz4I,GAAwD,OAAArH,EAAK+/I,UAAU14I,EAAKqkB,cAAcvD,gBAC3G63H,EAAgB/vH,EAAAA,KAAKvoB,EAAAA,IAAI,SAACM,GAAsB,OAAAA,EAAW5C,OAAO06I,GAAep4I,IAAI,SAAAL,GAAQ,OAAAA,EAAKq9G,gBAClGu7B,EAAkBD,EAAc50J,KAAKmyJ,aAAalwG,SAClD6yG,EAAqBF,EAAc50J,KAAK+xJ,gBAAgB9vG,SAE9D8yG,EAAAA,cAAc,CAACF,EAAiBC,IAAqBjwH,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WACpEwF,UAAU,SAAC72B,OAAA4B,EAAAzN,EAAA6L,EAAA,GAACmT,EAAAvR,EAAA,GAAKmpI,EAAAnpI,EAAA,GAAa,OAAA8E,EAAKy6I,kBAAiB3sJ,EAAO2e,EAAQ43H,KAExEj5I,KAAKqvJ,kBAAiB3sJ,EACf1C,KAAKmyJ,aAAan4I,OAAO06I,GAAep4I,IAAI,SAAAL,GAAQ,OAAAA,EAAKq9G,aACzDt5H,KAAK+xJ,gBAAgB/3I,OAAO06I,GAAep4I,IAAI,SAAAL,GAAQ,OAAAA,EAAKq9G,eAIhE8xB,EAAAlrJ,UAAA80J,qBAAP,WAAA,IAAApgJ,EAAA5U,KACIA,KAAKm1D,KAAKrrB,kBAAkB,WACxBl1B,EAAK0rB,cAAckE,iBAAiB,UAAW5vB,EAAKg8I,gBACpDh8I,EAAKojH,wBAAwB14E,YAAY9a,iBAAiB,SAAU5vB,EAAK+qC,uBACzE/qC,EAAKukH,gBAAgB75E,YAAY9a,iBAAiB,SAAU5vB,EAAK87I,yBAEjE97I,EAAKo6I,SAAW,IAAIntG,EAAe,WAAM,OAAAjtC,EAAKq6I,aAAa/sJ,SAC3D0S,EAAKo6I,SAASltG,QAAQltC,EAAK0rB,kBAO5B8qH,EAAAlrJ,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACIA,KAAKi1J,cACLj1J,KAAK4zJ,qBACL5zJ,KAAKmgH,OAAQ,EACbngH,KAAK4tC,IAAIsnH,WACTl1J,KAAKy0J,qBACLz0J,KAAKg1J,2BAECG,EAAYn1J,KAAKg4H,wBAAwBo9B,iBAC/CD,EAAU3wH,iBAAiB,SAAUxkC,KAAK27F,eAC1Cw5D,EAAU3wH,iBAAiB,QAAS,WAAM,OAAA5vB,EAAKw7G,kBAI5Cg7B,EAAAlrJ,UAAAinB,cAAP,SAAqBs5F,QAAA,IAAAA,IAAAA,GAAA,GACjBzgH,KAAKurJ,cAAe,EACpBvrJ,KAAKwrJ,mBAAqB/qC,EAC1BzgH,KAAK4tC,IAAI+U,gBAGHyoG,EAAAlrJ,UAAAm1J,mBAAV,WACIr1J,KAAKwrJ,oBAAqB,EAC1BxrJ,KAAKurJ,cAAe,GAGjBH,EAAAlrJ,UAAA0yC,UAAP,WAEI,GADA94B,EAAA5Z,UAAM0yC,UAAShyC,KAAAZ,OACXA,KAAKmgH,MAIT,OAAIngH,KAAKwrJ,oBACLxrJ,KAAKq1J,qBACLr1J,KAAK4zJ,0BACL5zJ,KAAKqnB,eAAc,SAInBrnB,KAAKurJ,eACLvrJ,KAAKq1J,qBACLr1J,KAAK4tC,IAAIrL,mBAQV6oH,EAAAlrJ,UAAAo1J,2BAAP,WACI,OAAIt1J,KAAKu1J,0BAA4Bv1J,KAAKu1J,yBAAyB5pH,MACxD3rC,KAAKu1J,yBAAyB5pH,MAGlC,MAMJy/G,EAAAlrJ,UAAAsmC,YAAP,WAAA,IAAA5xB,EAAA5U,KACIA,KAAK4sJ,WAAWn6I,QAAQ,SAAC+iJ,GACrBA,EAAW9Z,eAGf17I,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,WACdzmC,KAAK4zF,YAAa,EAEd5zF,KAAKszJ,6BACLtzJ,KAAKu9B,eAAeiE,KAAKxhC,KAAKszJ,6BAGlCtzJ,KAAKm1D,KAAKrrB,kBAAkB,WACxBl1B,EAAKo6I,SAASjtG,aACdntC,EAAK0rB,cAAc+F,oBAAoB,UAAWzxB,EAAKg8I,gBACvDh8I,EAAKojH,wBAAwB14E,YAAYjZ,oBAAoB,SAAUzxB,EAAK+qC,uBAC5E/qC,EAAKukH,gBAAgB75E,YAAYjZ,oBAAoB,SAAUzxB,EAAK87I,6BAC9DyE,EAAYvgJ,EAAKojH,wBAAwBo9B,iBAC/CD,EAAU9uH,oBAAoB,SAAUzxB,EAAK+mF,eAC7Cw5D,EAAU9uH,oBAAoB,QAAS,WAAM,OAAAzxB,EAAKw7G,oBAOnDg7B,EAAAlrJ,UAAA0hG,YAAP,SAAmBtvF,GACftS,KAAKq/F,cAAc98E,KAAKjQ,IAarB84I,EAAAlrJ,UAAAu1J,uBAAP,SAA8BznJ,OACpBkS,EAAMlS,EAAK4T,OAAS5hB,KAAKigB,WAAW3I,KAAK,SAACnW,GAAM,OAAAA,IAAM6M,EAAK4T,SAAU5N,UAEtEkM,IAILA,EAAI2J,OAAS7b,EAAKqO,SAClBrc,KAAKmzH,0BAA0B5wG,KAAKvU,KAUxCxO,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKqgC,WAAWC,+CAM3B9gC,OAAAgC,eAAc4pJ,EAAAlrJ,UAAA,SAAM,KAApB,WACI,OAAOF,KAAKq1H,iDAUhB71H,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,mBAAgB,KAApB,WACI,OAAQF,KAAKwyC,gBACT,KAAK2B,GAAeR,KAChB,OAAO,GACX,KAAKQ,GAAeP,QAChB,OAAO,GACX,QACI,OAAO,qCAInBp0C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAQF,KAAKwyC,gBACT,KAAK2B,GAAeR,KAChB,OAAO,GACX,KAAKQ,GAAeP,QAChB,OAAO,GACX,QACI,OAAO,qCAUnBp0C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,6BAA0B,KAA9B,WACI,OAAQF,KAAKwyC,gBACT,KAAK2B,GAAeR,KAChB,OAAO,GACX,KAAKQ,GAAeP,QAChB,OAAO,GACX,QACI,OAAO,qCAIZw3G,EAAAlrJ,UAAAw1J,mBAAP,WACI,OAAQ11J,KAAKwyC,gBACT,KAAK2B,GAAeR,KAChB,MAAO,sBACX,KAAKQ,GAAeP,QAChB,MAAO,yBACX,QACI,MAAO,kBAYnBp0C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,8BAA2B,KAA/B,WACI,OAAyB,GAAjBF,KAAKinH,UAAkB,qCAWnCznH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAyB,GAAjBF,KAAKinH,UAAkB,qCAUnCznH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,cAAW,KAAf,WACI,OAAKsb,MAAMxb,KAAK0vJ,eAChB1vJ,KAAK0vJ,aAAe1vJ,KAAKorH,iBAClBprH,KAAK0vJ,cAF4B1vJ,KAAK0vJ,8CAYjDlwJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAKsb,MAAMxb,KAAK2vJ,iBAChB3vJ,KAAK2vJ,eAAiB3vJ,KAAK6pH,mBACpB7pH,KAAK2vJ,gBAF8B3vJ,KAAK2vJ,gDAKnDnwJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,2BAAwB,KAA5B,eACUsiD,EAAOxiD,KAAK21J,cAAgB31J,KAAKulD,WACvC,OAAsB,OAAfvlD,KAAKiR,OAAkBuxC,GAAQ,mCAQ1ChjD,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,sBAAmB,KAA9B,WACI,OAAOF,KAAK41J,0DAMhBp2J,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK2pH,qDAUhBnqH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,UAAO,KAAX,WACI,OAAOF,KAAKwuJ,0CAUhBhvJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAIF,KAAKwvJ,eAAe7uJ,OACbX,KAAKwvJ,gBAEhBxvJ,KAAKwvJ,eAAiBxvJ,KAAK6nH,eAAe7tG,OAAO,SAAAkG,GAAO,OAACA,EAAI2J,SACtD7pB,KAAKwvJ,iDAUhBhwJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,kBAAe,KAAnB,WACI,OAAIF,KAAKyvJ,iBAAiB9uJ,OACfX,KAAKyvJ,kBAEhBzvJ,KAAKyvJ,iBAAmBzvJ,KAAK4nH,iBAAiB5tG,OAAO,SAACkG,GAAQ,OAACA,EAAI2J,SAC5D7pB,KAAKyvJ,mDAOTrE,EAAAlrJ,UAAAqwI,oBAAP,SAA2B3uH,GACvB,GAAI5hB,KAAK6yG,iBACL,MAAO,OAEL2W,EAAW5nG,EAAO3Q,MAClB+5G,EAAWhrH,KAAK61J,2BAGtB,QAF0BrsC,GAAgC,iBAAbA,IAAoD,IAA3BA,EAASl4G,QAAQ,OAE7DmoC,SAAS73B,EAAO3Q,MAAO,IAAM+5G,EAC5CA,EAASv6G,WAGbmR,EAAO3Q,OAWXm6I,EAAAlrJ,UAAAu4H,gBAAP,SAAuBz4G,GACnB,OAAOhgB,KAAKigB,WAAW3I,KAAK,SAAC4I,GAAQ,OAAAA,EAAIC,QAAUH,KAWhDorI,EAAAlrJ,UAAA47H,cAAP,SAAqBnoH,GACjB,OAAO3T,KAAK+nB,QAAQxG,iBAAiB5N,IAYlCy3I,EAAAlrJ,UAAA41J,YAAP,SAAmBC,GACf,OAAO/1J,KAAK+nB,QAAQ7G,eAAe60I,IAUvCv2J,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAK4vJ,gBAAgBjvJ,OACdX,KAAK4vJ,iBAEhB5vJ,KAAK4vJ,gBAAkB5vJ,KAAKigB,WAAWjG,OAAO,SAAA7Y,GAAK,OAACA,EAAE0oB,SAC/C7pB,KAAK4vJ,kDAYTxE,EAAAlrJ,UAAA81J,gBAAP,SAAuBx0I,EAAkByoH,OAC/BzJ,EAAWxgI,KAAKigB,WAAW3D,IAAI,SAACsF,GAAW,OAAAA,EAAOzB,QAAO7O,QAAQ24H,GACvE,IAAkB,IAAdzJ,EACA,OAAOxgI,KAAK+nB,QAAQlG,kBAAkBL,EAAUg/G,IAcjD4qB,EAAAlrJ,UAAA+1J,aAAP,SAAoB90I,EAAkB8oH,GAClC,OAAOjqI,KAAK+nB,QAAQrG,gBAAgBP,EAAa8oH,IAUrDzqI,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,aAAU,KAAd,WACI,OAAIF,KAAKk2J,YACEl2J,KAAKk2J,YAAYt0J,SAASyZ,YAE7B,mCAUZ7b,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,cAAW,KAAf,WACI,OAAqB,IAAdF,KAAKmb,sCAUTiwI,EAAAlrJ,UAAAi2J,SAAP,WACSn2J,KAAKo2J,aACNp2J,KAAKmb,MAAQ,IAWdiwI,EAAAlrJ,UAAAm2J,aAAP,WACSr2J,KAAKs2J,cACNt2J,KAAKmb,MAAQ,IAYrB3b,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,eAAY,KAAhB,WACI,GAAIF,KAAKk2J,YACL,OAAOl2J,KAAKk2J,YAAYt0J,SAAS0Z,8CAWzC9b,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKmb,KAAO,GAAKnb,KAAK0nB,4CAUjCloB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,aAAU,KAAd,WACI,IAAKsb,MAAMxb,KAAKuvJ,aAAgB,OAAOvvJ,KAAKuvJ,YAK5C,QAHM19H,EAAO7xB,KAAK6+G,eAAe7kG,OAAO,SAAAkG,GAAO,OAAc,IAAdA,EAAIxM,QAAgBwM,EAAIoK,SACnEi7B,EAAa,EACb/kD,EAAI,EACAA,EAAIqxB,EAAKlxB,OAAQH,IACrB+kD,GAAc9L,SAAS5nB,EAAKrxB,GAAGymH,UAAW,KAAO,EAGrD,OADAjnH,KAAKuvJ,YAAchqG,EACZA,mCAOX/lD,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAK+1G,iBAAoB/1G,KAAKwxJ,oBAAsBxxJ,KAAKu2J,kDAOpE/2J,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKk/G,cAAgBl/G,KAAKulB,QAAQ5kB,OAASX,KAAKqzH,oDAMjD+3B,EAAAlrJ,UAAA+nH,aAAV,SAAuB/0G,EAA0BsjJ,EAAwB7xF,OAC/D8xF,EAAOz2J,KAAKigB,WAAWrN,UACvB8jJ,EAAYD,EAAKnlJ,QAAQ4B,GAC3ByjJ,EAAUF,EAAKnlJ,QAAQklJ,GAEvB7xF,IAAQqrD,GAAa3B,oBACrBsoC,EACc,IACVA,EAAU,GAIdhyF,IAAQqrD,GAAa1B,iBACrBqoC,IAGJF,EAAKv7I,OAAMra,MAAX41J,EAAI/zJ,EAAA,CAAQi0J,EAAS,GAAMF,EAAKv7I,OAAOw7I,EAAW,SAC5CE,EAAU52J,KAAK62J,iBAAiBJ,GACtCz2J,KAAKigB,WAAWylB,MAAMkxH,GACtB52J,KAAKigB,WAAWsjI,kBAChBvjJ,KAAKwuJ,SAAWxuJ,KAAKigB,WAAWrN,WAM1Bw4I,EAAAlrJ,UAAA22J,iBAAV,SAA2BJ,GAClBA,IACDA,EAAOz2J,KAAKigB,WAAWrN,eAEvBgkJ,EAAU,GAOd,OANAH,EAAKz8I,OAAO,SAAA7Y,GAAK,OAAY,IAAZA,EAAEuS,QAAajB,QAAQ,SAAA7S,GACpCg3J,EAAQp0J,KAAK5C,GACTA,EAAE2lH,cACFqxC,EAAUA,EAAQj0J,OAAO/C,EAAE4hH,gBAG5Bo1C,GAMDxL,EAAAlrJ,UAAA42J,sBAAV,SAAgC5jJ,EAA0BsjJ,EAAwB95H,OACxEpS,EAAStqB,KAAK6nH,eAChBkvC,EAAYzsI,EAAOhZ,QAAQklJ,GAE3BA,EAAGjxC,cACHwxC,GAAaP,EAAGh1C,YAAY7gH,QAG5B+7B,IAAaszF,GAAa3B,kBAC1B0oC,IAGAr6H,IAAaszF,GAAa1B,iBAC1ByoC,IAGJzsI,EAAOpP,OAAMra,MAAbypB,EAAM5nB,EAAA,CAAQq0J,EAAW,GAAMzsI,EAAOpP,OAAOoP,EAAOhZ,QAAQ4B,GAAO,MAM7Dk4I,EAAAlrJ,UAAA82J,kBAAV,SAA4BtgJ,EAA4BxD,EAA0BsjJ,EAAwB7xF,OAChGsyF,EAASvgJ,EAAO/D,SAASC,UACzB8jJ,EAAYO,EAAO3lJ,QAAQ4B,GAC7ByjJ,EAAUM,EAAO3lJ,QAAQklJ,GAEzB7xF,IAAQqrD,GAAa3B,kBACrBsoC,IAGAhyF,IAAQqrD,GAAa1B,iBACrBqoC,IAGJM,EAAO/7I,OAAMra,MAAbo2J,EAAMv0J,EAAA,CAAQi0J,EAAS,GAAMM,EAAO/7I,OAAOw7I,EAAW,KACtDhgJ,EAAO/D,SAAS+yB,MAAMuxH,IASnB7L,EAAAlrJ,UAAAqwH,WAAP,SAAkB3uG,EAA4Bs1I,EAAgCvyF,QAAA,IAAAA,IAAAA,EAAoBqrD,GAAa78G,UAEvGupB,EAAWioC,EACT+xF,EAAY90I,EAAOoI,aACnB2sI,EAAUO,EAAWltI,aAW3B,GARI0S,EADAioC,IAAQqrD,GAAa3B,kBAAoBqoC,EAAYC,EAC1C3mC,GAAa3B,iBACjB1pD,IAAQqrD,GAAa1B,iBAAmBooC,EAAYC,EAChD3mC,GAAa1B,gBAEb0B,GAAa78G,KAIvByO,EAAOlO,QAAUwjJ,EAAWxjJ,OAC5BkO,EAAO6lG,iBAAmByvC,EAAWzvC,eAD1C,CAmBA,GAdAznH,KAAKklB,SAAQ,GACTtD,EAAOlO,OACP1T,KAAKg3J,kBAAkBp1I,EAAOlL,OAAQkL,EAAQs1I,EAAYx6H,GAG1Dw6H,EAAW5sI,QAAU1I,EAAO0I,QAC5BtqB,KAAK82J,sBAAsBl1I,EAAQs1I,EAAYx6H,GAG/Cw6H,EAAW5sI,SAAW1I,EAAO0I,SAC7B1I,EAAOijG,MACP7kH,KAAK82J,sBAAsBl1I,EAAQs1I,EAAYx6H,KAG9Cw6H,EAAW5sI,QAAU1I,EAAO0I,OAAQ,CACrC1I,EAAOkjG,YAED2xC,EAAOz2J,KAAKigB,WAAWrN,UACvBukJ,EAAKV,EAAKnlJ,QAAQsQ,GAClBw1I,EAAKX,EAAKnlJ,QAAQ4lJ,GAGpBx6H,EADAioC,IAAQqrD,GAAa3B,kBAAoB8oC,EAAKC,EACnCpnC,GAAa3B,iBACjB1pD,IAAQqrD,GAAa1B,iBAAmB6oC,EAAKC,EACzCpnC,GAAa1B,gBAEb0B,GAAa78G,KAIhCnT,KAAKioH,aAAarmG,EAAQs1I,EAAYx6H,GACtC18B,KAAKmnB,gBACDnnB,KAAK6yG,kBACL7yG,KAAKulB,QAAQvL,OAAO,SAAA8C,GAAK,OAAAA,EAAE6oG,eAAclzG,QAAQ,SAAAqK,GAAK,OAAAA,EAAEqrG,+BAGtDn6G,EAAO,CACTmmG,OAAQvyF,EACR5gB,OAAQk2J,GAGZl3J,KAAKswH,kBAAkB/tG,KAAKvU,KAWzBo9I,EAAAlrJ,UAAAm3J,SAAP,SAAgB/9I,GACRA,EAAM,GAAKA,EAAMtZ,KAAK0nB,WAAa,IAIvC1nB,KAAKmb,KAAO7B,IAUT8xI,EAAAlrJ,UAAAyiD,aAAP,WACI3iD,KAAK4tC,IAAIrL,iBAeN6oH,EAAAlrJ,UAAAo3J,OAAP,SAAc9iJ,GAEVxU,KAAKklB,SAAQ,GACbllB,KAAK+nB,QAAQnB,aAAapS,GAE1BxU,KAAK0sJ,WAAWnqI,KAAK,CAAE/N,KAAIA,IAC3BxU,KAAKojB,eACLpjB,KAAKmnB,iBAaFikI,EAAAlrJ,UAAAq3J,UAAP,SAAiBp2I,GACTnhB,KAAK+b,aAAe/H,WAAiC,OAApBhU,KAAK+b,YACtC/b,KAAK+mB,cAAc5F,IAKpBiqI,EAAAlrJ,UAAA6mB,cAAP,SAAqB7K,GACjBlc,KAAK+nB,QAAQhB,cAAc7K,IAMrBkvI,EAAAlrJ,UAAA2mB,kBAAV,SAA4B9L,EAAYpH,GAGpC,IAAe,IAAXA,EACA,GAAI3T,KAAK8b,aAAawE,QAAS,KACrBnE,EAA2B,CAAExO,GAAIoN,EAAO7I,KAAMkK,GAAgBjC,OAAQkC,SAAU,MACtFrc,KAAK8b,aAAapO,IAAIyO,EAAanc,KAAKwU,KAAKb,SAE7C3T,KAAKwU,KAAK0G,OAAOvH,EAAO,OAEzB,KACGpF,EAAevO,KAAK8b,aAAa+H,SAAS9I,GAChD/a,KAAK8b,aAAapO,IAAI,CAAEC,GAAIoN,EAAO7I,KAAMkK,GAAgBjC,OAAQkC,SAAU,MAAQ9N,GAASA,EAAMuY,aAenGskI,EAAAlrJ,UAAAs3J,WAAP,SAAkBr1J,EAAYgf,EAAkBS,GAC5C,GAAI5hB,KAAK20J,UAAU30J,KAAK+b,YAAa,KAC3BmE,EAAMlgB,KAAKigB,WAAWrN,UAAU0E,KAAK,SAAAnW,GAAK,OAAAA,EAAEgf,QAAUyB,IAC5D,GAAI1B,EAAK,KAECoB,EAAUthB,KAAK+nB,QAAQtH,WAAWU,GAClCxN,EAAQ3T,KAAK+nB,QAAQpH,sBAAsBQ,GAEjD,GAAIxN,EAAQ,EACR,WAEEhG,EAAK,CACPoN,MAAOoG,EACP6vF,SAAU9wF,EAAIvM,MACd6N,SAAU7N,GAGRqN,EAAO,IAAIuvF,GAAQ5iG,EAAIgG,EAAOuM,EAAKoB,EAAQpB,EAAIC,OAAQmB,EAAQpB,EAAIC,OAAQmB,GAC3EtT,EAAOhO,KAAK+nB,QAAQ7F,YAAYlB,EAAM7e,GAE5C,GAAInC,KAAK6gB,YAAYG,MAAQhhB,KAAK6gB,YAAYkwF,SAAS/vF,GAAO,CAC1D,GAAIhT,EAAKoU,OACL,OAEJpiB,KAAK+nB,QAAQnH,kBAEjB5gB,KAAK4tC,IAAIrL,mBAkBd6oH,EAAAlrJ,UAAAu3J,UAAP,SAAiBt1J,EAAYgf,GACzB,GAAInhB,KAAK20J,UAAU30J,KAAK+b,YAAa,KAC3BwgG,EAAev8G,KAAK6gB,YAAYG,KAClCu7F,GAAgBA,EAAa5uG,GAAGoN,QAAUoG,GAC1CnhB,KAAK+nB,QAAQnH,sBAEXS,EAAM,IAAIivF,GAAOnvF,GAAc,EAAGnhB,KAAK+nB,QAAQtH,WAAWU,IAChEnhB,KAAK+nB,QAAQjE,WAAWzC,EAAKlf,GAO7BnC,KAAKmnB,kBAYNikI,EAAAlrJ,UAAAqU,KAAP,SAAYN,GAAZ,IAAAW,EAAA5U,KACIA,KAAKklB,SAAQ,GACTjR,aAAsBtU,MACtBK,KAAK+nB,QAAQrD,cAAczQ,GAE3BjU,KAAK+nB,QAAQxT,KAAKN,GAEtBsoC,sBAAsB,WAAM,OAAA3nC,EAAK43I,cAAcjqI,KAAKtO,MAgBjDm3I,EAAAlrJ,UAAA8Z,OAAP,SAAcgG,EAAc7d,EAAY49H,EACpCrrH,GACA1U,KAAKkkH,iBAAiBlqG,OAAOgG,EAAM7d,EAAO49H,EAA2BrrH,IAalE02I,EAAAlrJ,UAAAkgI,aAAP,SAAoBj+H,EAAYkX,EAAW3E,GACvC1U,KAAKkkH,iBAAiBkc,aAAaj+H,EAAOkX,EAAW3E,IAgBlD02I,EAAAlrJ,UAAAw3J,gBAAP,eAAuB,IAAAC,EAAA,GAAA1pJ,EAAA,EAAAA,EAAAvN,UAAAC,OAAAsN,IAAA0pJ,EAAA1pJ,GAAAvN,UAAAuN,GACC,IAAhB0pJ,EAAKh3J,QAAgBhB,MAAM0Q,QAAQsnJ,EAAK,IACxC33J,KAAK43J,mBAAmBD,EAAK,IAAI,GAEjC33J,KAAKujH,WAAWo0C,EAAK,IAAI,EAAMA,EAAK,KAgBrCvM,EAAAlrJ,UAAA23J,iBAAP,eAAwB,IAAAF,EAAA,GAAA1pJ,EAAA,EAAAA,EAAAvN,UAAAC,OAAAsN,IAAA0pJ,EAAA1pJ,GAAAvN,UAAAuN,GACA,IAAhB0pJ,EAAKh3J,QAAgBhB,MAAM0Q,QAAQsnJ,EAAK,IACxC33J,KAAK83J,0BAA0BH,EAAK,IAEpC33J,KAAKujH,WAAWo0C,EAAK,IAAI,IAa1BvM,EAAAlrJ,UAAA4/H,YAAP,SAAmB9/G,GACfhgB,KAAKkkH,iBAAiB4b,YAAY9/G,IAY/BorI,EAAAlrJ,UAAAwmI,UAAP,SAAiB1mH,GACRA,EAIAhgB,KAAK+nB,QAAQhI,mBAAmBC,IAGrChgB,KAAK+nB,QAAQpC,WAAW3F,GANpBhgB,KAAKwkB,mBAAqB,IAY3B4mI,EAAAlrJ,UAAAuxJ,iBAAP,SAAwBzjJ,GACpBhO,KAAKklB,SAAQ,GACbllB,KAAK6iB,iBAAiBqE,qBACtBlnB,KAAK0iB,eAAeC,kBAAkB3U,IAcnCo9I,EAAAlrJ,UAAA63J,UAAP,SAAiBljI,EAAyClhB,GAEtD,OADYkhB,aAAsB0tF,GAAqB1tF,EAAa70B,KAAKy4H,gBAAgB5jG,IAC9EgwF,IAAIlxG,IAYZy3I,EAAAlrJ,UAAA83J,YAAP,SAAmBnjI,EAAyClhB,GAExD,OADYkhB,aAAsB0tF,GAAqB1tF,EAAa70B,KAAKy4H,gBAAgB5jG,IAC9EiwF,MAAMnxG,IAWdy3I,EAAAlrJ,UAAAyoH,OAAP,WACI3oH,KAAK4zJ,sBAcFxI,EAAAlrJ,UAAA+3J,SAAP,SAAgBzqF,EAAcL,EAAyBC,GACnD,OAAOptE,KAAKsX,KAAKk2D,EAAM,EAAGL,EAAeC,IActCg+E,EAAAlrJ,UAAAg4J,SAAP,SAAgB1qF,EAAcL,EAAyBC,GACnD,OAAOptE,KAAKsX,KAAKk2D,GAAO,EAAGL,EAAeC,IAYvCg+E,EAAAlrJ,UAAAmnB,cAAP,SAAqB8wI,GAArB,IAAAvjJ,EAAA5U,KACI,GAAIA,KAAKi8G,eAAertC,WAAY,CAGhC,GAFA5uE,KAAKo4J,oBAEDD,EAAkB,KACZE,EAAavsF,GAA0Be,mBAAmB/+D,IAAI9N,KAAK2N,IACzE3N,KAAKi8G,eAAegyC,eAAex7I,QAAQ,SAAC0rD,EAAO39D,GAC3C29D,EAAMv8C,SAAWy2I,EAAWz2I,QAC5Bu8C,EAAM98C,MAAQg3I,EAAWh3I,KACzB88C,EAAMxqD,QAAU0kJ,EAAW1kJ,QAC3BiB,EAAKqnG,eAAe+xC,iBAAmBxtJ,KAKnD,OAAOR,KAAKsX,KAAKtX,KAAKi8G,eAAertC,WAAY,EAAG5uE,KAAKi8G,eAAe9uC,cAAentE,KAAKi8G,eAAe7uC,YAAY,GAEvH,OAAO,GAWRg+E,EAAAlrJ,UAAAo4J,YAAP,WACIt4J,KAAKi8G,eAAiB,CAClBrtC,WAAY,GACZzB,eAAe,EACfC,YAAY,EACZ4gF,iBAAkB,EAClBC,eAAgB,IAGpBjuJ,KAAKyhB,QAAQhP,QAAQ,SAAC4O,GACdA,EAAIM,OACJN,EAAIM,MAAMlP,QAAQ,SAACtR,GACfA,EAAE4rE,sBAalBvtE,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKigB,WAAW2M,KAAK,SAAC1M,GAAQ,OAAAA,EAAIsiG,4CAU7ChjH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKigB,WAAW2M,KAAK,SAAC1M,GAAQ,OAAAA,EAAI+6F,4CAU7Cz7G,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKigB,WAAW2M,KAAK,SAAC1M,GAAQ,OAAAA,EAAIs/E,8CAU7ChgG,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK0iB,eAAeO,sDAM/BzjB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKu4J,yBAA2BrI,GAA2B72C,iDAMtE75G,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,oBAAiB,KAArB,WACI,OAAIF,KAAKw4J,qBAAuBxkJ,YACrBhU,KAAKigB,YAAajgB,KAAKigB,WAAW2M,KAAK,SAAAzrB,GAAK,OAACA,EAAE0oB,SAEnD7pB,KAAKw4J,wBAGhB,SAAsBr2J,GAClBnC,KAAKw4J,mBAAqBr2J,mCAS9B3C,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKigB,YAAcjgB,KAAKigB,WAAW2M,KAAK,SAAC1M,GAAQ,OAAAA,EAAI4iG,2CAUhEtjH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK6vJ,+CAShBrwJ,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,mBAAgB,KAA3B,WACI,QAASF,KAAKigB,WAAW2M,KAAK,SAAA1M,GAAO,OAAAA,EAAIylG,gDAU7CnmH,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,gBAAa,KAAjB,WACI,OAAIF,KAAKohB,YACEphB,KAAKohB,YAAY9E,IAAI,SAAC+E,GAAQ,OAAAA,EAAIM,MAAM3H,OAAO,SAACgH,GAAS,OAAAA,EAAK+C,aAChEoH,OAAO,SAACjW,EAAG3V,GAAM,OAAA2V,EAAEvS,OAAOpD,IAAI,IAEhC,oCAMXC,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,wBAAqB,KAAzB,WACI,OAAOF,KAAKsvJ,wDAMhB9vJ,OAAAgC,eAAc4pJ,EAAAlrJ,UAAA,iBAAc,KAA5B,WACI,OAAOF,KAAKy4J,WAAaz4J,KAAKyzB,2CAMlCj0B,OAAAgC,eAAc4pJ,EAAAlrJ,UAAA,iBAAc,KAA5B,WACI,OAAOF,KAAKiR,QAAsC,IAA7BjR,KAAKiR,MAAMK,QAAQ,sCAM5C9R,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKovJ,UAA0C,IAA/BpvJ,KAAKovJ,QAAQ99I,QAAQ,sCAOtC85I,EAAAlrJ,UAAAw4J,qBAAV,WAAA,IAAA9jJ,EAAA5U,KACSA,KAAKgnH,uBACNhnH,KAAK05B,aAA8B,OAAf15B,KAAKiR,MAAiBjR,KAAKmnH,yBAA2BwxC,SAE9E34J,KAAKigB,WAAWxN,QAAQ,SAACmP,GACrB,GAAIhN,EAAKi+F,kBAAoBp5D,SAAS7kC,EAAK8kB,aAAc,IAAK,KACpDk/H,EAAsBn/G,SAAS7kC,EAAK8kB,aAAc,KAAO9X,EAAOg6F,OAASh6F,EAAOg6F,OAASh6F,EAAOi5F,SAAW,GACjHj5F,EAAO2iG,aAAeq0C,EAAsB,UAE5Ch3I,EAAO2iG,aAAe3vG,EAAK8kB,aAC3B9X,EAAOkkG,gBAGf9lH,KAAKw0J,qBAMTh1J,OAAAgC,eAAc4pJ,EAAAlrJ,UAAA,0BAAuB,KAArC,eACU24J,EAAW74J,KAAKy4J,WACtB,OAAOz4J,KAAKoX,kBAAoBqE,KAAKwtB,IAAIjpC,KAAK8vJ,2BAC1C9vJ,KAAKmlB,OAAS1J,KAAKwtB,IAAI4vH,EAAU74J,KAAKsnB,SAAWuxI,oCAOzDr5J,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,oBAAiB,KAA5B,WACI,OAAOF,KAAKyzB,UAAY,mCAOlB23H,EAAAlrJ,UAAA0xJ,gBAAV,WACI,GAAI5xJ,KAAKqtI,oBAAqB,CAC1BrtI,KAAKutI,cAAgBlwH,WAAW86C,iBAAiBn4D,KAAKqe,SAAS0c,iBAAiBujC,iBAAiB,kBAC7F7hC,GAAWz8B,KAAKqtI,oBAAsB,GAAKrtI,KAAKstI,iBAAmBttI,KAAKutI,cACxEvtI,KAAK6uJ,iBAAmB7uJ,KAAK+uJ,cAAgB/wB,GAAW9kB,cACxDz8E,GAAW,GAA0Bz8B,KAAKutI,eAE9CvtI,KAAK84J,SAASx4H,cAAcj9B,MAAM01J,UAAet8H,EAAO,QAQtD2uH,EAAAlrJ,UAAAyzJ,oBAAV,WACI3zJ,KAAK4xJ,kBACL5xJ,KAAKg5J,gBAAkB,EACnBh5J,KAAKijB,sBAAwBjjB,KAAK24H,uBAClC34H,KAAKg5J,gBAAkBh5J,KAAK0iB,eAAe80H,wBAG/Cx3I,KAAKw0H,WAAax0H,KAAKi5J,4BAMjB7N,EAAAlrJ,UAAAg5J,mBAAV,WACI,OAAO,GAMD9N,EAAAlrJ,UAAAi5J,iBAAV,eACQC,EAAgB,EAKpB,OAJIp5J,KAAKq5J,aAAmC,MAApBr5J,KAAK0tJ,cACzB0L,EAAgBp5J,KAAK0tJ,YAAYptH,cAAcgtC,kBAC3CttE,KAAK0tJ,YAAYptH,cAAcwZ,aAAe,GAE/Cs/G,GAMDhO,EAAAlrJ,UAAAo5J,gBAAV,eACQC,EAAe,EAKnB,OAJIv5J,KAAKmlB,QAAUnlB,KAAKw5J,SACpBD,EAAev5J,KAAKw5J,OAAOl5H,cAAcgtC,kBACrCttE,KAAKw5J,OAAOl5H,cAAcwZ,aAAe,GAE1Cy/G,GAMDnO,EAAAlrJ,UAAAu5J,oBAAV,eACUC,EAAwD,IAAjC15J,KAAKuoH,iBAAiB5nH,OACnBX,KAAKuoH,iBAAiB,GAAGzkF,QAAQxD,cAAgB,KAC3Eq5H,EAAqB,EACCD,EAAoBjvF,cAAc,2BAA6B,KAC3F,OAAO,EAAuBkvF,EAAmB7/G,aAAe,GAM1DsxG,EAAAlrJ,UAAA+4J,yBAAV,WACI,IAAKj5J,KAAKovJ,QACN,OAAO,SAGLwK,GAAmB55J,KAAK89H,gBAAmB99H,KAAK89H,gBAAkB99H,KAAK+9H,aAAeC,GAAW9kB,YAC9El5G,KAAK84J,SAASx4H,cAAcwZ,aAAe95C,KAAKy5J,sBAChDz5J,KAAK84J,SAASx4H,cAAcwZ,aAC/C+/G,EAAe75J,KAAKg5J,iBAAmBh5J,KAAKixJ,MAAM3wH,cAAcwZ,aAAe95C,KAAKixJ,MAAM3wH,cAAcrF,aAIxG6+H,EAHgB95J,KAAKm5J,mBAGYS,EACnCC,EAHiB75J,KAAKs5J,kBACFt5J,KAAKk5J,qBAGzBl5J,KAAK2jD,IAAIrjB,cAAcrF,aAErB8+H,EAAW/5J,KAAKqe,SAASkoB,YAAY4xB,iBAAiBn4D,KAAKsgC,eAAeg+B,iBAAiB,UAC7Fi2D,EAAa,EAEjB,GAAIv0H,KAAKyzJ,gBAAiB,CAEtB,GADiBzzJ,KAAKg6J,gBAAgBF,KACK,IAA3BC,EAASzoJ,QAAQ,KAE7B,OADM2oJ,EAAaj6J,KAAK0zJ,0BACJ,EAAIuG,EAAa,KAEzC1lC,EAAa96E,SAASsgH,EAAU,SAEhCxlC,EAAa96E,SAASz5C,KAAKovJ,QAAS,QAK9B6K,EAHJ9sJ,EAASsO,KAAKutB,IAAIurF,EAAaulC,GAErC,OAAe,IAAX3sJ,GAAgBqO,MAAM+4G,IAChB0lC,EAAaj6J,KAAKk6J,yBACJ,EAAID,EAAa,KAElC9sJ,GAGDi+I,EAAAlrJ,UAAAi6J,yBAAV,eACUC,EAAap6J,KAAKsgC,cAAcvD,cAAc+c,aACpD95C,KAAKsgC,cAAcj9B,MAAMg/D,QAAU,WAC7Bl1D,EAASnN,KAAKsgC,cAAcvD,cAAc+c,aAEhD,OADA95C,KAAKsgC,cAAcj9B,MAAMg/D,QAAU,GAC5B+3F,IAAejtJ,GAGhBi+I,EAAAlrJ,UAAA85J,gBAAV,SAA0BF,GACtB95J,KAAKy+H,MAAMn+F,cAAcj9B,MAAMg/D,QAAU,WACrCzsD,GAAO5V,KAAKsgC,cAAcvD,eACoB,IAAlD/8B,KAAKsgC,cAAcvD,cAAc9B,cACjCj7B,KAAKsgC,cAAcvD,cAAc9B,eAAiB6+H,EAOlD,OANKlmD,OAGFh+F,EAAM5V,KAAKm6J,4BAEdn6J,KAAKy+H,MAAMn+F,cAAcj9B,MAAMg/D,QAAU,GAClCzsD,GAGXpW,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKq6J,mBAAqBr6J,KAAKinH,UAAYjnH,KAAKs6J,YAAct6J,KAAKinH,2CAOvEmkC,EAAAlrJ,UAAA2qH,wBAAP,eACQ19G,EAASnN,KAAK84J,SAASx4H,cAAcrF,aAAej7B,KAAKy+H,MAAMn+F,cAAcrF,aAIjF,OAHIj7B,KAAKijB,uBACL9V,GAAUnN,KAAKixJ,MAAM3wH,cAAcrF,cAEhC9tB,GAMJi+I,EAAAlrJ,UAAAinH,uBAAP,SAA8BozC,OACtBC,OADsB,IAAAD,IAAAA,EAAA,MAGtBC,EADc,OAAdD,EACgBA,EAEAv6J,KAAKinH,WACjBxtE,SAASz5C,KAAKqe,SAASkoB,YAAY4xB,iBAAiBn4D,KAAKsgC,eAAeg+B,iBAAiB,SAAU,IAG3Gk8F,GAAiBx6J,KAAK41J,yBAElB51J,KAAKy6J,gBACLD,GAAiBx6J,KAAK06J,oBAAsB16J,KAAK06J,oBAAoBp6H,cAAc44F,YAAc,OAG/FyhC,EAAsB36J,KAAK6+G,eAAe7kG,OAAO,SAAA7Y,GAAK,OAACA,EAAEokH,cAI3Dq1C,EAAc,GAEZC,EADe76J,KAAK6+G,eAAe7kG,OAAO,SAAA7Y,GAAK,OAAAA,EAAEokH,cACrBjpG,IAAI,SAAAw+I,GAAS,OAAAA,EAAMt0C,2BAA2Bs0C,EAAMnoJ,YAChFooJ,EAAqBF,EAAa1vI,OAAO,SAACs6B,EAAKxpC,GAAS,OAAAwpC,EAAMxpC,EAAKtb,QAAQ,GACjFk6J,EAAapoJ,QAAQ,SAAAuoJ,GAAa,OAAAJ,EAAcA,EAAYj4J,OAAOq4J,SAG7DC,EAAuBj7J,KAAK6yG,iBAC9B+nD,EAAY5gJ,OAAO,SAAA7Y,GAAK,OAAAA,EAAEkjH,iBAC1Bs2C,EAAoB3gJ,OAAO,SAAA7Y,GAAK,OAAAA,EAAEkjH,iBAEhC62C,EAAgBl7J,KAAK6yG,iBACvBkoD,EAAqBE,EAAqBt6J,OAC1Cg6J,EAAoBh6J,OAASs6J,EAAqBt6J,OAEhDw6J,EAAoBF,EACrB9vI,OAAO,SAACopE,EAAM6mE,OACL5xC,EAAW4xC,EAAKnqJ,MAChBoqJ,EAAa5hH,SAAS+vE,EAAU,IAItC,OAAOj1B,GAHWi1B,GAAgC,iBAAbA,IAAoD,IAA3BA,EAASl4G,QAAQ,KAC3E+pJ,EAAa,IAAMb,EACnBa,IAEL,GAGP,OAAKF,GAAsBD,EAIPz/I,KAAKmC,MAAOtD,OAAOm2F,SAAS0qD,GAE5C1/I,KAAK4O,KAAKmwI,EAAgBW,GAAqBD,EA5+I9B,KA2+IjBz/I,KAAK4O,IAAImwI,EAAgBU,EA3+IR,MA8+IFzqJ,WAPR,OAcL26I,EAAAlrJ,UAAAo7J,mBAAV,eACQrqJ,EACE8oJ,EAAW/5J,KAAKqe,SAASkoB,YAAY4xB,iBAAiBn4D,KAAKsgC,eAAeg+B,iBAAiB,WAI7FrtD,EAFAjR,KAAKu7J,gBAE8B,IAA3BxB,EAASzoJ,QAAQ,KAAcmoC,SAASsgH,EAAU,IAAM,KAExDtgH,SAASz5C,KAAKiR,MAAO,MAGnBjR,KAAKsgC,gBACfrvB,EAAQjR,KAAKsgC,cAAc44F,aAIZ,OAAfl5H,KAAKiR,OAAmBA,IACxBA,EAAQjR,KAAKw7J,qBAGbx7J,KAAKq6J,oBAAqC,OAAfr6J,KAAKiR,QAChCA,GAASjR,KAAKs6J,cAEbhgJ,OAAOm2F,SAASx/F,IAAoB,OAAVA,GAAmBA,IAAUjR,KAAKinH,YAC7DjnH,KAAKinH,UAAYh2G,GAErBjR,KAAK04J,wBAGDtN,EAAAlrJ,UAAAs7J,kBAAR,eACQC,EAAS,EAUb,OATcz7J,KAAK6yG,iBAClB7yG,KAAK6+G,eAAe7kG,OAAO,SAAA8C,GAAK,OAAAA,EAAE6oG,eAAgB3lH,KAAK6+G,eAAe7kG,OAAO,SAAA8C,GAAK,OAACA,EAAEyoG,eACjF9yG,QAAQ,SAACwJ,GACeA,EAAKhL,OAA+B,iBAAfgL,EAAKhL,QAAmD,IAA7BgL,EAAKhL,MAAMK,QAAQ,OAExF2K,EAAKhL,MAAQgL,EAAKgrG,WAAa0xC,SAEnC8C,GAAWhiH,SAAUx9B,EAAKhL,OAASgL,EAAKsoG,aAAe,KA3hJtC,MA6hJhBk3C,GAGLz7J,KAAK4tC,IAAIrL,gBACTk5H,GAAUz7J,KAAK41J,0BAHJ,MAORxK,EAAAlrJ,UAAAm6J,iBAAP,WACI,GAAIr6J,KAAKmgH,MAAS,OAAO,MACnBvgE,IAAe5/C,KAAKg4H,yBAA0Bh4H,KAAKg4H,wBAAwBp4E,eACjF,SAAU5/C,KAAKinH,WAAajnH,KAAK04H,UAC7B14H,KAAK04H,SAAS/3H,OAAS,GACvBi/C,IAMEwrG,EAAAlrJ,UAAAwzJ,uBAAV,WACI,OAAQ1zJ,KAAKwU,MAASxU,KAAKwU,KAAK7T,OAASX,KAAK8vJ,2BAC1C,EAAI9vJ,KAAKk6J,yBAMP9O,EAAAlrJ,UAAAi0J,iBAAV,SAA2B5nH,GAA3B,IAAA33B,EAAA5U,KACUwiD,EAAOxiD,KAAK6zJ,iBAAiBrxG,KAAKjW,GACxC,GAAIiW,EAAM,KACFk5G,GAAQ,EACRC,GAAU,EAEd37J,KAAKk0J,YAAYl0J,KAAKigB,YAGtBuiC,EAAKu2C,iBAAiB,SAAC93E,GACnBrM,EAAK23I,aAAahqI,KAAKtB,EAAOhF,MAC9By/I,GAAQ,IAGZl5G,EAAKoH,mBAAmB,SAAC3oC,GACCA,EAAOhF,gBAAgB+tG,KAGzCp1G,EAAKmT,QAAQ3B,cAAcnF,EAAOhF,KAAKkE,OAGvCvL,EAAKmT,QAAQtC,aAAaxE,EAAOhF,KAAKkE,OAGjCvL,EAAKsvG,iBAAiB0Y,oBACpBhoH,EAAKsvG,iBAAiBgb,gBACtBtqH,EAAKsvG,iBAAiBgb,eAAe/+G,QAAUc,EAAOhF,KAAKkE,OAC9DvL,EAAK+qH,aAAavxH,QAItBwG,EAAKmT,QAAQpC,WAAW1E,EAAOhF,KAAKkE,QAExCw7I,GAAU,IAGd37J,KAAK8lH,eAED41C,GAASC,KACT37J,KAAK0iB,eAAeC,oBACpBu4D,QAAQC,UAAU9hD,KAAK,WAGnBzkB,EAAKuS,eAAc,QASzBikI,EAAAlrJ,UAAA0zJ,mBAAV,WAAA,IAAAh/I,EAAA5U,KASIA,KAAK8lH,cACL9lH,KAAK4tC,IAAIrL,oBACHq5H,EAAY57J,KAAKq6J,mBACvBr6J,KAAKs7J,qBACLt7J,KAAK8lH,cACL9lH,KAAK4tC,IAAIrL,gBACTviC,KAAK2zJ,sBAED3zJ,KAAKmjB,aACLnjB,KAAK67J,4BAA4B77J,KAAKyjB,eAGtCzjB,KAAKkkH,iBAAiB0Y,oBACtB58H,KAAK2/H,aAAaygB,iBAGtBpgJ,KAAK4tC,IAAIrL,gBAELq5H,IAAc57J,KAAKq6J,qBACnBr6J,KAAKs7J,qBACLt7J,KAAK4tC,IAAIrL,iBAETviC,KAAKm1D,KAAK2mG,SACV97J,KAAKm1D,KAAKzS,IAAI,WACV9tC,EAAKmnJ,yBACLnnJ,EAAKg5B,IAAIrL,kBAGbviC,KAAKm1D,KAAKlL,SAASplB,KAAK8G,EAAAA,SAAS5G,UAAU,WACvCnwB,EAAKugD,KAAKzS,IAAI,WACV9tC,EAAKmnJ,6BAIjB/7J,KAAK8lH,eAGDslC,EAAAlrJ,UAAA67J,uBAAR,eACQ9qJ,EAAQjR,KAAKskH,OACjB,GAAc,OAAVrzG,EAAgB,KACZ+qJ,EAAeh8J,KAAKinH,UACpBjnH,KAAKq6J,qBACL2B,GAAgBh8J,KAAKs6J,aAEzBrpJ,EAAQ+qJ,EAAe,KACvBh8J,KAAK8lH,cAET9lH,KAAK0xJ,WAAazgJ,EAClBjR,KAAK4tC,IAAI+U,gBAUNyoG,EAAAlrJ,UAAA01J,uBAAP,eACQ3kJ,EAAQ,EAQZ,OANIjR,KAAK+1G,kBACL9kG,GAASjR,KAAKi8J,wBAA0Bj8J,KAAKi8J,wBAAwB37H,cAAcpvB,wBAAwBD,MAAQ,GAEnHjR,KAAKk/G,eACLjuG,GAASjR,KAAK06J,oBAAsB16J,KAAK06J,oBAAoBp6H,cAAcpvB,wBAAwBD,MAAQ,GAExGA,GAWJm6I,EAAAlrJ,UAAAkrH,eAAP,SAAsB8wC,gBAAA,IAAAA,IAAAA,GAAA,OACZC,EAAKD,EAAal8J,KAAK6nH,eAAiB7nH,KAAK++G,cAC/Cn3D,EAAM,MACV,IAAkB,IAAAw0G,EAAArsJ,EAAAosJ,GAAEE,EAAAD,EAAAl6J,QAAAm6J,EAAAj6J,KAAAi6J,EAAAD,EAAAl6J,OAAE,CAAjB,IAAMge,EAAGm8I,EAAAl6J,MACQ,IAAd+d,EAAIxM,QACJk0C,GAAOnO,SAASv5B,EAAI+mG,UAAW,0GAKvC,OAFAr/D,GAAO5nD,KAAK2pH,qBAWNyhC,EAAAlrJ,UAAA2pH,iBAAV,SAA2BqyC,QAAA,IAAAA,IAAAA,GAAA,OACnBjrJ,EAAQjR,KAAKu7J,eACbv7J,KAAKinH,UACLxtE,SAASz5C,KAAKiR,MAAO,KAAQwoC,SAASz5C,KAAKs8J,UAAW,KAAOt8J,KAAKinH,UAItE,OAHIjnH,KAAKq6J,qBAAuBr6J,KAAKu7J,iBACjCtqJ,GAASjR,KAAKs6J,aAEXrpJ,EAAQjR,KAAKorH,eAAe8wC,IAM7B9Q,EAAAlrJ,UAAAqjH,WAAV,SAAqB3vG,EAAmB8jI,EAAqB6kB,OACnD36I,EAAS5hB,KAAK+nB,QAAQhI,mBAAmBnM,GAC3CgO,IACAA,EAAO81H,WAAaA,EAChB6kB,IACIv8J,KAAK24H,sBAAwB34H,KAAK0iB,eAAeo0H,oBACrDl1H,EAAOsnC,UAAYqzG,KAQrBnR,EAAAlrJ,UAAA03J,mBAAV,SAA6BpiJ,EAAmCkiI,GAAhE,IAAA9iI,EAAA5U,KACIwV,EAAY/C,QAAQ,SAACqxB,GACjBlvB,EAAK2uG,WAAWz/E,EAAQlwB,UAAW8jI,EAAY5zG,EAAQ04H,kBAMrDpR,EAAAlrJ,UAAA43J,0BAAV,SAAoCtiJ,GAApC,IAAAZ,EAAA5U,KACIwV,EAAY/C,QAAQ,SAACmP,OACXiT,EAAajT,GAAUA,EAAOhO,UAAYgO,EAAOhO,UAAYgO,EACnEhN,EAAK2uG,WAAW1uF,GAAY,MAO1Bu2H,EAAAlrJ,UAAAu8J,iBAAV,SAA2BtjJ,GACvB,MAAmB,iBAARA,EACAiE,GAAS9C,OACM,kBAARnB,EACPiE,GAAS7C,QACM,iBAARpB,GAAoBA,aAAehJ,KAC1CiN,GAASjN,KAEbiN,GAAS/C,QAGZ+wI,EAAAlrJ,UAAA6zJ,eAAR,eACU5sG,EAAM9oC,SAASC,cAAc,OAC7Bjb,EAAQ8jD,EAAI9jD,MAClBA,EAAM4N,MAAQ,QACd5N,EAAM8J,OAAS,QACf9J,EAAMq5B,SAAW,WACjBr5B,EAAMs3B,IAAM,WACZt3B,EAAMs3B,IAAM,WACZt3B,EAAMyN,SAAW,SACjBuN,SAASQ,KAAKC,YAAYqoC,OACpBmzG,EAAcnzG,EAAI+xE,YAAc/xE,EAAInsB,YAE1C,OADA3c,SAASQ,KAAKG,YAAYmoC,GACnBmzG,GAMDlP,EAAAlrJ,UAAA+zJ,oBAAV,WAAA,IAAAr/I,EAAA5U,KACUwU,EAAOxU,KAAK+nB,QAAQzB,WACpBu6B,EAAU7gD,KAAKi+C,SAASva,wBAAwB6+E,IAChDm6C,EAAS18J,KAAK28J,mBAAmBnoJ,GACjC+Q,EAAU,GAEhBm3I,EAAOjqJ,QAAQ,SAAC0N,OACN4mG,EAAMlmE,EAAQ1gD,OAAOyU,EAAK02I,QAAQ3nH,UACxCojF,EAAI1yG,SAAS8L,MAAQA,EACrB4mG,EAAI1yG,SAAS8I,SAAWvI,EAAK6nJ,iBAAiBjoJ,EAAK,GAAG2L,IACtD4mG,EAAIzkF,kBAAkBC,gBACtBhd,EAAQ/iB,KAAKukH,EAAI1yG,YAGrBrU,KAAKigB,WAAWylB,MAAMngB,GAClB/Q,GAAQA,EAAK7T,OAAS,IACtBX,KAAK8zJ,gBAAiB,IAIpB1I,EAAAlrJ,UAAAy8J,mBAAV,SAA6BnoJ,GACzB,OAAOhV,OAAOwQ,KAAKwE,GAAwB,IAAhBA,EAAK7T,OAAe6T,EAAK,GAAK,KAM7D42I,EAAAlrJ,UAAA08J,aAAA,SAAartJ,GACT,OAAOA,EAAIyK,OAAO,SAAA7Y,GAAK,OAAY,IAAZA,EAAEuS,SAMnB03I,EAAAlrJ,UAAAg0J,YAAV,SAAsBt3I,EAA2C0+D,GAAjE,IAAA1mE,EAAA5U,KAaI,QAb6D,IAAAs7E,IAAAA,EAAA,MAC7Dt7E,KAAK6vJ,cAAgB7vJ,KAAKigB,WAAW2M,KAAK,SAAA1M,GAAO,OAAAA,EAAIqlG,cACjDvlH,KAAK6yG,kBAEL7yG,KAAKigB,WAAWxN,QAAQ,SAACyN,GACrB,GAAIA,EAAIylG,aAAc,KACZk3C,EAAa38I,EAAIvN,SACnBuN,EAAIvN,SAASwY,OAAO,SAACs6B,EAAKnsC,GAAQ,OAAAmC,KAAK4O,IAAI/Q,EAAI45F,SAAW55F,EAAIoiG,YAAc,EAAGj2D,IAAM,GACrF,EACJ7wC,EAAK06I,uBAAyB7zI,KAAK4O,IAAIwyI,EAAYjoJ,EAAK06I,2BAIhEtvJ,KAAK6yG,kBAAoB7yG,KAAKotI,gBAAiB,KAGzC0vB,EAAsB98J,KAAKigB,WAAWjG,OAAO,SAACkG,GAAQ,OAAAA,EAAIylG,cAAgBzlG,EAAIo7F,oBACpFt7G,KAAKigB,WAAWylB,MAAMo3H,GAE1B98J,KAAK0uJ,qBAAuB,KAC5B1uJ,KAAKwuJ,SAAWxuJ,KAAKigB,WAAWrN,UAChCgK,EAAWnK,QAAQ,SAACmP,GAChBA,EAAO2iG,aAAe3vG,EAAKoyG,qBAAuBpyG,EAAK8kB,aAAe9X,EAAO2iG,aAAe3iG,EAAO2iG,aAAe,GAE9GjpC,GACAA,EAAG15D,KAIX5hB,KAAKkoH,kBAEDloH,KAAK6yG,kBACLj2F,EAAWnK,QAAQ,SAACmP,GAChBA,EAAOumG,4BAQTijC,EAAAlrJ,UAAAgoH,gBAAV,WAAA,IAAAtzG,EAAA5U,KACIA,KAAK6nH,eAAkB7nH,KAAoB,gBAAIA,KAAKigB,WAAWjG,OAAO,SAAC7Y,GAAM,OAAAA,EAAEmpB,SAC3EtqB,KAAKigB,WAAWjG,OAAO,SAAC7Y,GAAM,OAAAA,EAAEmpB,SAAQ/V,KAAK,SAACW,EAAG3V,GAAM,OAAAqV,EAAKizG,eAAev2G,QAAQ4D,GAAKN,EAAKizG,eAAev2G,QAAQ/R,KACxHS,KAAK4nH,iBAAmB5nH,KAAKigB,WAAWjG,OAAO,SAAC7Y,GAAM,OAACA,EAAEmpB,UAMtD8gI,EAAAlrJ,UAAAumI,gBAAP,SAAuB7yH,GACnB,OAAO,GAMJw3I,EAAAlrJ,UAAA68J,sBAAP,SAA6BzqJ,GACpBtS,KAAKi2G,6BACVj2G,KAAK6iB,iBAAiB+zF,oBAClB52G,KAAK6iB,iBAAiBwyF,kBAAkB/iG,GAAStS,KAAK6iB,iBAAiB+yF,cAActjG,KAOtF84I,EAAAlrJ,UAAAm7H,gBAAP,SAAuBliH,GACnB,OAAO,GAMX3Z,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,4BAAyB,KAA7B,WACI,OAAIF,KAAKyuJ,0BAA0B91I,kBAAkBhY,OAAS,EACnDX,KAAK6iB,iBAAiB+zF,oBAAsB,wBAA0B,sBAG1E52G,KAAK6iB,iBAAiB+zF,oBAAsB,eAAiB,8CAOxEp3G,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,4BAAyB,KAApC,WACI,OAAIF,KAAKwU,KACExU,KAAK6iB,iBAAiB4yF,QAAQ90G,OAGlC,mCAUXnB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKg4H,wBAAwBx4E,0CAWjC4rG,EAAAlrJ,UAAA88J,aAAP,WACI,OAAOh9J,KAAK6iB,iBAAiBuyF,mBAY1Bg2C,EAAAlrJ,UAAA+8J,WAAP,SAAkB9mD,EAAehU,GAC7BniG,KAAK6iB,iBAAiBqzF,sBAAsBC,EAAQhU,GACpDniG,KAAKmnB,iBAWFikI,EAAAlrJ,UAAAg9J,aAAP,SAAoB/mD,GAChBn2G,KAAK6iB,iBAAiBwzF,wBAAwBF,GAC9Cn2G,KAAKmnB,iBAcFikI,EAAAlrJ,UAAA01G,cAAP,SAAqBunD,GAArB,IAAAvoJ,EAAA5U,UAAqB,IAAAm9J,IAAAA,GAAA,OACX3oJ,EAAO2oJ,GAAkBn9J,KAAKqgB,aAAergB,KAAKqgB,aAAergB,KAAK+nB,QAAQrH,cAAa,GAC3Fy1F,EAASn2G,KAAK6iB,iBAAiB2yF,UAAUhhG,GAAMwF,OAAO,SAAA07F,GAAO,OAAC9gG,EAAKmT,QAAQP,wBAAwBkuF,KACzG11G,KAAKi9J,WAAW9mD,IAabi1C,EAAAlrJ,UAAAk9J,gBAAP,SAAuBD,QAAA,IAAAA,IAAAA,GAAA,GACfA,GAAkBn9J,KAAKqgB,cAAgBrgB,KAAKqgB,aAAa1f,OAAS,EAClEX,KAAKk9J,aAAal9J,KAAK6iB,iBAAiB2yF,UAAUx1G,KAAKqgB,gBAEvDrgB,KAAK6iB,iBAAiBq0F,uBACtBl3G,KAAKmnB,kBAIbikI,EAAAlrJ,UAAAm9J,mBAAA,WACIr9J,KAAK6iB,iBAAiB0oB,OAAM,GAC5BvrC,KAAKmnB,iBAGTikI,EAAAlrJ,UAAAo9J,WAAA,SAAW7oJ,OAED2nE,EAAap8E,KAAKm5H,gBAAgB75E,YAClCuU,EAAW7zD,KAAKg4H,wBAAwB14E,YAC9C,OAAQ7qC,GACJ,KAAKslI,GAAoBjgE,KACrBsC,EAAW9gD,YALC,GAMZ,MACJ,KAAKy+G,GAAoBhgE,MACrBqC,EAAW9gD,YARC,GASZ,MACJ,KAAKy+G,GAAoBX,IACrBvlF,EAASp4B,WAXG,GAYZ,MACJ,KAAKs+G,GAAoBV,OACrBxlF,EAASp4B,WAdG,GAeZ,MACJ,KAAKs+G,GAAoBP,WACrBp9D,EAAW9gD,YAjBC,GAkBZu4B,EAASp4B,WAlBG,GAmBZ,MACJ,KAAKs+G,GAAoBN,YACrBr9D,EAAW9gD,YArBC,GAsBZu4B,EAASp4B,WAtBG,GAuBZ,MACJ,KAAKs+G,GAAoBT,QACrBl9D,EAAW9gD,YAzBC,GA0BZu4B,EAASp4B,WA1BG,GA2BZ,MACJ,KAAKs+G,GAAoBR,SACrBn9D,EAAW9gD,YA7BC,GA8BZu4B,EAASp4B,WA9BG,GA+BZ,MACJ,QACI,OAERz7B,KAAKowH,gBAGTg7B,EAAAlrJ,UAAAy0J,UAAA,SAAU4I,GACN,OAAOA,IAAQvpJ,WAAqB,OAARupJ,GAGhCnS,EAAAlrJ,UAAA6lF,YAAA,SAAYw3E,GAAZ,IAAA3oJ,EAAA5U,KACSA,KAAK20J,UAAU4I,IAIhBA,aAAe59J,MACf49J,EAAI9qJ,QAAQ,SAAA7B,GAAS,OAAAgE,EAAKwtF,aAAaxxF,KAEvC5Q,KAAKoiG,aAAam7D,GAEtBv9J,KAAKmnB,iBARDnnB,KAAKq9J,sBAWbjS,EAAAlrJ,UAAAs9J,qBAAA,SAAqBr9I,OACX0+F,EAAiB7+G,KAAK6+G,eAC5B,MAAqB,iBAAV1+F,EACAA,EAEJ0+F,EAAevnG,KAAK,SAAAsK,GAAU,OAAAA,EAAOzB,QAAUA,IAAO6J,cAIjEohI,EAAAlrJ,UAAAkiG,aAAA,SAAaxxF,OACH6sJ,EAAY,CAAEp8I,IAAKzQ,EAAMsiG,SAAUtxF,OAAQ5hB,KAAKw9J,qBAAqB5sJ,EAAMwiG,cAC3EsqD,EAAU,CAAEr8I,IAAKzQ,EAAMuiG,OAAQvxF,OAAQ5hB,KAAKw9J,qBAAqB5sJ,EAAMyiG,YAE7ErzG,KAAK6iB,iBAAiBgvF,aAAahhG,KAAO4sJ,EAC1Cz9J,KAAK6iB,iBAAiBkjE,YAAY23E,EAAS19J,KAAK6iB,iBAAiBgvF,cACjE7xG,KAAK6iB,iBAAiBmwF,aAAa0qD,EAAS19J,KAAK6iB,iBAAiBgvF,cAClE7xG,KAAK6iB,iBAAiBovF,oBAG1Bm5C,EAAAlrJ,UAAAy9J,kBAAA,WACI,OAAO39J,KAAK6iB,iBAAiBg8D,QAIvBusE,EAAAlrJ,UAAA09J,yBAAV,SAAmCzpD,EAAe0pD,EAAoB3oH,gBAApB,IAAA2oH,IAAAA,GAAA,QAAoB,IAAA3oH,IAAAA,GAAA,OAE9Dj0B,EAAS,GACP68I,EAAe,GACfC,EAAW/9J,KAAK6iB,iBAAiB2tE,cAEjCwtE,EAAer+J,MAAMuT,KAAKlT,KAAK6iB,iBAAiBmtB,WACjDh2B,OAAO,SAACikJ,GAAU,OAAAA,EAAM,GAAK9pD,EAAOxzG,SAErCX,KAAKk+J,gBAAkB5jD,GAAkBX,QAAUokD,GACnDC,EAAax7J,KAAK,CAACu7J,EAAS18I,KAAK,IAAI9Q,KAAc7C,IAAIqwJ,EAASn8I,yBAGxDP,EAAKqH,WACb,IAAKyrF,EAAO9yF,wBAGNywF,EAAOnyG,MAAMuT,KAAKwV,OACxB,IAAmB,IAAAy1I,EAAApuJ,EAAA+hG,GAAIssD,EAAAD,EAAAj8J,QAAAk8J,EAAAh8J,KAAAg8J,EAAAD,EAAAj8J,OAAE,CAApB,IAAM2iB,EAAIu5I,EAAAj8J,MACI6U,EAAKqnJ,uBAAuBx5I,GAC9BpS,QAAQ,SAACyN,GAClB,GAAIA,EAAK,KACCjf,EAAMi0C,GAAUh1B,EAAIyJ,QAAsBzJ,EAAIC,MACpDc,EAAOhgB,GAAO48J,GAAc39I,EAAIiK,UAAYjK,EAAIiK,UAAUgqF,EAAO9yF,GAAKnB,EAAIC,QACpEg0F,EAAO9yF,GAAKnB,EAAIC,+GAI9B3gB,OAAOwQ,KAAKiR,GAAQtgB,QACpBm9J,EAAat7J,KAAKye,GAEtBA,EAAS,eAlBb,IAAyB,IAAAq9I,EAAAvuJ,EAAAiuJ,GAAYO,EAAAD,EAAAp8J,QAAAq8J,EAAAn8J,KAAAm8J,EAAAD,EAAAp8J,OAAA,CAA1B,IAAA4N,EAAAzN,EAAAk8J,EAAAp8J,MAAA,KAAC2N,EAAA,GAAKA,EAAA,yGAoBjB,OAAOguJ,GAGD1S,EAAAlrJ,UAAAm+J,uBAAV,SAAiC1qJ,GAC7B,GAAI3T,KAAK6yG,iBAAkB,KAIjB2rD,EAHuBx+J,KAAK6+G,eAC7B7kG,OAAO,SAAAkG,GAAO,OAAAA,EAAIylG,eAClBpxG,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAE8U,aAAezqB,EAAEyqB,eACArW,GACvC,OAAO6qJ,EAAYA,EAAU7rJ,SAASC,UAAY,GAKlD,MAAO,CAHgB5S,KAAK6+G,eACvB7kG,OAAO,SAAAkG,GAAO,OAACA,EAAIqlG,cACnBhxG,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAE8U,aAAezqB,EAAEyqB,eAChBrW,KAU/By3I,EAAAlrJ,UAAAu+J,gBAAA,SAAgBZ,EAAoB3oH,QAApB,IAAA2oH,IAAAA,GAAA,QAAoB,IAAA3oH,IAAAA,GAAA,OAC1Bi/D,EAASn0G,KAAK04H,SACpB,OAAO14H,KAAK49J,yBAAyBzpD,EAAQ0pD,EAAY3oH,IAa7Dk2G,EAAAlrJ,UAAAw+J,cAAA,WACQvtJ,MACAnR,KAAK2+J,YAAY,MAAM,IAQxBvT,EAAAlrJ,UAAAy+J,YAAP,SAAmBrsJ,EAAOssJ,GACtB,QADsB,IAAAA,IAAAA,GAAA,GACjB5+J,KAAK2tJ,iBAAiBrtI,UAAWtgB,KAAK6gB,YAAYk7F,WAAvD,KAKM57E,EAAE,CAAK3rB,KADAxU,KAAKy+J,gBAAgBz+J,KAAK2tJ,iBAAiBE,eAAgB7tJ,KAAK2tJ,iBAAiBC,aAC3ExrI,QAAQ,GAG3B,GAFApiB,KAAK2sJ,WAAWpqI,KAAK4d,IAEjBA,EAAG/d,OAAP,KAKI5R,EADgB,IAAIob,GAAuBuU,EAAG3rB,KAAMxU,KAAK2tJ,iBAAiBG,WACrDtjI,cAEpBxqB,KAAK2tJ,iBAAiBC,cACvBp9I,EAASA,EAAOq1D,UAAUr1D,EAAOc,QAAQ,MAAQ,IAGjDstJ,EACA,OAAgBx5F,cAAcy5F,QAAQ,OAAQruJ,IAIlD8B,EAAM23B,iBAKN33B,EAAMmyB,kBACNnyB,EAAM8yD,cAAcy5F,QAAQ,aAAcruJ,OAavC46I,EAAAlrJ,UAAAqxJ,WAAP,SAAkB/vI,EAAkB68G,EAAsB/iD,GAA1D,IAAA1mE,EAAA5U,KACI,QADgC,IAAAq+H,IAAAA,GAAmB,QAAG,IAAA/iD,IAAAA,EAAA,QAClD95D,EAAW,GAAKA,EAAWxhB,KAAK04H,SAAS/3H,OAAS,IACzB,IAArB09H,IAAqG,IAA3Er+H,KAAKigB,WAAW3D,IAAI,SAAA4D,GAAO,OAAAA,EAAI8J,eAAc1Y,QAAQ+sH,IADvF,CAIAr+H,KAAKowH,eACDpwH,KAAK04H,SAAS7gH,MAAM2J,EAAUA,EAAW,GAAGlK,KAAK,SAAA6B,GAAO,OAAAA,EAAIlF,YAAckF,EAAI2lJ,mBAC9EzgC,GAAmB,OAEjB0gC,EAAyB/+J,KAAKkzF,WAAW+qC,4BAA4Bz8G,EAAU68G,GAC/E2gC,GAAgD,IAArB3gC,IAA2Br+H,KAAKkzF,WAAWskC,qBAAqB6G,GAC7F0gC,EACA/+J,KAAKkzF,WAAWkrC,4BAA4B58G,EAAU68G,EAClD,WAAQzpH,EAAK28I,WAAW/vI,EAAU68G,EAAiB/iD,KAChD0jF,EACPh/J,KAAKkzF,WAAWukC,8BAA8Bj2G,EAAU68G,GAAiB,EAChE,WAAQzpH,EAAK28I,WAAW/vI,EAAU68G,EAAiB/iD,KAE5Dt7E,KAAKi/J,gBAAgBz9I,EAAU68G,EAAiB/iD,KAcjD8vE,EAAAlrJ,UAAAg/J,YAAP,SAAmBC,EAAsBC,EACrC1vE,QAAA,IAAAA,IAAAA,EAAA,UACMnqE,EAAUvlB,KAAKigB,WAAWjG,OAAO,SAAAkG,GAAO,OAACA,EAAIqlG,aAAerlG,EAAI8J,cAAgB,IAEtF,IAAKhqB,KAAKq/J,gBAAgBF,EAAcC,GACpC,MAAO,CAAE59I,SAAU29I,EAAcn9I,mBAAoBo9I,OAEnDE,EAAa5vE,EAAWnqE,EAAQvL,OAAO,SAACkG,GAAQ,OAAAwvE,EAASxvE,KAAM5D,IAAI,SAAAijJ,GAAW,OAAAA,EAAQv1I,eAAczV,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAI3V,IACzHgmB,EAAQjJ,IAAI,SAAAijJ,GAAW,OAAAA,EAAQv1I,eAAczV,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAI3V,IAC9DigK,EAAgBF,EAAWhoJ,KAAK,SAAA3D,GAAS,OAAAA,EAAQyrJ,IACvD,OAAIp/J,KAAK04H,SAAS7gH,MAAMsnJ,EAAcA,EAAe,GAChD7nJ,KAAK,SAAA6B,GAAO,OAACA,EAAIlF,aAAekF,EAAI+vC,YAAc/vC,EAAI2lJ,kBAAmBU,IAAkBxrJ,UACrF,CAAEwN,SAAU29I,EAAcn9I,mBAAoBw9I,GAE3B,IAAtBF,EAAW3+J,QAAgBX,KAAKy/J,oBAAoBN,KAAkBA,EAC/D,CAAE39I,SAAU29I,EAAcn9I,mBAAoBo9I,GAE9C,CAAE59I,SAAUxhB,KAAKy/J,oBAAoBN,GAAen9I,mBAAoBs9I,EAAW,KAe/FlU,EAAAlrJ,UAAAw/J,gBAAP,SAAuBP,EAAsBC,EACzC1vE,QAAA,IAAAA,IAAAA,EAAA,UACMnqE,EAAUvlB,KAAKigB,WAAWjG,OAAO,SAAAkG,GAAO,OAACA,EAAIqlG,aAAerlG,EAAI8J,cAAgB,IAEtF,IAAKhqB,KAAKq/J,gBAAgBF,EAAcC,GACpC,MAAO,CAAE59I,SAAU29I,EAAcn9I,mBAAoBo9I,OAEnDE,EAAa5vE,EAAWnqE,EAAQvL,OAAO,SAACkG,GAAQ,OAAAwvE,EAASxvE,KAAM5D,IAAI,SAAAijJ,GAAW,OAAAA,EAAQv1I,eAAczV,KAAK,SAACW,EAAG3V,GAAM,OAAAA,EAAI2V,IACzHqQ,EAAQjJ,IAAI,SAAAijJ,GAAW,OAAAA,EAAQv1I,eAAczV,KAAK,SAACW,EAAG3V,GAAM,OAAAA,EAAI2V,IAC9DyqJ,EAAgBL,EAAWhoJ,KAAK,SAAA3D,GAAS,OAAAA,EAAQyrJ,IACvD,OAAIp/J,KAAK04H,SAAS7gH,MAAMsnJ,EAAcA,EAAe,GAChD7nJ,KAAK,SAAA6B,GAAO,OAACA,EAAIlF,aAAekF,EAAI+vC,YAAc/vC,EAAI2lJ,kBAAmBa,IAAkB3rJ,UACrF,CAAEwN,SAAU29I,EAAcn9I,mBAAoB29I,GAE3B,IAAtBL,EAAW3+J,QAAgBX,KAAK4/J,oBAAoBT,KAAkBA,EAC/D,CAAE39I,SAAU29I,EAAcn9I,mBAAoBo9I,GAE9C,CAAE59I,SAAUxhB,KAAK4/J,oBAAoBT,GAAen9I,mBAAoBs9I,EAAW,KAK9FlU,EAAAlrJ,UAAA++J,gBAAR,SAAwBz9I,EAAU68G,EAAsB/iD,GACpD,QAD8B,IAAA+iD,IAAAA,GAAmB,QAAG,IAAA/iD,IAAAA,EAAA,MAC/CA,EAAL,KACImiC,EAAYz8G,EACVqgB,EAAMrhB,KAAKq5H,iBAAiBr/G,OAAO,SAAAzZ,GAAK,OAAY,IAAZA,EAAEoT,QAAahR,OAAO3C,KAAKyhB,QAAQ7O,WAAW0E,KAAK,SAAAlW,GAAK,OAAAA,EAAEuS,QAAU6N,IAClH,GAAKH,EAAL,CACA,OAAQA,EAAIif,cAAc+uB,QAAQh6C,eAC9B,IAAK,uBACDooG,EAAaoiD,GAAsB5oJ,SACnCjW,EAASqgB,EACT,MACJ,IAAK,uBACDo8F,EAAaoiD,GAAsBrmD,YACnCx4G,GAA8B,IAArBq9H,EACLh9G,EAAIy+I,aAAaxoJ,KAAK,SAAAnW,GAAK,OAAAA,EAAE6gB,qBAAuBq8G,IAAmBh9G,EAAIy+I,aAAan0H,MAC5F,MACJ,IAAK,qBACD8xE,EAAaoiD,GAAsBpmD,gBACnCz4G,EAASqgB,EACT,MACJ,QACIo8F,EAAaoiD,GAAsBtmD,SACnCv4G,GAA8B,IAArBq9H,EAAyBh9G,EAAIM,MAAMrK,KAAK,SAAAnW,GAAK,OAAAA,EAAE6gB,qBAAuBq8G,IAAmBh9G,EAAIM,MAAMgqB,MAIpH2vC,EADa,CAAEmiC,WAAYA,EAAYz8G,OAAQA,OAI3CoqJ,EAAAlrJ,UAAA0/J,oBAAR,SAA4BpkC,GACxB,GAAIA,GAAmB,EAAK,OAAOA,MAE7BukC,EAAU//J,KAAK04H,SAAS7gH,MAAM,EAAG2jH,GAAiB3mH,UACnDyC,KAAK,SAAA6B,GAAO,OAACA,EAAIlF,aAAekF,EAAI+vC,YAAc/vC,EAAI2lJ,iBAC3D,OAAOiB,EAAU//J,KAAK04H,SAASpnH,QAAQyuJ,GAAWvkC,GAG9C4vB,EAAAlrJ,UAAAu/J,oBAAR,SAA4BjkC,GACxB,GAAIA,IAAoBx7H,KAAK04H,SAAS/3H,OAAU,OAAO66H,MAEjDwkC,EAAUhgK,KAAK04H,SAAS7gH,MAAM2jH,EAAkB,EAAGx7H,KAAK04H,SAAS/3H,QAClE2W,KAAK,SAAA6B,GAAO,OAACA,EAAIlF,aAAekF,EAAI+vC,YAAc/vC,EAAI2lJ,iBAC3D,OAAOkB,EAAUhgK,KAAK04H,SAASpnH,QAAQ0uJ,GAAWxkC,GAG9C4vB,EAAAlrJ,UAAAm/J,gBAAR,SAAwB79I,EAAUyiC,OACxB0yD,EAAO32G,KAAKq5H,iBAAiBr/G,OAAO,SAAAzZ,GAAK,OAAY,IAAZA,EAAEoT,QAAahR,OAAO3C,KAAKyhB,QAAQ7O,WAAWjS,OACvFkxB,EAAO7xB,KAAKigB,WAAWjG,OAAO,SAAAkG,GAAO,OAACA,EAAIqlG,aAAerlG,EAAI8J,cAAgB,IAAM9J,EAAI2J,SAAQlpB,OACrG,QAAIg2G,EAAO,GAAK9kF,EAAO,KACnBrQ,GAAY,GAAKA,EAAWxhB,KAAK04H,SAAS/3H,QAC1CsjD,GAAa,GAAKA,EAAWpyB,IAuB9Bu5H,EAAAlrJ,UAAA+/J,mBAAP,SAA0BtsJ,EAAOuM,GAC7B,OAAOA,EAAIC,MAAQD,EAAI8iG,YAGnBooC,EAAAlrJ,UAAAoX,KAAR,SAAak2D,EAAc0yF,EAAmB/yF,EAAyBC,EAAsB3vB,GACzF,IAAKz9C,KAAKyhB,QACN,OAAO,EAKX,GAFAzhB,KAAKklB,SAAQ,IAERsoD,EAED,OADAxtE,KAAKs4J,cACE,MAGL7qF,IAAwBN,EACxBO,IAAqBN,EACvB+yF,GAAe,EAoCnB,GAlCIngK,KAAKi8G,eAAertC,aAAepB,GACnCxtE,KAAKi8G,eAAe9uC,gBAAkBM,GACtCztE,KAAKi8G,eAAe7uC,aAAeM,GACnC1tE,KAAKi8G,eAAiB,CAClBrtC,WAAYpB,EACZwgF,iBAAkB,EAClB7gF,cAAeM,EACfL,WAAYM,EACZugF,eAAgB,IAGpBkS,GAAe,GAEfngK,KAAKi8G,eAAe+xC,kBAAoBkS,EAGxCC,IACAngK,KAAKyhB,QAAQhP,QAAQ,SAAC4O,GACdA,EAAIM,OACJN,EAAIM,MAAMlP,QAAQ,SAACtR,GACfA,EAAE+8G,cAAc1wC,EAAMC,EAAuBC,OAKzD1tE,KAAKo4J,qBAGLp4J,KAAKi8G,eAAe+xC,kBAAoBhuJ,KAAKi8G,eAAegyC,eAAettJ,OAC3EX,KAAKi8G,eAAe+xC,iBAAmB,EAChChuJ,KAAKi8G,eAAe+xC,iBAAmB,IAC9ChuJ,KAAKi8G,eAAe+xC,iBAAmBhuJ,KAAKi8G,eAAegyC,eAAettJ,OAAS,GAGnFX,KAAKi8G,eAAegyC,eAAettJ,OAAQ,KACrCy/J,EAAYpgK,KAAKi8G,eAAegyC,eAAejuJ,KAAKi8G,eAAe+xC,kBACzEhuJ,KAAKi8G,eAAc77G,EAAA,GAAQJ,KAAKi8G,iBAEjB,IAAXx+D,GACAz9C,KAAKqjD,SAAS+8G,EAAU/+I,IAAK++I,EAAUx+I,QAG3CkqD,GAA0Ba,mBAAmB3sE,KAAK2N,GAAI,CAClDiU,OAAQw+I,EAAUx+I,OAClBP,IAAK++I,EAAU/+I,IACf1N,MAAOysJ,EAAUzsJ,aAIrBm4D,GAA0BgB,qBAAqB9sE,KAAK2N,IAGxD,OAAO3N,KAAKi8G,eAAegyC,eAAettJ,QAU9CnB,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKytJ,yBAEhB,SAAuBtrJ,GACnBnC,KAAKytJ,oBAAsBtrJ,EAC3BnC,KAAKqnB,eAAc,oCAMb+jI,EAAAlrJ,UAAA+0J,YAAV,eACQoL,EAAqB,EACnBthD,EAAgB,GAChBC,EAAkB,GAClBshD,EAAkB,GAExBtgK,KAAKs7J,qBACLt7J,KAAK8lH,cAEL9lH,KAAK6nH,eAAep1G,QAAQ,SAAAyN,GACpBA,EAAIxJ,SACJwJ,EAAIxJ,OAAO4T,QAAS,GAEpBpK,EAAIqlG,aACJrlG,EAAIvN,SAASF,QAAQ,SAAAuwB,GAAS,OAAAA,EAAM1Y,QAAS,MAOrD,IAAK,IAAI9pB,EAAI,EAAGA,EAAIR,KAAKwuJ,SAAS7tJ,OAAQH,IACtC,GAAIR,KAAKwuJ,SAAShuJ,GAAG8pB,SAAWtqB,KAAKwuJ,SAAShuJ,GAAGkW,OAAQ,KAE/C8yG,EAAW/vE,SAASz5C,KAAKwuJ,SAAShuJ,GAAGyQ,MAAO,IAC9CovJ,EAAqB72C,EAAWxpH,KAAKinH,UAAYjnH,KAAK+pH,sBAEtD/pH,KAAKwuJ,SAAShuJ,GAAG8pB,QAAS,EAC1B00F,EAAgBx8G,KAAKxC,KAAKwuJ,SAAShuJ,IACnC8/J,EAAgB99J,KAAKxC,KAAKwuJ,SAAShuJ,MAGnC6/J,GAAsB72C,EACtBzK,EAAcv8G,KAAKxC,KAAKwuJ,SAAShuJ,UAE9BR,KAAKwuJ,SAAShuJ,GAAG8pB,QAAUtqB,KAAKwuJ,SAAShuJ,GAAGkW,OAC/C1W,KAAKwuJ,SAAShuJ,GAAGinH,eAAen9F,OAChCy0F,EAAcv8G,KAAKxC,KAAKwuJ,SAAShuJ,KAEjCR,KAAKwuJ,SAAShuJ,GAAG8pB,QAAS,EAC1B00F,EAAgBx8G,KAAKxC,KAAKwuJ,SAAShuJ,KAGvCw+G,EAAgBx8G,KAAKxC,KAAKwuJ,SAAShuJ,IAIvC8/J,EAAgB3/J,QAChBi+B,QAAQC,KACJ,yHAEAyhI,EAAgBhkJ,IAAI,SAAA4D,GAAO,MAAA,IAAMA,EAAIyJ,OAAS,MAAKlZ,WAAa,0CAKxEzQ,KAAK6nH,eAAiB9I,EACtB/+G,KAAK4nH,iBAAmB5I,EACxBh/G,KAAKmnB,iBAMCikI,EAAAlrJ,UAAAmjD,SAAV,SAAmBhiC,EAAmBO,EAAsB2+I,GAA5D,IAAA3rJ,EAAA5U,UAA4D,IAAAugK,IAAAA,EAAevgK,KAAKm3G,wBACxEqpD,GAAiB,EAErB,GAAIxgK,KAAKmlB,QAA2B,iBAAjB,EAA2B,KACpC3D,EAAW++I,EAAajvJ,QAAQ+P,GAChClG,EAAOM,KAAKmC,MAAM4D,EAAWxhB,KAAKsnB,SAEpCtnB,KAAKmb,OAASA,IACdqlJ,GAAiB,EACjBxgK,KAAKmb,KAAOA,GAIhBqlJ,EACAxgK,KAAKg4H,wBAAwBz5E,cAAc1Z,KAAK8G,EAAAA,SAAS5G,UAAU,WAC/DnwB,EAAK6rJ,gBAAgB7rJ,EAAKojH,wBACL,iBAAjB,EAA4B32G,EAAMzM,EAAK8jH,SAASpnH,QAAQ+P,MAGhErhB,KAAKygK,gBAAgBzgK,KAAKg4H,wBACL,iBAAjB,EAA4B32G,EAAMrhB,KAAK04H,SAASpnH,QAAQ+P,IAGhErhB,KAAK0gK,qBAAqB9+I,IAMpBwpI,EAAAlrJ,UAAAwgK,qBAAV,SAA+B9+I,OACvBE,EAAgC,iBAAXF,EAAsBA,EAAS5hB,KAAKy4H,gBAAgB72G,GAAQoI,aAC/E22I,EAAY3gK,KAAKyhB,QAAQnK,KAAK,SAAAlW,GAAK,OAAAA,EAAEk4H,aACrChvE,EAAUq2G,EAAYA,EAAUrnC,WAAa,KAC/Ct5H,KAAK++G,cAAcp+G,OACfmhB,GAAe9hB,KAAK++G,cAAcp+G,SAClCmhB,GAAe9hB,KAAK++G,cAAcp+G,OAClCX,KAAKygK,gBAAgBn2G,EAASxoC,IAGlC9hB,KAAKygK,gBAAgBn2G,EAASxoC,IAO5BspI,EAAAlrJ,UAAAugK,gBAAV,SAA0B3jH,EAAuC8jH,GACxD9jH,GAGLA,EAAUuG,SAASu9G,IAGfxV,EAAAlrJ,UAAAk4J,kBAAR,WAAA,IAAAxjJ,EAAA5U,KACIA,KAAKi8G,eAAegyC,eAAiB,OAE/B9gF,EAAgBntE,KAAKi8G,eAAe9uC,cACpCC,EAAaptE,KAAKi8G,eAAe7uC,WACjCwB,EAAazB,EAAgBntE,KAAKi8G,eAAertC,WAAa5uE,KAAKi8G,eAAertC,WAAWv5D,cAC7Fb,EAAOxU,KAAKm3G,mBACZic,EAAcpzH,KAAK6+G,eAAe7kG,OAAO,SAAC7Y,GAAM,OAACA,EAAEokH,cAAahxG,KAAK,SAACssJ,EAAIC,GAAO,OAAAD,EAAG72I,aAAe82I,EAAG92I,eAEtG+gH,EAAa,IAAIna,GAAwB5wH,KAAKkhF,QAC9CygD,EAAW,IAAIlR,GAAqBzwH,KAAKkhF,QAC/C1sE,EAAK/B,QAAQ,SAACsuJ,GACV3tC,EAAY3gH,QAAQ,SAACtR,OACXgB,EAAQhB,EAAEgpB,UAAYhpB,EAAEgpB,UAAU42I,EAAQ5/J,EAAEgf,QAC/B,WAAfhf,EAAEgc,SAAwB4tH,EAAWvmI,UAAUu8J,EAAQ5/J,EAAEgf,OAAQvL,EAAKssE,QACnD,SAAf//E,EAAEgc,SAAsBwkH,EAASn9H,UAAUu8J,EAAQ5/J,EAAEgf,OAAQvL,EAAKssE,QAC5D6/E,EAAQ5/J,EAAEgf,OACxB,GAAIhe,IAAU6R,WAAuB,OAAV7R,GAAkBhB,EAAEg9G,WAAY,KACnD1e,EAActyB,EAAgB9yD,OAAOlY,GAASkY,OAAOlY,GAAOkT,cAEhE,GAAI+3D,EACIqyB,IAAgB7wB,GAChBh6D,EAAKqnG,eAAegyC,eAAezrJ,KAAK,CACpC6e,IAAK0/I,EACLn/I,OAAQzgB,EAAEgf,MACVxM,MAAO,SAOf,QAHIqtJ,EAAiB,EACjBC,EAAcxhE,EAAYnuF,QAAQs9D,IAEd,IAAjBqyF,GACHrsJ,EAAKqnG,eAAegyC,eAAezrJ,KAAK,CACpC6e,IAAK0/I,EACLn/I,OAAQzgB,EAAEgf,MACVxM,MAAOqtJ,MAIXC,GADAxhE,EAAcA,EAAY55B,UAAUo7F,EAAcryF,EAAWjuE,SACnC2Q,QAAQs9D,SAWnDw8E,EAAAlrJ,UAAA23H,gBAAP,SAAuBqpC,GACnB,OAAOltJ,WAGDo3I,EAAAlrJ,UAAAswJ,qCAAV,SAA+CnvI,GACtCrhB,KAAKmjB,aAAgBnjB,KAAKmhK,oBAAqBnhK,KAAKmhK,kBAAkBhzH,YAGtE9sB,EAGDrhB,KAAK67J,4BAA4Bx6I,GAFjCrhB,KAAKohK,yBAAwB,KAU3BhW,EAAAlrJ,UAAAyxJ,qBAAV,WACI,GAAI3xJ,KAAKqhK,qBAAsB,KAErBjzH,EAAmC,CACrC1J,OAAQ1kC,KAAKshK,cACb1hI,qBAAqB,EACrBH,iBAAkB,IAAIuH,IAErBhnC,KAAKuhK,aACNvhK,KAAKuhK,WAAavhK,KAAKu9B,eAAeC,OAAOx9B,KAAKwhK,eAAgBpzH,GAClEpuC,KAAKu9B,eAAe6D,KAAKphC,KAAKuhK,WAAYnzH,SAG1CpuC,KAAKuhK,aACLvhK,KAAKu9B,eAAeiE,KAAKxhC,KAAKuhK,YAC9BvhK,KAAKuhK,WAAa,OAK9BnW,EAAAlrJ,UAAAkxG,eAAA,SAAezjG,GACX3N,KAAKyhK,2BAA2B9zJ,EAAI3N,KAAKyhB,QAAQ9gB,QA5oLjB,GA8oLhCX,KAAKmhK,kBAAkBhzJ,KAAKnO,KAAKswJ,iBACjCtwJ,KAAKqwJ,2BAA2Br/B,qBAAuBhxH,KAAKqwJ,2BAA2Bt/B,MACvF/wH,KAAKmhK,kBAAkBr9H,QAAQU,iBAAiB,QAASxkC,KAAKkxJ,yBAM3D9F,EAAAlrJ,UAAAwhK,uBAAP,WACI1hK,KAAKmhK,kBAAkBr9H,QAAQuC,oBAAoB,QAASrmC,KAAKkxJ,wBACjElxJ,KAAKqwJ,2BAA2Br/B,qBAAuB,KACvDhxH,KAAKmhK,kBAAkB/yJ,QACvBpO,KAAKmhK,kBAAkBr9H,QAAQ/G,cAAc15B,MAAMg/D,QAAU,IAM1D+oF,EAAAlrJ,UAAAkhK,wBAAP,SAA+BhgI,OACrBugI,EAAW3hK,KAAKmhK,kBAAkBr9H,QAAQzgC,MAE5Cs+J,EAASt/F,QADTjhC,EACmB,QAEA,QAOpBgqH,EAAAlrJ,UAAA27J,4BAAP,SAAmCx6I,GAC/B,GAAIA,IAAQrhB,KAAKmhK,kBAAkBhzH,UAAW,KACpCwzH,EAAW3hK,KAAKmhK,kBAAkBr9H,QAAQ/G,cAAc15B,MAC1Dge,GACAsgJ,EAASt/F,QAAU,GACnBriE,KAAKyhK,2BAA2BpgJ,EAAItG,OACpC/a,KAAKmhK,kBAAkBpgI,cAEvB4gI,EAASt/F,QAAU,SAKvB+oF,EAAAlrJ,UAAAuhK,2BAAR,SAAmC1mJ,EAAY6mJ,QAAA,IAAAA,IAAAA,GAAA,GAC3C5hK,KAAKswJ,gBAAgB5rH,OAASk9H,EAAW5hK,KAAK6hK,yBAA2B7hK,KAAKuwJ,mBAC9EvwJ,KAAKqwJ,2BAA2B/1H,SAAS22F,UAAYjxH,KAAKy+H,MAAMn+F,kBAC1D69F,EAAYn+H,KAAK+nB,QAAQ7G,eAAenG,GACzCojH,IAGLn+H,KAAKqwJ,2BAA2B/1H,SAASt5B,OAASm9H,EAAUr6F,QAAQxD,cACpEtgC,KAAKohK,yBAAwB,KAMjC5hK,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,kBAAe,KAA1B,WACI,IAAKF,KAAK6gB,YAAYQ,IAClB,OAAO,MAELygJ,EAAa9hK,KAAK8b,aAAa6H,mBAAmB3jB,KAAK6gB,YAAYQ,IAAI1T,IAAI,GACjF,OAAOm0J,EAAatiK,OAAOwQ,KAAK8xJ,GAAYnhK,OAAS,mCAG/CyqJ,EAAAlrJ,UAAA6hK,YAAV,SAAsBvgJ,EAAkBrf,GACpCsN,GAAazP,KAAK+nB,QAAQrH,eAAec,GAAWrf,IAGxDipJ,EAAAlrJ,UAAA8hK,kBAAA,SAAkB12H,EAAiBjqB,GAC/BA,EAAIqC,QAAU1jB,KAAK8b,aAAa6H,mBAAmBtC,EAAI1T,IAAI,OAEvDK,EAAOqT,EAAIgB,sBAEVipB,EAIDt9B,EAAOhO,KAAK+nB,QAAQjE,WAAWzC,EAAKA,EAAIqC,UAHxC1jB,KAAKssJ,gBAAgB/pI,KAAKvU,GAC1BhO,KAAK8b,aAAaqI,YAAW,IAI7BnW,EAAKoU,OACLpiB,KAAK8b,aAAa0vB,gBAGtBxrC,KAAK6gB,YAAYswF,aACjBnxG,KAAK0hK,2BAMFtW,EAAAlrJ,UAAA+hK,0BAAP,SAAiC3vJ,GAG7BA,EAAMmyB,mBAcH2mH,EAAAlrJ,UAAAglB,QAAP,SAAeomB,EAAeh5B,QAAf,IAAAg5B,IAAAA,GAAA,OACLjqB,EAAMrhB,KAAK6gB,YAAYQ,IACvBL,EAAOhhB,KAAK6gB,YAAYG,KAG9B,IAAKK,GAAQL,KAEbsqB,EAAStrC,KAAK+nB,QAAQ9F,eAAiBjiB,KAAK+nB,QAAQnH,qBAE/C5gB,KAAKmjB,aAAenjB,KAAKmhK,mBAAqBnhK,KAAKmhK,kBAAkBhzH,YAAc9sB,GAAxF,CAIArhB,KAAKgiK,kBAAkB12H,EAAQjqB,OAEzB6gJ,EAAaliK,KAAK6iB,iBAAiB2tE,cACzC,GAAIl+E,GAAS4vJ,EAAY,KACf1gJ,EAAW0gJ,EAAW7gJ,IACtBg9G,EAAkB6jC,EAAWvvE,OAASuvE,EAAWvvE,OAAOogB,mBAAqBmvD,EAAWtgJ,OAC9F5hB,KAAKuxJ,WAAW/vI,EAAU68G,EAAiB,SAACl9H,GACpCA,EAAEs8G,aAAeoiD,GAAsBtmD,UAAYp4G,EAAEH,QACrDG,EAAEH,OAAOs/B,cAAciT,aAmBvC/zC,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,iCAA8B,KAAzC,eACUsQ,EAAcpB,GAAWpP,KAAK+nB,QAAQrH,gBAO5C,OANI1gB,KAAK8b,aAAawE,SAClB9P,EAAOhO,KAAI3B,MAAX2P,EAAM9N,EAAS1C,KAAK8b,aAAayE,sBAAqB,GACjDvG,OAAO,SAAA1Z,GAAK,OAAAA,EAAE4R,OAASkK,GAAgBlC,MACvCoC,IAAI,SAAAhc,GAAK,OAAAA,EAAE+b,aAGb7L,mCAGXhR,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK8b,aAAawE,QAAUtgB,KAAKwmB,+BAA+B7lB,OAASX,KAAK+nB,QAAQrH,eAAe/f,wCAGzGyqJ,EAAAlrJ,UAAAiiK,oBAAP,WACI,OAAOniK,KAAKulD,WAAavlD,KAAK21J,cAAgB,GAGxCvK,EAAAlrJ,UAAAkiK,kBAAV,SAA4B/gJ,OAGlBghJ,EAAWhhJ,EAAIi4G,WACfgpC,EAAcD,EAAS/iH,YAAYhkB,WAGrCgnI,KAFU7oH,SAAS4oH,EAASjjH,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMo3B,KAAM,IAC7D4nI,EAASr+G,oBAAoBq+G,EAAS9zJ,MAAMonC,aAExE0sH,EAAS7gH,UAAU8gH,IAOjBlX,EAAAlrJ,UAAA8yJ,eAAV,WACI,OAAOhzJ,KAAKktJ,cAMN9B,EAAAlrJ,UAAA+yJ,aAAV,WACI,OAAOjzJ,KAAKmtJ,YAMhB3tJ,OAAAgC,eAAI4pJ,EAAAlrJ,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK2pI,WAAa3pI,KAAKwU,MAAQxU,KAAKwU,KAAK7T,OAAS,mCAMtDyqJ,EAAAlrJ,UAAAq6H,aAAP,SAAoBj5G,GAChB,OAAOA,EAAQ4nC,WAAc5nC,EAAQ4nC,qBAAqB54C,KAI9D9Q,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,6BAA0B,KAArC,WACI,OAAOF,KAAKgyG,eAAiBsI,GAAkBV,0CAInDp6G,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKgyG,eAAiBsI,GAAkBZ,sCAInDl6G,OAAAgC,eAAW4pJ,EAAAlrJ,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAKk+J,gBAAkB5jD,GAAkBZ,sCAI7C0xC,EAAAlrJ,UAAAqiK,kBAAP,SAAyBv0J,OACf24C,EAAU34C,EAAKqR,KAAKsnC,QAC1B,GAA8B,YAA1BA,EAAoB,WAAiB,KAI/B67G,EADMxiK,KAAK87H,cAAcn1E,EAAQhzC,OACfgO,MAAMrK,KAAK,SAAAwF,GAAK,OAAAA,EAAE21B,UACtC+vH,GACAA,EAAY5zG,WAQjBw8F,EAAAlrJ,UAAAuiK,iBAAP,SAAwBz0J,GAAxB,IAAA4G,EAAA5U,KACuC,YAA/BgO,EAAK24C,QAAoB,YAAmB34C,EAAK24C,QAAmB,YAAM34C,EAAKguI,WAAsB,YACrGhuI,EAAKqR,KAAKkjB,iBACJlhB,EAAMrhB,KAAK87H,cAAc9tH,EAAK24C,QAAQhzC,SACjC0N,EAAIM,OACXN,EAAIM,MAAMlP,QAAQ,SAACtR,GACfA,EAAE+8G,cACEtpG,EAAKqnG,eAAertC,WACpBh6D,EAAKqnG,eAAe9uC,cACpBv4D,EAAKqnG,eAAe7uC,eAIpC,GAAIptE,KAAKmiK,sBAAuB,KACtBO,EAAS10J,EAAK24C,QAAQg8G,WACtBC,EAAQ50J,EAAK24C,QAAQhzC,MAC3B3F,EAAKqR,KAAKkjB,oBACJlhB,EAAiB,YAAXqhJ,EAAuB1iK,KAAK87H,cAAc8mC,GAAS,KACzDC,EAAwB,eAAXH,EAA0B1iK,KAAKq5H,iBAAiB/hH,KAAK,SAACwhI,GAAO,OAAAA,EAAGC,eAAiB6pB,IAAS,KACzGvhJ,GAAOA,aAAem9F,GACtBx+G,KAAKoiK,kBAAkB/gJ,GAChBwhJ,GACP7iK,KAAKoiK,kBAAkBS,KAQ5BzX,EAAAlrJ,UAAAm2H,4BAAP,WACSr2H,KAAKszJ,8BACNtzJ,KAAK8rJ,kCAAkCrsH,iBAAiBnF,SAASt5B,OAC7D,KAAcukI,SAAW,KAAcA,SAASjlG,cAAgBtgC,KAAKsgC,cACzEtgC,KAAK8rJ,kCAAkCpnH,OAAS1kC,KAAKq1H,gBAErDr1H,KAAKszJ,4BAA8BtzJ,KAAKu9B,eAAeC,OACnDmmH,GACA3jJ,KAAK8rJ,kCACL,CACInoH,SAAU3jC,KAAKsrJ,QAAQ3nH,SACvBF,yBAA0BzjC,KAAKi+C,WAEvCj+C,KAAKu9B,eAAe6D,KAAKphC,KAAKszJ,4BAA6BtzJ,KAAK8rJ,qCAQjEV,EAAAlrJ,UAAA4iK,6BAAP,SAAoC5Z,GAChC,GAAIlpJ,KAAKszJ,4BAA6B,KAE5ByP,EAD2B/iK,KAAKu9B,eAAe+D,eAAethC,KAAKszJ,6BAChBzxH,aAAqB,SAE1EqnH,GACA6Z,EAAwB7Z,eAE5B6Z,EAAwBt9B,oCAz0LnCzzH,EAAAA,sDA/IQ0/F,UAA6Cf,UAe7C+Z,UAhDA/qG,sCAo3FAxN,EAAAA,OAAMnE,KAAA,CAACm9I,aA/5FZ7nH,EAAAA,kBAOAyD,EAAAA,0CA25FK50B,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBAt6FZmI,EAAAA,yBACAvI,EAAAA,gCASAmiB,EAAAA,uBASArS,EAAAA,wBAiDKwiF,UAGA2F,UA9BL5/F,GAAiBh+B,WAAA,CAAA,CAAAmR,KAo4FZC,EAAAA,OAAMnE,KAAA,CAAC+wB,aA/1FP03G,sCAi2FAvnG,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,0DAtqFvB4C,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,sCAMlEF,EAAAA,UAASzoC,KAAA,CAAC,2BAA4B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,6BAQnEhoC,EAAAA,4BAsBAA,EAAAA,iCAYAA,EAAAA,mCAUAA,EAAAA,8BAIAA,EAAAA,wCAyBAA,EAAAA,8CAuDAgd,EAAAA,uDAiBAA,EAAAA,iDAWAhd,EAAAA,sBAoDAA,EAAAA,sBAwBAA,EAAAA,oBAyBAA,EAAAA,0BA+BAgd,EAAAA,wBAWAhd,EAAAA,6BAgCAgd,EAAAA,mCAUAhd,EAAAA,4BAWAA,EAAAA,6BAwBAA,EAAAA,gCAcAA,EAAAA,4BAeAA,EAAAA,2BAiCAA,EAAAA,sBA2BAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iBAAc,CAAAkE,KAC1BvD,EAAAA,yBAuBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,8BAYZW,EAAAA,0BA8BAA,EAAAA,yBAUAA,EAAAA,yBAWAA,EAAAA,2BAwBAA,EAAAA,0BAkBAA,EAAAA,gCAUAA,EAAAA,yBAoBAA,EAAAA,wCAsCAA,EAAAA,iCAmBAA,EAAAA,6BAWAA,EAAAA,kCA6BAA,EAAAA,8BAUAA,EAAAA,sCAoCAA,EAAAA,0BA+BAA,EAAAA,+BA6BAA,EAAAA,sCAyBAA,EAAAA,8BA4BAA,EAAAA,0CA+BAA,EAAAA,2BAiBAgd,EAAAA,4BAeAA,EAAAA,qCAeAA,EAAAA,gCAeAA,EAAAA,iCAkCAA,EAAAA,gCAiCAA,EAAAA,2BAmCAA,EAAAA,+BA+BAA,EAAAA,0BAqCAA,EAAAA,gCAmCAA,EAAAA,6BAkBAA,EAAAA,8BAeAA,EAAAA,gCAgBAA,EAAAA,6BAeAA,EAAAA,2BAgBAA,EAAAA,6BAgBAA,EAAAA,8BA4BAA,EAAAA,gCAgBAA,EAAAA,8BAgBAA,EAAAA,8BAgBAA,EAAAA,0CAeAA,EAAAA,oCAeAA,EAAAA,+BAgBAA,EAAAA,kCAgBAA,EAAAA,8BAgBAA,EAAAA,+BAOAA,EAAAA,6BAOAA,EAAAA,2BAOAA,EAAAA,2BAMA8qB,EAAAA,UAASzoC,KAAA,CAAC6uI,GAA+B,CAAElmG,UAAQ,4BAMnDF,EAAAA,UAASzoC,KAAA,CAAC,iBAAkB,CAAE2oC,UAAQ,2BAMtCF,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE0oC,KAAM/G,GAA2BgH,UAAQ,wBAMhFyV,EAAAA,gBAAep+C,KAAA,CAACu0G,GAAoB,CAAE7rE,KAAM6rE,GAAoBj2D,aAAa,gDAM7EH,EAAAA,aAAYn+C,KAAA,CAAC64H,GAAuC,CAAEnwF,KAAMmwF,GAAuClwF,UAAQ,+CAM3GwV,EAAAA,aAAYn+C,KAAA,CAAC84H,GAAsC,CAAEpwF,KAAMowF,GAAsCnwF,UAAQ,+CAMzGwV,EAAAA,aAAYn+C,KAAA,CAAC+4H,GAAsC,CAAErwF,KAAMqwF,GAAsCpwF,UAAQ,gDAMzGwV,EAAAA,aAAYn+C,KAAA,CAACg5H,GAAuC,CAAEtwF,KAAMswF,GAAuCrwF,UAAQ,sDAM3GwV,EAAAA,aAAYn+C,KAAA,CAACy0H,GAA6C,CAAE/rF,KAAM+rF,GAA6C9rF,UAAQ,0BAMvH+mC,EAAAA,aAAY1vE,KAAA,CAACsiI,GAA6B,CAAE55F,KAAM45F,uBAoClD5yD,EAAAA,aAAY1vE,KAAA,CAAC,gCAGb0vE,EAAAA,aAAY1vE,KAAA,CAAC,aAAc,CAAE0oC,KAAMwiG,2BAsCnCx7D,EAAAA,aAAY1vE,KAAA,CAACwwG,GAAiB,CAAE9nE,KAAM8nE,wCA+BtC/nE,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,sCAU5DF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,wCAG3DF,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,2BAM7DF,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE0oC,KAAMoS,GAAuBnS,UAAQ,2CAkBpEyV,EAAAA,gBAAep+C,KAAA,CAACwoH,GAAsC,CAAE9/E,KAAM8/E,GAAsClqE,aAAa,oCAmBjHF,EAAAA,gBAAep+C,KAAA,CAACs7I,GAA0B,CAAE5yG,KAAM4yG,GAA0Bh9F,aAAa,mCAmBzFF,EAAAA,gBAAep+C,KAAA,CAACo7I,GAAyB,CAAE1yG,KAAM0yG,GAAyB98F,aAAa,sCAOvFF,EAAAA,gBAAep+C,KAAA,CAACi9I,GAA0B,CAAEv0G,KAAMkS,EAAAA,YAAa0D,aAAa,wCAO5EF,EAAAA,gBAAep+C,KAAA,CAACg9I,GAA+B,CAAEt0G,KAAMkS,EAAAA,YAAa0D,aAAa,qCAejF7V,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE0oC,KAAMoS,GAAuBnS,UAAQ,4BAM5EF,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE0oC,KAAMoS,GAAuBnS,UAAQ,iBAMzEF,EAAAA,UAASzoC,KAAA,CAAC,MAAO,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,oBAM7CF,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,6BAMhDF,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE0oC,KAAMoS,GAAuBnS,UAAQ,qCAM/DF,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE2oC,UAAQ,iCAM/CF,EAAAA,UAASzoC,KAAA,CAAC,sBAAuB,CAAE2oC,UAAQ,kCAM3CF,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE2oC,UAAQ,0BAM5CF,EAAAA,UAASzoC,KAAA,CAAC,eAAgB,CAAE0oC,KAAMomG,GAA8BnmG,UAAQ,sBAMxEF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,mBAMhCF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,mBAM7BF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,8BAO7BF,EAAAA,UAASzoC,KAAA,CAAC,4BAA6B,CAAE0oC,KAAM/G,GAA2BgH,UAAQ,uCAalFF,EAAAA,UAASzoC,KAAA,CAAC,6BAA8B,CAAE0oC,KAAM/G,GAA2BgH,UAAQ,wBAMnF+mC,EAAAA,aAAY1vE,KAAA,CAACwsI,GAA4B,CAAE9jG,KAAM8jG,oCAsBjD/jG,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,oCAMhEF,EAAAA,UAASzoC,KAAA,CAAC,yBAA0B,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,2BAMjEwV,EAAAA,aAAYn+C,KAAA,CAACyoH,GAA6B,CAAE//E,KAAMkS,EAAAA,YAAajS,UAAQ,yBAQvEwV,EAAAA,aAAYn+C,KAAA,CAAC0oH,GAAyB,CAAEhgF,KAAMkS,EAAAA,YAAajS,UAAQ,4BAInEwV,EAAAA,aAAYn+C,KAAA,CAAC2oH,GAA4B,CAAEjgF,KAAMkS,EAAAA,YAAajS,UAAQ,0CAOvEwV,EAAAA,aAAYn+C,KAAA,CAACy7I,GAAkC,CAAE/yG,KAAMkS,EAAAA,YAAajS,UAAQ,2CAM5EwV,EAAAA,aAAYn+C,KAAA,CAAC07I,GAAmC,CAAEhzG,KAAMkS,EAAAA,YAAajS,UAAQ,2CAM7EwV,EAAAA,aAAYn+C,KAAA,CAAC27I,GAAmC,CAAEjzG,KAAMkS,EAAAA,YAAajS,UAAQ,6CAM7EwV,EAAAA,aAAYn+C,KAAA,CAAC47I,GAAqC,CAAElzG,KAAMkS,EAAAA,YAAajS,UAAQ,gCA+B9E+mC,EAAAA,aAAY1vE,KAAA,CAAC4oH,+BAMbxqE,EAAAA,gBAAep+C,KAAA,CAAC4oH,+BAchBngF,EAAAA,UAASzoC,KAAA,CAAC2/B,GAAoB,CAAEgJ,UAAQ,sBAMxCxH,EAAAA,YAAWnhC,KAAA,CAAC,oCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gCAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCAgCZW,EAAAA,wCA8BAgd,EAAAA,kCAkCAhd,EAAAA,iCA2BAA,EAAAA,uBAsDA8nC,EAAAA,UAASzoC,KAAA,CAAC,UAAW,CAAE0oC,KAAM09E,GAAyBz9E,UAAQ,yBAG9DF,EAAAA,UAASzoC,KAAA,CAAC,UAAW,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,yBAWjDhoC,EAAAA,4BA6BAA,EAAAA,2BA6BAA,EAAAA,yBA6BAA,EAAAA,0BA6BAA,EAAAA,+BA6BAA,EAAAA,6BA6BAA,EAAAA,gCAwBAA,EAAAA,6BAyBAA,EAAAA,4BAwBAA,EAAAA,kCAiCAgd,EAAAA,iCASAA,EAAAA,UAv1EDsnB,EAAAA,CAFC8sE,iGA2BD9sE,EAAAA,CAFC8sE,2GAqFD9sE,EAAAA,CAFC8sE,mHA8ND9sE,EAAAA,CAHC/U,GAAkB,4EAClB6hF,kGAgBD9sE,EAAAA,CAFC8sE,qGAkDD9sE,EAAAA,CAFC8sE,gGA8BD9sE,EAAAA,CAHC8sE,yFAsCD9sE,EAAAA,CAFC8sE,wFAqDD9sE,EAAAA,CAFC8sE,4FA0BD9sE,EAAAA,CAFC8sE,8FAoBD9sE,EAAAA,CAFC8sE,+DAgCD9sE,EAAAA,CAFC8sE,8FAsED9sE,EAAAA,CAFC8sE,gGAsxCD9sE,EAAAA,CAFC8sE,mGAkED9sE,EAAAA,CAFC8sE,oGA6BD9sE,EAAAA,CAFC8sE,oGAsED9sE,EAAAA,CAFC8sE,gGA+BD9sE,EAAAA,CAFC8sE,+FA+BD9sE,EAAAA,CAFC8sE,gGA+BD9sE,EAAAA,CAFC8sE,8FA+BD9sE,EAAAA,CAFC8sE,6FA+BD9sE,EAAAA,CAFC8sE,kGA+BD9sE,EAAAA,CAFC8sE,gGAmDD9sE,EAAAA,CAFC8sE,gGA0BD9sE,EAAAA,CAFC8sE,+FAu7GLqrC,EA50LA,CACmDr3G,ICpOnDivH,GAAA,WAEA,SAAAA,KAKA,2BALClxH,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,kBACVqjC,SAAU,gCAGdixH,EAPA,GCAAC,GAAA,WAUI,SAAAA,EAAoBl7I,GAAA/nB,KAAA+nB,QAAAA,EASxB,OAPIk7I,EAAA/iK,UAAAsE,UAAA,SAAUmJ,EAAYk0D,OACZn/C,EAAiB1iB,KAAK+nB,QAAQpR,KAAK+L,eACzC,OAAOA,EAAem1H,mBAClBn1H,EAAei0H,cACf32I,KAAK+nB,QAAQ3H,yCAZxBuI,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,yBACN4I,MAAM,+CALDjJ,MAkBTsjJ,EAnBA,GCAAC,GAAA,WAOI,SAAAA,EAAmBnxH,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAJMk6C,EAAAA,eAQpBs6G,EARA,GCiBMC,GAAY,MAGdn2G,MAAQ,QACRo2G,OAAS,SACTn2G,IAAM,WAINo2G,OAAS,SACTvqF,KAAO,OACPE,QAAU,UACVD,QAAU,yBAQd,SAAAuqF,IAIYtjK,KAAAujK,mBAA6BvvJ,UAK3BhU,KAAAwjK,gBAAkBL,GAIlBnjK,KAAAyjK,KAAO,IAIPzjK,KAAAipE,OAASk6F,GAITnjK,KAAA0jK,UAAW,EA4HzB,OA1GIlkK,OAAAgC,eAAW8hK,EAAApjK,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKwjK,qBAiBhB,SAA0BrhK,GACtBnC,KAAKwjK,gBAAkBrhK,mCAMjBmhK,EAAApjK,UAAAyjK,aAAV,SAAuBrqJ,EAAa+kE,GAApC,IAAAzpE,EAAA5U,KACIA,KAAKujK,mBAAqBhnH,sBACtB,WAAM,OAAA3nC,EAAKgvJ,uBAAuBhjK,KAAKgU,EAAM0E,EAAK+kE,MAMhDilF,EAAApjK,UAAA0jK,uBAAV,SAAiCtqJ,EAAa+kE,GAA9C,IAAAzpE,EAAA5U,KACIA,KAAKipE,QAAUoV,MACTwlF,EAAcC,GAAoBxqJ,EAAKtZ,KAAKyjK,MAC5CM,EAAgBD,GAAoB9jK,KAAKipE,OAAQjpE,KAAKyjK,MACxDzjK,KAAKgkK,iBAAmBH,GACxB7jK,KAAKikK,eAAe3qJ,GACpB0gC,qBAAqBh6C,KAAKujK,qBACnBvjK,KAAKkkK,eAAeH,EAAeF,EAAaxlF,IACvDr+E,KAAKikK,eAAe3qJ,GACpB0gC,qBAAqBh6C,KAAKujK,sBAE1BvjK,KAAKgkK,eAAiBD,EACtB/jK,KAAKujK,mBAAqBhnH,sBAAsB,WAAM,OAAA3nC,EAAKgvJ,uBAAuBhjK,KAAKgU,EAAM0E,EAAK+kE,OAOhGilF,EAAApjK,UAAAikK,uBAAV,SAAiC7qJ,GAC7BtZ,KAAKipE,OAAS3vD,EACdtZ,KAAKgkK,eAAiBF,GAAoB9jK,KAAKipE,OAAQjpE,KAAKyjK,OAMtDH,EAAApjK,UAAAkkK,cAAV,SAAwBliH,EAAsB8qD,EAAmB3uB,GAC7D,OAAIn8B,EAAe8qD,EACR3uB,GAGHA,GAMJilF,EAAApjK,UAAAgkK,eAAR,SAAuB5qJ,EAAa+qJ,EAAoBhmF,GACpD,OAAOr+E,KAAKskK,sBAAsBhrJ,EAAK+qJ,EAAYhmF,IAASr+E,KAAKukK,sBAAsBjrJ,EAAK+qJ,EAAYhmF,IAWpGilF,EAAApjK,UAAAokK,sBAAR,SAA8BhrJ,EAAa+qJ,EAAoBhmF,GAC3D,OAAO/kE,EAAM+qJ,GAAchmF,EAAO,GAU9BilF,EAAApjK,UAAAqkK,sBAAR,SAA8BjrJ,EAAa+qJ,EAAoBhmF,GAC3D,OAAO/kE,EAAM+qJ,GAAchmF,EAAO,GAO9BilF,EAAApjK,UAAA+jK,eAAR,SAAuB3qJ,GACnBtZ,KAAKipE,OAAS3vD,EACdtZ,KAAKgkK,eAAiBF,GAAoB9jK,KAAKipE,OAAQjpE,KAAKyjK,OAEpEH,KACIkB,GAAiB,EACjBC,GAAmB,EACvBC,GAAA,SAAA5qJ,GAyFI,SAAA4qJ,IAAA,IAAA9vJ,EACIkF,EAAAlZ,KAAAZ,OAAOA,YAIJ4U,EAAA+vJ,SAAW,EAGX/vJ,EAAAqgC,SAAW,iBAUXrgC,EAAAgwJ,SAAU,EAUVhwJ,EAAAqgF,eAAgB,EAShBrgF,EAAA88B,KAAO,cASP98B,EAAAjH,GAAK,kBAAkB62J,KAiBvB5vJ,EAAAiwJ,UAA0BC,GAAa93G,MASvCp4C,EAAAmwJ,gBAAiB,EASjBnwJ,EAAAowJ,SAAU,EAmBVpwJ,EAAA1C,KAAO,UA8DG0C,EAAAqwJ,kBAAoB,IAAI97I,EAAAA,eAiC7C,OAxRmDnR,EAAAA,EAAAA,GAQ/CxY,OAAAgC,eACIkjK,EAAAxkK,UAAA,UAAO,KAeX,WACI,OAAOF,KAAK0jK,cAjBhB,SACYngK,GACRvD,KAAK0jK,SAAWngK,mCAwBpB/D,OAAAgC,eAEIkjK,EAAAxkK,UAAA,MAAG,KAeP,WACI,OAAOF,KAAKyjK,UAlBhB,SAEQyB,GACJllK,KAAKyjK,KAAOyB,mCA6BhB1lK,OAAAgC,eACIkjK,EAAAxkK,UAAA,OAAI,KADR,WAEI,OAAIF,KAAKmlK,MACEnlK,KAAKmlK,MAlPJ,IAqPLnlK,KAAKyjK,UAShB,SAASnqJ,GACLtZ,KAAKmlK,MAAQ7qJ,OAAOhB,oCAoHxB9Z,OAAAgC,eAEIkjK,EAAAxkK,UAAA,QAAK,KAFT,WAGI,OAAOF,KAAKipE,YAShB,SAAU3vD,GAEN,GADAA,EAAMgB,OAAOhB,GACTtZ,KAAKipE,SAAW3vD,IAAOtZ,KAAKi1F,cAAhC,KAIMmwE,EAAeC,GAAsB/rJ,EAAKtZ,KAAKqqB,KACrD,IAAI7O,MAAM4pJ,GAAV,KAGME,EAAgB,CAClBpjH,aAAckjH,EACd9jG,cAAethE,KAAKipE,QAGlB59B,EAAcvxB,EAAA5Z,UAAMkkK,cAAaxjK,KAAAZ,KAACA,KAAKipE,OAAQ3vD,EAAKtZ,KAAKq+E,MAC3Dr+E,KAAK0jK,UAAYpqJ,GAAOtZ,KAAKq+E,KAC7BvkE,EAAA5Z,UAAMyjK,aAAY/iK,KAAAZ,KAAColK,EAAc/5H,GAEjCvxB,EAAA5Z,UAAMikK,uBAAsBvjK,KAAAZ,KAAColK,GAGjCplK,KAAKilK,kBAAkB1iJ,KAAK+iJ,sCAoBhC9lK,OAAAgC,eACWkjK,EAAAxkK,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKkS,OAASqzJ,GAAgBlC,wCAMzC7jK,OAAAgC,eACWkjK,EAAAxkK,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKkS,OAASqzJ,GAAgBzsF,sCAMzCt5E,OAAAgC,eACWkjK,EAAAxkK,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAKkS,OAASqzJ,GAAgBvsF,yCAMzCx5E,OAAAgC,eACWkjK,EAAAxkK,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAKkS,OAASqzJ,GAAgBxsF,6DA1R5CjnC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,iBACVqjC,SAAA,qoBAUCpjC,EAAAA,mBA0BAwgC,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCvD,EAAAA,oBA+BAA,EAAAA,wBAuBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,wCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kCAA+B,CAAAkE,KAC3CvD,EAAAA,6BASAwgC,EAAAA,YAAWnhC,KAAA,CAAC,wCAAqC,CAAAkE,KACjDvD,EAAAA,oBAQAwgC,EAAAA,YAAWnhC,KAAA,CAAC,cAAW,CAAAkE,KACvBvD,EAAAA,kBAQAwgC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,yBAiBAA,EAAAA,8BASAA,EAAAA,uBASAA,EAAAA,oBASAA,EAAAA,oBAUAA,EAAAA,qBAcAwgC,EAAAA,YAAWnhC,KAAA,CAAC,uBAAoB,CAAAkE,KAChCvD,EAAAA,iCAgDAgd,EAAAA,uBAKAwjB,EAAAA,YAAWnhC,KAAA,CAAC,8CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oCAIjB02J,EA5RA,CAImDpB,mBAwf/C,SAAAkC,EAAoBpwG,GAApB,IAAAxgD,EACIkF,EAAAlZ,KAAAZ,OAAOA,YADS4U,EAAAwgD,SAAAA,EAxNHxgD,EAAA6wJ,sBAAwB,IACxB7wJ,EAAA8wJ,wBAA0B,GAIpC9wJ,EAAAqgC,SAAW,mBAeXrgC,EAAAqwJ,kBAAoB,IAAI97I,EAAAA,aAUxBvU,EAAAjH,GAAK,oBAAoB82J,KAUzB7vJ,EAAAqgF,eAAgB,EAShBrgF,EAAAmwJ,gBAAiB,EAkKhBnwJ,EAAA+wJ,cAAgB,GAChB/wJ,EAAAgxJ,eAAiB,EAAInqJ,KAAKoqJ,GAAKjxJ,EAAK+wJ,gBAwDhD,OA9QqD3tJ,EAAAA,EAAAA,GAuEjDxY,OAAAgC,eAAWgkK,EAAAtlK,UAAA,UAAO,KAAlB,WACI,MAAO,CACH09C,UAAW,CAAEz7C,MAAOnC,KAAKmC,MAAO6hK,eAAgBhkK,KAAKgkK,eAAgB35I,IAAKrqB,KAAKqqB,uCAUvF7qB,OAAAgC,eACIgkK,EAAAtlK,UAAA,UAAO,KAeX,WACI,OAAOF,KAAK0jK,cAjBhB,SACYngK,GACRvD,KAAK0jK,SAAWngK,mCAwBpB/D,OAAAgC,eACIgkK,EAAAtlK,UAAA,MAAG,KAkBP,WACI,OAAOF,KAAKyjK,UApBhB,SACQyB,GACJllK,KAAKyjK,KAAOyB,mCAgChB1lK,OAAAgC,eACIgkK,EAAAtlK,UAAA,OAAI,KADR,WAEI,OAAIF,KAAKmlK,MACEnlK,KAAKmlK,MA7lBJ,IAgmBLnlK,KAAKyjK,UAShB,SAASnqJ,GACLtZ,KAAKmlK,MAAQ7qJ,OAAOhB,oCAiBxB9Z,OAAAgC,eACIgkK,EAAAtlK,UAAA,QAAK,KADT,WAEI,OAAOF,KAAKipE,YAShB,SAAU3vD,GAEN,GADAA,EAAMgB,OAAOhB,GACTtZ,KAAKipE,SAAW3vD,IAAOtZ,KAAKi1F,cAAhC,KAIM6wE,EAAqBT,GAAsB/rJ,EAAKtZ,KAAKqqB,KAC3D,IAAI7O,MAAMsqJ,GAAV,KAIMR,EAAgB,CAClBpjH,aAAc4jH,EACdxkG,cAAethE,KAAKipE,QAGlB59B,EAAcvxB,EAAA5Z,UAAMkkK,cAAaxjK,KAAAZ,KAACA,KAAKipE,OAAQ3vD,EAAKtZ,KAAKq+E,MAC3Dr+E,KAAKuD,SAAW+V,GAAOtZ,KAAKq+E,KAC5BvkE,EAAA5Z,UAAMyjK,aAAY/iK,KAAAZ,KAAC8lK,EAAoBz6H,GAEvCrrC,KAAKmkK,uBAAuB2B,GAGhC9lK,KAAKilK,kBAAkB1iJ,KAAK+iJ,sCAezBE,EAAAtlK,UAAA0jK,uBAAP,SAA8BtqJ,EAAa+kE,OAEjC0nF,EAAS,CAAC,CACZC,iBAAkBhmK,KAAKimK,YAAYjmK,KAAKipE,QACxCi9F,cAAgBlmK,KAAKipE,OAASjpE,KAAKylK,sBAAyBzlK,KAAK0lK,yBAClE,CACCM,iBAAkBhmK,KAAKimK,YAAYjmK,KAAKgkK,gBACxCkC,cAAgBlmK,KAAKgkK,eAAiBhkK,KAAKylK,sBAAyBzlK,KAAK0lK,0BAE7E1lK,KAAKmmK,WAAW7lI,cAAc/8B,QAAQwiK,EAAQ,CAC1CpiK,OAAQ,WACRkzB,KAAM,aAGV/c,EAAA5Z,UAAM0jK,uBAAsBhjK,KAAAZ,KAACsZ,EAAK+kE,IAMtC7+E,OAAAgC,eAAWgkK,EAAAtlK,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKwtE,sCAMTg4F,EAAAtlK,UAAAikK,uBAAP,SAA8B7qJ,GAC1BQ,EAAA5Z,UAAMikK,uBAAsBvjK,KAAAZ,KAACsZ,GAE7BtZ,KAAKo1D,SAASluB,SACVlnC,KAAKmmK,WAAW7lI,cAChB,oBACAtgC,KAAKimK,YAAYjmK,KAAKgkK,iBAE1BhkK,KAAKo1D,SAASluB,SACVlnC,KAAKmmK,WAAW7lI,cAChB,iBACCtgC,KAAKgkK,eAAiBhkK,KAAKylK,sBAAyBzlK,KAAK0lK,0BAG1DF,EAAAtlK,UAAA+lK,YAAR,SAAoBG,GAEhB,OAAOpmK,KAAK4lK,eAAkBQ,EAAapmK,KAAK4lK,eAAiB,yBAhRxE9zH,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,mBACVqjC,SAAA,43BAhdAshB,EAAAA,+CAwdClkB,EAAAA,YAAWnhC,KAAA,CAAC,qDAeZ2d,EAAAA,mBASAwjB,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,6BASAwgC,EAAAA,YAAWnhC,KAAA,CAAC,0CAAuC,CAAAkE,KACnDvD,EAAAA,8BASAA,EAAAA,oBAYAA,EAAAA,4BAGAw9C,EAAAA,aAAYn+C,KAAA,CAACk1J,GAAoC,CAAExsH,KAAMwsH,GAAoCvsH,UAAQ,qBAkBrGhoC,EAAAA,mBA0BAA,EAAAA,oBAkCAA,EAAAA,qBAiCAA,EAAAA,0BAwCA8nC,EAAAA,UAASzoC,KAAA,CAAC,SAAU,CAAE2oC,UAAQ,OAsDnC6uH,GA9QqDlC,IAgRrD,SAAgB+B,GAAsBljK,EAAekoB,EAAa4e,GAC9D,YAD8D,IAAAA,IAAAA,EAAA,GACvDxtB,KAAK4O,IAAI5O,KAAKwtB,IAAI9mC,EAAOkoB,GAAM4e,GAG1C,SAAgB66H,GAAoB3hK,EAAekoB,GAC/C,OAAO5O,KAAKmC,MAAM,IAAMzb,EAAQkoB,GAMpC,IAAAg8I,GAAA,WAAA,SAAAA,KAMA,2BANCr3J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACy1J,GAA+Bc,GAAiCtC,IAC/Eh0J,QAAS,CAACw1J,GAA+Bc,GAAiCtC,IAC1EzmH,QAAS,CAACC,EAAAA,kBAGd2pH,EANA,GC/uBAC,GAAA,SAAAxsJ,GAAA,SAAAwsJ,mDAQA,OAD6CtuJ,EAAAA,EAAAA,uBAP5C85B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,wBACVqjC,SAAU,8HAMdu0H,EARA,CAO6C70H,ICP7C80H,GAAA,SAAAzsJ,GAQI,SAAAysJ,IAAA,IAAA3xJ,EAAgBkF,EAAAlZ,KAAAZ,KAAM,OAAKA,YA4CnB4U,EAAA4xJ,YAAc,GACd5xJ,EAAA6xJ,aAAej/B,EAAAA,aAAak/B,QAiDxC,OAnGsD1uJ,EAAAA,EAAAA,GAQlDuuJ,EAAArmK,UAAAusD,cAAA,SAAcn6C,GACV,GAAKA,IAASA,EAAMinF,SAApB,KAIMt4F,EAAMqR,EAAMrR,IAAIoU,cACtB,IAAI/C,EAAMkoE,QAAmB,cAARv5E,GAA+B,YAARA,GAA6B,SAARA,GAA0B,OAARA,EAAnF,CAKA,GAAIjB,KAAKgB,OAAOmtC,UACZ,OAAQltC,GACJ,IAAK,QACL,IAAK,WACL,IAAK,IACL,IAAK,QAGD,OAFAqR,EAAM23B,sBACNjqC,KAAKgB,OAAOmN,OAEhB,IAAK,YACL,IAAK,OAID,OAHAnO,KAAKgB,OAAOk1C,eACZl2C,KAAKgB,OAAOgyC,WAAWhzC,KAAKgB,OAAOoyC,kBACnC9gC,EAAM23B,iBAEV,IAAK,UACL,IAAK,KAID,OAHAjqC,KAAKgB,OAAOm1C,eACZn2C,KAAKgB,OAAOgyC,WAAWhzC,KAAKgB,OAAOoyC,kBACnC9gC,EAAM23B,iBAOlBnwB,EAAA5Z,UAAMusD,cAAa7rD,KAAAZ,KAACsS,QA9BhBtS,KAAKgB,OAAO+M,WAuCbw4J,EAAArmK,UAAAymK,WADP,SACkBr0J,GADlB,IAAAsC,EAAA5U,KAII,GAAKsS,GAAUA,EAAMrR,OAAOqR,EAAMrR,IAAIN,OAAS,GAA/C,CAKAX,KAAKymK,aAAav4H,cAClBluC,KAAKymK,aAAeG,EAAAA,MAAM,KAAK7hI,UAAU,WACrCnwB,EAAK4xJ,YAAc,KAEvBxmK,KAAKwmK,aAAel0J,EAAMrR,QACpBmyC,EAAcpzC,KAAKgB,OAAkB,YAGvCoyC,GAAepzC,KAAKwmK,YAAY7lK,OAAS,GAAKyyC,EAAYkwG,SAASjuI,cAAcg/D,WAAWr0E,KAAKwmK,YAAYnxJ,gBAGjHrV,KAAK6mK,mBAAmB7mK,KAAKwmK,eAG1BD,EAAArmK,UAAA2mK,mBAAP,SAA0Br5F,OAChB96B,EAAQ1yC,KAAKgB,OAAY,MACzB8lK,EAAkBp0H,EAAMphC,QAAQtR,KAAKgB,OAAkB,cAA+B,EAExF+lK,EAAWr0H,EAAM76B,MAAMivJ,EAAkB,GAAGxvJ,KAAK,SAAAwF,GAAK,OAACA,EAAE80B,UAAa90B,EAAEwmI,SAASjuI,cAAcg/D,WAAW7G,EAAKn4D,iBAE9G0xJ,IACDA,EAAWr0H,EAAM76B,MAAM,EAAGivJ,GAAiBxvJ,KAAK,SAAAwF,GAAK,OAACA,EAAE80B,UAAa90B,EAAEwmI,SAASjuI,cAAcg/D,WAAW7G,EAAKn4D,kBAG7G0xJ,IAID/mK,KAAKgB,OAAOmtC,WACZnuC,KAAKgB,OAAOgyC,WAAW+zH,GAE3B/mK,KAAKgB,OAAO00C,aAAahD,EAAMphC,QAAQy1J,MAG3CR,EAAArmK,UAAAsmC,YAAA,WACIxmC,KAAKymK,aAAav4H,mCApGzBz/B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sGAITC,EAAAA,MAAKX,KAAA,CAAC,+CAmDNY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cA8C5Bu4J,EAtGA,CAGsDh6G,ICMtDy6G,GAAA,WAAA,SAAAA,KAS+B,2BAT9Bh4J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACo0I,GAAoB/C,GAAwBimB,GACvDnjB,GAA8BkjB,IAClCp3J,QAAS,CAACm0I,GAAoB/C,GAAwBimB,GACjDnjB,GAA8BkjB,IACnC7pH,QAAS,CAACquB,GAAiBpuB,EAAAA,aAAciV,GAAqBigC,EAAAA,YAAaqR,EAAAA,oBACvErzD,GAAiBmd,GAAmBuG,GAAiBokB,IACzDvoE,UAAW,OAEgB63J,EAT/B,kBCqKI,SAAAC,EAA+DpyH,GAA/D,IAAAjgC,EAEIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAF8B4U,EAAAigC,uBAAAA,EAjKrDjgC,EAAAu5I,MAAQ,EAGVv5I,EAAAsyJ,oBAAsB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,KAC7CtyJ,EAAAs5I,SAAW,GAuGdt5I,EAAAuyJ,cAAe,EAUfvyJ,EAAAwyJ,aAAc,EAUdxyJ,EAAAyyJ,iBAAkB,EAUlBzyJ,EAAA0yJ,gBAAiB,EAWjB1yJ,EAAA2yJ,YAAcz2B,GAAuBsF,oBAAoBC,oBAMzDzhI,EAAAu3I,cAAgB,IAAIhjI,EAAAA,aAKpBvU,EAAAs3I,WAAa,IAAI/iI,EAAAA,eA+E5B,OApP2CnR,EAAAA,EAAAA,GAgBvCxY,OAAAgC,eACWylK,EAAA/mK,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKwyC,iBAAmB2B,GAAeR,sCAGlDn0C,OAAAgC,eACWylK,EAAA/mK,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKwyC,iBAAmB2B,GAAeP,yCAGlDp0C,OAAAgC,eACWylK,EAAA/mK,UAAA,mBAAgB,KAD3B,WAEI,OAAOF,KAAKwyC,iBAAmB2B,GAAeT,6CAWlDl0C,OAAAgC,eACWylK,EAAA/mK,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKmuJ,WAGhB,SAAgBhsJ,GACZnC,KAAKmuJ,MAAQhsJ,EACbnC,KAAKksJ,WAAW3pI,KAAKviB,KAAKmuJ,wCAW9B3uJ,OAAAgC,eACWylK,EAAA/mK,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAKkuJ,cAGhB,SAAmB/rJ,GACfnC,KAAKkuJ,SAAW5zI,OAAOnY,GACvBnC,KAAKmsJ,cAAc5pI,KAAKviB,KAAKkuJ,UAC7BluJ,KAAKwnK,eAAiBxnK,KAAKynK,kBAAkBznK,KAAKknK,oBAAqBlnK,KAAKkuJ,UAC5EluJ,KAAK0nB,WAAajM,KAAKC,KAAK1b,KAAK0nK,aAAe1nK,KAAKkuJ,UACjDluJ,KAAKmuJ,OAASnuJ,KAAK0nB,aACnB1nB,KAAKmuJ,MAAQnuJ,KAAK0nB,WAAa,oCAWvCloB,OAAAgC,eACWylK,EAAA/mK,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAK2nK,mBAGhB,SAAwBxlK,GACpBnC,KAAK2nK,cAAgBxlK,EACrBnC,KAAK0nB,WAAajM,KAAKC,KAAK1b,KAAK0nK,aAAe1nK,KAAKsnB,0CAUzD9nB,OAAAgC,eACWylK,EAAA/mK,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKwnK,oBAGhB,SAAyBrlK,GACrBnC,KAAKwnK,eAAiBxnK,KAAKynK,kBAAkBtlK,EAAOnC,KAAKkuJ,UACzDluJ,KAAKknK,oBAAmBxkK,EAAO1C,KAAKwnK,iDA2ExChoK,OAAAgC,eAAIylK,EAAA/mK,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKmb,KAAO,GAAKnb,KAAK0nB,4CASjCloB,OAAAgC,eAAIylK,EAAA/mK,UAAA,cAAW,KAAf,WACI,OAAqB,IAAdF,KAAKmb,sCAGR8rJ,EAAA/mK,UAAAunK,kBAAR,SAA0B/xI,EAAuBkyI,GAC7C,OAAOjoK,MAAMuT,KAAK,IAAI3C,IAAG7N,EAAKgzB,EAAM,CAAEkyI,MAAarzJ,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAI3V,KAOnE0nK,EAAA/mK,UAAA2nK,8BAAP,WACI,OAAI7nK,KAAKwyC,iBAAmB2B,GAAeT,YAChCS,GAAeR,KAEnBQ,GAAeP,SASnBqzH,EAAA/mK,UAAAi2J,SAAP,WACSn2J,KAAKo2J,aACNp2J,KAAKmb,MAAQ,IAUd8rJ,EAAA/mK,UAAAm2J,aAAP,WACSr2J,KAAKs2J,cACNt2J,KAAKmb,MAAQ,IAWd8rJ,EAAA/mK,UAAAm3J,SAAP,SAAgB/9I,GACRA,EAAM,GAAKA,EAAMtZ,KAAK0nB,WAAa,IAGvC1nB,KAAKmb,KAAO7B,wBAtPnBw4B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,gBACVqjC,SAAA,6rDAyKa7C,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,4CAvJ/B1E,EAAAA,YAAWnhC,KAAA,CAAC,mDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qCAaZW,EAAAA,uBAkBAA,EAAAA,4BAsBAA,EAAAA,6BAiBAA,EAAAA,4BAgBAA,EAAAA,2BAUAA,EAAAA,+BAUAA,EAAAA,8BAUAA,EAAAA,2BAWAA,EAAAA,6BAMAgd,EAAAA,2BAKAA,EAAAA,UAgFLs7I,GApP2ClzH,kBAsP3C,SAAA+zH,KAKkC,2BALjC94J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACg4J,IACf/3J,QAAS,CAAC+3J,IACVxqH,QAAS,CAACC,EAAAA,aAAcsqH,GAAiBp1E,EAAAA,YAAala,GAAepkB,GAAiBwX,QAExDg9F,KC/PlCC,GAAA,WAAA,SAAAA,KAsBA,OAjBIA,EAAA7nK,UAAAsE,UAAA,SAAUyyC,EAAqC90C,EAAYqS,EAAW2L,EAAexM,WACjF,IAAKsjC,EACD,MAAO,OAGLzmC,EAAS,OAEf,IAAuB,IAAAV,EAAAC,EAAAvQ,OAAOwQ,KAAKinC,IAAWhnC,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA3C,IAAM+yC,EAAQhlC,EAAA9N,MACT6lK,EAAkB/wH,EAAWhC,IACM,mBAApB+yH,EAAiCA,EAAgBxzJ,EAAM2L,EAAOhe,EAAOwR,GAASq0J,IAE/Fx3J,EAAOhO,KAAKyyC,wGAIpB,OAAOzkC,EAAOokB,KAAK,0BApB1BjM,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,0BAqBV+nJ,EAtBA,GA4BAE,GAAA,WAAA,SAAAA,KAkBA,OAbIA,EAAA/nK,UAAAsE,UAAA,SAAU0jK,EAAiC/lK,EAAYqS,EAAW2L,EAAexM,WACvEw0J,EAAM,GACZ,IAAKD,EACD,OAAOC,MAGX,IAAmB,IAAAr4J,EAAAC,EAAAvQ,OAAOwQ,KAAKk4J,IAAOj4J,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAnC,IAAMwrC,EAAIz9B,EAAA9N,MACLyT,EAAMsyJ,EAAOx6H,GACnBy6H,EAAIz6H,GAAuB,mBAAR93B,EAAqBA,EAAIpB,EAAM2L,EAAOhe,EAAOwR,GAASiC,uGAG7E,OAAOuyJ,uBAhBdx/I,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,oBAiBVioJ,EAlBA,GAwBAG,GAAA,WAAA,SAAAA,KAQA,OAHIA,EAAAloK,UAAAsE,UAAA,SAAUrC,GACN,OAAOA,EAAM6X,OAAO,SAAAiC,GAAQ,OAACA,EAAKspG,mCANzC58F,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,oBAOVooJ,EARA,iBAUA,SAAAC,KAQA,OAHIA,EAAAnoK,UAAAsE,UAAA,SAAUrC,GACN,OAAOA,EAAM6X,OAAO,SAAAiC,GAAQ,OAAe,IAAfA,EAAKvI,6BANxCiV,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,kBAOVqoJ,KAIAC,GAAA,WAAA,SAAAA,KASA,OAHWA,EAAApoK,UAAAsE,UAAP,SAAiBrC,GACb,OAAOA,EAAM4Q,MAAM,aAAa6hB,KAAK,0BAP5CjM,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,kBACN4I,MAAM,MAOV0/I,EATA,GAYAC,GAAA,WAMI,SAAAA,EAAoBxgJ,GAAA/nB,KAAA+nB,QAAAA,EAcxB,OAZIwgJ,EAAAroK,UAAAsE,UAAA,SAAUoY,EAAmBjP,EAAYwa,OAC/BxR,EAA6B3W,KAAK+nB,QAAQpR,KAEhD,OAAKA,EAAKmF,aAAawE,QACJ9F,GAASqB,kBACpBzM,GAAWwN,GACXjG,EAAKmF,aAAayE,sBAAqB,GACvC5J,EAAKoF,YAGNa,uBAlBd+L,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,kBACN4I,MAAM,+CAjGDjJ,MAmHT4oJ,EApBA,GAuBAC,GAAA,WAAA,SAAAA,KAQA,OAHWA,EAAAtoK,UAAAsE,UAAP,SAAiBkxB,GACb,OAAO/1B,MAAMuT,KAAK,IAAI3C,IAAG7N,EAAKgzB,KAAUnhB,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAI3V,yBANlEopB,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,mBACN4I,MAAM,MAMV4/I,EARA,iBAUA,SAAAC,KAYA,OAPIA,EAAAvoK,UAAAsE,UAAA,SAAUkxB,EAAe87H,GACrB,OAAM97H,GAAUA,EAAO/0B,OAGhB6wJ,EAAoB97H,EAAS,GAFzBA,uBAPlB/M,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,iBACN4I,MAAM,MAUV6/I,KC7IAC,GAAA,WAcA,SAAAA,KA6BkC,2BA7BjC15J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVwhH,GACAG,GACA03C,GACAC,GACAH,GACAC,GACAJ,GACAF,GACAS,GACAC,IAEJv5J,QAAS,CACLuhH,GACAG,GACA03C,GACAC,GACAH,GACAC,GACAJ,GACAF,GACAS,GACAC,IAEJhsH,QAAS,CACLC,EAAAA,kBAG0BgsH,EA3ClC,GCQAC,GAAA,WAoBI,SAAAA,KAyDJ,OAvDInpK,OAAAgC,eAAYmnK,EAAAzoK,UAAA,iBAAc,KAA1B,WACI,OAAOF,KAAK2W,KAAKkoG,eAAe7kG,OAAO,SAAAkG,GAAO,QAAEA,aAAe8pG,uCAGnExqH,OAAAgC,eAAImnK,EAAAzoK,UAAA,iBAAc,KAAlB,WACI,OAAoC,IAA7BF,KAAK4hB,OAAOoI,cACqC,IAAnDhqB,KAAK2W,KAAKqoG,gBAAgB1tG,QAAQtR,KAAK4hB,SAAiB5hB,KAAK4hB,OAAOihG,gBACjB,IAAnD7iH,KAAK2W,KAAKqoG,gBAAgB1tG,QAAQtR,KAAK4hB,UAAkB5hB,KAAKioI,kBACxC,IAAtBjoI,KAAK4hB,OAAOlO,QAAgB1T,KAAK4oK,WAAW,EAAG5oK,KAAK6+G,iDAG7Dr/G,OAAAgC,eAAImnK,EAAAzoK,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK4hB,OAAOoI,eAAiBhqB,KAAK6+G,eAAel+G,OAAS,GACtC,IAAtBX,KAAK4hB,OAAOlO,QAAgB1T,KAAK4oK,WAAW,EAAG5oK,KAAK6+G,iDAGtD8pD,EAAAzoK,UAAA2oK,oBAAP,SAA2BC,OACnBhhD,EACA9nH,KAAK4hB,OAAO0I,OACRtqB,KAAK4hB,OAAO2oG,cAAkC,IAAlBu+C,GAC5BhhD,EAAe9nH,KAAK2W,KAAKqoG,gBAAgB,GACzC8pD,EAAgB,GAEhBhhD,EAAe9nH,KAAK4oK,WAAWE,EAAe9oK,KAAK2W,KAAKooG,eAEF,IAAnD/+G,KAAK2W,KAAKqoG,gBAAgB1tG,QAAQtR,KAAK4hB,SAAmC,IAAlBknJ,IAC/DhhD,EAAe9nH,KAAK2W,KAAKooG,cAAc/+G,KAAK2W,KAAKooG,cAAcp+G,OAAS,IACvD+V,SACboxG,EAAeA,EAAaL,gBAEhCqhD,EAAgB,GAEhBhhD,EAAe9nH,KAAK4oK,WAAWE,EAAe9oK,KAAK2W,KAAKqoG,iBAE5Dh/G,KAAK2W,KAAK45G,WAAWvwH,KAAK4hB,OAAQkmG,EAAcghD,IAG5CH,EAAAzoK,UAAA0oK,WAAR,SAAmBE,EAAuBvjJ,OAClC5R,EAAQ4R,EAAQjU,QAAQtR,KAAK4hB,QACjC,GAAsB,IAAlBknJ,GACA,KAAOn1J,EAAQ,GAEX,GAAI4R,IADJ5R,GACmBD,QAAU1T,KAAK4hB,OAAOlO,OAAS6R,EAAQ5R,GAAO+C,SAAW1W,KAAK4hB,OAAOlL,OACpF,OAAO6O,EAAQ5R,QAIvB,KAAOA,EAAQ4R,EAAQ5kB,OAAS,GAE5B,GAAI4kB,IADJ5R,GACmBD,QAAU1T,KAAK4hB,OAAOlO,OAAS6R,EAAQ5R,GAAO+C,SAAW1W,KAAK4hB,OAAOlL,OACpF,OAAO6O,EAAQ5R,wBAxElCm+B,EAAAA,UAAS9jC,KAAA,CAAC,CACPqwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrB9mF,SAAU,gCACVqjC,SAAA,ikCAICpjC,EAAAA,oBAGAA,EAAAA,8BAGAA,EAAAA,gCAGAA,EAAAA,SA4DLg6J,EA7EA,GCAAI,GAAA,SAAAjvJ,GAYI,SAAAivJ,EAA+Dl0H,GAA/D,IAAAjgC,EACIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAD8B4U,EAAAigC,uBAAAA,IAGnE,OAf0C78B,EAAAA,EAAAA,wEAYzBk3B,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,SAGpCk1H,EAfA,CAA0Ch1H,QAiBZ+gB,KAAA,EAAMglB,KAAA,EAAMC,MAAA,8DAE1C,IAAAivF,GAAA,WAII,SAAAA,EAAmBj3H,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8DA5BMk6C,EAAAA,eAgCpBogH,EALA,iBAWI,SAAAC,EAAmBl3H,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gEAnCMk6C,EAAAA,eAuCpBqgH,mBAMI,SAAAC,EAAmBn3H,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wEA1CMk6C,EAAAA,eA8CpBsgH,mBAMI,SAAAC,EAAmBp3H,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yEAjDMk6C,EAAAA,eAqDpBugH,KCnBAC,GAAA,WA8CI,SAAAA,EACW3S,EACCp2H,EACAgF,GAFDrlC,KAAAy2J,KAAAA,EACCz2J,KAAAqgC,WAAAA,EACArgC,KAAAqlC,UAAAA,EAtCJrlC,KAAAqpK,UAA6BC,GAAgBx0G,KAK7C90D,KAAAupK,UAAY,EAKZvpK,KAAAoyC,OAAiB,KAKjBpyC,KAAAwpK,WAAaF,GAAgBx0G,KAmD9B90D,KAAA6pB,QAAS,EAkCT7pB,KAAAogD,YAAc,QA0SzB,OAnUI5gD,OAAAgC,eACW4nK,EAAAlpK,UAAA,OAAI,KADf,WAEI,OAAOF,KAAK82B,SAAW,YAAc,4CAgCzCt3B,OAAAgC,eACI4nK,EAAAlpK,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK82B,0CAUhBt3B,OAAAgC,eACI4nK,EAAAlpK,UAAA,aAAU,KADd,WAEI,OAAQF,KAAK82B,0CAUjBt3B,OAAAgC,eACI4nK,EAAAlpK,UAAA,UAAO,KADX,WAEI,OAAOF,KAAK6pB,OAAS,OAAS,oCAOlCu/I,EAAAlpK,UAAAyyC,QADA,SACQoF,GACJ/3C,KAAKy2J,KAAKgT,cAAclnJ,KAAK,CAAEtG,KAAMjc,KAAMsS,MAAOylC,EAAKvwC,UAAWxH,KAAKwpK,aACvExpK,KAAKwpK,WAAaF,GAAgBx0G,MAOtCs0G,EAAAlpK,UAAAwpK,SADA,SACSvpI,GACDngC,KAAK2pK,OAAO3pK,KAAK82B,WAGhB92B,KAAK2pK,OAAO3pK,KAAKy2J,KAAKmT,mBAAsB5pK,KAAK2pK,OAAO3pK,KAAKy2J,KAAKoT,oBAS3ET,EAAAlpK,UAAA4pK,QADA,SACQ3pI,GACJ,IAAIngC,KAAK2pK,OAAO3pK,KAAK82B,YAGhB92B,KAAK2pK,OAAO3pK,KAAKy2J,KAAKmT,mBAAsB5pK,KAAK2pK,OAAO3pK,KAAKy2J,KAAKoT,oBAAvE,KAGME,EAAkB5pI,EAAG8Y,OAAS,EAChC8wH,GAAmB/pK,KAAK2pK,OAAO3pK,KAAKy2J,KAAKmT,mBACzC5pK,KAAKgqK,sBACLhqK,KAAKiqK,sBAAsBxuJ,KAAK4O,IAAIrqB,KAAKkqK,QAAS/pI,EAAG8Y,WAC7C8wH,GAAmB/pK,KAAK2pK,OAAO3pK,KAAKy2J,KAAKoT,qBACjD7pK,KAAKmqK,uBACLnqK,KAAKiqK,sBAAsBxuJ,KAAKwtB,IAAIjpC,KAAKooJ,SAAUjoH,EAAG8Y,YAQ9DmwH,EAAAlpK,UAAAkqK,OADA,SACOjqI,GACH,IAAIngC,KAAK2pK,OAAO3pK,KAAK82B,YAGhB92B,KAAK2pK,OAAO3pK,KAAKy2J,KAAKmT,mBAAsB5pK,KAAK2pK,OAAO3pK,KAAKy2J,KAAKoT,oBAAvE,KAKMQ,EAAiBrqK,KAAKupK,UACtBe,EAAsBtqK,KAAKiR,MAAQjR,KAAKy2J,KAAK8T,0BAEnD,GAAuB,IAAnBF,EAAJ,KAIM51J,EAAM41J,EAAiB,EAAIf,GAAgBvvF,MAAQuvF,GAAgBxvF,KACzE95E,KAAKwpK,WAAa/0J,MAEZ+1J,EAAcxqK,KAAKqpK,UACzB,GAAI5tJ,KAAKutB,IAAIqhI,GAAkBC,EAI3B,OAHAtqK,KAAKiqK,sBAAsB,GAC3BjqK,KAAKqpK,UAAYC,GAAgBx0G,UACjC90D,KAAKyqK,mCAIHz8J,EAAO,CAAEiO,KAAMjc,KAAMwH,UAAWiN,EAAKi2J,UAAU,GAqBrD,GAnBIj2J,IAAQ60J,GAAgBxvF,KACxB95E,KAAKy2J,KAAKkU,UAAUpoJ,KAAKvU,GAEzBhO,KAAKy2J,KAAKmU,WAAWroJ,KAAKvU,IAGR,IAAlBA,EAAK08J,UACL1qK,KAAKiqK,sBAAsB,GAC3BjqK,KAAKqpK,UAAYC,GAAgBx0G,MAE7BrgD,IAAQ60J,GAAgBxvF,MACxB95E,KAAKiqK,sBAAsBjqK,KAAKkqK,SAChClqK,KAAKqpK,UAAYC,GAAgBxvF,OAEjC95E,KAAKiqK,sBAAsBjqK,KAAKooJ,UAChCpoJ,KAAKqpK,UAAYC,GAAgBvvF,OAIrCywF,IAAgBxqK,KAAKqpK,UAAW,KAC1BwB,EAAQ,CAAEC,SAAUN,EAAaO,SAAU/qK,KAAKqpK,UAAWptJ,KAAMjc,MACvEA,KAAKy2J,KAAKuU,iBAAiBzoJ,KAAKsoJ,GAEpC7qK,KAAKyqK,kCAMDrB,EAAAlpK,UAAA8pK,oBAAR,WACIhqK,KAAKirK,mCAAmC,UAAW,WAM/C7B,EAAAlpK,UAAAiqK,qBAAR,WACInqK,KAAKirK,mCAAmC,SAAU,YAM9C7B,EAAAlpK,UAAAuqK,6BAAR,WAAA,IAAA71J,EAAA5U,KACI6rD,WAAW,WACPj3C,EAAKq2J,mCAAmC,SAAU,WACnD,MAMC7B,EAAAlpK,UAAA+qK,mCAAR,SAA2CC,EAAgBC,GACnDnrK,KAAKorK,4BAA8BprK,KAAKorK,2BAA2B9qI,gBACnEtgC,KAAKorK,2BAA2B9qI,cAAcj9B,MAAMw/B,WAAaqoI,GAEjElrK,KAAKqrK,6BAA+BrrK,KAAKqrK,4BAA4B/qI,gBACrEtgC,KAAKqrK,4BAA4B/qI,cAAcj9B,MAAMw/B,WAAasoI,IAW1E3rK,OAAAgC,eAAW4nK,EAAAlpK,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKqpK,2CAUhB7pK,OAAAgC,eACW4nK,EAAAlpK,UAAA,QAAK,KADhB,WAEI,OAAuB,OAAhBF,KAAKoyC,OAAkBpyC,KAAKoyC,OAASpyC,KAAKy2J,KAAK9jJ,SAASC,UAAUtB,QAAQtR,WAUrF,SAAiBmC,GACbnC,KAAKoyC,OAASjwC,mCAUlB3C,OAAAgC,eAAW4nK,EAAAlpK,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,WAAWC,+CAU3B9gC,OAAAgC,eAAW4nK,EAAAlpK,UAAA,iBAAc,KAAzB,eACUorK,EAAatrK,KAAK8jC,QAAQinH,uBAAuB,0BACvD,OAAQugB,GAAcA,EAAW3qK,OAAS,EAAK2qK,EAAW,GAAK,sCAUnE9rK,OAAAgC,eAAW4nK,EAAAlpK,UAAA,UAAO,KAAlB,WACI,MAAO,CACH09C,UAAW59C,uCAWnBR,OAAAgC,eAAW4nK,EAAAlpK,UAAA,QAAK,KAAhB,WACI,GAAIF,KAAK8jC,QACL,OAAO9jC,KAAK8jC,QAAQo1F,6CAW5B15H,OAAAgC,eAAW4nK,EAAAlpK,UAAA,UAAO,KAAlB,WACI,OAAQF,KAAKiR,uCAUjBzR,OAAAgC,eAAW4nK,EAAAlpK,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKiR,uCAMRm4J,EAAAlpK,UAAA+pK,sBAAR,SAA8B9nK,GAC1BnC,KAAKupK,UAAYpnK,EACjBnC,KAAK28B,eAAet5B,MAAMmB,UAAY,cAAgBrC,EAAQ,OAM1DinK,EAAAlpK,UAAAypK,OAAR,SAAexnK,GACX,MAAuB,kBAAnB,EACOA,EAEU,SAAVA,uBAtZlB2vC,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAACmoG,IACZ5oG,SAAU,gBACVqjC,SAAA,q6DACAssE,gBAAiBC,EAAAA,wBAAwBC,oDAvBzCwqD,UAXAzlI,EAAAA,kBAIA+vB,EAAAA,iEA4DC5c,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE2oC,UAAQ,yCASvCF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE2oC,UAAQ,sBAmBxChoC,EAAAA,sBAcAA,EAAAA,oBAUAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gCAeZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAUZmhC,EAAAA,YAAWnhC,KAAA,CAAC,8CAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,8CAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kCAQZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,6BASvBY,EAAAA,aAAYZ,KAAA,CAAC,WAAY,CAAC,4BAa1BY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,2BAqBzBY,EAAAA,aAAYZ,KAAA,CAAC,SAAU,CAAC,0BA6GxBW,EAAAA,SAyGLy6J,EAzZA,GCDI53H,GAAU,EA0Cd+5H,GAAA,WAAA,SAAAA,KAKwC,2BALvC98J,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,yBAG0B68J,EALxC,GAWAC,GAAA,WAAA,SAAAA,KAKqC,2BALpC/8J,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,sBAGuB88J,EALrC,GAWAC,GAAA,WAAA,SAAAA,KAKmC,2BALlCh9J,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,oBAGqB+8J,EALnC,GAWAC,GAAA,WAAA,SAAAA,IAOW1rK,KAAAi1C,SAAW,4BACtB,2BARCxmC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,2DAITygC,EAAAA,YAAWnhC,KAAA,CAAC,sCAEjB09J,EARA,GAcAC,GAAA,WAAA,SAAAA,IAOW3rK,KAAAi1C,SAAW,+BACtB,2BARCxmC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,8DAITygC,EAAAA,YAAWnhC,KAAA,CAAC,yCAEjB29J,EARA,kBAiBI,SAAAC,EAAmB9nI,EACoC+Q,GADvD,IAAAjgC,EAEIkF,EAAAlZ,KAAAZ,KAAM60C,IAAuB70C,YAFd4U,EAAAkvB,QAAAA,EACoClvB,EAAAigC,uBAAAA,EAoFhDjgC,EAAA21J,0BAA4B,GAuB5B31J,EAAAjH,GAAK,YAAY6jC,KAcjB58B,EAAAg1J,kBAAmB,EAcnBh1J,EAAAi1J,mBAAoB,EAepBj1J,EAAA+0H,WAAY,EAWZ/0H,EAAA+1J,UAAY,IAAIxhJ,EAAAA,aAWhBvU,EAAAg2J,WAAa,IAAIzhJ,EAAAA,aAWjBvU,EAAAo2J,iBAAmB,IAAI7hJ,EAAAA,aAWvBvU,EAAA60J,cAAgB,IAAItgJ,EAAAA,eAmH/B,OAxTsCnR,EAAAA,EAAAA,GAqBlCxY,OAAAgC,eAAcoqK,EAAA1rK,UAAA,iBAAc,KAA5B,WACI,OAAIF,KAAK2S,WAAaqB,UACXhU,KAAK2S,SAASC,UAChB2B,KAAK,SAACW,EAAyB3V,GAC5B,OAAO2V,EAAEvB,MAAQpU,EAAEoU,QAGxB,sCAkLXnU,OAAAgC,eACWoqK,EAAA1rK,UAAA,OAAI,KADf,WAEI,MAAO,wCAUXV,OAAAgC,eACWoqK,EAAA1rK,UAAA,cAAW,KADtB,WAEI,OAAQF,KAAK2S,UAAqC,IAAzB3S,KAAK2S,SAAShS,wCAM3CnB,OAAAgC,eACWoqK,EAAA1rK,UAAA,WAAQ,KADnB,WAEI,OAAQF,KAAK6rK,aAAe7rK,KAAKwyC,iBAAmB2B,GAAeT,6CAMvEl0C,OAAAgC,eACWoqK,EAAA1rK,UAAA,kBAAe,KAD1B,WAEI,OAAQF,KAAK6rK,aAAe7rK,KAAKwyC,iBAAmB2B,GAAeP,yCAMvEp0C,OAAAgC,eACWoqK,EAAA1rK,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAK6rK,aAAe7rK,KAAKwyC,iBAAmB2B,GAAeR,sCAUvEn0C,OAAAgC,eAAWoqK,EAAA1rK,UAAA,QAAK,KAAhB,mBACUwyC,EAAgC,GACtC,GAAI1yC,KAAK2S,WAAaqB,cAClB,IAAoB,IAAAlE,EAAAC,EAAA/P,KAAKi8F,gBAAchsF,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAApC,IAAM8gC,EAAK/yB,EAAA9N,MACP6gC,EAAMlM,UACP4b,EAAMlwC,KAAKwgC,wGAIvB,OAAO0P,mCAUXlzC,OAAAgC,eAAWoqK,EAAA1rK,UAAA,UAAO,KAAlB,mBACUg1C,EAAkC,GACxC,GAAIl1C,KAAK2S,WAAaqB,cAClB,IAAoB,IAAAlE,EAAAC,EAAA/P,KAAK2S,SAASC,WAAS3C,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAxC,IAAM8gC,EAAK/yB,EAAA9N,MACR6gC,EAAMlM,UACNoe,EAAQ1yC,KAAKwgC,wGAIzB,OAAOkS,mCAUX11C,OAAAgC,eAAWoqK,EAAA1rK,UAAA,UAAO,KAAlB,WACI,MAAO,CACH09C,UAAW59C,uCAWnBR,OAAAgC,eAAWoqK,EAAA1rK,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAK2pI,UACE3pI,KAAK8rK,oBAAsB9rK,KAAK8rK,oBAAoB/5H,SAAW/xC,KAAK+rK,2BAEpE/rK,KAAKgsK,kBAAoBhsK,KAAKgsK,kBAAkBj6H,SAAW/xC,KAAKisK,8EA1TlFn6H,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,WACVqjC,SAAA,yeACA5iC,UAAW,CAAC,CAAE88C,QAAS88G,GAAa78G,YAAa0/G,iDAlIjDtoI,EAAAA,8CAuIK4L,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,2CAWvBuY,EAAAA,gBAAep+C,KAAA,CAACq+C,EAAAA,WAAW,WAAM,OAAA+8G,iCAwBjCj9G,EAAAA,aAAYn+C,KAAA,CAACg7J,GAA+B,CAAEtyH,KAAMsyH,GAA+BryH,UAAQ,iCAU3FwV,EAAAA,aAAYn+C,KAAA,CAACi7J,GAAiC,CAAEvyH,KAAMuyH,GAAiCtyH,UAAQ,yCAc/FwV,EAAAA,aAAYn+C,KAAA,CAACk7J,GAAyC,CAAExyH,KAAMwyH,GAAyCvyH,UAAQ,0CAc/GwV,EAAAA,aAAYn+C,KAAA,CAACm7J,GAA0C,CAAEzyH,KAAMyyH,GAA0CxyH,UAAQ,uCAUjHhoC,EAAAA,wCAIA8nC,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,wCAI3DF,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAMkS,EAAAA,YAAajS,UAAQ,gBAc7DxH,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,gCAcAA,EAAAA,iCAcAA,EAAAA,yBAeAA,EAAAA,yBAWAgd,EAAAA,2BAWAA,EAAAA,iCAWAA,EAAAA,8BAWAA,EAAAA,qBAUAwjB,EAAAA,YAAWnhC,KAAA,CAAC,kCAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2BAsEjB49J,GAxTsC7C,IA6TtCmD,GAAA,WAAA,SAAAA,KAiCA,2BAjCCl9J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACV28J,GACAxC,GACAmC,GACAC,GACAC,GACAC,GACAC,GACA1C,GACAD,GACAE,GACAC,IAEJj6J,QAAS,CACL08J,GACAxC,GACAmC,GACAC,GACAC,GACAC,GACAC,GACA1C,GACAD,GACAE,GACAC,IAEJ1sH,QAAS,CACLC,EAAAA,aACAouB,QAIRohG,EAjCA,GC/bAC,GAAA,WAAA,SAAAA,KAsBA,OAlBIA,EAAAjsK,UAAAsE,UAAA,SAAUkuC,EAAyBk8B,GAC/B,IAAKl8B,IAAUA,EAAM/xC,OACjB,MAAO,GAGX,IAAKiuE,EACD,OAAOl8B,EAGXk8B,EAAaA,EAAWv5D,kBAClB7E,EAASkiC,EAAM14B,OAAO,SAACoyJ,EAAI5rK,GAAM,OAAO,IAANA,GAAW4rK,EAAGzlC,WACpC,OAAbylC,EAAGjzF,OAAkBizF,EAAGjzF,QAAUnlE,YAClCo4J,EAAGxlC,UACJwlC,EAAGjzF,MAAM1oE,WAAW4E,cAAc/D,QAAQs9D,IAAe,IAG7D,OAAOp+D,EAAO7P,OAAS,EAAI6P,EAAS,wBApB3CmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,6BAqBVmsJ,EAtBA,GC8BAE,GAAA,WAAA,SAAAA,KAoDA,2BApDCr9J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVg4H,GACAZ,GACAsiC,GACAjmC,GACAmC,GACA3B,GACA0B,GACAiC,GACAE,GACAD,GACAE,GACAvE,GACA0pC,IAEJj9J,QAAS,CACL+3H,GACAJ,GACAE,GACAD,GACAE,GACAvE,GACAmC,IAEJnoF,QAAS,CACLC,EAAAA,aACAk1C,EAAAA,YACA82E,GACAp1G,GACAqqB,GACAuwB,GACAx2B,GACA5M,GACAnZ,GACA5E,GACA5C,GACA0rC,GACAp0B,GACA7xB,GACAs8H,GACA7F,IAEJj8G,gBAAiB,CACb68E,IAEJ93H,UAAW,CACP4gC,QAKRs8H,EApDA,GCuCAC,GAAA,WAAA,SAAAA,KA2ImC,2BA3IlCt9J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACV4qG,GACA0I,GACAyH,GACAG,GACAmiB,GACAlY,GACAoC,GACAnU,GACAD,GACAE,GACAH,GACAsU,GACAE,GACAD,GACAE,GACApJ,GACAT,GACAwB,GACAe,GACAkB,GACA8d,GACAwO,GACAmmB,GACA3yB,GACA4I,GACAR,GACAgB,GACAmD,GACA36B,GACA8gD,GACArf,IAEJv5F,gBAAiB,CACbm4D,GACAyH,GACAG,GACAw5B,IAEJz0I,QAAS,CACL2qG,GACA0I,GACAyH,GACAG,GACAmiB,GACAlY,GACAoC,GACAnU,GACAD,GACAE,GACAH,GACAsU,GACAE,GACAD,GACAE,GACApJ,GACAe,GACAe,GACAkB,GACAyyC,GACA3vG,GACA46C,GACAx2B,GACA5M,GACAnZ,GACA/hB,GACAua,GACAyyF,GACA56E,GACA0N,GACAG,GACAgmB,GACAtc,GACAugB,GACAr5B,GACAqzD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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../interface';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab',\n    HOME = 'Home',\n    END = 'End'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\n@Injectable({ providedIn: 'root' })\nexport class PlatformUtil {\n    public isBrowser: boolean = isPlatformBrowser(this.platformId);\n\n    public isIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    }\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return [\n        'down',\n        'up',\n        'left',\n        'right',\n        'arrowdown',\n        'arrowup',\n        'arrowleft',\n        'arrowright',\n        'home',\n        'end',\n        'space',\n        'spacebar',\n        ' '\n    ].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set([\n    'down',\n    'up',\n    'left',\n    'right',\n    'arrowdown',\n    'arrowup',\n    'arrowleft',\n    'arrowright',\n    'home',\n    'end',\n    'space',\n    'spacebar',\n    ' '\n]);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression extends IBaseEventArgs {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\n\nexport function isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n    if (h1.length !== h2.length) {\n        return false;\n    }\n    return h1.every((level, index): boolean => {\n        return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n    });\n}\n\nexport function getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n    const hierarchy: Array<IGroupByKey> = [];\n    if (gRow !== undefined && gRow.expression) {\n        hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        while (gRow.groupParent) {\n            gRow = gRow.groupParent;\n            hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        }\n    }\n    return hierarchy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum FilteringExpressionsTreeType {\n    Regular,\n    Advanced\n}\n\nexport declare interface IFilteringExpressionsTree extends IBaseEventArgs {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n    type?: FilteringExpressionsTreeType;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    /**\n     * Sets/gets the type of the filtering expressions tree.\n     * ```typescript\n     *  gridExpressionTree.type = FilteringExpressionsTree.Advanced;\n     * ```\n     * ```typescript\n     * let type = expressionTree.type;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    type?: FilteringExpressionsTreeType;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n\n    /**\n     * Checks if filtering expressions tree is empty.\n     * @param expressionTree filtering expressions tree.\n     */\n    public static empty(expressionTree: IFilteringExpressionsTree): boolean {\n        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    private static _instace: FilteringStrategy = null;\n\n    public constructor() { super(); }\n\n    public static instance() {\n        return this._instace || (this._instace = new this());\n    }\n\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        return getHierarchy(gRow);\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        return isHierarchyMatch(h1, h2);\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    public static parseValue(dataType: DataType, value: any): any {\n        if (dataType === DataType.Number) {\n            value = parseFloat(value);\n        }\n\n        return value;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell ) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n             if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {\n                this.grid.selectionService.deselectRow(cell.id.rowID);\n                this.grid.selectionService.selectRowById(args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const state = grid.transactions.getState(row.id);\n            row.data = state ? Object.assign({}, row.data, state.value) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selectionService.isRowSelected(row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selectionService.deselectRow(row.id);\n            grid.selectionService.selectRowById(newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        this.deleteRowFromData(rowId, index);\n\n        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();\n        (grid as any)._pipeTrigger++;\n        grid.notifyChanges();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        return this.grid.totalPages - 1 > this.grid.page;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string,\n        pipeTrigger: number, filteringPipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state: IFilteringState = {\n            expressionsTree: expressionsTree,\n            advancedExpressionsTree: advancedFilteringExpressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        if (filterStrategy) {\n            state.strategy = filterStrategy;\n        }\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue, IBaseEventArgs } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\nimport { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn++;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (((grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0) ||\n            (grid.advancedFilteringExpressionsTree &&\n            grid.advancedFilteringExpressionsTree.filteringOperands.length > 0)) &&\n            !options.ignoreFiltering) {\n            const filteringState: any = {\n                expressionsTree: grid.filteringExpressionsTree,\n                advancedExpressionsTree: grid.advancedFilteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                filteringState.strategy = new TreeGridFilteringStrategy();\n                rootRecords = filteringState.strategy.filter(rootRecords,\n                    filteringState.expressionsTree, filteringState.advancedExpressionsTree);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ICsvExportEndedEventArgs extends IBaseEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IExcelExportEndedEventArgs extends IBaseEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' } as JSZip.JSZipGeneratorOptions<'base64'>;\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue, IBaseEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(settings: PositionSettings): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (settings.target instanceof HTMLElement) {\n            targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n        } else if (settings.target instanceof Point) {\n            const targetPoint = settings.target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal*/\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util, OverlaySettings } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    protected _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        this.setPosition(contentElement, this.settings);\n    }\n\n    protected setPosition(contentElement: HTMLElement, settings: PositionSettings) {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                const target = ev.target as any;\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        clickOnPositionTarget = positionTarget.contains(target);\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e: Event) => this._hide(info.id, e));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { PositionSettings, Size } from '../utilities';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n/**\n * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class ContainerPositionStrategy extends GlobalPositionStrategy {\n    constructor(settings?: PositionSettings) {\n        super(settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');\n        this.setPosition(contentElement, this.settings);\n    }\n}\n\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = Util.getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = Util.getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            0 < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.width;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            0 < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return 0 < leftBorder && rightBorder < connectedFit.viewPortRect.width;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return 0 < topBorder && bottomBorder < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, 0 - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.width);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, 0 - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.height);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        // If primaryKey is 0, this should still map to the property\n        return primaryKey !== undefined && primaryKey !== null ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\nimport { IBaseEventArgs } from './utils';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs extends IBaseEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import {\n    EventEmitter,\n    Output,\n    HostListener,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    Directive\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxVirtualHelperBase]'\n})\nexport class VirtualHelperBaseDirective implements OnDestroy {\n    public scrollAmount = 0;\n\n    public _size = 0;\n\n    public destroyed;\n\n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;\n    }\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n    public set size(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._size = value;\n        this.cdr.detectChanges();\n    }\n\n    public get size() {\n        return this._size;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"size\"></div>'\n})\nexport class HVirtualHelperComponent extends VirtualHelperBaseDirective {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n     }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"size\"></div>'\n})\nexport class VirtualHelperComponent extends VirtualHelperBaseDirective implements OnDestroy  {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable, Component } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfScrollSyncService {\n    private _masterScroll: Map<string, VirtualHelperBaseDirective> = new Map<string, any>();\n    public setScrollMaster(dir: string, scroll: VirtualHelperBaseDirective) {\n        this._masterScroll.set(dir, scroll);\n    }\n\n    public getScrollMaster(dir: string) {\n        return this._masterScroll.get(dir);\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter, throttleTime, first } from 'rxjs/operators';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation = 'vertical';\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * @hidden @internal\n     * An event that is emitted when scrollbar visibility has changed.\n     */\n    @Output()\n    public onScrollbarVisibilityChanged = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n    */\n    @Output()\n    public onContentSizeChange = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n\n    public get displayContainer(): HTMLElement | undefined {\n        return this.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public get virtualHelper() {\n        return this.scrollComponent.nativeElement;\n    }\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.getScroll().scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    protected contentResizeNotify = new Subject();\n    protected contentObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    public get scrollPosition(): number {\n        return this.scrollComponent.scrollAmount;\n    }\n    public set scrollPosition(val: number) {\n        if (val === this.scrollComponent.scrollAmount) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal' && this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollLeft = val;\n        } else if (this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.func)\n            );\n        } else {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.verticalScrollHandler)\n            );\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.scrollComponent.size > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.scrollComponent && !this.scrollComponent.destroyed) {\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.scrollComponent = vc.createComponent(factory).instance;\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.scrollComponent.size = this.igxForOf ? this._calcHeight() : 0;\n            this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.scrollComponent.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n            });\n            const destructor = takeUntil<any>(this.destroy$);\n            this.contentResizeNotify.pipe(destructor,\n            filter(() => this.igxForContainerSize && this.igxForOf && this.igxForOf.length > 0),\n             throttleTime(40, undefined, {leading: true, trailing: true}))\n            .subscribe(() => {\n                this._zone.runTask(() => {\n                    this.updateSizes();\n                });\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            if (!this.scrollComponent) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.scrollComponent = vc.createComponent(hvFactory).instance;\n                this.scrollComponent.size = totalSize;\n                this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.igxForScrollOrientation === 'vertical') {\n            this._zone.runOutsideAngular(() => {\n                this.contentObserver = new ResizeObserver(() => this.contentResizeNotify.next());\n                this.contentObserver.observe(this.dc.instance._viewContainer.element.nativeElement);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        if (this.contentObserver) {\n            this.contentObserver.disconnect();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n            this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.scrollComponent.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    public getScroll() {\n        return this.scrollComponent.nativeElement;\n    }\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    protected updateSizes() {\n        this.recalcUpdateSizes();\n        this._applyChanges();\n        this._updateScrollOffset();\n        this.onContentSizeChange.emit();\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        const l = this._embeddedViews.length;\n        const rNodes = this._embeddedViews.map(view =>\n            view.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE) || view.rootNodes[0].nextElementSibling);\n        for (let i = 0; i < l; i++) {\n            const rNode = rNodes[i];\n            if (rNode) {\n                const h = rNode.offsetHeight || parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10) + totalDiff;\n                this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.scrollComponent.size = Math.min(this.scrollComponent.size + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.scrollComponent.destroyed) {\n                    this.scrollComponent.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(event.target.scrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        const scrollable = this.isScrollable();\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.scrollComponent.nativeElement.style.width = this.igxForContainerSize + 'px';\n            this.scrollComponent.size = totalWidth;\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because horizontalScrollBar is hidden, therefore\n                // onScroll event handler for VirtualHelperBaseDirective will not be called\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.scrollComponent.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.scrollComponent.size = this._calcHeight();\n            if ( this.scrollComponent.size <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because verticalScrollBar is hidden, therefore\n                // onScroll event handler for VirtualHelperBaseDirective will not be called\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (scrollable !== this.isScrollable()) {\n            // scrollbar visibility has changed\n            this.onScrollbarVisibilityChanged.emit();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.igxForScrollOrientation === 'horizontal') {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll =  this.scrollComponent.nativeElement;\n        scrollOffset = vScroll && this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset =  this.scrollComponent.nativeElement &&\n            this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone, syncScrollService);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n             this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            // TODO: This code can be removed. However tests need to be rewritten in a way that they wait for ResizeObserved to complete.\n            // So leaving as is for the moment.\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this._zone.onStable.pipe(first()).subscribe( () => {\n            this.recalcUpdateSizes();\n        });\n        this.cdr.markForCheck();\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.scrollComponent || !parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent,\n         HVirtualHelperComponent, VirtualHelperBaseDirective],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE, IBaseEventArgs } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective, static: false })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n                (this.children.find(e => e.index === this._focusedItem.index) || null) :\n                null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.scrollPosition = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            if (this.isSelectionValid(args.newSelection)) {\n                this.selection.set(this.id, new Set([args.newSelection]));\n                if (!this.virtDir) {\n                    if (oldSelection) {\n                        oldSelection.selected = false;\n                    }\n                    if (args.newSelection) {\n                        args.newSelection.selected = true;\n                    }\n                }\n                if (event) {\n                    this.toggleDirective.close();\n                }\n            } else {\n                throw new Error('Please provide a valid drop-down item for the selection!');\n            }\n        }\n    }\n\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean {\n        return selection === null\n        || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))\n        || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                //  TODO: check the logic when control is touched or dirty\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previously but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else {\n                //  if control is untouched and pristine its state is initial. This is when user did not interact\n                //  with the input or when form/control is reset\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    FLUENT,\n    SEARCH,\n    FLUENT_SEARCH,\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n    /**\n     * @hidden\n     */\n\n    @HostBinding('class.igx-input-group--fluent-search')\n    public isFluentSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent')\n    public isFluent = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isFluent = this.isFluentSearch = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.FLUENT:\n                    this.isFluent = true;\n                    break;\n                case IgxInputGroupType.FLUENT_SEARCH:\n                    this.isFluentSearch = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Fluent.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     *}\n     * ```\n     */\n    get isTypeFluent() {\n        return this._type === IgxInputGroupType.FLUENT;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;\n     *}\n     * ```\n     */\n    get isTypeFluentSearch() {\n        return  this._type === IgxInputGroupType.FLUENT_SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs, IBaseEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input')\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab')\n    @HostListener('keydown.Shift.Tab')\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        // if no drop-down width is set, the drop-down will be as wide as the autocomplete input;\n        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n\n    /**\n     *@hidden\n     */\n    private _type: string;\n\n    /**\n     *@hidden\n     */\n    private _defaultType = 'flat';\n\n    /**\n     *@hidden\n     */\n    private _cssClassPrefix = 'igx-button';\n\n    /**\n     *@hidden\n     */\n    private _color: string;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    /**\n     *@hidden\n     */\n    private _disabled: boolean;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role')\n    public role = 'button';\n\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton')\n    set type(value: string) {\n        const newValue = value ? value : this._defaultType;\n        if (this._type !== newValue) {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n            this._type = newValue;\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n        }\n    }\n\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        this._disabled = val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.disabled')\n    public get disabledAttribute() {\n        return this._disabled ? this._disabled : null;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import { Renderer2 } from '@angular/core';\nimport { IgxDragDirective, IgxDropDirective } from './drag-drop.directive';\n\n\nexport interface IDropStrategy {\n    dropAction: (drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) => void;\n}\n\n// @dynamic\nexport class IgxDefaultDropStrategy implements IDropStrategy {\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) { }\n}\n\n// @dynamic\nexport class IgxAppendDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        this._renderer.appendChild(dropAreaElement, dragElement);\n    }\n}\n\n// @dynamic\nexport class IgxPrependDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (dropAreaElement.children.length) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n\n// @dynamic\nexport class IgxInsertDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {\n            return;\n        }\n\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[igxDragHandle]'\n})\nexport class IgxDragHandleDirective {\n\n    @HostBinding('class.igx-drag__handle')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    AfterContentInit,\n    TemplateRef,\n    ContentChildren,\n    QueryList\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxDragHandleDirective } from './drag-handle.directive';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IDropStrategy, IgxDefaultDropStrategy } from './drag-drop.strategy';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\n\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\n\n\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\n\nexport class IgxDragLocation {\n    public pageX: number;\n    public pageY: number;\n\n    constructor(private _pageX, private _pageY) {\n        this.pageX = parseFloat(_pageX);\n        this.pageY = parseFloat(_pageY);\n    }\n}\n\n@Directive({\n    exportAs: 'drag',\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements AfterContentInit, OnDestroy {\n\n    protected ghostContext: any = null;\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghost = true;\n\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostClass = '';\n\n    /**\n     * @deprecated Please use custom base styling instead.\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'hideBaseOnDrag' @Input property is deprecated and will be removed in future major versions.\n        Alternatives to it are using the new no ghost dragging and custom base styling.`)\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * @deprecated Please use provided transition functions in future.\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'animateOnRelease' @Input property is deprecated and will be removed in future major versions.\n        Please use 'transitionToOrigin' or 'transitionTo' methods instead.`)\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostHost;\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetX(value) {\n        this._offsetX = parseInt(value, 10);\n    }\n\n    public get ghostOffsetX() {\n        return this._offsetX !== undefined ? this._offsetX : this._defaultOffsetX;\n    }\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetY(value) {\n        this._offsetY = parseInt(value, 10);\n    }\n\n    public get ghostOffsetY() {\n        return this._offsetY !== undefined ? this._offsetY : this._defaultOffsetY ;\n    }\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragMove = new EventEmitter<IDragMoveEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragClick = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostCreate = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostDestroy = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public transitioned = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragHandleDirective)\n    public dragHandles: QueryList<IgxDragHandleDirective>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag')\n    public baseClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag--select-disabled')\n    public selectDisabled = false;\n\n    /**\n     * @deprecated Please use native angular ways of hiding it using custom to the base element styling for future versions.\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    @DeprecateProperty(`'visible' @Input property is deprecated and will be removed in future major versions.\n        Please use native angular ways of hiding the base element using styling.`)\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibility = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    public get location(): IgxDragLocation {\n        return new IgxDragLocation(this.pageX, this.pageY);\n    }\n\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    public get originLocation(): IgxDragLocation {\n        return new IgxDragLocation(this.baseOriginLeft, this.baseOriginTop);\n    }\n\n    /**\n     * @hidden\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageX() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostLeft;\n        }\n        return this.baseLeft;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageY() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostTop;\n        }\n        return this.baseTop;\n    }\n\n    protected get baseLeft(): number {\n        return this.element.nativeElement.getBoundingClientRect().left;\n    }\n\n    protected get baseTop(): number {\n        return this.element.nativeElement.getBoundingClientRect().top;\n    }\n\n    protected get baseOriginLeft(): number {\n        return this.baseLeft - this.getTransformX(this.element.nativeElement);\n    }\n\n    protected get baseOriginTop(): number {\n        return this.baseTop - this.getTransformY(this.element.nativeElement);\n    }\n\n    protected set ghostLeft(pageX: number) {\n        // To Do: Remove requestAnimationFrame when deprecated animations inputs are removed as well.\n        // We use requestAnimationFrame for the old drop animations in combination with updateDragRelativePos.\n        requestAnimationFrame(() => {\n            if (this.ghostElement) {\n                // We need to take into account marginLeft, since top style does not include margin, but pageX includes the margin.\n                const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n                // If ghost host is defined it needs to be taken into account.\n                this.ghostElement.style.left = (pageX - ghostMarginLeft - this._ghostHostX) + 'px';\n            }\n        });\n    }\n\n    protected get ghostLeft() {\n        return parseInt(this.ghostElement.style.left, 10) + this._ghostHostX;\n    }\n\n    protected set ghostTop(pageY: number) {\n        // To Do: Remove requestAnimationFrame when deprecated animations inputs are removed as well.\n        // We use requestAnimationFrame for the old drop animations in combination with updateDragRelativePos.\n        requestAnimationFrame(() => {\n            if (this.ghostElement) {\n                // We need to take into account marginTop, since top style does not include margin, but pageY includes the margin.\n                const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n                // If ghost host is defined it needs to be taken into account.\n                this.ghostElement.style.top = (pageY - ghostMarginTop - this._ghostHostY) + 'px';\n            }\n        });\n    }\n\n    protected get ghostTop() {\n        return parseInt(this.ghostElement.style.top, 10) + this._ghostHostY;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    public ghostElement;\n\n    /**\n     * @hidden\n     */\n    public animInProgress = false;\n\n    protected _baseMarginLeft = 0;\n    protected _baseMarginTop = 0;\n    protected _baseOriginX;\n    protected _baseOriginY;\n    protected _startX = 0;\n    protected _startY = 0;\n    protected _lastX = 0;\n    protected _lastY = 0;\n    protected _dragStarted = false;\n\n    /** Drag ghost related properties */\n    protected _defaultOffsetX;\n    protected _defaultOffsetY;\n    protected _offsetX;\n    protected _offsetY;\n    protected _ghostStartX;\n    protected _ghostStartY;\n    protected _ghostHostX = 0;\n    protected _ghostHostY = 0;\n\n    protected _pointerDownId = null;\n    protected _clicked = false;\n    protected _lastDropArea = null;\n\n    protected _destroy = new Subject<boolean>();\n    protected _removeOnDestroy = true;\n\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2\n    ) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (!this.dragHandles || !this.dragHandles.length ) {\n            // Set user select none to the whole draggable element if no drag handles are defined.\n            this.selectDisabled = true;\n        }\n\n        // Bind events\n        this.zone.runOutsideAngular(() => {\n            const targetElements = this.dragHandles && this.dragHandles.length ?\n                this.dragHandles.map((item) => item.element.nativeElement) : [this.element.nativeElement];\n            targetElements.forEach((element) => {\n                if (this.pointerEventsEnabled) {\n                    fromEvent(element, 'pointerdown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n\n                    fromEvent(element, 'pointermove').pipe(\n                        throttle(() => interval(0, animationFrameScheduler)),\n                        takeUntil(this._destroy)\n                    ).subscribe((res) => this.onPointerMove(res));\n\n                    fromEvent(element, 'pointerup').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerUp(res));\n\n                    if (!this.ghost) {\n                        // Do not bind `lostpointercapture` to the target, because we will bind it on the ghost later.\n                        fromEvent(element, 'lostpointercapture').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerLost(res));\n                    }\n                } else if (this.touchEventsEnabled) {\n                    fromEvent(element, 'touchstart').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                } else {\n                    // We don't have pointer events and touch events. Use then mouse events.\n                    fromEvent(element, 'mousedown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                }\n            });\n\n            // We should bind to document events only once when there are no pointer events.\n            if (!this.pointerEventsEnabled && this.touchEventsEnabled) {\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (!this.pointerEventsEnabled) {\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n\n            this.element.nativeElement.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        });\n\n        this._baseMarginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n        this._baseMarginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        this._baseOriginX = this.baseLeft;\n        this._baseOriginY = this.baseTop;\n        this._ghostStartX = this.baseLeft;\n        this._ghostStartY = this.baseTop;\n        // Set transition duration to 0s. This also helps with setting `visibility: hidden` to the base to not lag.\n        this.element.nativeElement.style.transitionDuration = '0.0s';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.ghost && this.ghostElement && this._removeOnDestroy) {\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        }\n    }\n\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    public setLocation(newLocation: IgxDragLocation) {\n        // We do not subtract marginLeft and marginTop here because here we calculate deltas.\n        if (this.ghost && this.ghostElement) {\n            const offsetHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n            const offsetHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n            this.ghostLeft = newLocation.pageX - offsetHostX + this.getWindowScrollLeft();\n            this.ghostTop = newLocation.pageY - offsetHostY + this.getWindowScrollTop();\n        } else if (!this.ghost) {\n            const deltaX = newLocation.pageX - this.pageX;\n            const deltaY = newLocation.pageY - this.pageY;\n            const transformX = this.getTransformX(this.element.nativeElement);\n            const transformY = this.getTransformY(this.element.nativeElement);\n            this.setTransformXY(transformX + deltaX, transformY + deltaY);\n        }\n\n        this._startX = this.baseLeft;\n        this._startY = this.baseTop;\n    }\n\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if ((!!startLocation && startLocation.pageX === this.baseOriginLeft && startLocation.pageY === this.baseOriginLeft) ||\n            (!startLocation && this.ghost && !this.ghostElement)) {\n            return;\n        }\n\n        if (!!startLocation && startLocation.pageX !== this.pageX && startLocation.pageY !== this.pageY) {\n            if (this.ghost && !this.ghostElement) {\n                this._startX = startLocation.pageX;\n                this._startY = startLocation.pageY;\n                this._ghostStartX = this._startX;\n                this._ghostStartY = this._startY;\n                this.createGhost(this._startX, this._startY);\n            }\n\n            this.setLocation(startLocation);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            if (this.ghost) {\n                this.ghostElement.style.transitionProperty = 'top, left';\n                this.ghostElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.ghostElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.ghostElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this.setLocation(new IgxDragLocation(this.baseLeft, this.baseTop));\n            } else if (!this.ghost) {\n                this.element.nativeElement.style.transitionProperty = 'transform';\n                this.element.nativeElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.element.nativeElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.element.nativeElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this._startX = this.baseLeft;\n                this._startY = this.baseTop;\n                this.setTransformXY(0, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if (!!startLocation && this.ghost && !this.ghostElement) {\n            this._startX = startLocation.pageX;\n            this._startY = startLocation.pageY;\n            this._ghostStartX = this._startX;\n            this._ghostStartY = this._startY;\n        } else if (!!startLocation && (!this.ghost || this.ghostElement)) {\n            this.setLocation(startLocation);\n        } else if (this.ghost && !this.ghostElement) {\n            this._startX = this.baseLeft;\n            this._startY = this.baseTop;\n            this._ghostStartX = this._startX + this.getWindowScrollLeft();\n            this._ghostStartY = this._startY + this.getWindowScrollTop();\n        }\n\n        if (this.ghost && !this.ghostElement) {\n            this.createGhost(this._startX, this._startY);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            const movedElem = this.ghost ? this.ghostElement : this.element.nativeElement;\n            movedElem.style.transitionProperty = this.ghost && this.ghostElement ? 'left, top' : 'transform';\n            movedElem.style.transitionDuration =\n                customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n            movedElem.style.transitionTimingFunction =\n                customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n            movedElem.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n\n            if (target instanceof IgxDragLocation) {\n                this.setLocation(new IgxDragLocation (target.pageX, target.pageY));\n            } else {\n                const targetRects = target.nativeElement.getBoundingClientRect();\n                this.setLocation(new IgxDragLocation(\n                    targetRects.left -  this.getWindowScrollLeft(),\n                    targetRects.top - this.getWindowScrollTop()\n                ));\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until ghostElement is created.\n        const handleFound = this.dragHandles.find(handle => handle.element.nativeElement === event.currentTarget);\n        const targetElement = handleFound ? handleFound.element.nativeElement : this.element.nativeElement;\n        if (this.pointerEventsEnabled) {\n            targetElement.setPointerCapture(this._pointerDownId);\n        } else {\n            targetElement.focus();\n            event.preventDefault();\n        }\n\n        if (!this._baseOriginX && !this._baseOriginY) {\n            this._baseOriginX = this.baseLeft;\n            this._baseOriginY = this.baseTop;\n        }\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        this._defaultOffsetX = this.baseLeft - this._startX + this.getWindowScrollLeft();\n        this._defaultOffsetY = this.baseTop - this._startY + this.getWindowScrollTop();\n        this._ghostStartX = this._startX + this.ghostOffsetX;\n        this._ghostStartY = this._startY + this.ghostOffsetY;\n        this._lastX = this._startX;\n        this._lastY = this._startY;\n    }\n\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                const dragStartArgs: IDragStartEventArgs = {\n                    originalEvent: event,\n                    owner: this,\n                    startX: pageX - totalMovedX,\n                    startY: pageY - totalMovedY,\n                    pageX: pageX,\n                    pageY: pageY,\n                    cancel: false\n                };\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    if (this.ghost) {\n                        // We moved enough so ghostElement can be rendered and actual dragging to start.\n                        // When creating it will take into account any offset set by the user by default.\n                        this.createGhost(pageX, pageY);\n                    } else if (this._offsetX !== undefined || this._offsetY !== undefined) {\n                        // There is no need for ghost, but we will need to position initially the base element to reflect any offset.\n                        const transformX = (this._offsetX !== undefined ? this._offsetX - this._defaultOffsetX : 0) +\n                            this.getTransformX(this.element.nativeElement);\n                        const transformY = (this._offsetY !== undefined ? this._offsetY - this._defaultOffsetY : 0) +\n                            this.getTransformY(this.element.nativeElement);\n                        this.setTransformXY(transformX, transformY);\n                    }\n                } else {\n                    return;\n                }\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            const moveArgs: IDragMoveEventArgs = {\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._lastX,\n                pageY: this._lastY,\n                nextPageX: pageX,\n                nextPageY: pageY,\n                cancel: false\n            };\n            this.dragMove.emit(moveArgs);\n\n            const setPageX = moveArgs.nextPageX;\n            const setPageY = moveArgs.nextPageY;\n            const updatedMovedX = setPageX - this._startX;\n            const updatedMovedY = setPageY - this._startY;\n\n            if (!moveArgs.cancel) {\n                if (this.ghost) {\n                    this.ghostLeft = this._ghostStartX + updatedMovedX;\n                    this.ghostTop = this._ghostStartY + updatedMovedY;\n                } else {\n                    const lastMovedX = setPageX - this._lastX;\n                    const lastMovedY = setPageY - this._lastY;\n                    const translateX = this.getTransformX(this.element.nativeElement) + lastMovedX;\n                    const translateY = this.getTransformY(this.element.nativeElement) + lastMovedY;\n                    this.setTransformXY(translateX, translateY);\n                }\n                this.dispatchDragEvents(pageX, pageY, event);\n            }\n\n            this._lastX = setPageX;\n            this._lastY = setPageY;\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n\n            // Prevent scrolling on touch while dragging\n            event.preventDefault();\n        }\n\n        const eventArgs: IDragBaseEventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement ) {\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n            } else if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        } else {\n            // Trigger our own click event because when there is no ghost, native click cannot be prevented when dragging.\n            this.zone.run(() => {\n                this.dragClick.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    public onPointerLost(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: event.pageX,\n            pageY: event.pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n            if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            } else if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX, pageY, node: any = null) {\n        if (!this.ghost) {\n            return;\n        }\n\n        let dynamicGhostRef;\n        if (this.ghostTemplate) {\n            dynamicGhostRef = this.viewContainer.createEmbeddedView(this.ghostTemplate, this.ghostContext);\n            this.ghostElement = dynamicGhostRef.rootNodes[0];\n        } else {\n            this.ghostElement = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        }\n\n        const totalMovedX = pageX - this._startX;\n        const totalMovedY = pageY - this._startY;\n        this._ghostHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n        this._ghostHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n\n        this.ghostElement.style.transitionDuration = '0.0s';\n        this.ghostElement.style.position = 'absolute';\n\n\n        if (this.ghostClass) {\n            this.renderer.addClass(this.ghostElement, this.ghostClass);\n        }\n\n        const createEventArgs = {\n            owner: this,\n            ghostElement: this.ghostElement,\n            cancel: false\n        };\n        this.ghostCreate.emit(createEventArgs);\n        if (createEventArgs.cancel) {\n            this.ghostElement = null;\n            if (this.ghostTemplate && dynamicGhostRef) {\n                dynamicGhostRef.destroy();\n            }\n            return;\n        }\n\n        if (this.ghostHost) {\n            this.ghostHost.appendChild(this.ghostElement);\n        } else {\n            document.body.appendChild(this.ghostElement);\n        }\n\n        const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n        const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n        this.ghostElement.style.left = (this._ghostStartX - ghostMarginLeft + totalMovedX - this._ghostHostX) + 'px';\n        this.ghostElement.style.top = (this._ghostStartY - ghostMarginTop + totalMovedY - this._ghostHostX) + 'px';\n\n        if (this.pointerEventsEnabled) {\n            // The ghostElement takes control for moving and dragging after it has been rendered.\n            if (this._pointerDownId !== null) {\n                this.ghostElement.setPointerCapture(this._pointerDownId);\n            }\n            this.ghostElement.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.ghostElement.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n            this.ghostElement.addEventListener('lostpointercapture', (args) => {\n                this.onPointerLost(args);\n            });\n        }\n\n        // Transition animation when the ghostElement is released and it returns to it's original position.\n        this.ghostElement.addEventListener('transitionend', (args) => {\n            this.onTransitionEnd(args);\n        });\n\n        // Hide the base after the ghostElement is created, because otherwise the ghostElement will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const customEventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' &&\n                elementsFromPoint[i] !== this.ghostElement && elementsFromPoint[i] !== this.element.nativeElement) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n                if (this._lastDropArea) {\n                    this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                }\n\n                this._lastDropArea = topDropArea;\n                this.dispatchEvent(this._lastDropArea, 'igxDragEnter', customEventArgs);\n            } else if (!topDropArea && this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                this._lastDropArea = null;\n                return;\n            }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', customEventArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        let newPosX, newPosY;\n        if (this.ghost && this.ghostElement) {\n            // Calculate the new ghostElement position to remain where the mouse is, so it doesn't jump\n            const totalDraggedX = this.ghostLeft - this._ghostStartX;\n            const totalDraggedY = this.ghostTop - this._ghostStartY;\n            newPosX = this.baseLeft;\n            newPosY = this.baseTop;\n            const diffStartX = this._ghostStartX - newPosX;\n            const diffStartY = this._ghostStartY - newPosY;\n            this.ghostTop = newPosX + totalDraggedX - diffStartX;\n            this.ghostLeft = newPosY + totalDraggedY - diffStartY;\n        } else if (!this.ghost) {\n            const totalDraggedX = this.getTransformX(this.element.nativeElement);\n            const totalDraggedY = this.getTransformY(this.element.nativeElement);\n            newPosX = this.baseLeft - totalDraggedX;\n            newPosY = this.baseTop - totalDraggedY;\n            const deltaX = this._baseOriginX - newPosX;\n            const deltaY = this._baseOriginY - newPosY;\n            this.setTransformXY(totalDraggedX + deltaX, totalDraggedY + deltaY);\n        }\n        this._baseOriginX = newPosX !== undefined ? newPosX : this._baseOriginX;\n        this._baseOriginY = newPosY !== undefined ? newPosY : this._baseOriginY;\n    }\n\n    /**\n     * @deprecated This method will be removed in future major version. Please use `transitionToOrigin` or `transitionTo`.\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usually be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n    */\n    public dropFinished() {\n        this.updateDragRelativePos();\n        if (this.animateOnRelease && this.ghostElement) {\n            this.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if ((!this._dragStarted && !this.animInProgress) || this._clicked) {\n            // Return if no dragging started and there is no animation in progress.\n            return ;\n        }\n\n        if (this.ghost && this.ghostElement) {\n            this._ghostStartX = this.baseLeft + this.getWindowScrollLeft();\n            this._ghostStartY = this.baseTop + this.getWindowScrollTop();\n\n            const ghostDestroyArgs: IDragGhostBaseEventArgs = {\n                owner: this,\n                ghostElement: this.ghostElement,\n                cancel: false\n            };\n            this.ghostDestroy.emit(ghostDestroyArgs);\n            if (ghostDestroyArgs.cancel) {\n                return;\n            }\n\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        } else if (!this.ghost) {\n            this.element.nativeElement.style.transitionProperty = '';\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this.element.nativeElement.style.transitionTimingFunction = '';\n            this.element.nativeElement.style.transitionDelay = '';\n        }\n        this.animInProgress = false;\n        this._dragStarted = false;\n\n        // Execute transitioned after everything is reset so if the user sets new location on the base now it would work as expected.\n        this.zone.run(() => {\n            this.transitioned.emit({\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._startX,\n                pageY: this._startY\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint consider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            const elements = document['msElementsFromPoint'](viewPortX, viewPortY);\n            return elements === null ? [] : elements;\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Otherwise can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getTransformX(elem) {\n        let posX = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posX = values ? Number(values[ 1 ]) : 0;\n        }\n\n        return posX;\n    }\n\n    protected getTransformY(elem) {\n        let posY = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posY = values ? Number(values[ 2 ]) : 0;\n        }\n\n        return posY;\n    }\n\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number) {\n        this.element.nativeElement.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0px)';\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected ghostHostOffsetLeft(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().left - this.getWindowScrollLeft();\n        }\n        return ghostHost.getBoundingClientRect().left - this.getWindowScrollLeft();\n    }\n\n    protected ghostHostOffsetTop(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().top - this.getWindowScrollTop();\n        }\n        return ghostHost.getBoundingClientRect().top - this.getWindowScrollTop();\n    }\n}\n\n@Directive({\n    exportAs: 'drop',\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public dropChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public set dropStrategy(classRef: any) {\n        this._dropStrategy = new classRef(this._renderer);\n    }\n\n    public get dropStrategy() {\n        return this._dropStrategy;\n    }\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public enter = new EventEmitter<IDropBaseEventArgs>();\n\n        /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public over = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public leave = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public dropped = new EventEmitter<IDropDroppedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n    protected _dropStrategy: IDropStrategy;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n        this._dropStrategy = new IgxDefaultDropStrategy();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n\n        this.over.emit(eventArgs);\n     }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.enter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.leave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IDropDroppedEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.dropped.emit(args);\n        });\n\n        if (this._dropStrategy && !args.cancel) {\n            const elementsAtPoint = event.detail.owner.getElementsAtPoint(event.detail.pageX, event.detail.pageY);\n            const insertIndex = this.getInsertIndexAt(event.detail.owner, elementsAtPoint);\n            this._dropStrategy.dropAction(event.detail.owner, this, insertIndex);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected isDragLinked(drag: IgxDragDirective): boolean {\n        const dragLinkArray = drag.dragChannel instanceof Array;\n        const dropLinkArray = this.dropChannel instanceof Array;\n\n        if (!dragLinkArray && !dropLinkArray) {\n            return this.dropChannel === drag.dragChannel;\n        } else if (!dragLinkArray && dropLinkArray) {\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dropLinks.length; i ++) {\n                if (dropLinks[i] === drag.dragChannel) {\n                    return true;\n                }\n            }\n        } else if (dragLinkArray && !dropLinkArray) {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                if (dragLinks[i] === this.dropChannel) {\n                    return true;\n                }\n            }\n        } else {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                for (let j = 0; j < dropLinks.length; j ++) {\n                    if (dragLinks[i] === dropLinks[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number {\n        let insertIndex = -1;\n        const dropChildren = Array.prototype.slice.call(this.element.nativeElement.children);\n        if (!dropChildren.length) {\n            return insertIndex;\n        }\n\n        let i = 0;\n        let childUnder = null;\n        while (!childUnder && i < elementsAtPoint.length) {\n            if (elementsAtPoint[i].parentElement === this.element.nativeElement) {\n                childUnder = elementsAtPoint[i];\n            }\n            i++;\n        }\n\n        const draggedElemIndex = dropChildren.indexOf(draggedDir.element.nativeElement);\n        insertIndex = dropChildren.indexOf(childUnder);\n        if (draggedElemIndex !== -1 && draggedElemIndex < insertIndex) {\n            insertIndex++;\n        }\n\n        return insertIndex;\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective],\n    exports: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE, IBaseEventArgs } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus() {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur() {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    exportAs: 'igxRadioGroup',\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent, { descendants: true }) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };\n            this.radioButtons.forEach((button) => {\n                Object.assign(button, props);\n\n                if (button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n    private _defaultCssClass = 'igx-highlight';\n    private _defaultActiveCssClass = 'igx-highlight--active';\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ITooltipShowEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        if (!target) { return false; }\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    advancedExpressionsTree?: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                if (request.status === 200) {\n                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n                } else {\n                    throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n                }\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url};`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n            }\n            throw new Error(`Could not fetch SVG from url: ${url};`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image', { static: false })\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs extends IBaseEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective, { static: false })\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    private _collapsed = true;\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-expansion-panel [(collapsed)]=\"model.isCollapsed\"></igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.collapsedChange.emit(this._collapsed);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public collapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent),\n        { read: forwardRef(() => IgxExpansionPanelBodyComponent), static: false })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent),\n        { read: forwardRef(() => IgxExpansionPanelHeaderComponent), static: false })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs extends IBaseEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective, { static: false })\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent, { static: false })\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.zIndex')\n    public zIndex = 0;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach((button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\n/**\n * @hidden\n */\nenum TimeDeltaInterval {\n    Month = 'month',\n    Year = 'year'\n}\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    if (!ranges) {\n        return false;\n    }\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const _ of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: '' };\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: '' };\n            }\n        }\n        return result;\n    }\n\n    public getFirstViewDate(date: Date, interval: string, activeViewIdx: number) {\n        return this.timedelta(date, interval, -activeViewIdx);\n    }\n\n    public getNextMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, 1);\n    }\n\n    public getPrevMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, -1);\n    }\n\n    public getNextYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, 1);\n    }\n\n    public getPrevYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, -1);\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\nimport { isDate } from '../core/utils';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        if (!value || !!value && (value as Date[]).length === 0) {\n            return;\n        }\n\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n\n    @Input()\n    public hideOutsideDays = false;\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    public rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    protected calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            const newDates = value.map(v => this.getDateOnly(v).getTime());\n            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());\n\n            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {\n                return;\n            }\n\n            this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    public deselectMultipleInMonth(value: Date) {\n        const valueDateOnly = this.getDateOnly(value);\n        this.selectedDates = this.selectedDates.filter(\n            (date: Date) => date.getTime() !== valueDateOnly.getTime()\n        );\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectDate(value as Date);\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                if (isDate(value) && !this.isDateDisabled(value as Date)) {\n                    this.selectSingle(value as Date);\n                }\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (!this.selectedDates || this.selectedDates.length === 0) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                this.selectDate(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { HostBinding, ViewChildren, ElementRef, QueryList } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * Holds month view index we are operating on.\n     */\n    protected activeViewIdx = 0;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren('yearsBtn')\n    public yearsBtns: QueryList<ElementRef>;\n\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtns && this.yearsBtns.length) {\n                this.yearsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx).nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(activeViewIdx = 0): void {\n        this._activeView = CalendarView.DECADE;\n        this.activeViewIdx = activeViewIdx;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, activeViewIdx = 0) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade(activeViewIdx);\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public monthsRef: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance ) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.monthsRef.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.monthsRef.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.monthsRef.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    /**\n     * Returns boolean indicating if the day is selected\n     *\n     */\n    @Input()\n    public get selected(): any {\n        return this._selected;\n    }\n\n    /**\n     * Selects the day\n     */\n    public set selected(value: any) {\n        this._selected = value;\n    }\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Input()\n    public hideOutsideDays = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--last')\n    public isLastInRange = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--first')\n    public isFirstInRange = false;\n\n    @Input()\n    public isWithinRange = false;\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return (!this.isDisabled && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    @HostBinding('class.igx-calendar__date--hidden')\n    public get isHidden(): boolean {\n        return this.hideOutsideDays && this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isFocusable(): boolean {\n        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--range')\n    public get isWithinRangeCSS(): boolean {\n        return !this.isSingleSelection && this.isWithinRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isHidden || this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--single')\n    public get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    @HostBinding('attr.tabindex')\n    public get tabindex(): number {\n        return this.isDisabled || this.isHidden ? -1 : 0;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { IgxDaysViewComponent } from './days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nenum Direction {\n    Up = 'ArrowUp',\n    Down = 'ArrowDown',\n    Left = 'ArrowLeft',\n    Right = 'ArrowRight',\n}\n\nconst ARROW = 'Arrow';\n\n/** @hidden */\n@Injectable()\nexport class IgxDaysViewNavigationService {\n    public monthView: IgxDaysViewComponent;\n    /**\n     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next\n     * @hidden\n     */\n    public focusNextDate(target: HTMLElement, key: string, nextView = false) {\n        if (target.childElementCount === 0) { target = target.parentElement; }\n        if (key.indexOf('Arrow') === -1) { key = ARROW.concat(key); }\n        const monthView = this.monthView;\n        const node = monthView.dates.find((date) => date.nativeElement === target);\n        let dates = monthView.dates.toArray(),\n            day: IgxDayItemComponent, step, i, nextDate: Date;\n        const index = dates.indexOf(node);\n\n        if (!node) { return; }\n\n        // focus item in current month\n        switch (key) {\n            case Direction.Left: {\n                step = -1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i > 0; i--) {\n                    day = nextView ? dates[i] : dates[i - 1];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Right: {\n                step = 1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i < dates.length - 1; i++) {\n                    day = nextView ? dates[i] : dates[i + 1];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Up: {\n                step = -7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i - 7 > -1; i -= 7) {\n                    day = nextView ? dates[i] : dates[i - 7];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Down: {\n                step = 7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i + 7 < 42; i += 7) {\n                    day = nextView ? dates[i] : dates[i + 7];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n        }\n\n        // focus item in prev/next visible month\n        const nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;\n        if (nextMonthView) {\n            dates = nextMonthView.dates.toArray();\n            day = dates.find((item) => item.date.date.getTime() === nextDate.getTime());\n\n            if (day && day.isFocusable) {\n                day.nativeElement.focus();\n                return;\n            }\n            nextMonthView.daysNavService.focusNextDate(day.nativeElement, key);\n        }\n\n        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc\n        // then it is needed to recalculate the next day, which is going to be part of the prev/next months\n        if (day && !day.isFocusable) {\n            day = dates[i + step];\n            if (!day) {\n                nextDate = this.timedelta(node.date.date, step + i - index);\n            }\n        }\n\n        // focus item in prev/next month, which is currently out of view\n        let dayIsNextMonth: boolean; // determine what we need to check for next date - if it belongs to prev or next month\n        if (day) { dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth; }\n        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {\n            const monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;\n            monthView.onViewChanging.emit({monthAction: monthAction, key: key, nextDate: nextDate});\n        }\n    }\n\n    /**\n     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusHomeDate() {\n        let monthView = this.monthView;\n        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n    }\n\n    /**\n     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusEndDate() {\n        let monthView = this.monthView;\n        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n    }\n\n    private timedelta(date: Date, units: number): Date {\n        const ret = new Date(date);\n        ret.setDate(ret.getDate() + units);\n        return ret;\n    }\n\n    private focusFirstDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private focusLastDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck,\n    OnInit\n} from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../../calendar/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, CalendarSelection } from '../calendar-base';\nimport { isEqual } from '../../core/utils';\nimport { IViewChangingEventArgs } from './days-view.interface';\nimport { IgxDaysViewNavigationService } from './daysview-navigation.service';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        },\n        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck, OnInit {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanging = new EventEmitter<IViewChangingEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * @hidden\n     */\n    public nextMonthView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public prevMonthView: IgxDaysViewComponent;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    constructor(public daysNavService: IgxDaysViewNavigationService) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.daysNavService.monthView = this;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public isSelected(date: ICalendarDate): boolean {\n        let selectedDates: Date | Date[];\n        if (this.isDateDisabled(date.date) || !this.value ||\n            (Array.isArray(this.value) && this.value.length === 0)\n            )  {\n            return false;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n            selectedDates = (this.value as Date);\n            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();\n        }\n\n        selectedDates = (this.value as Date[]);\n        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {\n            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();\n        }\n\n        if (this.selection === CalendarSelection.MULTI) {\n            const start = this.getDateOnly(selectedDates[0]);\n            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);\n\n            if (this.isWithinRange(date.date, false, start, end)) {\n                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());\n                return !!currentDate;\n            } else {\n                return false;\n            }\n\n        } else {\n            return this.isWithinRange(date.date, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isLastInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        const dates = this.value as Date[];\n        const lastDate = dates[dates.length - 1];\n        return isEqual(lastDate, date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isFirstInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        return isEqual((this.value as Date[])[0], date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean {\n        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {\n            return false;\n        }\n\n        min = min ? min : this.value[0];\n        max = max ? max : this.value[(this.value as Date[]).length - 1];\n\n        return isDateInRanges(date,\n            [\n                {\n                    type: DateRangeType.Between,\n                    dateRange: [min, max]\n                }\n            ]\n        );\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date.isFocusable) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    public getFirstMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private getLastMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    @HostListener('keydown.arrowright', ['$event'])\n    @HostListener('keydown.arrowup', ['$event'])\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrow(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.daysNavService.focusNextDate(event.target as HTMLElement, event.key);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getFirstMonthView().daysNavService.focusHomeDate();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getLastMonthView().daysNavService.focusEndDate();\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    ViewChildren,\n    QueryList,\n    OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval, Subscription } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n\nlet NEXT_ID = 0;\n\n/**\n * Calendar provides a way to display date information.\n *\n * @igxModule IgxCalendarModule\n *\n * @igxTheme igx-calendar-theme, igx-icon-theme\n *\n * @igxKeywords calendar, datepicker, schedule, date\n *\n * @igxGroup Scheduling\n *\n * @remarks\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * @example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit, OnDestroy {\n\n    /**\n     * Sets/gets the `id` of the calendar.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar id=\"my-first-calendar\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the calendar has header.\n     * Default value is `true`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [hasHeader]=\"false\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    get monthsViewNumber() {\n        return this._monthsViewNumber;\n    }\n\n    set monthsViewNumber(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._monthsViewNumber = val;\n    }\n\n    /**\n     * Apply the different states for the transitions of animateChange\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * Used to apply the active date when the calendar view is changed\n     *\n     * @hidden\n     * @internal\n     */\n    public nextDate: Date;\n\n    /**\n     * Denote if the calendar view was changed with the keyboard\n     *\n     * @hidden\n     * @internal\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public callback: (next) => void;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * ViewChild that represents the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * Month button, that displays the months view.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('monthsBtn')\n    public monthsBtns: QueryList<ElementRef>;\n\n    /**\n     * ViewChild that represents the decade view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * ViewChild that represents the days view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * ViewChildrenden representing all of the rendered days views.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('days', { read: IgxDaysViewComponent })\n    public monthViews: QueryList<IgxDaysViewComponent>;\n\n    /**\n     * Button for previous month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('prevMonthBtn', { static: false })\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * Button for next month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('nextMonthBtn', { static: false })\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * Denote if the year view is active.\n     * @hidden\n     * @internal\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * Gets the header template.\n     *\n     * @example\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     *\n     *  @example\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     *\n     * @example\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     *\n     * @example\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     *\n     * @example\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Date displayed in header\n     *\n     * @hidden\n     * @internal\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthsViewNumber = 1;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthViewsChanges$: Subscription;\n\n    public ngAfterViewInit() {\n        this.setSiblingMonths(this.monthViews);\n        this._monthViewsChanges$ = this.monthViews.changes.subscribe(c => {\n            this.setSiblingMonths(c);\n        });\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     * @internal\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Change to previous month\n     *\n     * @hidden\n     * @internal\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.getPrevMonth(this.viewDate);\n        this.animationAction = ScrollMonth.PREV;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Change to next month\n     *\n     * @hidden\n     * @internal\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.getNextMonth(this.viewDate);\n        this.animationAction = ScrollMonth.NEXT;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Continious navigation through the previous months\n     * @hidden\n     * @internal\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Continious navigation through the next months\n     * @hidden\n     * @internal\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Stop continuous navigation\n     * @hidden\n     * @internal\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        // generally the scrolling is built on the calendar component\n        // and all start/stop scrolling methods are called on the calendar\n        // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,\n        // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecade(args: Date, activeViewIdx: number) {\n        super.activeViewDecade(activeViewIdx);\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecadeKB(event, args: Date, activeViewIdx: number) {\n        super.activeViewDecadeKB(event, activeViewIdx);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * Handles invoked on date selection\n     * @hidden\n     * @internal\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        if (this.selection === 'multi') {\n            this.deselectDateInMonthViews(instance.date);\n        }\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public viewChanging(args: IViewChangingEventArgs) {\n        this.animationAction = args.monthAction;\n        this.isKeydownTrigger = true;\n        this.nextDate = args.nextDate;\n        this.callback = (next) => {\n            const day = this.daysView.dates.find((item) => item.date.date.getTime() === next.getTime());\n            if (day) {\n                this.daysView.daysNavService.focusNextDate(day.nativeElement, args.key, true);\n            }\n        };\n        this.viewDate = this.nextDate;\n    }\n\n    /**\n     * @hidden\n     * @intenal\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            const elem = this.monthsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx);\n            if (elem) { elem.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYear(args: Date, activeViewIdx: number, event?): void {\n        this.activeView = CalendarView.YEAR;\n        this.activeViewIdx = activeViewIdx;\n        requestAnimationFrame(() => {\n            this.monthsView.date = args;\n            this.focusMonth(event.target);\n        });\n    }\n\n    private focusMonth(target: HTMLElement) {\n        const month = this.monthsView.monthsRef.find((e) =>\n            e.index === parseInt(target.parentElement.attributes['data-month'].value, 10));\n        if (month) { month.nativeElement.focus(); }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYearKB(args: Date, event, activeViewIdx: number): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.onActiveViewYear(args, activeViewIdx, event);\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *\n     * @example\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.monthViews.forEach((view) => {\n            view.selectedDates = this.selectedDates;\n            view.rangeStarted = false;\n        });\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     * @hidden\n     * @internal\n     */\n    private deselectDateInMonthViews(value: Date) {\n        this.monthViews.forEach(m => {\n            m.deselectMultipleInMonth(value);\n         });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getViewDate(i: number): Date {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date;\n    }\n\n    /**\n     * Getter for the context object inside the calendar templates.\n     * @hidden\n     * @internal\n     */\n    public getContext(i: number) {\n        const date = this.getViewDate(i);\n        return this.generateContext(date, i);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public animationDone(event) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.scrollMonth$.next();\n        }\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let date = monthView.dates.find((d) => d.selected);\n\n        while (!date && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n            date = monthView.dates.find((d) => d.selected);\n        }\n        if (date && date.isFocusable && !this.isKeydownTrigger) {\n            setTimeout(() => {\n                date.nativeElement.focus();\n            }, parseInt(slideInRight.options.params.duration, 10));\n        } else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {\n            this.callback(this.nextDate);\n        }\n        this.animationAction = ScrollMonth.NONE;\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            let year = this.nextDate.getFullYear();\n\n            let month = this.nextDate.getMonth() + step;\n            if (isPageDown) {\n                if (month > 11) { month = 0; year += step; }\n            } else {\n                if (month < 0) { month = 11; year += step; }\n            }\n\n            const range = monthRange(this.nextDate.getFullYear(), month);\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setMonth(month);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        if (isPageDown) { this.nextMonth(true); } else {\n            this.previousMonth(true);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);\n\n        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;\n        this.isKeydownTrigger = true;\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            const year = this.nextDate.getFullYear() + step;\n\n            const range = monthRange(year, this.nextDate.getMonth());\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * Stop continuous navigation on mouseup event\n     * @hidden\n     * @internal\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        if (this._monthViewsChanges$) {\n            this._monthViewsChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     * @internal\n     */\n    private generateContext(value: Date, i?: number) {\n        const formatObject = {\n            index: i,\n            monthView: () => this.onActiveViewYear(value, i),\n            yearView: () => this.onActiveViewDecade(value, i),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     * @hidden\n     * @internal\n     */\n    private setSiblingMonths(monthViews: QueryList<IgxDaysViewComponent>) {\n        monthViews.forEach((item, index) => {\n            const prevMonthView = this.getMonthView(index - 1);\n            const nextMonthView = this.getMonthView(index + 1);\n            item.nextMonthView = nextMonthView;\n            item.prevMonthView = prevMonthView;\n        });\n    }\n\n    /**\n     * Helper method returning previous/next day views\n     * @hidden\n     * @internal\n     */\n    private getMonthView(index: number): IgxDaysViewComponent {\n        if (index === -1 || index === this.monthViews.length ) {\n            return null;\n        } else {\n            return this.monthViews.toArray()[index];\n        }\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input,\n    ElementRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false  })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false  })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false  })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn', { static: false })\n    public yearsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Calendar } from './calendar';\n\n@Pipe({\n    name: 'IgxMonthViewSlots'\n})\nexport class IgxMonthViewSlotsCalendar implements PipeTransform {\n    public transform(monthViews: number) {\n        return new Array(monthViews);\n    }\n}\n\n@Pipe({\n    name: 'IgxGetViewDate'\n})\nexport class IgxGetViewDateCalendar implements PipeTransform {\n    private calendar: Calendar;\n    constructor() {\n        this.calendar = new Calendar();\n    }\n    public transform(index: number, viewDate: Date, wholeDate = true) {\n        const date = this.calendar.timedelta(viewDate, 'month', index);\n        return wholeDate ? date : date.getMonth();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\nimport { IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar } from './months-view.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxMonthViewSlotsCalendar,\n        IgxGetViewDateCalendar\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs, PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef, private platformUtil: PlatformUtil) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0 && this.platformUtil.isBrowser) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n    private _active;\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [(active)] =\"model.isActive\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input()\n    public get active(): boolean {\n        return this._active;\n    }\n    public set active(value)  {\n        this._active = value;\n        this.activeChange.emit(this._active);\n    }\n    /**\n     *@hidden\n     */\n    @Output() public activeChange = new EventEmitter<boolean>();\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDisabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox is readonly.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [readonly]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let readonly = this.checkbox.readonly;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public readonly = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (this.readonly) {\n            // readonly prevents the component from changing state (see toggle() method).\n            // However, the native checkbox can still be activated through user interaction (focus + space, label click)\n            // Prevent the native change so the input remains in sync\n            event.preventDefault();\n        }\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IDropBaseEventArgs,\n    IDropDroppedEventArgs\n} from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\n\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n        /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     * ```typescript\n     * chipSelectEnd(event: IBaseChipEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelectionDone)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    @Output()\n    public onSelectionDone = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        }\n    }\n\n    public onSelectTransitionDone(event) {\n        if (event.propertyName === 'width' && !!event.target.tagName) {\n            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).\n            this.onSelectionDone.emit({\n                owner: this,\n                originalEvent: event\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behavior\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        if (this.animateOnRelease) {\n            this.dragDirective.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n    }\n    // End chip igxDrag behavior\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behavior\n    public onChipDragEnterHandler(event: IDropBaseEventArgs) {\n        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.drag.data.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IDropDroppedEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behavior\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            const selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        let selectedChips = this.chipsList.filter((chip) => chip.selected);\n        if (event.selected && !selectedChips.includes(event.owner)) {\n            selectedChips.push(event.owner);\n        } else if (!event.selected && selectedChips.includes(event.owner)) {\n            selectedChips = selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n    public get valueKey() {\n        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;\n    }\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        const valueKey = this.comboAPI.valueKey;\n        return valueKey !== null ? this.value[valueKey] : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.scrollPosition;\n        const scrollHeight = this.virtDir.getScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef, Type\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\nimport { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = IgxInputState.INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID = IgxInputState.VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = IgxInputState.INVALID\n}\n\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\n/**\n * When called with sets A & B, returns A - B (as array);\n * @hidden\n */\nfunction diffInSets(set1: Set<any>, set2: Set<any>): any[] {\n    const results = [];\n    set1.forEach(entry => {\n        if (!set2.has(entry)) {\n            results.push(entry);\n        }\n    });\n    return results;\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _remoteSelection = {};\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n    private _overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    private _valid = IgxComboState.INITIAL;\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('comboInput', { read: IgxInputDirective, static: true }) public comboInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput', { static: false })\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef, static: false })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef, static: false })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef, static: false })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef, static: false })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef, static: false })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef, static: false })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef, static: false })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef, static: false })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder;\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string = null;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * */\n     public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n     /**\n     * Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public set valid(valid: IgxComboState) {\n        this._valid = valid;\n        this.comboInput.valid = IgxInputState[IgxComboState[valid]];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.displayKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries(ids: any[], add = true) {\n        if (add) {\n            const selection = this.getValueDisplayPairs(ids);\n            for (const entry of selection) {\n                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];\n            }\n        } else {\n            for (const entry of ids) {\n                delete this._remoteSelection[entry];\n            }\n        }\n    }\n\n    /** For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`*/\n    private getValueDisplayPairs(ids: any[]) {\n        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {\n            return {\n                [this.valueKey]: e[this.valueKey],\n                [this.displayKey]: e[this.displayKey]\n            };\n        });\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, item);\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n                this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n        this.manageRequiredAsterisk();\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n           } else {\n                this.valid = IgxComboState.INITIAL;\n           }\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n            this.manageRequiredAsterisk();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any[]): void {\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        if (this.collapsed) {\n            this.getEditElement().focus();\n        } else {\n            this.focusSearchInput(true);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects a single item\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (select) {\n            this.selectItems([itemID], false, event);\n        } else {\n            this.deselectItems([itemID], event);\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const removed = diffInSets(this.selection.get(this.id), newSelection);\n        const added = diffInSets(newSelection, this.selection.get(this.id));\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: Array.from(newSelection),\n            oldSelection: Array.from(this.selection.get(this.id) || []),\n            added,\n            removed,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            let value = '';\n            if (this.isRemote) {\n                if (args.newSelection.length) {\n                    const removedItems = args.oldSelection.filter(e => args.newSelection.indexOf(e) < 0);\n                    const addedItems = args.newSelection.filter(e => args.oldSelection.indexOf(e) < 0);\n                    this.registerRemoteEntries(addedItems);\n                    this.registerRemoteEntries(removedItems, false);\n                    value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');\n                } else {\n                    // If new selection is empty, clear all items\n                    this.registerRemoteEntries(args.oldSelection, false);\n                }\n            } else {\n                value = this.displayKey !== null && this.displayKey !== undefined ?\n                    this.convertKeysToItems(args.newSelection).map(entry => entry[this.displayKey]).join(', ') :\n                    args.newSelection.join(', ');\n            }\n            this._value = value;\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems(keys: any[]) {\n        if (this.comboAPI.valueKey === null) {\n            return keys;\n        }\n        // map keys vs. filter data to retain the order of the selected items\n        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit,\n    Injector,\n    AfterViewChecked,\n    Type\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent, IgxInputState } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval, Subscription } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxTextSelectionModule} from '../directives/text-selection/text-selection.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE, isEqual, IBaseEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor,\n          EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets/gets whether the inactive dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 1;\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(\n        IgxOverlayService) private _overlayService: IgxOverlayService,\n        public element: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _moduleRef: NgModuleRef<any>,\n        private _injector: Injector) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     *An @Output property that is fired when date picker value is changed.\n     *```typescript\n     *public valueChanged(event){\n        *    alert(\"Date picker value is changed\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n        *```\n    */\n    @Output()\n    public valueChange = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild(IgxInputGroupComponent, { static: false })\n    protected inputGroup: IgxInputGroupComponent;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef, static: false })\n    private _inputElementRef: ElementRef;\n\n    @ContentChild(IgxInputDirective, { read: ElementRef, static: false })\n    protected _inputUserTemplateElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective, { static: false })\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective, { static: false })\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective, static: false })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective, static: false })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective, static: false })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective, static: false })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        this._value = value;\n        // TODO: do we need next call\n        this._cdr.markForCheck();\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n\n    /** @hidden */\n    public getEditElement() {\n        const inputDirectiveElementRef = this._inputElementRef || this._inputUserTemplateElementRef;\n        return (inputDirectiveElementRef) ? inputDirectiveElementRef.nativeElement : null;\n    }\n\n    /** @hidden */\n    public getInputGroupElement() {\n        return this.inputGroup ? this.inputGroup.element.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    // outside click\n                    this._updateValidityOnBlur();\n                }\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n\n        this._ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     *@hidden @internal\n    */\n    public ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n\n        if (this._ngControl) {\n            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of date picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this._inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this._inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.onSelection.emit(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        const oldValue =  this.value;\n        this.value = null;\n        this.emitValueChangeEvent(oldValue, this.value );\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-date-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayData=\"displayData\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayData\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-date-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                if (target) {\n                    this.dropDownOverlaySettings.positionStrategy.settings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    public mouseDown(e) {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or sufix, prevent default and this way prevent blur\n        if (e.target !== this.getEditElement()) {\n            e.preventDefault();\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.calendar.viewDate = date;\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        if (this.mode === InteractionMode.DropDown) {\n            this.calculateDate(event.target.value, event.type);\n        }\n\n        if (this.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog(this.getInputGroupElement());\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private emitValueChangeEvent(oldValue: Date, newValue: Date) {\n        if (!isEqual(oldValue, newValue)) {\n            this.valueChange.emit(newValue);\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                        const oldValue =  this.value;\n                        this.value = newValue;\n\n                        this.emitValueChangeEvent(oldValue, this.value );\n                        this.invalidDate = '';\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.hideOutsideDays = this.hideOutsideDays;\n        this.calendar.monthsViewNumber = this.monthsViewNumber;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    public _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (input && this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent, IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule,\n                IgxRippleModule, IgxMaskModule, IgxTextSelectionModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    @Input()\n    public get positionSettings(): PositionSettings {\n        return this._positionSettings;\n    }\n\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    public set positionSettings(settings: PositionSettings) {\n        this._positionSettings = settings;\n        this._overlayDefaultSettings.positionStrategy = new GlobalPositionStrategy(this._positionSettings);\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _positionSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs, IgxGridBaseComponent } from '../grids/grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        const newCell = this.createCell(cell);\n        newCell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: newCell.id,\n            rowID: newCell.id.rowID,\n            oldValue: newCell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n        if (this.rowEditing) {\n            if (this.row && !this.sameRow(newCell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = newCell;\n                this.beginRowEdit();\n                return;\n            }\n\n            this.cell = newCell;\n\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.cell = newCell;\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n    grid;\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n    rowSelection: Set<any> = new Set<any>();\n    private allRowsSelected: boolean;\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode, addToRange = true): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        if (addToRange) { this._ranges.add(JSON.stringify(this.generateRange(node))); }\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (this.grid.hasColumnLayouts) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(clearAcriveEl = false): void {\n        if (clearAcriveEl) { this.activeElement = null; }\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n\n    /** Returns array of the selected row id's. */\n    getSelectedRows(): Array<any> {\n        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];\n    }\n\n    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */\n    clearRowSelection(event?): void {\n        const removedRec = this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rID => this.isRowSelected(rID)) : this.getSelectedRows();\n        const newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(x => !removedRec.includes(x)) : [];\n        this.emitRowSelectionEvent(newSelection, [], removedRec, event);\n    }\n\n    /** Select all rows, if filtering is applied select only from filtered data. */\n    selectAllRows(event?) {\n        const allRowIDs = this.getRowIDs(this.allData);\n        const addedRows =  allRowIDs.filter((rID) => !this.isRowSelected(rID));\n        const newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;\n\n        this.emitRowSelectionEvent(newSelection, addedRows, [], event);\n    }\n\n    /** Select the specified row and emit event. */\n    selectRowById(rowID, clearPrevSelection?, event?): void {\n        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) { return; }\n        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;\n\n        const newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?\n            this.getSelectedRows() : [...this.getSelectedRows(), rowID];\n        const removed = clearPrevSelection ? this.getSelectedRows() : [];\n        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);\n    }\n\n    /** Deselect the specified row and emit event. */\n    deselectRow(rowID, event?): void {\n        if (!this.isRowSelected(rowID)) { return; }\n        const newSelection = this.getSelectedRows().filter(r => r !== rowID);\n        if (this.rowSelection.size && this.rowSelection.has(rowID)) {\n            this.emitRowSelectionEvent(newSelection, [], [rowID], event);\n        }\n    }\n\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.rowSelection.clear(); }\n        rowIDs.forEach(rowID => { this.rowSelection.add(rowID); });\n        this.allRowsSelected = undefined;\n    }\n\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void  {\n        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    isRowSelected(rowID): boolean {\n        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);\n    }\n\n    /** Select range from last selected row to the current specified row.*/\n    selectMultipleRows(rowID, rowData, event?): void  {\n        this.allRowsSelected = undefined;\n        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {\n            this.selectRowById(rowID);\n            return;\n        }\n        const gridData = this.allData;\n        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];\n        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));\n        const newIndex = gridData.indexOf(rowData);\n        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);\n\n        const added = this.getRowIDs(rows).filter(rID => !this.isRowSelected(rID));\n        const newSelection = this.getSelectedRows().concat(added);\n\n        this.emitRowSelectionEvent(newSelection, added, [], event);\n    }\n\n    areAllRowSelected(): boolean {\n        if (!this.grid.data) { return false; }\n        if (this.allRowsSelected !== undefined) { return this.allRowsSelected; }\n\n        const dataItemsID = this.getRowIDs(this.allData);\n        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&\n            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;\n    }\n\n    hasSomeRowSelected(): boolean {\n        const filteredData = this.isFilteringApplied() ?\n            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;\n        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();\n    }\n\n    public get filteredSelectedRowIds(): any[] {\n        return this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :\n            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));\n    }\n\n    public emitRowSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedRows();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onRowSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectRowsWithNoEvent(args.newSelection, true);\n    }\n\n    public getRowDataById(rowID): Object {\n        if (!this.grid.primaryKey) { return rowID; }\n        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);\n        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];\n    }\n\n    public getRowIDs(data): Array<any> {\n        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;\n    }\n\n    public clearHeaderCBState(): void  {\n        this.allRowsSelected = undefined;\n    }\n\n    /**Clear rowSelection and update checkbox state*/\n    public clearAllSelectedRows(): void {\n        this.rowSelection.clear();\n        this.clearHeaderCBState();\n    }\n\n    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */\n    public get allData(): Array<any> {\n        const allData = this.isFilteringApplied() || this.grid.sortingExpressions.length ?\n            this.grid.filteredSortedData : this.grid.gridAPI.get_all_data(true);\n        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));\n    }\n\n    private areEqualCollections(first, second): boolean {\n        return first.length === second.length && new Set(first.concat(second)).size === first.length;\n    }\n\n    private isFilteringApplied(): boolean {\n        const grid = this.grid as IgxGridBaseComponent;\n        return !FilteringExpressionsTree.empty(grid.filteringExpressionsTree) ||\n        !FilteringExpressionsTree.empty(grid.advancedFilteringExpressionsTree);\n    }\n\n    private isRowDeleted(rowID): boolean {\n        return this.grid.gridAPI.row_deleted_transaction(rowID);\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { PlatformUtil } from './utils';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    private platformBrowser: boolean;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {};\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any, private platformUtil: PlatformUtil) {\n        this.platformBrowser = this.platformUtil.isBrowser;\n        if (this.platformBrowser) {\n            this.hammerOptions = {\n                // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n                // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n                inputClass: Hammer.TouchInput,\n                recognizers: [\n                    [Hammer.Pan, { threshold: 0 }],\n                    [Hammer.Swipe, {\n                        direction: Hammer.DIRECTION_HORIZONTAL\n                    }],\n                    [Hammer.Tap],\n                    [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n                ]\n            };\n        }\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(\n        element: HTMLElement,\n        eventName: string,\n        eventHandler: (eventObj) => void,\n        options: HammerOptions = null): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport enum GridSelectionMode {\n    none = 'none',\n    single = 'single',\n    multiple = 'multiple',\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport {\n    getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick, PlatformUtil\n} from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty, DeprecateMethod } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridSelectionMode } from './common/enums';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: ColumnType;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: RowType;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    get cellSelectionMode() {\n        return this._cellSelection;\n    }\n\n    set cellSelectionMode(value) {\n        if (this._cellSelection === value) { return; }\n         this.zone.runOutsideAngular(() => {\n            value === GridSelectionMode.multiple ?\n            this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);\n        });\n        this._cellSelection = value;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n        this.grid.notifyChanges();\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n                return rowTransaction && rowTransaction.value &&\n                (rowTransaction.value[this.column.field] ||\n                 rowTransaction.value[this.column.field] === 0 ||\n                 rowTransaction.value[this.column.field] === false);\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective, static: false })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n    private _cellSelection = GridSelectionMode.multiple;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil) { }\n\n    private addPointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.addEventListener('pointerup', this.pointerup);\n    }\n\n    private  removePointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.removeEventListener('pointerup', this.pointerup);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.addPointerListeners(this.cellSelectionMode);\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        if (this.platformUtil.isIOS) {\n            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n                cssProps: { } /* don't disable user-select, etc */\n            } as HammerOptions);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.removePointerListeners(this.cellSelectionMode);\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n            }\n            crud.end();\n            this.grid.notifyChanges();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n        this.focused = true;\n        this.row.focused = true;\n        const node = this.selectionNode;\n        const shouldEmitSelection = !this.selectionService.isActiveNode(node);\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {\n            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation\n            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n        }\n        if (this.grid.isCellSelectable && shouldEmitSelection) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.grid.isRowSelectable) {\n                    this.row.selected ? this.selectionService.deselectRow(this.row.rowID, event) :\n                    this.selectionService.selectRowById(this.row.rowID, false, event);\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const args = this.crudService.cell.createEditEventArgs();\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    Injectable\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n@Injectable()\nexport abstract class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent, static: false })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    get selected(): boolean {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    set selected(value: boolean) {\n        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :\n        this.selectionService.deselectRowsWithNoEvent([this.rowID]);\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        if ((this.grid as any).groupingExpressions.length) {\n            return this.grid.filteredSortedData.indexOf(this.rowData);\n        }\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowSelectors(): boolean {\n        return this.grid.showRowSelectors;\n    }\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    @DeprecateProperty('isSelected property is deprecated. Use selected property instead.')\n    public get isSelected() {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n\n    constructor(\n        public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (this.grid.rowSelection === 'none' || this.deleted) { return; }\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowSelectorClick(event) {\n        event.stopPropagation();\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selected ? this.selectionService.deselectRow(this.rowID, event) :\n        this.selectionService.selectRowById(this.rowID, false, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.selected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function WatchColumnChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            originalSetter.call(this, val);\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                if (this.rowIslandAPI.rowIsland) {\n                    this.rowIslandAPI.rowIsland.updateColumnList();\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function notifyChanges(repaint = false) {\n    return (_: any, key: string, propDesc?: PropertyDescriptor) => {\n\n        const privateKey = `__${key}`;\n\n        propDesc = propDesc || {\n            enumerable: true,\n            configurable: true\n        };\n\n\n        const originalSetter = propDesc ? propDesc.set : null;\n\n        propDesc.get = propDesc.get || (function(this) { return this[privateKey]; });\n\n        propDesc.set = function(this, newValue) {\n            if (originalSetter) {\n                originalSetter.call(this, newValue);\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            } else {\n                if (newValue === this[key]) { return; }\n                this[privateKey] = newValue;\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            }\n        };\n        return propDesc as any;\n    };\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public rowIsland: IgxRowIslandComponent;\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    OnDestroy,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { WatchColumnChanges } from './watch-changes';\nimport { IgxRowIslandAPIService } from './hierarchical-grid/row-island-api.service';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand\n} from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { notifyChanges } from './watch-changes';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    IgxCellTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './common/templates';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit, OnDestroy {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    groupable = false;\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(hidden)] = \"model.isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            this.hiddenChange.emit(this._hidden);\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n                return;\n            }\n            if (this.grid) {\n                this.grid.endEdit(false);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.filteringService.refreshExpressions();\n                this.grid.filteringService.hideFilteringRowOnColumnVisibilityChange(this);\n                this.grid.notifyChanges();\n                // this.grid.refreshSearch(true);\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disableHiding = false;\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disablePinning = false;\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @notifyChanges()\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(width)]=\"model.columns[0].width\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n            this.widthChange.emit(this._width);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public widthChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey, cellValue, rowIndex) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public cellClasses: any;\n\n    /**\n     * Sets conditional style properties on the column cells.\n     * Similar to `ngStyle` it accepts an object literal where the keys are\n     * the style properties and the value is the expression to be evaluated.\n     * As with `cellClasses` it accepts a callback function.\n     * ```typescript\n     * styles = {\n     *  background: 'royalblue',\n     *  color: (rowData, columnKey, cellValue, rowIndex) => value.startsWith('Important') : 'red': 'inherit'\n     * }\n     * ```\n     * ```html\n     * <igx-column [cellStyles]=\"styles\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    cellStyles = null;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(pinned)] = \"model.columns[0].isPinned\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n            this.pinnedChange.emit(this._pinned);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pinnedChange = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     * class CustomSortingStrategy extends SortingStrategy {...}\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n    * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n    * ```typescript\n    * let columnLayoutChild =  this.column.columnLayoutChild;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective, static: false })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective, static: false })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective, static: false })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet = col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                            (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                            (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n        const res = this.getFilledChildColumnSizes(children);\n        return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1 });\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        if (!this.parent && !this.pinnable) {\n            return false;\n        }\n\n        this._pinned = true;\n        this.pinnedChange.emit(this._pinned);\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        // this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n        this.pinnedChange.emit(this._pinned);\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        // this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (grid.calcWidth - grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     *@hidden\n    */\n    public get pinnable() {\n        const gridUnpinnedWidth = (this.grid as any).getUnpinnedWidth(true);\n        const elementWidth = this.parent ? parseInt(this.topLevelParent.width, 10) : parseInt(this.width, 10);\n        return (this.grid as any)._init || !((gridUnpinnedWidth - elementWidth) < this.grid.unpinnedAreaMinWidth);\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit, OnDestroy {\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-column [(hidden)] = \"model.columns[0].isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.hiddenChange.emit(this._hidden);\n        this.children.forEach(child => child.hidden = value);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n        /*\n            TO DO: In Angular 9 this need to be removed, because the @ContentChildren will not return the `parent`\n            component in the query list.\n        */\n        this.children.changes.pipe(takeUntil(this.destroy$))\n            .subscribe((change) => {\n                if (change.first === this) {\n                    this.children.reset(this.children.toArray().slice(1));\n                    this.children.forEach(child => {\n                        child.parent = this;\n                    });\n                }\n            });\n    }\n\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr, rowIslandAPI);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit, OnDestroy {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach(x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n            .filter(x => !x.columnGroup && !x.hidden)\n            .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({ column: child, index: vIndex });\n        });\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener,\n    ViewContainerRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostClass = 'igx-grid__drag-ghost-image';\n    private ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _viewContainer: ViewContainerRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _viewContainer, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostClass = this._ghostClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createGhost(pageX, pageY) {\n        super.createGhost(pageX, pageY);\n\n        this.ghostElement.style.height = null;\n        this.ghostElement.style.minWidth = null;\n        this.ghostElement.style.flexBasis = null;\n        this.ghostElement.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.ghostImgIconClass);\n\n            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);\n\n            this.renderer.addClass(icon, this.ghostImgIconGroupClass);\n            this.ghostElement.children[0].style.paddingLeft = '0px';\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.scrollPosition += 15 :\n                        this.horizontalScroll.scrollPosition -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface RowEditPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class RowEditPositionStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: RowEditPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        return this.column.pinnable;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxButtonDirective } from '../directives/button/button.directive';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent, static: false })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent, { static: false })\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { read: IgxButtonDirective, static: false })\n    public columnHidingButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent, static: false })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { read: IgxButtonDirective, static: false })\n    public exportButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent, static: false })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent, { static: false })\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { read: IgxButtonDirective, static: false })\n    public columnPinningButton: IgxButtonDirective;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showAdvancedFilteringUI() {\n        this.grid.openAdvancedFilteringDialog();\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { GridType } from './common/grid.interface';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n\n    constructor(public api: GridBaseAPIService<any>, public element: ElementRef) {}\n\n    get grid(): GridType {\n        return this.api.grid;\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||\n            (this.grid.rowEditTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        const activeNode = this.grid.selectionService.activeElement;\n        //  on right click activeNode is deleted, so we may have no one\n        if (activeNode) {\n            const cell = this.grid.navigation.getCellElementByVisibleIndex(\n                activeNode.row,\n                activeNode.layout ? activeNode.layout.columnVisibleIndex : activeNode.column);\n            cell.focus();\n        }\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        if (!this.grid.navigation.isColumnFullyVisible(this.currentCellIndex)) {\n            this.grid.navigation.performHorizontalScrollToCell(\n                this.grid.rowInEditMode.index, this.currentCellIndex, false, this.activateCell);\n        } else {\n            this.activateCell();\n        }\n    }\n\n    /**\n     * Sets the cell in edit mode and focus its native element\n     * @param cellIndex index of the cell to activate\n     */\n    private activateCell = (): void => {\n        const cell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === this.currentCellIndex);\n        cell.nativeElement.focus();\n        cell.setEditMode(true);\n        this.currentCellIndex = -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    TemplateRef,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { DataType } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        const column = this.grid.getColumnByName(this.groupRow.expression.fieldName);\n        return (column && column.dataType) || DataType.String;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from '../core/grid-selection';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { FilterMode } from './common/enums';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: GridType;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.ceil(this.grid.headerContainer.scrollPosition);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) || this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);\n    }\n\n    public isColumnRightEdgeVisible(columnIndex: number) {\n        const forOfDir: IgxForOfDirective<any> = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftEdgeVisible(columnIndex: number) {\n        const forOfDir = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    private forOfDir(): IgxForOfDirective<any> {\n        let forOfDir: IgxForOfDirective<any>;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        return forOfDir;\n    }\n\n    private isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === columnIndex);\n        return (!horizontalScroll.clientWidth || column.pinned);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`) as HTMLElement;\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1) {\n            if (this.grid.rowEditTabs.length) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select last editable cell\n                prevEditableColumnIndex = this.grid.lastEditableColumnIndex;\n            }\n\n        }\n        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1) {\n            if ( this.grid.rowEditTabs.length) {\n                 //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select first editable cell\n                nextEditableColumnIndex = this.grid.firstEditableColumnIndex;\n            }\n        }\n        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnRightEdgeVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const targetIndex = this.findFirstDataRowIndex();\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        if (targetScr >= verticalScroll.scrollTop) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[0] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { (cells[0] as HTMLElement).focus(); }\n                });\n        }\n    }\n\n    private findFirstDataRowIndex() {\n        const dv = this.grid.dataView;\n        return dv.findIndex(rec => !this.grid.isGroupByRecord(rec));\n    }\n\n    private findLastDataRowIndex() {\n        let i = this.grid.dataView.length;\n        while (i--) {\n            const rec = this.grid.dataView[i];\n            if (!this.grid.isGroupByRecord(rec)) {\n                 return i;\n            }\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[cells.length - 1] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        (cells[cells.length - 1] as HTMLElement).focus();\n                    }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.dataView.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const targetIndex = this.findFirstDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollTop === targetScr) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    this.onKeydownHome(this.grid.dataRowList.first.index);\n                });\n        }\n    }\n\n    public goToLastCell() {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.dataView.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.dataView.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.moveNextEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.movePreviousEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (visibleColumnIndex === 0) {\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    const cellElement = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n                    if (cellElement) {\n                        cellElement.focus({ preventScroll: true });\n                    }\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n            `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n          <path d=\"M18,4.5H6A1.5,1.5,0,0,0,4.5,6V18A1.5,1.5,0,0,0,6,19.5h6.75V18H6V6H18v6.75h1.5V6A1.5,1.5,0,0,0,18,4.5Z\"/>\n          <rect x=\"7.5\" y=\"12.75\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"14.25\" y=\"14.25\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"7.5\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"12.75\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n        </svg>`\n    }\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { IColumnVisibilityChangedEventArgs } from '../grid';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n    private _filterIconsRegistered = false;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return this.grid.headerContainer.scrollPosition;\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Close filtering row if a column is hidden.\n     */\n    public hideFilteringRowOnColumnVisibilityChange(col: IgxColumnComponent) {\n        const filteringRow = this.grid.filteringRow;\n\n        if (filteringRow && filteringRow.column && filteringRow.column === col) {\n            filteringRow.close();\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        if (!this._filterIconsRegistered) {\n            for (const icon of icons) {\n                if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                    this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n                }\n            }\n            this._filterIconsRegistered = true;\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n            if (column) {\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n                this.columnToExpressionsMap.set(columnId, expressionUIs);\n            }\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.scrollPosition += currentColumnRight - width;\n        } else {\n            forOfDir.scrollPosition = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean {\n        if (FilteringExpressionsTree.empty(expressionTree)) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild,\n    ChangeDetectorRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n@Directive({\n    selector: '[igxExcelStyleLoading]'\n})\nexport class IgxExcelStyleLoadingValuesTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    private _isLoading;\n\n    public get isLoading() {\n        return this._isLoading;\n    }\n\n    public set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public searchValue: any;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;\n\n    public get valuesLoadingTemplate() {\n        if (this.grid.excelStyleLoadingValuesTemplateDirective) {\n            return this.grid.excelStyleLoadingValuesTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleLoadingValuesTemplate;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit() {\n        this.refreshSize();\n    }\n\n    public refreshSize() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS, IBaseEventArgs } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs extends IBaseEventArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent, static: false })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = DataUtil.parseValue(this.column.dataType, eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef, static: false })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef, static: false })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent, static: true })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from '../../grid.common';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n    public isBlanks = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSorting]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMoving]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHiding]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinning]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, OnInit, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef, static: true })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent, static: true })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent, static: true })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent, static: true })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent, static: false })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    public isColumnPinnable: boolean;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.isColumnPinnable = this.column.pinnable;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public pinClass() {\n        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        if (this.grid.uniqueColumnValuesStrategy) {\n            this.renderColumnValuesRemotely();\n        } else {\n            this.renderColumnValuesFromData();\n        }\n    }\n\n    private renderColumnValuesRemotely() {\n        this.excelStyleSearch.isLoading = true;\n        const expressionsTree: FilteringExpressionsTree = this.getColumnFilterExpressionsTree();\n\n        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals: any[]) => {\n            const columnValues = (this.column.dataType === DataType.Date) ?\n                colVals.map(val => val ? val.toDateString() : val) : colVals;\n\n            this.renderValues(columnValues);\n            this.excelStyleSearch.isLoading = false;\n            this.excelStyleSearch.refreshSize();\n        });\n    }\n\n    public renderColumnValuesFromData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const expressionsTree = this.getColumnFilterExpressionsTree();\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        const columnField = this.column.field;\n        const columnValues = (this.column.dataType === DataType.Date) ?\n            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :\n            data.map(record => record[columnField]);\n\n        this.renderValues(columnValues);\n    }\n\n    private renderValues(columnValues: any[]) {\n        this.generateUniqueValues(columnValues);\n        this.generateFilterValues(this.column.dataType === DataType.Date);\n        this.generateListData();\n    }\n\n    private generateUniqueValues(columnValues: any[]) {\n        this.uniqueValues = Array.from(new Set(columnValues));\n    }\n\n    private generateFilterValues(isDateColumn: boolean = false) {\n        if (isDateColumn) {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n    }\n\n    private generateListData() {\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    private getColumnFilterExpressionsTree() {\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        return expressionsTree;\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n\n        const numberPipe = new IgxDecimalPipeComponent(this.column.grid.locale);\n        const datePipe = new IgxDatePipeComponent(this.column.grid.locale);\n\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    const date = new Date(element);\n\n                    filterListItem.value = date;\n\n                    filterListItem.label = this.column.formatter ?\n                        this.column.formatter(date) :\n                        datePipe.transform(date, this.column.grid.locale);\n\n                } else if (this.column.dataType === DataType.Number) {\n                    filterListItem.value = element;\n\n                    filterListItem.label = this.column.formatter ?\n                        this.column.formatter(element) :\n                        numberPipe.transform(element, this.column.grid.locale);\n\n                } else {\n                    filterListItem.value = element;\n\n                    filterListItem.label = this.column.formatter ?\n                        this.column.formatter(element) :\n                        element;\n                }\n\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        blanks.isBlanks = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private selectAllFilterItems() {\n        this.listData.forEach(filterListItem => {\n            filterListItem.isSelected = true;\n            filterListItem.indeterminate = false;\n        });\n        this.excelStyleSearch.cdr.detectChanges();\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.selectAllFilterItems();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: false })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef, static: false })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent, static: false })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent, static: false })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent, { static: false })\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent, { static: false })\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { PaginatorResourceStringsEN } from './paginator-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),\n    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_advanced_filter_title?: string;\n    igx_grid_advanced_filter_and_group?: string;\n    igx_grid_advanced_filter_or_group?: string;\n    igx_grid_advanced_filter_end_group?: string;\n    igx_grid_advanced_filter_create_and_group?: string;\n    igx_grid_advanced_filter_create_or_group?: string;\n    igx_grid_advanced_filter_and_label?: string;\n    igx_grid_advanced_filter_or_label?: string;\n    igx_grid_advanced_filter_add_condition?: string;\n    igx_grid_advanced_filter_ungroup?: string;\n    igx_grid_advanced_filter_delete?: string;\n    igx_grid_advanced_filter_delete_filters?: string;\n    igx_grid_advanced_filter_initial_text?: string;\n    igx_grid_advanced_filter_column_placeholder?: string;\n    igx_grid_advanced_filter_value_placeholder?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_advanced_filter_title: 'Advanced Filtering',\n    igx_grid_advanced_filter_and_group: '\"And\" Group',\n    igx_grid_advanced_filter_or_group: '\"Or\" Group',\n    igx_grid_advanced_filter_end_group: 'End Group',\n    igx_grid_advanced_filter_create_and_group: 'Create \"And\" Group',\n    igx_grid_advanced_filter_create_or_group: 'Create \"Or\" Group',\n    igx_grid_advanced_filter_and_label: 'and',\n    igx_grid_advanced_filter_or_label: 'or',\n    igx_grid_advanced_filter_add_condition: 'Condition',\n    igx_grid_advanced_filter_ungroup: 'Ungroup',\n    igx_grid_advanced_filter_delete: 'Delete',\n    igx_grid_advanced_filter_delete_filters: 'Delete filters',\n    igx_grid_advanced_filter_initial_text: 'Start with creating a group of conditions linked with \"And\" or \"Or\"',\n    igx_grid_advanced_filter_column_placeholder: 'Select column',\n    igx_grid_advanced_filter_value_placeholder: 'Value'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","export interface IPaginatorResourceStrings {\n    igx_paginator_label?: string;\n}\n\nexport const PaginatorResourceStringsEN: IPaginatorResourceStrings = {\n    igx_paginator_label: 'Items per page'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.notifyChanges(true);\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                rowSummaries.set(column.field,\n                    column.summaries.operate(data.map(r => r[column.field]), data, column.field));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.grid.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { IBaseEventArgs } from '../../core/utils';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    @Output()\n    public onBeforeViewDetach = new EventEmitter<IViewChangeEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        } else {\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs extends IBaseEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy,\n    ViewRef\n} from '@angular/core';\nimport { DataType, DataUtil } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (this._column) {\n            this.expressionsList.forEach(exp => exp.isSelected = false);\n        }\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef, static: false })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef, static: false })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef, static: false })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand', { static: false })\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);\n        if (selectedItem) {\n            this.expression = selectedItem.expression;\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);\n        selectedItem.forEach(e => e.isSelected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0 &&\n            this.expression.condition && !this.expression.condition.isUnary) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n\n            if (focusedElement.className === 'igx-chip__remove' || focusedElement.tagName === 'IGX-DAY-ITEM') {\n                return;\n            }\n\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))\n                && this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n\n            this.filter();\n        } else {\n            const condToRemove = this.expressionsList.filter(ex => ex.expression.searchVal === null && !ex.expression.condition.isUnary);\n            if (condToRemove && condToRemove.length > 0) {\n                condToRemove.forEach(c => this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(c)));\n                this.filter();\n            }\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() { }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement &&\n            this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, item: ExpressionUI) {\n        if (this._cancelChipClick) {\n            this._cancelChipClick = false;\n            return;\n        }\n\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n\n        this.toggleChip(item);\n    }\n\n    public toggleChip(item: ExpressionUI) {\n        item.isSelected = !item.isSelected;\n        if (item.isSelected) {\n            this.expression = item.expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n\n            this.toggleChip(item);\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                if (!(this.cdr as ViewRef).destroyed) {\n                    this.cdr.detectChanges();\n                }\n            }\n        });\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, DoCheck, Input } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    private _text: any;\n\n    /**\n     * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.\n     *\n     * ```typescript\n     *  //get\n     *  let mySelectedItem = this.dropDown.selectedItem;\n     *  let selectedItemText = mySelectedItem.text;\n     * ```\n\n     * ```html\n     * // set\n     * <igx-select-item [text]=\"'London'\"></igx-select-item>\n     * ```\n     */\n    @Input()\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n        this._text = text;\n    }\n\n    /** @hidden @internal */\n    public get itemText() {\n        if (this._text !== undefined) {\n            return this._text;\n        }\n        // If text @Input is undefined, try extract a meaningful item text out of the item template\n        return this.elementRef.nativeElement.textContent.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, Util } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectBase } from './select.common';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectBase, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = Util.getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private listContainerBoundRect: DOMRect;\n    private itemTextToInputTextDiff: number;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.itemTextToInputTextDiff}px`;\n        this.deltaY = CURRENT_POSITION_Y -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top - this.itemTextToInputTextDiff;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.itemTextToInputTextDiff + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = Util.getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        const inputFontSize = window.getComputedStyle(inputElement).fontSize;\n        const numericInputFontSize = parseInt(inputFontSize.slice(0, inputFontSize.indexOf('p')), 10) || 0;\n        const itemFontSize = window.getComputedStyle(itemElement).fontSize;\n        const numericItemFontSize = parseInt(itemFontSize.slice(0, itemFontSize.indexOf('p')), 10) || 0;\n        const inputTextToInputTop = (inputHeight - numericInputFontSize) / 2;\n        const itemTextToItemTop = (itemHeight - numericItemFontSize) / 2;\n        this.itemTextToInputTextDiff = itemTextToItemTop - inputTextToInputTop;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const selectItemPaddingHorizontal = 24;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericLeftPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericLeftPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericLeftPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + selectItemPaddingHorizontal * 2 + 'px';\n        this.deltaX = START.X - numericLeftPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                            // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional,\n    Injector, OnInit, AfterViewInit, OnDestroy, Inject, Type\n\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef, static: false })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    //#region ControlValueAccessor\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n    /** @hidden @internal */\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n    //#endregion\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        this._onTouchedCallback();\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus(): void {\n        this._onTouchedCallback();\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n}\n\n","import {\n    Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit, OnDestroy, HostBinding\n} from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, Point, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { IgxGridBaseComponent, IgxColumnComponent } from '../../grid';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';\nimport { DataUtil } from './../../../data-operations/data-util';\n\n/**\n *@hidden\n */\nclass ExpressionItem {\n    constructor(parent?: ExpressionGroupItem) {\n        this.parent = parent;\n    }\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n\n/**\n *@hidden\n */\nclass ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem) {\n        super(parent);\n        this.operator = operator;\n        this.children = [];\n    }\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n\n/**\n *@hidden\n */\nclass ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem) {\n        super(parent);\n        this.expression = expression;\n    }\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n}\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-advanced-filtering-dialog',\n    templateUrl: './advanced-filtering-dialog.component.html'\n})\nexport class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    public rootGroup: ExpressionGroupItem;\n\n    public selectedExpressions: ExpressionOperandItem[] = [];\n\n    public selectedGroups: ExpressionGroupItem[] = [];\n\n    public currentGroup: ExpressionGroupItem;\n\n    public editedExpression: ExpressionOperandItem;\n\n    public addModeExpression: ExpressionOperandItem;\n\n    public contextualGroup: ExpressionGroupItem;\n\n    public filteringLogics;\n\n    public selectedCondition: string;\n    public searchValue: any;\n\n    public _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Top\n    };\n    public _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    public columnSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    public conditionSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    @ViewChild('columnSelect', { read: IgxSelectComponent, static: false })\n    public columnSelect: IgxSelectComponent;\n\n    @ViewChild('conditionSelect', { read: IgxSelectComponent, static: false })\n    public conditionSelect: IgxSelectComponent;\n\n    @ViewChild('searchValueInput', { read: ElementRef, static: false })\n    public searchValueInput: ElementRef;\n\n    @ViewChild('addRootAndGroupButton', { read: ElementRef, static: false })\n    public addRootAndGroupButton: ElementRef;\n\n    @ViewChild('addConditionButton', { read: ElementRef, static: false })\n    public addConditionButton: ElementRef;\n\n    @ViewChild('editingInputsContainer', { read: ElementRef, static: false })\n    public set editingInputsContainer(value: ElementRef) {\n        if ((value && !this._editingInputsContainer) ||\n            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._editingInputsContainer = value;\n    }\n\n    public get editingInputsContainer(): ElementRef {\n        return this._editingInputsContainer;\n    }\n\n    @ViewChild('addModeContainer', { read: ElementRef, static: false })\n    public set addModeContainer(value: ElementRef) {\n        if ((value && !this._addModeContainer) ||\n            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._addModeContainer = value;\n    }\n\n    public get addModeContainer(): ElementRef {\n        return this._addModeContainer;\n    }\n\n    @ViewChild('currentGroupButtonsContainer', { read: ElementRef, static: false })\n    public set currentGroupButtonsContainer(value: ElementRef) {\n        if ((value && !this._currentGroupButtonsContainer) ||\n            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._currentGroupButtonsContainer = value;\n    }\n\n    public get currentGroupButtonsContainer(): ElementRef {\n        return this._currentGroupButtonsContainer;\n    }\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public contextMenuToggle: IgxToggleDirective;\n\n    @ViewChildren(IgxChipComponent)\n    public chips: QueryList<IgxChipComponent>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    @HostBinding('style.display')\n    display = 'block';\n\n    private destroy$ = new Subject<any>();\n    private _selectedColumn: IgxColumnComponent;\n    private _clickTimer;\n    private _dblClickDelay = 200;\n    private _preventChipClick = false;\n    private _editingInputsContainer: ElementRef;\n    private _addModeContainer: ElementRef;\n    private _currentGroupButtonsContainer: ElementRef;\n\n    constructor(private element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit(): void {\n        this._overlaySettings.outlet = this.overlayOutlet;\n        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;\n        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;\n\n        this.contextMenuToggle.onClosed.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.contextualGroup = null;\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayDensity() {\n        return this.grid.displayDensity;\n    }\n\n    public get selectedColumn(): IgxColumnComponent {\n        return this._selectedColumn;\n    }\n\n    public set selectedColumn(value: IgxColumnComponent) {\n        const oldValue = this._selectedColumn;\n\n        if (this._selectedColumn !== value) {\n            this._selectedColumn = value;\n            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {\n                this.selectedCondition = null;\n                this.searchValue = null;\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    get grid(): IgxGridBaseComponent {\n        return this.filteringService.grid;\n    }\n\n    get filterableColumns(): IgxColumnComponent[] {\n        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);\n    }\n\n    public dragStart(dragArgs: IDragStartEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.contextMenuToggle.element.style.display = 'none';\n        }\n    }\n\n    public dragEnd(dragArgs: IDragBaseEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n            this.contextMenuToggle.element.style.display = '';\n        }\n    }\n\n    public addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const operandItem = new ExpressionOperandItem({\n            fieldName: null,\n            condition: null,\n            ignoreCase: true,\n            searchVal: null\n        }, parent);\n\n        if (afterExpression) {\n            const index = parent.children.indexOf(afterExpression);\n            parent.children.splice(index + 1, 0, operandItem);\n        } else {\n            parent.children.push(operandItem);\n        }\n\n        this.enterExpressionEdit(operandItem);\n    }\n\n    public addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.And, parent, afterExpression);\n    }\n\n    public addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.Or, parent, afterExpression);\n    }\n\n    public endGroup(groupItem: ExpressionGroupItem) {\n        this.currentGroup = groupItem.parent;\n    }\n\n    public commitOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.expression.fieldName = this.selectedColumn.field;\n            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);\n            this.editedExpression.expression.searchVal = DataUtil.parseValue(this.selectedColumn.dataType, this.searchValue);\n            this.editedExpression.columnHeader = this.selectedColumn.header;\n\n            this.editedExpression.inEditMode = false;\n            this.editedExpression = null;\n        }\n    }\n\n    public cancelOperandAdd() {\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n            this.addModeExpression = null;\n        }\n    }\n\n    public cancelOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n\n            if (!this.editedExpression.expression.fieldName) {\n                this.deleteItem(this.editedExpression);\n            }\n\n            this.editedExpression = null;\n        }\n    }\n\n    public operandCanBeCommitted(): boolean {\n        return this.selectedColumn && this.selectedCondition &&\n            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);\n    }\n\n    public exitOperandEdit() {\n        if (!this.editedExpression) {\n            return;\n        }\n\n        if (this.operandCanBeCommitted()) {\n            this.commitOperandEdit();\n        } else {\n            this.cancelOperandEdit();\n        }\n    }\n\n    public isExpressionGroup(expression: ExpressionItem): boolean {\n        return expression instanceof ExpressionGroupItem;\n    }\n\n    private addGroup(operator: FilteringLogic, parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        if (parent) {\n            if (afterExpression) {\n                const index = parent.children.indexOf(afterExpression);\n                parent.children.splice(index + 1, 0, groupItem);\n            } else {\n                parent.children.push(groupItem);\n            }\n        } else {\n            this.rootGroup = groupItem;\n        }\n\n        this.addCondition(groupItem);\n        this.currentGroup = groupItem;\n    }\n\n    private createExpressionGroupItem(expressionTree: IFilteringExpressionsTree, parent?: ExpressionGroupItem): ExpressionGroupItem {\n        let groupItem: ExpressionGroupItem;\n        if (expressionTree) {\n            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);\n\n            for (const expr of expressionTree.filteringOperands) {\n                if (expr instanceof FilteringExpressionsTree) {\n                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));\n                } else {\n                    const filteringExpr = expr as IFilteringExpression;\n                    const exprCopy: IFilteringExpression = {\n                        fieldName: filteringExpr.fieldName,\n                        condition: filteringExpr.condition,\n                        searchVal: filteringExpr.searchVal,\n                        ignoreCase: filteringExpr.ignoreCase\n                    };\n                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);\n                    const column = this.grid.getColumnByName(filteringExpr.fieldName);\n                    operandItem.columnHeader = column.header;\n                    groupItem.children.push(operandItem);\n                }\n            }\n        }\n\n        return groupItem;\n    }\n\n    private createExpressionsTreeFromGroupItem(groupItem: ExpressionGroupItem): FilteringExpressionsTree {\n        if (!groupItem) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);\n\n        for (const item of groupItem.children) {\n            if (item instanceof ExpressionGroupItem) {\n                const subTree = this.createExpressionsTreeFromGroupItem((item as ExpressionGroupItem));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                expressionsTree.filteringOperands.push((item as ExpressionOperandItem).expression);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    public onChipRemove(expressionItem: ExpressionItem) {\n       this.deleteItem(expressionItem);\n    }\n\n    public onChipClick(expressionItem: ExpressionOperandItem) {\n        this._clickTimer = setTimeout(() => {\n            if (!this._preventChipClick) {\n                this.onToggleExpression(expressionItem);\n            }\n            this._preventChipClick = false;\n        }, this._dblClickDelay);\n    }\n\n    public onChipDblClick(expressionItem: ExpressionOperandItem) {\n        clearTimeout(this._clickTimer);\n        this._preventChipClick = true;\n        this.enterExpressionEdit(expressionItem);\n    }\n\n    public enterExpressionEdit(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n        this.cancelOperandAdd();\n\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n        }\n\n        expressionItem.hovered = false;\n\n        this.selectedColumn = expressionItem.expression.fieldName ?\n            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;\n        this.selectedCondition = expressionItem.expression.condition ?\n            expressionItem.expression.condition.name : null;\n        this.searchValue = expressionItem.expression.searchVal;\n\n        expressionItem.inEditMode = true;\n        this.editedExpression = expressionItem;\n\n        this.cdr.detectChanges();\n\n        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({target: this.columnSelect.element});\n        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({target: this.conditionSelect.element});\n\n        if (!this.selectedColumn) {\n            this.columnSelect.input.nativeElement.focus();\n        } else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {\n            this.conditionSelect.input.nativeElement.focus();\n        } else {\n            this.searchValueInput.nativeElement.focus();\n        }\n    }\n\n    public clearSelection() {\n        for (const group of this.selectedGroups) {\n            group.selected = false;\n        }\n        this.selectedGroups = [];\n\n        for (const expr of this.selectedExpressions) {\n            expr.selected = false;\n        }\n        this.selectedExpressions = [];\n\n        this.toggleContextMenu();\n    }\n\n    public enterExpressionAdd(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n        }\n\n        expressionItem.inAddMode = true;\n        this.addModeExpression = expressionItem;\n        if (expressionItem.selected) {\n            this.toggleExpression(expressionItem);\n        }\n    }\n\n    private onToggleExpression(expressionItem: ExpressionOperandItem) {\n        this.exitOperandEdit();\n        this.toggleExpression(expressionItem);\n\n        this.toggleContextMenu();\n    }\n\n    private toggleExpression(expressionItem: ExpressionOperandItem) {\n        expressionItem.selected = !expressionItem.selected;\n\n        if (expressionItem.selected) {\n            this.selectedExpressions.push(expressionItem);\n        } else {\n            const index = this.selectedExpressions.indexOf(expressionItem);\n            this.selectedExpressions.splice(index, 1);\n            this.deselectParentRecursive(expressionItem);\n        }\n    }\n\n    private toggleContextMenu() {\n        const contextualGroup = this.findSingleSelectedGroup();\n\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n\n            if (contextualGroup) {\n                this.filteringLogics = [\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,\n                        selected: contextualGroup.operator === FilteringLogic.And\n                    },\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,\n                        selected: contextualGroup.operator === FilteringLogic.Or\n                    }\n                ];\n            }\n        } else {\n            this.contextMenuToggle.close();\n        }\n    }\n\n    private findSingleSelectedGroup(): ExpressionGroupItem {\n        for (const group of this.selectedGroups) {\n            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));\n\n            if (containsAllSelectedExpressions) {\n                return group;\n            }\n        }\n\n        return null;\n    }\n\n    private isInsideGroup(item: ExpressionItem, group: ExpressionGroupItem): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (item.parent === group) {\n            return true;\n        }\n\n        return this.isInsideGroup(item.parent, group);\n    }\n\n    private deleteItem(expressionItem: ExpressionItem) {\n        if (!expressionItem.parent) {\n            this.rootGroup = null;\n            this.currentGroup = null;\n            return;\n        }\n\n        if (expressionItem === this.currentGroup) {\n            this.currentGroup = this.currentGroup.parent;\n        }\n\n        const children = expressionItem.parent.children;\n        const index = children.indexOf(expressionItem);\n        children.splice(index, 1);\n\n        if (!children.length) {\n            this.deleteItem(expressionItem.parent);\n        }\n    }\n\n    public onKeyDown(eventArgs: KeyboardEvent) {\n        eventArgs.stopPropagation();\n        if (!this.contextMenuToggle.collapsed &&\n            (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE)) {\n            this.clearSelection();\n        }\n    }\n\n    public createAndGroup() {\n        this.createGroup(FilteringLogic.And);\n    }\n\n    public createOrGroup() {\n        this.createGroup(FilteringLogic.Or);\n    }\n\n    private createGroup(operator: FilteringLogic) {\n        const chips = this.chips.toArray();\n        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);\n        const firstExpression = chips[minIndex].data;\n\n        const parent = firstExpression.parent;\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        const index = parent.children.indexOf(firstExpression);\n        parent.children.splice(index, 0, groupItem);\n\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n            groupItem.children.push(expr);\n            expr.parent = groupItem;\n        }\n\n        this.clearSelection();\n    }\n\n    public deleteFilters() {\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n        }\n\n        this.clearSelection();\n    }\n\n    public onGroupClick(groupItem: ExpressionGroupItem) {\n        this.toggleGroup(groupItem);\n    }\n\n    private toggleGroup(groupItem: ExpressionGroupItem) {\n        this.exitOperandEdit();\n        if (groupItem.children && groupItem.children.length) {\n            this.toggleGroupRecursive(groupItem, !groupItem.selected);\n            if (!groupItem.selected) {\n                this.deselectParentRecursive(groupItem);\n            }\n            this.toggleContextMenu();\n        }\n    }\n\n    private toggleGroupRecursive(groupItem: ExpressionGroupItem, selected: boolean) {\n        if (groupItem.selected !== selected) {\n            groupItem.selected = selected;\n\n            if (groupItem.selected) {\n                this.selectedGroups.push(groupItem);\n            } else {\n                const index = this.selectedGroups.indexOf(groupItem);\n                this.selectedGroups.splice(index, 1);\n            }\n        }\n\n        for (const expr of groupItem.children) {\n            if (expr instanceof ExpressionGroupItem) {\n                this.toggleGroupRecursive(expr, selected);\n            } else {\n                const operandExpression = expr as ExpressionOperandItem;\n                if (operandExpression.selected !== selected) {\n                    this.toggleExpression(operandExpression);\n                }\n            }\n        }\n    }\n\n    private deselectParentRecursive(expressionItem: ExpressionItem) {\n        const parent = expressionItem.parent;\n        if (parent) {\n            if (parent.selected) {\n                parent.selected = false;\n                const index = this.selectedGroups.indexOf(parent);\n                this.selectedGroups.splice(index, 1);\n            }\n            this.deselectParentRecursive(parent);\n        }\n    }\n\n    private calculateContextMenuTarget() {\n        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();\n        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);\n        let minTop = chips.reduce((t, c) =>\n            Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);\n        minTop = Math.max(containerRect.top, minTop);\n        minTop = Math.min(containerRect.bottom, minTop);\n        let maxRight = chips.reduce((r, c) =>\n            Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);\n        maxRight = Math.max(maxRight, containerRect.left);\n        maxRight = Math.min(maxRight, containerRect.right);\n        this._overlaySettings.positionStrategy.settings.target = new Point(maxRight, minTop);\n    }\n\n    private scrollElementIntoView(target: HTMLElement) {\n        const container = this.expressionsContainer.nativeElement;\n        const targetOffset = target.offsetTop - container.offsetTop;\n        const delta = 10;\n\n        if (container.scrollTop + delta > targetOffset) {\n            container.scrollTop = targetOffset - delta;\n        } else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {\n            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;\n        }\n    }\n\n    public ungroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1, ...selectedGroup.children);\n\n            for (const expr of selectedGroup.children) {\n                expr.parent = parent;\n            }\n        }\n\n        this.clearSelection();\n    }\n\n    public deleteGroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1);\n        } else {\n            this.rootGroup = null;\n        }\n\n        this.clearSelection();\n    }\n\n    public selectFilteringLogic(event: IButtonGroupEventArgs) {\n        this.contextualGroup.operator = event.index as FilteringLogic;\n    }\n\n    public getConditionFriendlyName(name: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;\n    }\n\n    public isDate(value: any) {\n        return value instanceof Date;\n    }\n\n    public onExpressionsScrolled() {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n        }\n    }\n\n    public invokeClick(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            (eventArgs.currentTarget as HTMLElement).click();\n        }\n    }\n\n    public onOutletPointerDown(event) {\n        // This prevents closing the select's dropdown when clicking the scroll\n        event.preventDefault();\n    }\n\n    public getConditionList(): string[] {\n        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];\n    }\n\n    public initialize(filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this.filteringService.registerSVGIcons();\n\n        // Set pointer-events to none of the overlay content element which blocks the grid interaction after dragging\n        this.overlayService.onOpened.pipe(first()).subscribe(() => {\n            if (this.element.nativeElement.parentElement) {\n                this.element.nativeElement.parentElement.style['pointer-events'] = 'none';\n            }\n        });\n\n        if (this.grid.advancedFilteringExpressionsTree) {\n            this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);\n            this.currentGroup = this.rootGroup;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setAddButtonFocus() {\n        if (this.addRootAndGroupButton) {\n            this.addRootAndGroupButton.nativeElement.focus();\n        } else if (this.addConditionButton) {\n            this.addConditionButton.nativeElement.focus();\n        }\n    }\n\n    public context(expression: ExpressionItem, afterExpression?: ExpressionItem) {\n        return {\n            $implicit: expression,\n            afterExpression\n        };\n    }\n\n    public onClearButtonClick() {\n        this.clearSelection();\n        this.cancelOperandAdd();\n        this.cancelOperandEdit();\n        this.currentGroup = null;\n        this.rootGroup = null;\n        this.grid.advancedFilteringExpressionsTree = null;\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public applyChanges() {\n        this.exitOperandEdit();\n        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);\n    }\n\n    public onApplyButtonClick() {\n        this.applyChanges();\n        this.closeDialog();\n    }\n\n    public onChipSelectionEnd() {\n        const contextualGroup = this.findSingleSelectedGroup();\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n            this.calculateContextMenuTarget();\n            if (this.contextMenuToggle.collapsed) {\n                this.contextMenuToggle.open(this._overlaySettings);\n            } else {\n                this.contextMenuToggle.reposition();\n            }\n        }\n    }\n}\n","import { Directive, NgModule, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowSelector]'\n})\nexport class IgxRowSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeadSelector]'\n})\nexport class IgxHeadSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRowSelectorDirective, IgxHeadSelectorDirective],\n    exports: [IgxRowSelectorDirective, IgxHeadSelectorDirective]\n})\nexport class IgxRowSelectorsModule {\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowExpandedIndicator]'\n})\nexport class IgxRowExpandedIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowCollapsedIndicator]'\n})\nexport class IgxRowCollapsedIndicatorDirective {\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderExpandedIndicator]'\n})\nexport class IgxHeaderExpandIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderCollapsedIndicator]'\n})\nexport class IgxHeaderCollapseIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\nimport { IgxHierarchicalRowComponent } from './hierarchical-grid/hierarchical-row.component';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        this._removeOnDestroy = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                dragDirective: this,\n                dragData: this.row,\n                cancel: false,\n                owner: this.row.grid\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.ghostElement.parentNode.removeChild(this.ghostElement);\n                this.ghostElement = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            dragDirective: this,\n            dragData: this.row,\n            animation: false,\n            owner: this.row.grid\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.ghostElement) {\n            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createGhost(pageX, pageY) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        this.ghostContext = {\n            $implicit: this.row.rowData,\n            data: this.row.rowData,\n            grid: this.row.grid\n        };\n        super.createGhost(pageX, pageY, this.row.nativeElement);\n\n        // check if there is an expander icon and create the ghost at the corresponding position\n        if (this.isHierarchicalGrid) {\n            const row = this.row as IgxHierarchicalRowComponent;\n            if (row.expander) {\n                const expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;\n                this._ghostHostX += expanderWidth;\n            }\n        }\n\n        const ghost = this.ghostElement;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.ghostElement) {\n            this.ghostElement.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n\n    private get isHierarchicalGrid() {\n        return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDragGhost]'\n})\n\nexport class IgxRowDragGhostDirective  {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    DoCheck,\n    Injectable\n} from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Subject, combineLatest, pipe } from 'rxjs';\nimport { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects, isIE, IBaseEventArgs } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService,\n    OverlaySettings,\n    PositionSettings,\n    ConnectedPositioningStrategy,\n    ContainerPositionStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, RowEditPositionStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport {\n    FilteringExpressionsTree, IFilteringExpressionsTree, FilteringExpressionsTreeType\n} from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell, isChromium } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './igx-row-selectors.module';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective,\n     IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';\nimport { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective  } from './row-drag.directive';\nimport { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridClipboardEvent {\n    data: any[];\n    cancel: boolean;\n}\n\nexport interface IGridCellEventArgs extends IBaseEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs extends IBaseEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs extends IBaseEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    added: any[];\n    removed: any[];\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs extends IBaseEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\nexport interface IGridKeydownEventArgs extends IBaseEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs extends IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n}\n\n@Injectable()\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements\n    OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n    private _customDragIndicatorIconTemplate: TemplateRef<any>;\n    protected _init = true;\n    private _tick;\n    private _cdrRequests = false;\n    protected _cdrRequestRepaint = false;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    public _destroyed = false;\n    private overlayIDs = [];\n    private _filteringStrategy: IFilteringStrategy;\n\n    private _hostWidth;\n    private _advancedFilteringOverlayId: string;\n    private _advancedFilteringPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _advancedFilteringOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),\n    };\n\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * @remarks\n     * When set to true, it will override all columns declared through code or in markup.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            value.type = FilteringExpressionsTreeType.Regular;\n            this._filteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&\n                !this.advancedFilteringExpressionsTree) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public filteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted after advanced filtering is performed.\n     * Returns the advanced filtering expressions tree.\n     * ```typescript\n     * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public advancedFilteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Returns the advanced filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get advancedFilteringExpressionsTree() {\n        return this._advancedFilteringExpressionsTree;\n    }\n\n    /**\n     * Sets the advanced filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And);\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     },\n     *     {\n     *          condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *          fieldName: 'CompanyName',\n     *          searchVal: 'a'\n     *     }\n     * ];\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set advancedFilteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            value.type = FilteringExpressionsTreeType.Advanced;\n            this._advancedFilteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n        } else {\n            this._advancedFilteringExpressionsTree = null;\n        }\n        this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);\n\n        if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&\n            !this.advancedFilteringExpressionsTree) {\n            this.filteredData = null;\n        }\n\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.notifyChanges();\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     *```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.pageChange.emit(this._page);\n        this.navigateTo(0);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this._perPage = val;\n        this.perPageChange.emit(this._perPage);\n        this.page = 0;\n        this.endEdit(true);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    @DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.')\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this.isRowSelectable;\n    }\n\n    set rowSelectable(val: boolean) {\n        this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;\n    }\n\n    /**\n     * Returns if the row selectors are hidden\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get hideRowSelectors() {\n        return this._hideRowSelectors;\n    }\n\n    /**\n     * Allows you to change the visibility of the row selectors\n     * By default row selectors are shown\n     * @memberof IgxGridBaseComponent\n     */\n    set hideRowSelectors(value: boolean) {\n        this._hideRowSelectors = value;\n        this.notifyChanges(true);\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag && this.hasVisibleColumns;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        if (!this._init) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this.nativeElement.style.height = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    set isLoading(value: boolean) {\n        if (this._isLoading !== value) {\n            this._isLoading = value;\n            this.evaluateLoadingState();\n        }\n        Promise.resolve().then(() => {\n            // wait for the current detection cycle to end before triggering a new one.\n            this.notifyChanges();\n        });\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.calcGridHeadRow();\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the advanced filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowAdvancedFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowAdvancedFiltering() {\n        return this._allowAdvancedFiltering;\n    }\n\n    /**\n     * Sets a value indicating whether the advanced filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowAdvancedFiltering(value) {\n        if (this._allowAdvancedFiltering !== value) {\n            this._allowAdvancedFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.close();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (!this._init) {\n            this.endEdit(true);\n            this.summaryService.resetSummaryHeight();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets the filtering strategy of the grid.\n     * ```typescript\n     *  let filterStrategy = this.grid.filterStrategy\n     * ```\n     */\n    @Input()\n    get filterStrategy(): IFilteringStrategy {\n        return this._filteringStrategy;\n    }\n\n    /**\n     * Sets the filtering strategy of the grid.\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    set filterStrategy(classRef: IFilteringStrategy) {\n        this._filteringStrategy = classRef;\n    }\n\n    /**\n     * An @Input property that provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     *\n     * ```typescript\n     * public columnValuesStrategy = (column: IgxColumnComponent,\n     *                               filteringExpressionsTree: IFilteringExpressionsTree,\n     *                               done: (uniqueValues: any[]) => void) => {\n     *     this.dataService.getColumnData(column, filteringExpressionsTree, uniqueValues => done(uniqueValues));\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public uniqueColumnValuesStrategy: (column: IgxColumnComponent,\n                                        filteringExpressionsTree: IFilteringExpressionsTree,\n                                        done: (values: any[]) => void) => void;\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseComponent#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent, { static: false })\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('loadingOverlay', { static: true })\n    public loadingOverlay: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public loadingOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent> = new QueryList<IgxColumnComponent>();\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective, static: false })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective, static: false })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective, static: false })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective, static: false })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })\n    public excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<IgxRowComponent<IgxGridBaseComponent>>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList(): QueryList<IgxRowComponent<IgxGridBaseComponent>> {\n        const res = new QueryList<IgxRowComponent<IgxGridBaseComponent>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective> {\n        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {\n            return this.headSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })\n    public headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective> {\n        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {\n            return this.rowSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })\n    public rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })\n    public dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false })\n    public dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n    /**\n    * The custom template, if any, that should be used when rendering the row drag indicator icon\n    */\n    public get dragIndicatorIconTemplate(): TemplateRef<any> {\n        return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;\n    }\n\n    public set dragIndicatorIconTemplate(val: TemplateRef<any>) {\n        this._customDragIndicatorIconTemplate = val;\n    }\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('footer', { read: ElementRef, static: false })\n    public footer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerSelectorContainer', { static: false })\n    public headerSelectorContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer', { static: false })\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer', { static: false })\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent, static: false })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any> = new QueryList<any>();\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef, static: false })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef, static: false })\n    public rowEditText: TemplateRef<any>;\n\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef, static: false })\n    public rowEditActions: TemplateRef<any>;\n\n\n    /**\n    * The custom template, if any, that should be used when rendering a row expand indicator.\n    */\n   @ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef, static: false })\n   public rowExpandedIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a row collapse indicator.\n   */\n   @ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef, static: false })\n   public rowCollapsedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n    * The custom template, if any, that should be used when rendering a header expand indicator.\n    */\n   @ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef, static: false })\n   public headerExpandIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a header collapse indicator.\n   */\n   @ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef, static: false })\n   public headerCollapseIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = this.navigation.gridOrderedColumns;\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: false })\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get filteringPipeTrigger(): number {\n        return this._filteringPipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.sortingExpressionsChange.emit(this._sortingExpressions);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public sortingExpressionsChange = new EventEmitter<ISortingExpression[]>();\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent, static: false })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef, static: false })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * Returns the current cell selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get cellSelection() {\n        return this._cellSelectionMode;\n    }\n\n    /**\n     * Allows you to set cell selection mode\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseComponent\n     */\n    set cellSelection(selectionMode:  GridSelectionMode) {\n        this._cellSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clear(true);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Returns the current row selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelection() {\n        return this._rowSelectionMode;\n    }\n\n    /**\n     * Allows you to set row selection mode\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseComponent\n     */\n    set rowSelection(selectionMode:  GridSelectionMode) {\n        this._rowSelectionMode = selectionMode;\n        if (this.gridAPI.grid && this.columnList) {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection either through\n     * drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n\n\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns;\n    protected _allowFiltering = false;\n    protected _allowAdvancedFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n\n    protected observer: ResizeObserver = new ResizeObserver(() => {});\n\n    protected resizeNotify = new Subject();\n\n\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs: Array<IgxGridForOfDirective<any>> = [];\n    private _multiRowLayoutRowSize = 1;\n    protected _loadingId;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n    private _cellSelectionMode = GridSelectionMode.multiple;\n    private _rowSelectionMode = GridSelectionMode.none;\n\n    private rowEditPositioningStrategy = new RowEditPositionStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler = (event) => {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler = (event) => {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler = (event) => {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        protected gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n            this.cdr.detach();\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.selectionService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil<any>(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(destructor).subscribe(() => {\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100))\n            .subscribe(() => {\n                this.zone.run(() => {\n                    this.notifyChanges(true);\n                });\n            });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear(true);\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.initialize(this.filteringService, this.overlayService, event.id);\n                }\n            }\n        });\n\n        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {\n            // do not hide the advanced filtering overlay on scroll\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.setAddButtonFocus();\n                }\n                return;\n            }\n\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n\n        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                this._advancedFilteringOverlayId = null;\n                return;\n            }\n\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n\n        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            const shouldRecalcSize = this.isPercentHeight &&\n             ( !this.calcHeight || this.calcHeight === this.getDataBasedBodyHeight() ||\n              this.calcHeight === this.renderedRowHeight * this._defaultTargetRecordNumber);\n            if (shouldRecalcSize) {\n                this.calculateGridHeight();\n                $event.containerSize = this.calcHeight;\n            }\n            this.evaluateLoadingState();\n        });\n\n        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(() => !this._init)).subscribe(() => {\n            // called to recalc all widths that may have changes as a result of\n            // the vert. scrollbar showing/hiding\n            this.notifyChanges(true);\n        });\n\n        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridSizes();\n        });\n\n        this.onDensityChanged.pipe(destructor).subscribe(() => {\n            this.summaryService.summaryHeight = 0;\n            this.endEdit(true);\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n        this.columnListDiffer.diff(this.columnList);\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            if (this._cdrRequests) {\n                firstVirtRow.virtDirRow.cdr.detectChanges();\n            }\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this.hasVisibleColumns = undefined;\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    public _setupRowObservers() {\n        const elementFilter = (item: IgxRowComponent<any> | IgxSummaryRowComponent) => this.isDefined(item.nativeElement.parentElement);\n        const extractForOfs = pipe(map((collection: any[]) => collection.filter(elementFilter).map(item => item.virtDirRow)));\n        const rowListObserver = extractForOfs(this._dataRowList.changes);\n        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);\n\n        combineLatest([rowListObserver, summaryRowObserver]).pipe(takeUntil(this.destroy$))\n            .subscribe(([row, summary]) => this._horizontalForOfs = [...row, ...summary]);\n\n        this._horizontalForOfs = [\n            ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),\n            ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)\n        ];\n    }\n\n    public _zoneBegoneListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);\n\n            this.observer = new ResizeObserver(() => this.resizeNotify.next());\n            this.observer.observe(this.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.initPinning();\n        this.calculateGridSizes();\n        this._init = false;\n        this.cdr.reattach();\n        this._setupRowObservers();\n        this._zoneBegoneListeners();\n\n        const vertScrDC = this.verticalScrollContainer.displayContainer;\n        vertScrDC.addEventListener('scroll', this.scrollHandler);\n        vertScrDC.addEventListener('wheel', () => this.wheelHandler());\n\n    }\n\n    public notifyChanges(repaint = false) {\n        this._cdrRequests = true;\n        this._cdrRequestRepaint = repaint;\n        this.cdr.markForCheck();\n    }\n\n    protected resetNotifyChanges() {\n        this._cdrRequestRepaint = false;\n        this._cdrRequests = false;\n    }\n\n    public ngDoCheck() {\n        super.ngDoCheck();\n        if (this._init) {\n            return;\n        }\n\n        if (this._cdrRequestRepaint) {\n            this.resetNotifyChanges();\n            this.calculateGridSizes();\n            this.refreshSearch(true);\n            return;\n        }\n\n        if (this._cdrRequests) {\n            this.resetNotifyChanges();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n    */\n    public getDragGhostCustomTemplate() {\n        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {\n            return this.dragGhostCustomTemplates.first;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n\n        if (this._advancedFilteringOverlayId) {\n            this.overlayService.hide(this._advancedFilteringOverlayId);\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.observer.disconnect();\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.displayContainer;\n            vertScrDC.removeEventListener('scroll', this.scrollHandler);\n            vertScrDC.removeEventListener('wheel', () => this.wheelHandler());\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-paginator--compact';\n            default:\n                return 'igx-paginator';\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxRowComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean {\n        return this.isRowSelectable  && this.hasVisibleColumns && !this.hideRowSelectors;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean {\n        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.notifyChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n\n            // TODO: fix for #5934 and probably break for #5763\n            // consider adding of third optional boolean parameter in updateRow.\n            // If developer set this parameter to true we should call notifyChanges(true), and\n            // vise-versa if developer set it to false we should call notifyChanges(false).\n            // The parameter should default to false\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        requestAnimationFrame(() => this.onSortingDone.emit(expression));\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasVisibleColumns(): boolean {\n        if (this._hasVisibleColumns === undefined) {\n            return this.columnList ? this.columnList.some(c => !c.hidden) : false;\n        }\n        return this._hasVisibleColumns;\n    }\n\n    set hasVisibleColumns(value) {\n        this._hasVisibleColumns = value;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n        }\n        this.columnList.forEach((column: IgxColumnComponent) => {\n            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                column.defaultWidth = columnWidthCombined + 'px';\n            } else {\n                column.defaultWidth = this._columnWidth;\n                column.resetCaches();\n            }\n        });\n        this.resetCachedWidths();\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this.calcGridHeadRow();\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.footer) {\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                this.footer.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number {\n        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?\n                                        this.headerGroupsList[0].element.nativeElement : null;\n        const filterCellNativeEl = (headerGroupNativeEl) ?\n                                    headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;\n        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n\n        const actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?\n                                 this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :\n                                 this.theadRow.nativeElement.offsetHeight;\n        const footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + actualTheadRow +\n            footerHeight + pagingHeight + groupAreaHeight +\n            this.scr.nativeElement.clientHeight;\n\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');\n        let gridHeight = 0;\n\n        if (this.isPercentHeight) {\n            const autoSize = this._shouldAutoSize(renderedHeight);\n            if (autoSize || computed.indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed, 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n        return height;\n    }\n\n    protected checkContainerSizeChange() {\n        const origHeight = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = 'none';\n        const height = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = '';\n        return origHeight !== height;\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        this.tbody.nativeElement.style.display = 'none';\n        let res = !this.nativeElement.parentElement ||\n        this.nativeElement.parentElement.clientHeight === 0 ||\n        this.nativeElement.parentElement.clientHeight === renderedHeight;\n        if (!isChromium()) {\n            // If grid causes the parent container to extend (for example when container is flex)\n            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.\n           res = this.checkContainerSizeChange();\n        }\n        this.tbody.nativeElement.style.display = '';\n        return res;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        computedWidth -= this.getFeatureColumnsWidth();\n\n        if (this.showDragIcons) {\n            computedWidth -= this.headerDragContainer ? this.headerDragContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        // When all columns are hidden, return 0px width\n        if (!sumExistingWidths && !columnsToSize) {\n            return '0px';\n        }\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && this.nativeElement) {\n            width = this.nativeElement.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalSroll() && this.width !== null) {\n            width -= this.scrollWidth;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const  cols = this.hasColumnLayouts ?\n         this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum +=  parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.getFeatureColumnsWidth();\n        return colSum;\n    }\n\n    public hasVerticalSroll() {\n        if (this._init) { return false; }\n        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;\n        return !!(this.calcWidth && this.dataView &&\n            this.dataView.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent | IgxColumnGroupComponent>) => {\n                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;\n                if (!isColumnGroup) {\n                    // Clear Grouping\n                    this.gridAPI.clear_groupby(record.item.field);\n\n                    // Clear Filtering\n                    this.gridAPI.clear_filter(record.item.field);\n\n                    // Close filter row\n                    if ( this.filteringService.isFilterRowVisible\n                        && this.filteringService.filteredColumn\n                        && this.filteringService.filteredColumn.field === record.item.field) {\n                        this.filteringRow.close();\n                    }\n\n                    // Clear Sorting\n                    this.gridAPI.clear_sort(record.item.field);\n                }\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                Promise.resolve().then(() => {\n                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.\n                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.\n                    this.notifyChanges(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        this.cdr.detectChanges();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n        }\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n        this.resetCaches();\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalSroll()) {\n                currentWidth += this.scrollWidth;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.isRowSelectable) {\n            width += this.headerSelectorContainer ? this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;\n        }\n        if (this.rowDraggable) {\n            width += this.headerDragContainer ? this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) ||  parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = factory.create(this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderSelectorClick(event) {\n        if (!this.isMultiRowSelectionEnabled) { return; }\n        this.selectionService.areAllRowSelected() ?\n            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public isGroupByRecord(rec) {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    get headSelectorBaseAriaLabel() {\n        if (this._filteringExpressionsTree.filteringOperands.length > 0) {\n            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';\n        }\n\n        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get totalRowsCountAfterFilter() {\n        if (this.data) {\n            return this.selectionService.allData.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    get dataView(): any[] {\n        return this.verticalScrollContainer.igxForOf;\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        this.selectionService.deselectRowsWithNoEvent(rowIDs);\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows(onlyFilterData = true) {\n        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);\n        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));\n        this.selectRows(rowIDs);\n    }\n\n    /**\n     * Deselects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseComponent\n     */\n    public deselectAllRows(onlyFilterData = true) {\n        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {\n            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));\n        } else {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges();\n        }\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear(true);\n        this.notifyChanges();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.headerContainer.getScroll();\n        const vertical = this.verticalScrollContainer.getScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.notifyChanges();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n        const activeEl = this.selectionService.activeElement;\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        if (this.cellSelection === GridSelectionMode.single && activeEl) {\n            selectionMap.push([activeEl.row, new Set<number>().add(activeEl.column)]);\n        }\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])\n                            : source[row][col.field];\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n                .filter(col => col.columnLayout)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n                .filter(col => !col.columnGroup)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [visibleColumns[index]];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters = false, headers = false) {\n        const source = this.dataView;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollHandler = (event) => {\n        this.headerContainer.scrollPosition += event.target.scrollLeft;\n        this.verticalScrollContainer.scrollPosition += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    copyHandlerIE() {\n        if (isIE()) {\n            this.copyHandler(null, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event, ie11 = false) {\n        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n            return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (ie11) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.dataView.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);\n        const shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);\n        if (shouldScrollVertically) {\n            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else if (shouldScrollHorizontally) {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                     () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else {\n            this.executeCallback(rowIndex, visibleColIndex, cb);\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.dataView.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.dataView.length) { return currentRowIndex; }\n\n        const nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0 && !col.hidden).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.dataView.length &&\n            colIndex > - 1 && colIndex < cols) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler = (isScroll = false) => {\n        if (this.document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.\n                compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (this.document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this.filteredSortedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState() {\n        if (this.shouldOverlayLoading) {\n            // a new overlay should be shown\n            const overlaySettings: OverlaySettings = {\n                outlet: this.loadingOutlet,\n                closeOnOutsideClick: false,\n                positionStrategy: new ContainerPositionStrategy()\n            };\n            if (!this._loadingId) {\n                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);\n                this.overlayService.show(this._loadingId, overlaySettings);\n            }\n        } else {\n            if (this._loadingId) {\n                this.overlayService.hide(this._loadingId);\n                this._loadingId = null;\n            }\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (row && !this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n    * @hidden\n    */\n    public gridOutletKeyboardHandler(event) {\n        // TODO: This should be removed after grid keyboard refactoring\n        // call stopPropagation for keydown event for the outlet not to propagate event to the grid\n        event.stopPropagation();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {\n                    c.target.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler = (event: WheelEvent) => {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n     * @hidden\n     */\n    get shouldOverlayLoading(): boolean {\n        return this.isLoading && this.data && this.data.length > 0;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /** @hidden */\n    public get isMultiRowSelectionEnabled(): boolean {\n        return this.rowSelection === GridSelectionMode.multiple;\n    }\n\n    /** @hidden */\n    public get isRowSelectable(): boolean {\n        return this.rowSelection !== GridSelectionMode.none;\n    }\n\n    /** @hidden */\n    public get isCellSelectable() {\n        return this.cellSelection !== GridSelectionMode.none;\n    }\n\n    /** @hidden */\n    public viewDetachHandler(args: ICachedViewLoadedEventArgs) {\n        const context = args.view.context;\n        if (context['templateID'] === 'dataRow') {\n            // some browsers (like FireFox and Edge) do not trigger onBlur when the focused element is detached from DOM\n            // hence we need to trigger it manually when cell is detached.\n            const row = this.getRowByIndex(context.index);\n            const focusedCell = row.cells.find(x => x.focused);\n            if (focusedCell) {\n                focusedCell.onBlur();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    public openAdvancedFilteringDialog() {\n        if (!this._advancedFilteringOverlayId) {\n            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =\n                (this as any).rootGrid ? (this as any).rootGrid.nativeElement : this.nativeElement;\n            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;\n\n            this._advancedFilteringOverlayId = this.overlayService.attach(\n                IgxAdvancedFilteringDialogComponent,\n                this._advancedFilteringOverlaySettings,\n                {\n                    injector: this.viewRef.injector,\n                    componentFactoryResolver: this.resolver\n                });\n            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);\n        }\n    }\n\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    public closeAdvancedFilteringDialog(applyChanges: boolean) {\n        if (this._advancedFilteringOverlayId) {\n            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);\n            const advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n\n            if (applyChanges) {\n                advancedFilteringDialog.applyChanges();\n            }\n            advancedFilteringDialog.closeDialog();\n        }\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n    /**\n    *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public getValue(event) {\n    *    let value = this.progressBar.value;\n    *    alert(value);\n    *}\n    *```\n    */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective, static: false })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true }) private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        // Reverse the sign here: '-' should become '+' in RTL mode\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxSelectModule } from '../select/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n   * An @Input property, sets current page of the `IgxPaginatorComponent`.\n   * The default is 0.\n   * ```typescript\n   * let page = this.paginator.page;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n   * The default is 15.\n   * ```typescript\n   * let itemsPerPage = this.paginator.perPage;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n        if (this._page >= this.totalPages) {\n            this._page = this.totalPages - 1;\n        }\n    }\n\n    /**\n    * An @Input property that sets the total records.\n    * ```typescript\n    * let totalRecords = this.paginator.totalRecords;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n    * An @Input property that sets custom options in the select of the paginator\n    * ```typescript\n    * let options = this.paginator.selectOptions;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...this._selectOptions];\n    }\n    /**\n    * An @Input property that sets if the pager in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n    * An @Input property that sets if the pager in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n    * An @Input property, sets number of label of the select.\n    * The default is 'Items per page' localized string.\n    * ```html\n    * <igx-paginator label=\"My custom label\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;\n\n    /**\n     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.\n    */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n    /**\n     *An event that is emitted when the paginating is used.\n    */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     * @hidden\n     */\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.pagiantor.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxPaginatorModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyleClasses'\n})\nexport class IgxGridCellStyleClassesPipe implements PipeTransform {\n\n    transform(cssClasses: { [prop: string]: any }, value: any, data: any, field: string, index: number): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(styles: { [prop: string]: any }, value: any, data: any, field: string, index: number): { [prop: string]: any } {\n        const css = {};\n        if (!styles) {\n            return css;\n        }\n\n        for (const prop of Object.keys(styles)) {\n            const res = styles[prop];\n            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;\n        }\n\n        return css;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if ( grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n\n@Pipe({\n    name: 'visibleColumns',\n    pure: true\n})\nexport class IgxHasVisibleColumnsPipe implements PipeTransform {\n    transform(values: any[], hasVisibleColumns) {\n        if (!(values && values.length)) {\n            return values;\n        }\n        return hasVisibleColumns ? values : [];\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridCellStyleClassesPipe,\n    IgxGridPaginatorOptionsPipe,\n    IgxHasVisibleColumnsPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Input()\n    public isColumnPinnable: boolean;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            if (targetColumn.parent) {\n                targetColumn = targetColumn.topLevelParent;\n            }\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl', { static: false })\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl', { static: false })\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs extends IBaseEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\n\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\n\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\n\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\n\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\n\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective, static: false })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective, static: false })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective, static: false })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective, static: false })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem, IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\nimport { cloneArray } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.label !== null && it.label !== undefined) &&\n            !it.isBlanks &&\n            it.label.toString().toLowerCase().indexOf(searchText) > -1);\n\n        // If 'result' contains the 'Select All' item and at least one more - we use it, otherwise we use an empty array.\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './excel-style-search.component';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\nimport { IgxProgressBarModule } from '../../../progressbar/progressbar.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule,\n        IgxProgressBarModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxSelectModule } from '../select/select.module';\nimport {\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './common/templates';\nimport { IgxRowSelectorsModule } from './igx-row-selectors.module';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent,\n        IgxRowSelectorsModule\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxSelectModule,\n        IgxPaginatorModule,\n        IgxRowSelectorsModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        if (grid.crudService.isInEditMode) {\n            grid.endEdit(true);\n        }\n\n        const expansionState = grid.groupingExpansionState;\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n        }\n        this.grid.groupingExpansionState = [...expansionState];\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from '../core/grid-selection';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnRightEdgeVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftEdgeVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.dataView.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return record.records && record.records.length;\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.scrollPosition = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.scrollPosition = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, AfterContentInit, HostBinding, forwardRef, OnInit\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray, IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { FilterMode } from '../common/enums';\n\nlet NEXT_ID = 0;\n\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [\n        IgxGridNavigationService,\n        IgxGridSummaryService,\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService,\n        IgxColumnResizingService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private get _gridAPI(): IgxGridAPIService {\n        return this.gridAPI as IgxGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.groupingExpressionsChange.emit(this._groupingExpressions);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.notifyChanges();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.notifyChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpressionsChange = new EventEmitter<IGroupingExpression[]>();\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        if (value !== this._groupingExpandState) {\n            this.groupingExpansionStateChange.emit(value);\n        }\n        this._groupingExpandState = value;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpansionStateChange = new EventEmitter<IGroupByExpandState[]>();\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective, static: false })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea', { static: false })\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.notifyChanges();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.notifyChanges();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        if (this.checkIfNoColumnField(expression)) {\n            return;\n        }\n        this.endEdit(true);\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList.length > 0 && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        const column = this.getColumnByName(expression.fieldName);\n        return (column && column.header) || expression.fieldName;\n    }\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        if (this.groupsExpanded) {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnGroupable(fieldName: string): boolean {\n        const column = this.getColumnByName(fieldName);\n        return column && column.groupable;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList.length > 0) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.dataView.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n\n    private checkIfNoColumnField(expression: IGroupingExpression | Array<IGroupingExpression> | any): boolean {\n        if (expression instanceof Array) {\n            for (const singleExpression of expression) {\n                if (!singleExpression.fieldName) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return !expression.fieldName;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        DataUtil.correctPagingState(state, collection.data.length);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: filterStrategy,\n            advancedExpressionsTree: advancedExpressionsTree\n        };\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent) }]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n\n    // R.K. TODO: Remove\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, element, cdr);\n        }\n\n    @HostBinding('class.igx-grid__tr--mrl')\n    get hasColumnLayouts(): boolean {\n        return this.grid.hasColumnLayouts;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    // TODO: Maybe move the focus logic in the tree cell ?\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        // TODO: Leave it to grid observer\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selectionService.isRowSelected(child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    forwardRef,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild,\n    DoCheck\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        IgxGridSummaryService,\n        { provide: IgxGridNavigationService, useClass: IgxTreeGridNavigationService },\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) },\n        IgxFilteringService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n    protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.notifyChanges();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [(expansionStates)]=\"model.expansionStates\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.expansionStatesChange.emit(this._expansionStates);\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public expansionStatesChange = new EventEmitter<Map<any, boolean>>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective, static: false })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    // Kind of stupid\n    private get _gridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.notifyChanges();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selectionService.activeElement;\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.row, cellID.column);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n        this.selectionService.clearHeaderCBState();\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            super.endEdit(true);\n\n            const state = this.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.notifyChanges();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData: any, rowIndex: Number): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.dataView.forEach(process);\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, DoCheck, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef, static: false })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef, static: false })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef, static: false })\n    public defaultContentElement: ElementRef;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../../grids/column.component';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { isIE } from '../../core/utils';\nimport { FilterMode } from '../common/enums';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.scrollPosition;\n        const scrollHeight = grid.verticalScrollContainer.getScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.dataView[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName = prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n            // move to prev row in sibling layout or parent\n            this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName = nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.dataView.length - 1) {\n            // scroll next in view\n            super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.dataView.length - 1) {\n            // move to next row in sibling layout or in parent\n            this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;\n            const topIsVisible = diff >= 0;\n            const scrollable = this.getNextScrollable(this.grid);\n            if (!topIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateTop(visibleColumnIndex));\n            } else {\n                super.navigateTop(visibleColumnIndex);\n            }\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                    });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            if (verticalScrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n                childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n                row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.scrollPosition !== 0 ? this.grid :\n                    this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.dataView.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1);\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {\n               this._navigateToNextParentRow(currentRowEl);\n            } else {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            this._navigateToNextParentRow(currentRowEl);\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private _navigateToNextParentRow(currentRowEl: any): void {\n         // next is parent summary or next parent row\n         const parent = this.grid.parent;\n         const parentHasSummary = parent.summariesRowList.length > 0;\n         const parentRowIndex = parseInt(\n            this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n         const isLastRowInParent = parent.dataView.length - 1 === parentRowIndex;\n         // check if next is sibling\n         const childRowContainer = this.getChildGridRowContainer(this.grid);\n         const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n         if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n             // next is parent summary\n             const parentSummary = parent.summariesRowList.first.nativeElement;\n             parent.navigation.focusNextRow(parentSummary, 0, parent, true);\n         } else {\n             // next is sibling or parent\n             this.focusNext(0);\n         }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.dataView.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n                if (verticalScrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else if (childGrid.rowList.length === 0) {\n                // move to prev child or parent row\n                const prevChild = this.getSibling(childGrid);\n                if (prevChild) {\n                    this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else {\n                // move to prev cell\n                childGrid.navigation.goToLastCell();\n            }\n    }\n\n    private getSibling(childGrid) {\n        const prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;\n        if (prevChildRow) {\n            return prevChildRow.children[0].children[0];\n        }\n        return null;\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.dataView.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n                () => {\n                    parentContainer = this.getChildContainer(grid);\n                    childRowContainer = this.getChildGridRowContainer(grid);\n                    prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n                    if (prevIsSiblingChild) {\n                        this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n                    } else {\n                        this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n                    }\n                });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem };\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getScroll();\n        const parentState = nextParentGrid.verticalScrollContainer.state;\n        const atLastChunk = parentState.startIndex + parentState.chunkSize ===\n         nextParentGrid.dataView.length;\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {\n            this.scrollGrid(nextParentGrid, 'next',\n                () => {\n                    nextParentElem = parentInfo.nextElement;\n                    childRowContainer = this.getChildGridRowContainer();\n                    next = childRowContainer.nextElementSibling || nextParentElem;\n                    if (next && nextIsSiblingChild) {\n                        this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                    } else if (next) {\n                        this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                    }\n                });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n        let scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) || grid.rowList.length === 0) {\n            const cell =\n                elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView = diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.scrollPosition;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusNextRow(elem, visibleColumnIndex, grid, isSummary);\n            });\n        }\n    }\n    public getColumnUnpinnedIndex(visibleColumnIndex: number, grid?: IgxHierarchicalGridComponent) {\n        const currGrid = grid || this.grid;\n        const column = currGrid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return currGrid.pinnedColumns.length ? currGrid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells = elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.scrollPosition !== 0 ? grid :\n                this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.scrollPosition;\n            const diff = cell.getBoundingClientRect().bottom -\n                cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex, grid);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        if (grid.dataRowList.length > 0) {\n            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);\n        } else {\n            grid.headerContainer.scrollTo(unpinnedIndex);\n        }\n\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top': grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom': grid.verticalScrollContainer.scrollTo(grid.dataView.length - 1); break;\n                    case 'next': grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev': grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.scrollPosition;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.dataRowList.find(element => element.index === nextIndex).element.nativeElement;\n   }\n}\n","import {\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    @Input()\n    public hasChildrenKey: string;\n\n    @Input()\n    public showExpandAll = false;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n        this.initPinning();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        // (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        // (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n        this.rowIslandAPI.rowIsland = this;\n    }\n\n    /**\n     * @hidden\n     */\n    ngDoCheck() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\nprivate resolver;\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        public element: ElementRef,\n        resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef) {\n            this.resolver = resolver;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        // handler logic that re-emits hgrid events on the row island\n        this.setupEventEmitters();\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n    private setupEventEmitters() {\n        const destructor = takeUntil(this.hGrid.destroy$);\n\n        const factory = this.resolver.resolveComponentFactory(IgxGridComponent);\n        // exclude outputs related to two-way binding functionality\n        const inputNames = factory.inputs.map(input => input.propName);\n        const outputs = factory.outputs.filter(o => {\n            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));\n            return inputNames.indexOf(matchingInputPropName) === -1;\n        });\n        outputs.forEach(output => {\n            if (this.hGrid[output.propName]) {\n                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {\n                    if (!args) {\n                        args = {};\n                    }\n                    args.owner = this.hGrid;\n                    this.layout[output.propName].emit(args);\n                });\n            }\n        });\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [(hierarchicalState)]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        if (this._hierarchicalState !== val) {\n            this.hierarchicalStateChange.emit(val);\n        }\n        if (this.hasChildrenKey) {\n            val = val.filter(item => {\n                const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n                return rec[this.hasChildrenKey];\n            });\n        }\n        this._hierarchicalState = val;\n        if (this.parent) {\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hierarchicalStateChange = new EventEmitter<any>();\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    protected _transactions: any;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    public ngDoCheck() {\n        if (this._cdrRequestRepaint && !this._init) {\n            this.updateSizes();\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n            this.cdr.detectChanges();\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this._displayDensity = this.rootGrid._displayDensity;\n                this.notifyChanges(true);\n                this.cdr.markForCheck();\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n\n        this.headSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.headSelectorsTemplates :\n            this.headSelectorsTemplates;\n\n        this.rowSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.rowSelectorsTemplates :\n            this.rowSelectorsTemplates;\n        this.dragIndicatorIconTemplate = this.parentIsland ?\n            this.parentIsland.dragIndicatorIconTemplate :\n            this.dragIndicatorIconTemplate;\n        this.rowExpandedIndicatorTemplate  = this.rootGrid.rowExpandedIndicatorTemplate;\n        this.rowCollapsedIndicatorTemplate   = this.rootGrid.rowCollapsedIndicatorTemplate;\n        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;\n        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;\n        this.hasChildrenKey = this.parentIsland ?\n         this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :\n         this.rootGrid.hasChildrenKey;\n         this.showExpandAll = this.parentIsland ?\n         this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;\n    }\n\n    private updateSizes() {\n        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        if (this.isPercentHeight && this.parent) {\n            return true;\n        }\n        return super._shouldAutoSize(renderedHeight);\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n        this.parentIsland.children.map((item) => item.key) :\n        this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$))\n        .subscribe(() => this.onRowIslandChange());\n        super.ngAfterContentInit();\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.gridAPI.grid === this);\n        if (cols.length > 0) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.offsetWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n     private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.dataView.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        const expanded = this.hierarchicalState.length > 0 && this.hasExpandableChildren;\n        if (!expanded && this.showExpandAll) {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        } else {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate(): TemplateRef<any> {\n        if (this.parentIsland) {\n            return this.parentIsland.getDragGhostCustomTemplate();\n        }\n        return super.getDragGhostCustomTemplate();\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n   toggleAll() {\n    const expanded = this.hierarchicalState.length > 0 && this.hasExpandableChildren;\n    if (!expanded && this.showExpandAll) {\n        this.expandAll();\n    } else {\n        this.collapseAll();\n    }\n   }\n\n    /**\n     * Collapses all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxHierarchicalGridComponent\n     */\n    public collapseAll() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * Expands all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxHierarchicalGridComponent\n     */\n    public expandAll() {\n        if (this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.notifyChanges(true);\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.notifyChanges(true);\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getScroll();\n        const hScr = this.headerContainer.getScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n// import { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { PlatformUtil } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    // protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        // public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil\n        ) {\n            super(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil);\n            // this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef, static: false })\n    public expander: ElementRef;\n\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultEmptyTemplate', { read: TemplateRef, static: true })\n   protected defaultEmptyTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n    * @hidden\n    */\n   public expanderClick(event) {\n        event.stopPropagation();\n        this.toggle();\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        this.endEdit(grid.rootGrid);\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public select = () => {\n        this.grid.selectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public deselect = () => {\n        this.grid.deselectRows([this.rowID]);\n    }\n\n    /**\n    * @hidden\n    */\n    public get iconTemplate() {\n        let expandable = true;\n        if (this.grid.hasChildrenKey) {\n            expandable = this.rowData[this.grid.hasChildrenKey];\n        }\n        if (!expandable) {\n            return this.defaultEmptyTemplate;\n        }\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    private endEdit(grid: IgxHierarchicalGridComponent) {\n        if (grid.crudService.inEditMode) {\n            grid.endEdit();\n        }\n        grid.hgridAPI.getChildGrids(true).forEach(g => {\n            if (g.crudService.inEditMode) {\n            g.endEdit();\n        }});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IgxSelectModule } from '../../select/index';\nimport { IgxGridComponent } from '../grid/grid.component';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule,\n    IgxSelectModule\n  ],\n  providers: [\n    IgxRowIslandAPIService\n  ],\n  entryComponents: [\n    IgxGridComponent\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective, static: false })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\nimport { PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    private _isOpen = false;\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-nav-drawer')\n    public cssClass = true;\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [(isOpen)]='model.isOpen'></igx-nav-drawer>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return this._isOpen;\n    }\n    public set isOpen(value) {\n        this._isOpen = value;\n        this.isOpenChange.emit(this._isOpen);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 68px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '68px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective, static: false })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective, static: false })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager,\n        private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                if (this.drawer) {\n                    this.renderer.setElementStyle(this.drawer, 'width', width);\n                }\n            });\n        } else {\n            this.renderer.setElementStyle(this.drawer, 'width', width);\n        }\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver && this.platformUtil.isBrowser) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        if (!this.platformUtil.isBrowser) {\n            return;\n        }\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                const transform = x ? 'translate3d(' + x + 'px,0,0)' : '';\n                this.renderer.setElementStyle(this.drawer, 'transform', transform);\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform', transform);\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs extends IBaseEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActive = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (!this.continuous) {\n            this._isActive = visible;\n        }\n    }\n}\n","import { Component, NgModule, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';\nimport { SliderHandle } from '../slider.common';\n\n@Component({\n    selector: 'igx-thumb-label',\n    templateUrl: 'thumb-label.component.html'\n})\nexport class IgxThumbLabelComponent {\n    private _active: boolean;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public continuous: boolean;\n\n    @HostBinding('class.igx-slider__label-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__label-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__label-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this.active;\n    }\n\n    @HostBinding('class.igx-slider__label-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this.active;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get active() {\n        return this._active;\n    }\n\n    public set active(val: boolean) {\n        if (this.continuous) {\n            return;\n        }\n\n        this._active = val;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef,\n    AfterContentChecked\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    SliderType,\n    ISliderValueChangeEventArgs\n} from './slider.common';\nimport { IgxThumbLabelComponent } from './label/thumb-label.component';\n\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html'\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentChecked,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = SliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    private track: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxThumbLabelComponent)\n    private labelRefs: QueryList<IgxThumbLabelComponent> = new QueryList<IgxThumbLabelComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    private get labelFrom(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.FROM);\n    }\n\n    private get labelTo(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef, static: false })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef, static: false })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: SliderType) {\n        this._type = type;\n\n        if (type === SliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = 1;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.positionHandlesAndUpdateTrack();\n            this.setTickInterval(labels);\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.normalizeByStep(this.value);\n            this.setTickInterval(this.labels);\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        this._continuous = continuous;\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`IgxSliderComponent \\`isContinuous\\` property is deprecated.\\nUse \\`continuous\\` instead.`)\n    public get isContinuous(): boolean {\n        return this.continuous;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public set isContinuous(continuous: boolean) {\n        this.continuous = continuous;\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh time travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound) || 0;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound) || 1;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link SliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n\n    constructor(private renderer: Renderer2, private _el: ElementRef, private _cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event: PointerEvent) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showSliderIndicators();\n\n        $event.preventDefault();\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbTo;\n        activeThumb.nativeElement.releasePointerCapture($event.pointerId);\n\n        this.hideSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    @HostListener('panstart')\n    public onPanStart() {\n        this.showSliderIndicators();\n    }\n\n    @HostListener('panend')\n    public onPanEnd() {\n        this.hideSliderIndicators();\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === SliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(this.labels);\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const thumbFrom = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            const labelFrom = this.labelRefs.find((label: IgxThumbLabelComponent) => label.type === SliderHandle.FROM);\n            this.positionHandle(thumbFrom, labelFrom, this.lowerValue);\n            this.subscribeTo(thumbFrom, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentChecked() {\n        // Calculates the distance between every step in pixels.\n        this.stepDistance = this.calculateStepDistance();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleSliderIndicators();\n    }\n\n    public onHoverChange(state: boolean) {\n        return state ? this.showSliderIndicators() : this.hideSliderIndicators();\n    }\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n\n        return value;\n    }\n\n    private findClosestThumb(event: PointerEvent) {\n        if (this.isRange) {\n            this.closestHandle(event);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this.value === this.upperBound) {\n            this.value = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandle(thumbHandle: ElementRef, labelHandle: ElementRef, position: number) {\n        const positionLeft = `${this.valueToFraction(position) * 100}%`;\n\n        if (thumbHandle) {\n            thumbHandle.nativeElement.style.left = positionLeft;\n        }\n\n        if (labelHandle) {\n            labelHandle.nativeElement.style.left = positionLeft;\n        }\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.labelTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, this.labelTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, this.labelFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle(event: PointerEvent) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = event.clientX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (fromOffset === toOffset && toOffset < xPointer) {\n            this.thumbTo.nativeElement.focus();\n        } else if (fromOffset === toOffset && toOffset > xPointer ) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval(labels) {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        this.labelTo.active = true;\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n        if (this.labelFrom) {\n            this.labelFrom.active = true;\n        }\n\n    }\n\n    private hideSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            this.labelTo.active = false;\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n\n            if (this.labelFrom) {\n                this.labelFrom.active = false;\n            }\n        });\n    }\n\n    private toggleSliderIndicators() {\n        this.showSliderIndicators();\n        this.hideSliderIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * NormalizÐµ the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent],\n    exports: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    AnimationEvent,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs } from '../core/utils';\nimport { Subscription } from 'rxjs';\n\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit, OnDestroy {\n    private _currentBottomNavId = NEXT_ID++;\n    private _panelsChanges$: Subscription;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${this._currentBottomNavId}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.setPanelsAttributes();\n        this._panelsChanges$ = this.panels.changes.subscribe(() => {\n            this.setPanelsAttributes();\n        });\n\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._panelsChanges$) {\n            this._panelsChanges$.unsubscribe();\n        }\n    }\n\n    private setPanelsAttributes() {\n        const panelsArray = this.panels.toArray();\n        for (let index = 0; index < this.panels.length; index++) {\n            const tabPanels = panelsArray[index] as IgxTabPanelComponent;\n            tabPanels.nativeElement.setAttribute('id', this.getTabPanelId(index));\n            tabPanels.nativeElement.setAttribute('aria-labelledby', this.getTabId(index));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabId(index: number): string {\n        return `igx-tab-${this._currentBottomNavId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabPanelId(index: number): string {\n        return `igx-tab-panel-${this._currentBottomNavId}-${index}`;\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit {\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     *@hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Returns the native element of the tab-panel component\n     * ```typescript\n     *  const mytabPanelElement: HTMLElement = tabPanel.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: false })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    /**\n     * @hidden @internal\n     * Set to true when the tab is automatically generated from the IgxBottomNavComponent when tab panels are defined.\n     */\n    @Input()\n    public autoGenerated: boolean;\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: false })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.autoGenerated) {\n            this.select();\n        }\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n    performSelectionChange(newTab: IgxTabItemBase) {}\n    transformContentAnimation(tab: IgxTabItemBase, duration: number) {}\n    transformIndicatorAnimation(element: HTMLElement, duration?: number) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    get index(): number { return 0; }\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabsGroupBase {\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent extends IgxTabsGroupBase implements AfterContentInit {\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);\n        }\n    }\n\n    /**\n     * Returns the native element of the tabs-group component\n     * ```typescript\n     *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n    private _isSelected = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this.relatedTab);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n    }\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\nimport { KEYS } from '../core/utils';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**@hidden*/\n    private _icon: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tab-item label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**@hidden*/\n    private _label: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     * @hidden @internal\n     * Set to true when the tab item is automatically generated from the IgxTabsComponent when tab groups are defined.\n     */\n    @Input()\n    public autoGenerated: boolean;\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n    private _resizeObserver: ResizeObserver;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef, private _ngZone: NgZone) {\n        super();\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    ngAfterViewInit(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (this.autoGenerated) {\n            this.select();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event: KeyboardEvent) {\n        const tabsArray = this._tabs.tabs.toArray();\n        const startIndex = tabsArray.indexOf(this);\n        let finalIndex = -1;\n        let currentIndex = startIndex;\n\n        switch (event.key) {\n            case KEYS.RIGHT_ARROW:\n            case KEYS.RIGHT_ARROW_IE:\n                do {\n                    currentIndex++;\n                    if (currentIndex === tabsArray.length) {\n                        currentIndex = -1;\n                        continue;\n                    } else if ((tabsArray[currentIndex] as IgxTabItemComponent).disabled === false) {\n                        finalIndex = currentIndex;\n                        break;\n                    }\n                }\n                while (currentIndex !== startIndex);\n                break;\n            case KEYS.LEFT_ARROW:\n            case KEYS.LEFT_ARROW_IE:\n                do {\n                    currentIndex--;\n                    if (currentIndex === -1) {\n                        currentIndex = tabsArray.length;\n                        continue;\n                    } else if ((tabsArray[currentIndex] as IgxTabItemComponent).disabled === false) {\n                        finalIndex = currentIndex;\n                        break;\n                    }\n                }\n                while (currentIndex !== startIndex);\n                break;\n            case KEYS.HOME:\n                event.preventDefault();\n                finalIndex = tabsArray.find(t => (t as IgxTabItemComponent).disabled === false).index;\n                break;\n            case KEYS.END:\n                event.preventDefault();\n                finalIndex = tabsArray.slice().reverse().find(t => (t as IgxTabItemComponent).disabled === false).index;\n                break;\n            case KEYS.ENTER:\n                if (!this.autoGenerated) {\n                    this.nativeTabItem.nativeElement.click();\n                }\n                break;\n            case KEYS.SPACE:\n            case KEYS.SPACE_IE:\n                event.preventDefault();\n                if (!this.autoGenerated) {\n                    this.nativeTabItem.nativeElement.click();\n                }\n                break;\n            default:\n                break;\n        }\n\n        if (finalIndex > -1) {\n            const tab = tabsArray[finalIndex];\n            tab.nativeTabItem.nativeElement.focus();\n\n            if (this.autoGenerated) {\n                tab.select();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n        this._ngZone.runOutsideAngular(() => {\n            if (this._resizeObserver) {\n                if (this._isSelected) {\n                    this._resizeObserver.observe(this._element.nativeElement);\n                } else {\n                    this._resizeObserver.disconnect();\n                }\n            }\n        });\n        this.tabindex = newValue ? 0 : -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabItemBase } from './tabs.common';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PlatformUtil } from '../core/utils';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\nlet NEXT_TABS_ID = 0;\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n    private _currentTabsId = NEXT_TABS_ID++;\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.groups;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n    * ```typescript\n    * const tabItems = this.myTabComponent.contentTabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-tabs [(selectedIndex)]=\"model.selectedIndex\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            if (this.tabs && this.tabs.length > 0) {\n                const newTab = this.tabs.toArray()[newIndex];\n                if (newTab) {\n                   this.performSelectionChange(newTab);\n                }\n            } else {\n                this._selectedIndex = newIndex;\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedIndexChange = new EventEmitter<number>();\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n     * Sets/gets the `id` of the tabs.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-tabs-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-tabs id=\"my-first-tabs\"></igx-tabs>\n     * ```\n     * @memberof IgxTabsComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tabs-${this._currentTabsId}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output()\n    public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator', { static: false })\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n    private _resizeObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef, private _ngZone: NgZone, private platformUtil: PlatformUtil) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                const newTab = this.tabs.toArray()[this._selectedIndex];\n                if (newTab) {\n                    this.performSelection(newTab);\n                } else {\n                    this.hideIndicator();\n                }\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver = new ResizeObserver(() => {\n                    if (!this.hasContentTabs && this._selectedIndex >= 0 && this._selectedIndex < this.tabs.length) {\n                        const newTab = this.tabs.toArray()[this._selectedIndex];\n                        this.transformContentAnimation(newTab, 0);\n                    }\n                });\n\n                this._resizeObserver.observe(this.tabsContainer.nativeElement);\n            });\n        }\n\n        this.setGroupsAttributes();\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.setGroupsAttributes();\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n        if (this._resizeObserver) {\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver.disconnect();\n            });\n        }\n    }\n\n    private setGroupsAttributes() {\n        const groupsArray = this.groups.toArray();\n        for (let index = 0; index < this.groups.length; index++) {\n            const tabsGroup = groupsArray[index] as IgxTabsGroupComponent;\n            tabsGroup.nativeElement.setAttribute('id', this.getTabsGroupId(index));\n            tabsGroup.nativeElement.setAttribute('aria-labelledby', this.getTabItemId(index));\n        }\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        requestAnimationFrame(() => {\n            const currentTab = this.tabs.toArray()[this.selectedIndex];\n            if (currentTab) {\n                this.performSelectionChange(currentTab);\n            } else if (this.selectedIndex >= this.tabs.length) {\n                this.performSelectionChange(this.tabs.last);\n            } else {\n                this.hideIndicator();\n            }\n        });\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public performSelectionChange(newTab: IgxTabItemBase): void {\n        const oldTab = this.selectedTabItem;\n        if (oldTab) {\n            this.performDeselection(oldTab);\n        }\n        if (newTab) {\n            this.performSelection(newTab);\n        } else {\n            // if there is no new selected tab hide the selection indicator\n            this.hideIndicator();\n        }\n        this.selectedIndexChange.emit(this._selectedIndex);\n    }\n\n    private performDeselection(oldTab: IgxTabItemBase): void {\n        oldTab.setSelectedInternal(false);\n        const oldTabRelatedGroup = this.groups.toArray()[oldTab.index];\n        if (oldTabRelatedGroup) {\n            oldTabRelatedGroup.setSelectedInternal(false);\n        }\n        this._selectedIndex = -1;\n        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });\n    }\n\n    private performSelection(newTab: IgxTabItemBase): void {\n        newTab.setSelectedInternal(true);\n        this._selectedIndex = newTab.index;\n\n        let newTabRelatedGroup = null;\n        if (!this.hasContentTabs && this.groups) {\n            newTabRelatedGroup = this.groups.toArray()[newTab.index];\n            if (newTabRelatedGroup) {\n                newTabRelatedGroup.setSelectedInternal(true);\n            }\n        }\n\n        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });\n\n        requestAnimationFrame(() => {\n            // bring the new selected tab into view if it is not\n            this.bringNewTabIntoView(newTab);\n            // animate the new selection indicator\n            this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);\n            // animate the new tab's group content\n            if (!this.hasContentTabs) {\n                this.transformContentAnimation(newTab, 0.2);\n            }\n        });\n    }\n\n    private bringNewTabIntoView(newTab: IgxTabItemBase): void {\n        const tabNativeElement = newTab.nativeTabItem.nativeElement;\n\n        // Scroll left if there is need\n        if (tabNativeElement.offsetLeft < this.offset) {\n            this.scrollElement(tabNativeElement, false);\n        }\n\n        // Scroll right if there is need\n        const viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;\n        const delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this.scrollElement(tabNativeElement, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabItemId(index: number): string {\n        return `igx-tab-item-${this._currentTabsId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabsGroupId(index: number): string {\n        return `igx-tabs-group-${this._currentTabsId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    // animation for the new panel/group (not needed for tab only mode)\n    public transformContentAnimation(tab: IgxTabItemBase, duration: number): void {\n        const contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;\n        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n        this.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    /**\n     * @hidden\n     */\n    public transformIndicatorAnimation(element: HTMLElement, duration = 0.3): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n            this.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    public hideIndicator(): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n        }\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n        let hour, minutes, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit,\n    Injector,\n    ChangeDetectorRef,\n    AfterViewChecked,\n    Type\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler, Subscription } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\nconst noop = () => { };\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit,\n    AfterViewChecked {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList', { static: false })\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList', { static: false })\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList', { static: false })\n    public ampmList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective, static: false })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective, static: false })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef, static: false })\n    private _inputElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective, { read: IgxInputDirective, static: false })\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: false })\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    @ViewChild(IgxInputGroupComponent, { read: IgxInputGroupComponent, static: false })\n    private _inputGroup: IgxInputGroupComponent;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _hoursPos = new Set();\n    private _minutesPos = new Set();\n    private _secondsPos = new Set();\n    private _amPmPos = new Set();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this._value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n        this._ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this._inputGroup) {\n            this.toggleRef.element.style.width = this._inputGroup.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    this._updateValidityOnBlur();\n                }\n            });\n\n            this.determineCursorPos();\n\n            if (this._ngControl) {\n                this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            }\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of the time picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n        /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    constructor(\n        private _injector: Injector,\n        private _cdr: ChangeDetectorRef) { }\n\n    private determineCursorPos(): void {\n        this.clearCursorPos();\n        for (const char of this.format) {\n            switch (char) {\n                case 'H':\n                case 'h':\n                    this._hoursPos.size === 0 ? this._hoursPos.add(this.format.indexOf(char)) :\n                        this._hoursPos.add(this.format.lastIndexOf(char));\n                    this._hoursPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'M':\n                case 'm':\n                    this._minutesPos.size === 0 ? this._minutesPos.add(this.format.indexOf(char)) :\n                        this._minutesPos.add(this.format.lastIndexOf(char));\n                    this._minutesPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'S':\n                case 's':\n                    this._secondsPos.size === 0 ? this._secondsPos.add(this.format.indexOf(char)) :\n                        this._secondsPos.add(this.format.lastIndexOf(char));\n                    this._secondsPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'T':\n                case 't':\n                    this._amPmPos.size === 0 ? this._amPmPos.add(this.format.indexOf(char)) :\n                        this._amPmPos.add(this.format.lastIndexOf(char));\n                    this._amPmPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n            }\n        }\n    }\n\n    private clearCursorPos() {\n        this._hoursPos.forEach(v => this._hoursPos.delete(v));\n        this._minutesPos.forEach(v => this._minutesPos.delete(v));\n        this._secondsPos.forEach(v => this._secondsPos.delete(v));\n        this._amPmPos.forEach(v => this._amPmPos.delete(v));\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        date.setSeconds(0);\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n                this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                    (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                        date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM;\n    }\n\n    private _getCursorPosition(): number {\n        return this._inputElementRef.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this._inputElementRef.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this.displayValue === this.parseMask(false)) {\n            return;\n        }\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            const input = this._inputDirective || this._inputDirectiveUserTemplate;\n            if (this._inputGroup.isFocused) {\n                input.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                input.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._inputElementRef ? this._inputElementRef.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this._inputGroup  ? this._inputGroup .element.nativeElement : null;\n    }\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.positionStrategy.settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this.value ? this._formatTime(this.value, this.format) : this.parseMask(false);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        if (this.mode === InteractionMode.DropDown) {\n            const value = event.target.value;\n            this.isNotEmpty = value !== '';\n            this.displayValue = value;\n            if (value && value !== this.parseMask()) {\n                if (this._isEntryValid(value)) {\n                    const newVal = this._convertMinMaxValue(value);\n                    if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                        this.value = newVal;\n                    }\n                } else {\n                    const args: IgxTimePickerValidationFailedEventArgs = {\n                        timePicker: this,\n                        currentValue: value,\n                        setThroughUI: false\n                    };\n                    this.onValidationFailed.emit(args);\n                }\n            }\n        }\n\n        if (this.toggleRef.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    public mouseDown(event: MouseEvent): void {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or suffix, prevent default and this way prevent blur\n        if (event.target !== this.getEditElement()) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n\n            if (this.showHoursList && HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (this.showMinutesList &&\n                ((this.showHoursList && MINUTES_POS.indexOf(cursor) !== -1) || (!this.showHoursList && HOURS_POS.indexOf(cursor) !== -1))) {\n                    this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (this.showAmPmList) {\n                if (((!this.showHoursList || !this.showMinutesList) && MINUTES_POS.indexOf(cursor) !== -1) ||\n                    (this.showHoursList && this.showMinutesList &&  AMPM_POS.indexOf(cursor) !== -1)) {\n\n                        const sections = this.displayValue.split(/[\\s:]+/);\n                        sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                        currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                        this.value = currentVal;\n                }\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this.displayValue = this.inputFormat.transform(displayVal);\n        this._inputElementRef.nativeElement.value = this.displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n\n    private _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    private _isVisible = false;\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)] = \"model.isVisible\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public get isVisible() {\n        return this._isVisible;\n    }\n    public set isVisible(value) {\n        this._isVisible = value;\n        this.isVisibleChange.emit(this._isVisible);\n\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public isVisibleChange = new EventEmitter<boolean>();\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n"]}