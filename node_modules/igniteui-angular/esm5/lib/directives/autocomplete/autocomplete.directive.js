/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter, NgModule, ElementRef, HostListener, ChangeDetectorRef } from '@angular/core';
import { NgModel, FormControlName } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../services/index';
import { IgxDropDownModule, IgxDropDownComponent, IgxDropDownItemNavigationDirective } from '../../drop-down/index';
import { IgxInputGroupComponent } from '../../input-group/index';
/**
 * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.
 * @export
 * @record
 */
export function AutocompleteItemSelectionEventArgs() { }
if (false) {
    /**
     * New value selected from the drop down
     * @type {?}
     */
    AutocompleteItemSelectionEventArgs.prototype.value;
}
/**
 * @record
 */
export function AutocompleteOverlaySettings() { }
if (false) {
    /**
     * Position strategy to use with this settings
     * @type {?|undefined}
     */
    AutocompleteOverlaySettings.prototype.positionStrategy;
    /**
     * Scroll strategy to use with this settings
     * @type {?|undefined}
     */
    AutocompleteOverlaySettings.prototype.scrollStrategy;
    /**
     * Set the outlet container to attach the overlay to
     * @type {?|undefined}
     */
    AutocompleteOverlaySettings.prototype.outlet;
}
/**
 * **Ignite UI for Angular Autocomplete** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)
 *
 * The igxAutocomplete directive provides a way to enhance a text input
 * by showing a drop down of suggested options, provided by the developer.
 *
 * Example:
 * ```html
 * <input type="text" [igxAutocomplete]="townsPanel" />
 * <igx-drop-down #townsPanel>
 *     <igx-drop-down-item *ngFor="let town of towns | startsWith:townSelected" [value]="town">
 *         {{town}}
 *     </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
var IgxAutocompleteDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxAutocompleteDirective, _super);
    function IgxAutocompleteDirective(ngModel, formControl, group, elementRef, cdr) {
        var _this = _super.call(this, null) || this;
        _this.ngModel = ngModel;
        _this.formControl = formControl;
        _this.group = group;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.defaultSettings = {
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy({ target: _this.parentElement }),
            excludePositionTarget: true
        };
        _this.dropDownOpened$ = new Subject();
        /**
         * Enables/disables autocomplete component
         *
         * ```typescript
         * // get
         * let disabled = this.autocomplete.disabled;
         * ```
         * ```html
         * <!--set-->
         * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
         * ```
         * ```typescript
         * // set
         * public disabled = true;
         * ```
         */
        _this.disabled = false;
        /**
         * Emitted after item from the drop down is selected
         *
         * ```html
         * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
         * ```
         */
        _this.onItemSelected = new EventEmitter();
        /**
         * @hidden \@internal
         */
        _this.autofill = 'off';
        /**
         * @hidden \@internal
         */
        _this.role = 'combobox';
        _this.select = function (value) {
            if (!value.newSelection) {
                return;
            }
            value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.
            // Disable selection in the drop down, because in autocomplete we do not save selection.
            /** @type {?} */
            var newValue = value.newSelection.value;
            /** @type {?} */
            var args = { value: newValue, cancel: false };
            _this.onItemSelected.emit(args);
            if (args.cancel) {
                return;
            }
            _this.close();
            _this.nativeElement.focus();
            // Update model after the input is re-focused, in order to have proper valid styling.
            // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.
            _this.model ? _this.model.control.setValue(newValue) : _this.nativeElement.value = newValue;
        };
        _this.highlightFirstItem = function () {
            if (_this.target.focusedItem) {
                _this.target.focusedItem.focused = false;
                _this.target.focusedItem = null;
            }
            _this.target.navigateFirst();
            _this.cdr.detectChanges();
        };
        return _this;
    }
    Object.defineProperty(IgxAutocompleteDirective.prototype, "model", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.ngModel || this.formControl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "nativeElement", {
        /** @hidden @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "parentElement", {
        /** @hidden @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.group ? this.group.element.nativeElement : this.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "settings", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);
            if (!settings.positionStrategy.settings.target) {
                /** @type {?} */
                var positionStrategyClone = settings.positionStrategy.clone();
                positionStrategyClone.settings.target = this.parentElement;
                settings.positionStrategy = positionStrategyClone;
            }
            return settings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaExpanded", {
        /** @hidden  @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "hasPopUp", {
        /** @hidden  @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return 'listbox';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaOwns", {
        /** @hidden  @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.target.listId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaActiveDescendant", {
        /** @hidden  @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaAutocomplete", {
        /** @hidden  @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return 'list';
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onInput = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.open();
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onArrowDown = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.open();
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onTab = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.close();
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.handleKeyDown = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.collapsed) {
            switch (event.key.toLowerCase()) {
                case 'space':
                case 'spacebar':
                case ' ':
                case 'home':
                case 'end':
                    return;
                default:
                    _super.prototype.handleKeyDown.call(this, event);
            }
        }
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onArrowDownKeyDown = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        _super.prototype.onArrowDownKeyDown.call(this);
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onArrowUpKeyDown = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        _super.prototype.onArrowUpKeyDown.call(this);
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onEndKeyDown = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        _super.prototype.onEndKeyDown.call(this);
    };
    /** @hidden  @internal */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.onHomeKeyDown = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        _super.prototype.onHomeKeyDown.call(this);
    };
    /**
     * Closes autocomplete drop down
     */
    /**
     * Closes autocomplete drop down
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.close = /**
     * Closes autocomplete drop down
     * @return {?}
     */
    function () {
        if (this.collapsed) {
            return;
        }
        this.target.close();
        this.dropDownOpened$.next();
    };
    /**
     * Opens autocomplete drop down
     */
    /**
     * Opens autocomplete drop down
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.open = /**
     * Opens autocomplete drop down
     * @return {?}
     */
    function () {
        if (this.disabled || !this.collapsed) {
            return;
        }
        // if no drop-down width is set, the drop-down will be as wide as the autocomplete input;
        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');
        this.target.open(this.settings);
        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);
        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);
        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);
    };
    Object.defineProperty(IgxAutocompleteDirective.prototype, "collapsed", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.target ? this.target.collapsed : true;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    IgxAutocompleteDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.dropDownOpened$.complete();
    };
    IgxAutocompleteDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxAutocomplete]'
                },] }
    ];
    /** @nocollapse */
    IgxAutocompleteDirective.ctorParameters = function () { return [
        { type: NgModel, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [NgModel,] }] },
        { type: FormControlName, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [FormControlName,] }] },
        { type: IgxInputGroupComponent, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    IgxAutocompleteDirective.propDecorators = {
        target: [{ type: Input, args: ['igxAutocomplete',] }],
        disabled: [{ type: Input, args: ['igxAutocompleteDisabled',] }],
        autocompleteSettings: [{ type: Input, args: ['igxAutocompleteSettings',] }],
        onItemSelected: [{ type: Output }],
        autofill: [{ type: HostBinding, args: ['attr.autocomplete',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
        hasPopUp: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
        ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
        ariaActiveDescendant: [{ type: HostBinding, args: ['attr.aria-activedescendant',] }],
        ariaAutocomplete: [{ type: HostBinding, args: ['attr.aria-autocomplete',] }],
        onInput: [{ type: HostListener, args: ['input',] }],
        onArrowDown: [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowUp', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowUp', ['$event'],] }],
        onTab: [{ type: HostListener, args: ['keydown.Tab',] }, { type: HostListener, args: ['keydown.Shift.Tab',] }]
    };
    return IgxAutocompleteDirective;
}(IgxDropDownItemNavigationDirective));
export { IgxAutocompleteDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxAutocompleteDirective.prototype.defaultSettings;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.id;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.dropDownOpened$;
    /**
     * Sets the target of the autocomplete directive
     *
     * ```html
     * <!-- Set -->
     * <input [igxAutocomplete]="dropdown" />
     * ...
     * <igx-drop-down #dropdown>
     * ...
     * </igx-drop-down>
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.target;
    /**
     * Enables/disables autocomplete component
     *
     * ```typescript
     * // get
     * let disabled = this.autocomplete.disabled;
     * ```
     * ```html
     * <!--set-->
     * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
     * ```
     * ```typescript
     * // set
     * public disabled = true;
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.disabled;
    /**
     * Provide overlay settings for the autocomplete drop down
     *
     * ```typescript
     * // get
     * let settings = this.autocomplete.autocompleteSettings;
     * ```
     * ```html
     * <!--set-->
     * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteSettings]="settings"/>
     * ```
     * ```typescript
     * // set
     * this.settings = {
     *  positionStrategy: new ConnectedPositioningStrategy({
     *      closeAnimation: null,
     *      openAnimation: null
     *  })
     * };
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.autocompleteSettings;
    /**
     * Emitted after item from the drop down is selected
     *
     * ```html
     * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.onItemSelected;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.autofill;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.role;
    /**
     * @type {?}
     * @private
     */
    IgxAutocompleteDirective.prototype.select;
    /**
     * @type {?}
     * @private
     */
    IgxAutocompleteDirective.prototype.highlightFirstItem;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.ngModel;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.formControl;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.group;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.cdr;
}
/**
 * @hidden
 */
var IgxAutocompleteModule = /** @class */ (function () {
    function IgxAutocompleteModule() {
    }
    IgxAutocompleteModule.decorators = [
        { type: NgModule, args: [{
                    imports: [IgxDropDownModule, CommonModule],
                    declarations: [IgxAutocompleteDirective],
                    exports: [IgxAutocompleteDirective]
                },] }
    ];
    return IgxAutocompleteModule;
}());
export { IgxAutocompleteModule };
//# sourceMappingURL=data:application/json;base64,