/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter } from '@angular/core';
import { Calendar, isDateInRanges } from './calendar';
import { Subject } from 'rxjs';
import { isDate } from '../core/utils';
/** @enum {string} */
var CalendarSelection = {
    SINGLE: 'single',
    MULTI: 'multi',
    RANGE: 'range',
};
export { CalendarSelection };
/** @enum {string} */
var ScrollMonth = {
    PREV: 'prev',
    NEXT: 'next',
    NONE: 'none',
};
export { ScrollMonth };
var IgxCalendarBase = /** @class */ (function () {
    /**
     * @hidden
     */
    function IgxCalendarBase() {
        /**
         * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.
         * Default value is `false`.
         * ```html
         * <igx-calendar [hideOutsideDays] = "true"></igx-calendar>
         * ```
         * ```typescript
         * let hideOutsideDays = this.calendar.hideOutsideDays;
         * ```
         */
        this.hideOutsideDays = false;
        /**
         * Emits an event when a date is selected.
         * Provides reference the `selectedDates` property.
         */
        this.onSelection = new EventEmitter();
        /**
         * @hidden
         */
        this._selection = CalendarSelection.SINGLE;
        /**
         * @hidden
         */
        this.rangeStarted = false;
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._disabledDates = null;
        /**
         * @hidden
         */
        this._specialDates = null;
        /**
         * @hidden
         */
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        /**
         * @hidden
         */
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        /**
         * @hidden
         */
        this.monthScrollDirection = ScrollMonth.NONE;
        /**
         * @hidden
         */
        this.scrollMonth$ = new Subject();
        /**
         * @hidden
         */
        this.stopMonthScroll$ = new Subject();
        /**
         * @hidden
         */
        this.startMonthScroll$ = new Subject();
        /**
         * @hidden
         */
        this._onTouchedCallback = function () { };
        /**
         * @hidden
         */
        this._onChangeCallback = function () { };
        this.calendarModel = new Calendar();
        this.viewDate = this.viewDate ? this.viewDate : new Date();
        this.calendarModel.firstWeekDay = this.weekStart;
        this.initFormatters();
    }
    Object.defineProperty(IgxCalendarBase.prototype, "weekStart", {
        /**
         * Gets the start day of the week.
         * Can return a numeric or an enum representation of the week day.
         * Defaults to `Sunday` / `0`.
         */
        get: /**
         * Gets the start day of the week.
         * Can return a numeric or an enum representation of the week day.
         * Defaults to `Sunday` / `0`.
         * @return {?}
         */
        function () {
            return this.calendarModel.firstWeekDay;
        },
        /**
         * Sets the start day of the week.
         * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
         */
        set: /**
         * Sets the start day of the week.
         * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.calendarModel.firstWeekDay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "locale", {
        /**
         * Gets the `locale` of the calendar.
         * Default value is `"en"`.
         */
        get: /**
         * Gets the `locale` of the calendar.
         * Default value is `"en"`.
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * Sets the `locale` of the calendar.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         */
        set: /**
         * Sets the `locale` of the calendar.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
            this.initFormatters();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "formatOptions", {
        /**
         * Gets the date format options of the days view.
         */
        get: /**
         * Gets the date format options of the days view.
         * @return {?}
         */
        function () {
            return this._formatOptions;
        },
        /**
         * Sets the date format options of the days view.
         * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }
         */
        set: /**
         * Sets the date format options of the days view.
         * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }
         * @param {?} formatOptions
         * @return {?}
         */
        function (formatOptions) {
            this._formatOptions = Object.assign(this._formatOptions, formatOptions);
            this.initFormatters();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "formatViews", {
        /**
         * Gets whether the `day`, `month` and `year` should be rendered
         * according to the locale and formatOptions, if any.
         */
        get: /**
         * Gets whether the `day`, `month` and `year` should be rendered
         * according to the locale and formatOptions, if any.
         * @return {?}
         */
        function () {
            return this._formatViews;
        },
        /**
         * Gets whether the `day`, `month` and `year` should be rendered
         * according to the locale and formatOptions, if any.
         */
        set: /**
         * Gets whether the `day`, `month` and `year` should be rendered
         * according to the locale and formatOptions, if any.
         * @param {?} formatViews
         * @return {?}
         */
        function (formatViews) {
            this._formatViews = Object.assign(this._formatViews, formatViews);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "selection", {
        /**
         *
         * Gets the selection type.
         * Default value is `"single"`.
         * Changing the type of selection resets the currently
         * selected values if any.
         */
        get: /**
         *
         * Gets the selection type.
         * Default value is `"single"`.
         * Changing the type of selection resets the currently
         * selected values if any.
         * @return {?}
         */
        function () {
            return this._selection;
        },
        /**
         * Sets the selection.
         */
        set: /**
         * Sets the selection.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            switch (value) {
                case CalendarSelection.SINGLE:
                    this.selectedDates = null;
                    break;
                case CalendarSelection.MULTI:
                case CalendarSelection.RANGE:
                    this.selectedDates = [];
                    break;
                default:
                    throw new Error('Invalid selection value');
            }
            this._onChangeCallback(this.selectedDates);
            this.rangeStarted = false;
            this._selection = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "value", {
        /**
         * Gets the selected date(s).
         *
         * When selection is set to `single`, it returns
         * a single `Date` object.
         * Otherwise it is an array of `Date` objects.
         */
        get: /**
         * Gets the selected date(s).
         *
         * When selection is set to `single`, it returns
         * a single `Date` object.
         * Otherwise it is an array of `Date` objects.
         * @return {?}
         */
        function () {
            return this.selectedDates;
        },
        /**
         * Sets the selected date(s).
         *
         * When selection is set to `single`, it accepts
         * a single `Date` object.
         * Otherwise it is an array of `Date` objects.
         */
        set: /**
         * Sets the selected date(s).
         *
         * When selection is set to `single`, it accepts
         * a single `Date` object.
         * Otherwise it is an array of `Date` objects.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value || !!value && ((/** @type {?} */ (value))).length === 0) {
                return;
            }
            this.selectDate(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "viewDate", {
        /**
         * Gets the date that is presented.
         * By default it is the current date.
         */
        get: /**
         * Gets the date that is presented.
         * By default it is the current date.
         * @return {?}
         */
        function () {
            return this._viewDate;
        },
        /**
         * Sets the date that will be presented in the default view when the component renders.
         */
        set: /**
         * Sets the date that will be presented in the default view when the component renders.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._viewDate = this.getDateOnly(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "disabledDates", {
        /**
         * Gets the disabled dates descriptors.
         */
        get: /**
         * Gets the disabled dates descriptors.
         * @return {?}
         */
        function () {
            return this._disabledDates;
        },
        /**
         * Sets the disabled dates' descriptors.
         * ```typescript
         *@ViewChild("MyCalendar")
         *public calendar: IgxCalendarComponent;
         *ngOnInit(){
         *    this.calendar.disabledDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         *}
         *```
         */
        set: /**
         * Sets the disabled dates' descriptors.
         * ```typescript
         * \@ViewChild("MyCalendar")
         * public calendar: IgxCalendarComponent;
         * ngOnInit(){
         *    this.calendar.disabledDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledDates = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarBase.prototype, "specialDates", {
        /**
         * Gets the special dates descriptors.
         */
        get: /**
         * Gets the special dates descriptors.
         * @return {?}
         */
        function () {
            return this._specialDates;
        },
        /**
         * Sets the special dates' descriptors.
         * ```typescript
         *@ViewChild("MyCalendar")
         *public calendar: IgxCalendarComponent;
         *ngOnInit(){
         *    this.calendar.specialDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         *}
         *```
         */
        set: /**
         * Sets the special dates' descriptors.
         * ```typescript
         * \@ViewChild("MyCalendar")
         * public calendar: IgxCalendarComponent;
         * ngOnInit(){
         *    this.calendar.specialDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._specialDates = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    IgxCalendarBase.prototype.getDateOnlyInMs = /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDateOnly(date).getTime();
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    IgxCalendarBase.prototype.generateDateRange = /**
     * @hidden
     * @private
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (start, end) {
        /** @type {?} */
        var result = [];
        start = this.getDateOnly(start);
        end = this.getDateOnly(end);
        while (start.getTime() !== end.getTime()) {
            start = this.calendarModel.timedelta(start, 'day', 1);
            result.push(start);
        }
        return result;
    };
    /**
     * Performs a single selection.
     * @hidden
     */
    /**
     * Performs a single selection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.selectSingle = /**
     * Performs a single selection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectedDates = this.getDateOnly(value);
        this._onChangeCallback(this.selectedDates);
    };
    /**
     * Performs a multiple selection
     * @hidden
     */
    /**
     * Performs a multiple selection
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.selectMultiple = /**
     * Performs a multiple selection
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (Array.isArray(value)) {
            /** @type {?} */
            var newDates = value.map(function (v) { return _this.getDateOnly(v).getTime(); });
            /** @type {?} */
            var selDates = this.selectedDates.map(function (v) { return _this.getDateOnly(v).getTime(); });
            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {
                return;
            }
            this.selectedDates = Array.from(new Set(tslib_1.__spread(newDates, selDates))).map(function (v) { return new Date(v); });
        }
        else {
            /** @type {?} */
            var valueDateOnly_1 = this.getDateOnly(value);
            /** @type {?} */
            var newSelection = [];
            if (this.selectedDates.every(function (date) { return date.getTime() !== valueDateOnly_1.getTime(); })) {
                newSelection.push(valueDateOnly_1);
            }
            else {
                this.selectedDates = this.selectedDates.filter(function (date) { return date.getTime() !== valueDateOnly_1.getTime(); });
            }
            if (newSelection.length > 0) {
                this.selectedDates = this.selectedDates.concat(newSelection);
            }
        }
        this.selectedDates = this.selectedDates.filter(function (d) { return !_this.isDateDisabled(d); });
        this.selectedDates.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
        this._onChangeCallback(this.selectedDates);
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} value
     * @param {?=} excludeDisabledDates
     * @return {?}
     */
    IgxCalendarBase.prototype.selectRange = /**
     * @hidden
     * @private
     * @param {?} value
     * @param {?=} excludeDisabledDates
     * @return {?}
     */
    function (value, excludeDisabledDates) {
        var _this = this;
        if (excludeDisabledDates === void 0) { excludeDisabledDates = false; }
        /** @type {?} */
        var start;
        /** @type {?} */
        var end;
        if (Array.isArray(value)) {
            // this.rangeStarted = false;
            value.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
            start = this.getDateOnly(value[0]);
            end = this.getDateOnly(value[value.length - 1]);
            this.selectedDates = tslib_1.__spread([start], this.generateDateRange(start, end));
        }
        else {
            if (!this.rangeStarted) {
                this.rangeStarted = true;
                this.selectedDates = [value];
            }
            else {
                this.rangeStarted = false;
                if (this.selectedDates[0].getTime() === value.getTime()) {
                    this.selectedDates = [];
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                this.selectedDates.push(value);
                this.selectedDates.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
                start = this.selectedDates.shift();
                end = this.selectedDates.pop();
                this.selectedDates = tslib_1.__spread([start], this.generateDateRange(start, end));
            }
        }
        if (excludeDisabledDates) {
            this.selectedDates = this.selectedDates.filter(function (d) { return !_this.isDateDisabled(d); });
        }
        this._onChangeCallback(this.selectedDates);
    };
    /**
     * Performs a single deselection.
     * @hidden
     */
    /**
     * Performs a single deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.deselectSingle = /**
     * Performs a single deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.selectedDates !== null &&
            this.getDateOnlyInMs((/** @type {?} */ (value))) === this.getDateOnlyInMs(this.selectedDates)) {
            this.selectedDates = null;
            this._onChangeCallback(this.selectedDates);
        }
    };
    /**
     * Performs a multiple deselection.
     * @hidden
     */
    /**
     * Performs a multiple deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.deselectMultiple = /**
     * Performs a multiple deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        value = value.filter(function (v) { return v !== null; });
        /** @type {?} */
        var selectedDatesCount = this.selectedDates.length;
        /** @type {?} */
        var datesInMsToDeselect = new Set(value.map(function (v) { return _this.getDateOnlyInMs(v); }));
        for (var i = this.selectedDates.length - 1; i >= 0; i--) {
            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {
                this.selectedDates.splice(i, 1);
            }
        }
        if (this.selectedDates.length !== selectedDatesCount) {
            this._onChangeCallback(this.selectedDates);
        }
    };
    /**
     * Performs deselection of a single value, when selection is multi
     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view
     * @hidden
     */
    /**
     * Performs deselection of a single value, when selection is multi
     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.deselectMultipleInMonth = /**
     * Performs deselection of a single value, when selection is multi
     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var valueDateOnly = this.getDateOnly(value);
        this.selectedDates = this.selectedDates.filter(function (date) { return date.getTime() !== valueDateOnly.getTime(); });
    };
    /**
     * Performs a range deselection.
     * @hidden
     */
    /**
     * Performs a range deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.deselectRange = /**
     * Performs a range deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = value.filter(function (v) { return v !== null; });
        if (value.length < 1) {
            return;
        }
        value.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
        /** @type {?} */
        var valueStart = this.getDateOnlyInMs(value[0]);
        /** @type {?} */
        var valueEnd = this.getDateOnlyInMs(value[value.length - 1]);
        this.selectedDates.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
        /** @type {?} */
        var selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);
        /** @type {?} */
        var selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);
        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {
            this.selectedDates = [];
            this.rangeStarted = false;
            this._onChangeCallback(this.selectedDates);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxCalendarBase.prototype.initFormatters = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });
        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });
        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });
        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });
        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} date
     * @return {?}
     */
    IgxCalendarBase.prototype.getDateOnly = /**
     * @hidden
     * @protected
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxCalendarBase.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxCalendarBase.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectDate((/** @type {?} */ (value)));
    };
    /**
     * Checks whether a date is disabled.
     * @hidden
     */
    /**
     * Checks whether a date is disabled.
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxCalendarBase.prototype.isDateDisabled = /**
     * Checks whether a date is disabled.
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.disabledDates === null) {
            return false;
        }
        return isDateInRanges(date, this.disabledDates);
    };
    /**
     * Selects date(s) (based on the selection type).
     */
    /**
     * Selects date(s) (based on the selection type).
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.selectDate = /**
     * Selects date(s) (based on the selection type).
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {
            return;
        }
        switch (this.selection) {
            case CalendarSelection.SINGLE:
                if (isDate(value) && !this.isDateDisabled((/** @type {?} */ (value)))) {
                    this.selectSingle((/** @type {?} */ (value)));
                }
                break;
            case CalendarSelection.MULTI:
                this.selectMultiple(value);
                break;
            case CalendarSelection.RANGE:
                this.selectRange(value, true);
                break;
        }
    };
    /**
     * Deselects date(s) (based on the selection type).
     */
    /**
     * Deselects date(s) (based on the selection type).
     * @param {?=} value
     * @return {?}
     */
    IgxCalendarBase.prototype.deselectDate = /**
     * Deselects date(s) (based on the selection type).
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (!this.selectedDates || this.selectedDates.length === 0) {
            return;
        }
        if (value === null || value === undefined) {
            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];
            this.rangeStarted = false;
            this._onChangeCallback(this.selectedDates);
            return;
        }
        switch (this.selection) {
            case CalendarSelection.SINGLE:
                this.deselectSingle((/** @type {?} */ (value)));
                break;
            case CalendarSelection.MULTI:
                this.deselectMultiple((/** @type {?} */ (value)));
                break;
            case CalendarSelection.RANGE:
                this.deselectRange((/** @type {?} */ (value)));
                break;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarBase.prototype.selectDateFromClient = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        switch (this.selection) {
            case CalendarSelection.SINGLE:
            case CalendarSelection.MULTI:
                this.selectDate(value);
                break;
            case CalendarSelection.RANGE:
                this.selectRange(value, true);
                break;
        }
    };
    IgxCalendarBase.propDecorators = {
        weekStart: [{ type: Input }],
        locale: [{ type: Input }],
        formatOptions: [{ type: Input }],
        formatViews: [{ type: Input }],
        selection: [{ type: Input }],
        value: [{ type: Input }],
        viewDate: [{ type: Input }],
        disabledDates: [{ type: Input }],
        specialDates: [{ type: Input }],
        hideOutsideDays: [{ type: Input }],
        onSelection: [{ type: Output }]
    };
    return IgxCalendarBase;
}());
export { IgxCalendarBase };
if (false) {
    /**
     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.
     * Default value is `false`.
     * ```html
     * <igx-calendar [hideOutsideDays] = "true"></igx-calendar>
     * ```
     * ```typescript
     * let hideOutsideDays = this.calendar.hideOutsideDays;
     * ```
     * @type {?}
     */
    IgxCalendarBase.prototype.hideOutsideDays;
    /**
     * Emits an event when a date is selected.
     * Provides reference the `selectedDates` property.
     * @type {?}
     */
    IgxCalendarBase.prototype.onSelection;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._selection;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.rangeStarted;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._locale;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._viewDate;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._disabledDates;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._specialDates;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._formatOptions;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._formatViews;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterWeekday;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterDay;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterMonth;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterYear;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterMonthday;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.calendarModel;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.monthScrollDirection;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.scrollMonth$;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.stopMonthScroll$;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.startMonthScroll$;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.selectedDates;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype._onChangeCallback;
}
//# sourceMappingURL=data:application/json;base64,