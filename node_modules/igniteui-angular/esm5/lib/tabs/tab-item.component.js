/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, ElementRef, HostBinding, HostListener, Input, TemplateRef, ViewChild, NgZone } from '@angular/core';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabItemBase, IgxTabsBase } from './tabs.common';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import ResizeObserver from 'resize-observer-polyfill';
var IgxTabItemComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTabItemComponent, _super);
    function IgxTabItemComponent(_tabs, _element, _ngZone) {
        var _this = _super.call(this) || this;
        _this._tabs = _tabs;
        _this._element = _element;
        _this._ngZone = _ngZone;
        _this._changesCount = 0; // changes and updates accordingly applied to the tab.
        // changes and updates accordingly applied to the tab.
        _this._isSelected = false;
        _this._disabled = false;
        /**
         * @hidden \@internal
         */
        _this.role = 'tab';
        /**
         * @hidden \@internal
         */
        _this.tabindex = -1;
        /**
         * @hidden \@internal
         */
        _this.ariaLabel = _this.label;
        /**
         * @hidden \@internal
         */
        _this.ariaDisabled = _this.disabled;
        /**
         * @hidden \@internal
         */
        _this.ariaSelected = _this.isSelected;
        _this._nativeTabItem = _element;
        return _this;
    }
    Object.defineProperty(IgxTabItemComponent.prototype, "icon", {
        /**
        * An @Input property that sets the value of the `icon`.
        * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.
        *```html
        *<igx-tab-item label="Tab 1" icon="home">
        *```
        */
        get: /**
         * An \@Input property that sets the value of the `icon`.
         * The value should be valid icon name from {\@link https://material.io/tools/icons/?style=baseline}.
         * ```html
         * <igx-tab-item label="Tab 1" icon="home">
         * ```
         * @return {?}
         */
        function () {
            return this.relatedGroup ? this.relatedGroup.icon : this._icon;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this.relatedGroup) {
                this.relatedGroup.icon = newValue;
            }
            this._icon = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "label", {
        /**
        * An @Input property that sets the value of the `label`.
        *```html
        *<igx-tabs-item label="Tab 2" icon="folder">
        *```
        */
        get: /**
         * An \@Input property that sets the value of the `label`.
         * ```html
         * <igx-tabs-item label="Tab 2" icon="folder">
         * ```
         * @return {?}
         */
        function () {
            return this.relatedGroup ? this.relatedGroup.label : this._label;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this.relatedGroup) {
                this.relatedGroup.label = newValue;
            }
            this._label = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "provideCssClassSelected", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "provideCssClassDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "provideCssClass", {
        get: /**
         * @return {?}
         */
        function () {
            return (!this.disabled && !this.isSelected);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxTabItemComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this._resizeObserver = new ResizeObserver(function () {
                _this._tabs.transformIndicatorAnimation(_this._nativeTabItem.nativeElement, 0);
            });
        });
    };
    /**
     * @return {?}
     */
    IgxTabItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this._resizeObserver.disconnect();
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onClick = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.autoGenerated) {
            this.select();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onKeydown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var tabsArray = this._tabs.tabs.toArray();
        /** @type {?} */
        var startIndex = tabsArray.indexOf(this);
        /** @type {?} */
        var finalIndex = -1;
        /** @type {?} */
        var currentIndex = startIndex;
        switch (event.key) {
            case "ArrowRight" /* RIGHT_ARROW */:
            case "Right" /* RIGHT_ARROW_IE */:
                do {
                    currentIndex++;
                    if (currentIndex === tabsArray.length) {
                        currentIndex = -1;
                        continue;
                    }
                    else if (((/** @type {?} */ (tabsArray[currentIndex]))).disabled === false) {
                        finalIndex = currentIndex;
                        break;
                    }
                } while (currentIndex !== startIndex);
                break;
            case "ArrowLeft" /* LEFT_ARROW */:
            case "Left" /* LEFT_ARROW_IE */:
                do {
                    currentIndex--;
                    if (currentIndex === -1) {
                        currentIndex = tabsArray.length;
                        continue;
                    }
                    else if (((/** @type {?} */ (tabsArray[currentIndex]))).disabled === false) {
                        finalIndex = currentIndex;
                        break;
                    }
                } while (currentIndex !== startIndex);
                break;
            case "Home" /* HOME */:
                event.preventDefault();
                finalIndex = tabsArray.find(function (t) { return ((/** @type {?} */ (t))).disabled === false; }).index;
                break;
            case "End" /* END */:
                event.preventDefault();
                finalIndex = tabsArray.slice().reverse().find(function (t) { return ((/** @type {?} */ (t))).disabled === false; }).index;
                break;
            case "Enter" /* ENTER */:
                if (!this.autoGenerated) {
                    this.nativeTabItem.nativeElement.click();
                }
                break;
            case " " /* SPACE */:
            case "Spacebar" /* SPACE_IE */:
                event.preventDefault();
                if (!this.autoGenerated) {
                    this.nativeTabItem.nativeElement.click();
                }
                break;
            default:
                break;
        }
        if (finalIndex > -1) {
            /** @type {?} */
            var tab = tabsArray[finalIndex];
            tab.nativeTabItem.nativeElement.focus();
            if (this.autoGenerated) {
                tab.select();
            }
        }
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "changesCount", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._changesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "nativeTabItem", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._nativeTabItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "disabled", {
        /**
        * 	Gets whether the tab is disabled.
        * ```
        * const disabledItem = this.myTabComponent.tabs.first.disabled;
        * ```
        */
        get: /**
         * 	Gets whether the tab is disabled.
         * ```
         * const disabledItem = this.myTabComponent.tabs.first.disabled;
         * ```
         * @return {?}
         */
        function () {
            return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this.relatedGroup) {
                this.relatedGroup.disabled = newValue;
            }
            else {
                this._disabled = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "isSelected", {
        /**
         * Gets whether the tab is selected.
         * ```typescript
         * const selectedItem = this.myTabComponent.tabs.first.isSelected;
         * ```
         */
        get: /**
         * Gets whether the tab is selected.
         * ```typescript
         * const selectedItem = this.myTabComponent.tabs.first.isSelected;
         * ```
         * @return {?}
         */
        function () {
            return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (!this.disabled && this.isSelected !== newValue) {
                this._tabs.performSelectionChange(newValue ? this : null);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTabItemComponent.prototype.select = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (!this.disabled && !this.isSelected) {
            this._tabs.performSelectionChange(this);
        }
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "index", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (this._tabs.tabs) {
                return this._tabs.tabs.toArray().indexOf(this);
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newValue
     * @return {?}
     */
    IgxTabItemComponent.prototype.setSelectedInternal = /**
     * @hidden
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        var _this = this;
        this._isSelected = newValue;
        this._ngZone.runOutsideAngular(function () {
            if (_this._resizeObserver) {
                if (_this._isSelected) {
                    _this._resizeObserver.observe(_this._element.nativeElement);
                }
                else {
                    _this._resizeObserver.disconnect();
                }
            }
        });
        this.tabindex = newValue ? 0 : -1;
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "template", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (this.relatedGroup && this.relatedGroup.customTabTemplate) {
                return this.relatedGroup.customTabTemplate;
            }
            if (this.customTabTemplateDir) {
                return this.customTabTemplateDir.template;
            }
            return this.defaultTabTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "context", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.relatedGroup ? this.relatedGroup : this;
        },
        enumerable: true,
        configurable: true
    });
    IgxTabItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-tab-item',
                    template: "<ng-template #defaultTabTemplate let-context>\n    <div *ngIf=\"context.icon\" class=\"igx-tabs__header-menu-item-icon\">\n        <igx-icon fontSet=\"material\">{{context.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"context.label\" ngClass=\"igx-tabs__item-label\">{{context.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this.context }\">\n</ng-container>"
                }] }
    ];
    /** @nocollapse */
    IgxTabItemComponent.ctorParameters = function () { return [
        { type: IgxTabsBase },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IgxTabItemComponent.propDecorators = {
        relatedGroup: [{ type: Input }],
        icon: [{ type: Input }],
        label: [{ type: Input }],
        autoGenerated: [{ type: Input }],
        defaultTabTemplate: [{ type: ViewChild, args: ['defaultTabTemplate', { read: TemplateRef, static: true },] }],
        customTabTemplateDir: [{ type: ContentChild, args: [IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false },] }],
        provideCssClassSelected: [{ type: HostBinding, args: ['class.igx-tabs__header-menu-item--selected',] }],
        provideCssClassDisabled: [{ type: HostBinding, args: ['class.igx-tabs__header-menu-item--disabled',] }],
        provideCssClass: [{ type: HostBinding, args: ['class.igx-tabs__header-menu-item',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
        ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        disabled: [{ type: Input }],
        isSelected: [{ type: Input }]
    };
    return IgxTabItemComponent;
}(IgxTabItemBase));
export { IgxTabItemComponent };
if (false) {
    /**
     * Gets the group associated with the tab.
     * ```html
     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;
     * ```
     * @type {?}
     */
    IgxTabItemComponent.prototype.relatedGroup;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._icon;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._label;
    /**
     * @hidden \@internal
     * Set to true when the tab item is automatically generated from the IgxTabsComponent when tab groups are defined.
     * @type {?}
     */
    IgxTabItemComponent.prototype.autoGenerated;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxTabItemComponent.prototype.defaultTabTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxTabItemComponent.prototype.customTabTemplateDir;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._nativeTabItem;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._changesCount;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._isSelected;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._resizeObserver;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxTabItemComponent.prototype.role;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxTabItemComponent.prototype.tabindex;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxTabItemComponent.prototype.ariaLabel;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxTabItemComponent.prototype.ariaDisabled;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxTabItemComponent.prototype.ariaSelected;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._tabs;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,