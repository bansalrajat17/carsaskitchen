/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, QueryList, ViewChild, ViewChildren, NgZone } from '@angular/core';
import { IgxBadgeModule } from '../badge/badge.component';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxIconModule } from '../icon/index';
import { IgxTabItemComponent } from './tab-item.component';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';
import { IgxTabsBase } from './tabs.common';
import ResizeObserver from 'resize-observer-polyfill';
import { PlatformUtil } from '../core/utils';
/** @enum {string} */
var TabsType = {
    FIXED: 'fixed',
    CONTENTFIT: 'contentfit',
};
export { TabsType };
/** @type {?} */
var NEXT_TABS_ID = 0;
var IgxTabsComponent = /** @class */ (function () {
    function IgxTabsComponent(_element, _ngZone, platformUtil) {
        this._element = _element;
        this._ngZone = _ngZone;
        this.platformUtil = platformUtil;
        this._currentTabsId = NEXT_TABS_ID++;
        /**
         * @hidden
         */
        this.selectedIndexChange = new EventEmitter();
        /**
         * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
         * By default the header sizing mode is `contentfit`.
         * ```html
         * <igx-tabs tabsType="fixed">
         *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
         * </igx-tabs>
         * ```
         */
        this.tabsType = 'contentfit';
        /**
         * Sets/gets the `id` of the tabs.
         *
         * \@remarks
         * If not set, the `id` will have value `"igx-tabs-0"`.
         *
         * \@example
         * ```html
         * <igx-tabs id="my-first-tabs"></igx-tabs>
         * ```
         * \@memberof IgxTabsComponent
         */
        this.id = "igx-tabs-" + this._currentTabsId;
        /**
         * @hidden
         */
        this.class = '';
        /**
         * Emitted when a tab item is deselected.
         * ```html
         * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
         *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
         *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
         * </igx-tabs>
         * ```
         * ```typescript
         * itemDeselected(e){
         *      const tabGroup = e.group;
         *      const tabItem = e.tab;
         * }
         * ```
         */
        this.onTabItemDeselected = new EventEmitter();
        /**
         * Emitted when a tab item is selected.
         * ```html
         * <igx-tabs (onTabItemSelected)="itemSelected($event)">
         *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
         *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
         * </igx-tabs>
         * ```
         * ```typescript
         * itemSelected(e){
         *      const tabGroup = e.group;
         *      const tabItem = e.tab;
         * }
         * ```
         */
        this.onTabItemSelected = new EventEmitter();
        /**
         * @hidden
         */
        this.offset = 0;
        this._selectedIndex = -1;
    }
    Object.defineProperty(IgxTabsComponent.prototype, "selectedIndex", {
        /**
        * An @Input property that sets the value of the `selectedIndex`.
        * Default value is 0.
        * ```html
        * <igx-tabs selectedIndex="1">
        * ```
        *
        * Two-way data binding.
        * ```html
        * <igx-tabs [(selectedIndex)]="model.selectedIndex">
        * ```
        */
        get: /**
         * An \@Input property that sets the value of the `selectedIndex`.
         * Default value is 0.
         * ```html
         * <igx-tabs selectedIndex="1">
         * ```
         *
         * Two-way data binding.
         * ```html
         * <igx-tabs [(selectedIndex)]="model.selectedIndex">
         * ```
         * @return {?}
         */
        function () {
            return this._selectedIndex;
        },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            /** @type {?} */
            var newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;
            if (this._selectedIndex !== newIndex) {
                if (this.tabs && this.tabs.length > 0) {
                    /** @type {?} */
                    var newTab = this.tabs.toArray()[newIndex];
                    if (newTab) {
                        this.performSelectionChange(newTab);
                    }
                }
                else {
                    this._selectedIndex = newIndex;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsComponent.prototype, "tabs", {
        /**
         * Provides an observable collection of all `IgxTabItemComponent`s.
         * First try to get them as content children if not available get them as view children.
         * ```typescript
         * const tabItems = this.myTabComponent.tabs;
         * ```
         */
        get: /**
         * Provides an observable collection of all `IgxTabItemComponent`s.
         * First try to get them as content children if not available get them as view children.
         * ```typescript
         * const tabItems = this.myTabComponent.tabs;
         * ```
         * @return {?}
         */
        function () {
            if (this.hasContentTabs) {
                return this.contentTabs;
            }
            return this.viewTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsComponent.prototype, "hasContentTabs", {
        /**
         *@hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return (this.contentTabs && this.contentTabs.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsComponent.prototype, "cssClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var defaultStyle = "igx-tabs";
            /** @type {?} */
            var fixedStyle = "igx-tabs--fixed";
            /** @type {?} */
            var iconStyle = "igx-tabs--icons";
            /** @type {?} */
            var iconLabelFoundInGroups = this.groups.find(function (group) { return group.icon != null && group.label != null; });
            /** @type {?} */
            var iconLabelFoundInTabs = this.contentTabs.find(function (tab) { return tab.icon != null && tab.label != null; });
            /** @type {?} */
            var css;
            switch (TabsType[this.tabsType.toUpperCase()]) {
                case TabsType.FIXED: {
                    css = fixedStyle;
                    break;
                }
                default: {
                    css = defaultStyle;
                    break;
                }
            }
            // Layout fix for items with icons
            if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {
                css = css + " " + iconStyle;
            }
            return css + " " + this.class;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabsComponent.prototype.scrollLeft = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.scroll(false);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabsComponent.prototype.scrollRight = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.scroll(true);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} element
     * @param {?} scrollRight
     * @return {?}
     */
    IgxTabsComponent.prototype.scrollElement = /**
     * @hidden
     * @param {?} element
     * @param {?} scrollRight
     * @return {?}
     */
    function (element, scrollRight) {
        /** @type {?} */
        var viewPortWidth = this.viewPort.nativeElement.offsetWidth;
        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;
        this.itemsContainer.nativeElement.style.transform = "translate(" + -this.offset + "px)";
    };
    Object.defineProperty(IgxTabsComponent.prototype, "selectedTabItem", {
        /**
         * Gets the selected `IgxTabItemComponent`.
         * ```
         * const selectedItem = this.myTabComponent.selectedTabItem;
         * ```
         */
        get: /**
         * Gets the selected `IgxTabItemComponent`.
         * ```
         * const selectedItem = this.myTabComponent.selectedTabItem;
         * ```
         * @return {?}
         */
        function () {
            if (this.tabs && this.selectedIndex !== undefined) {
                return this.tabs.toArray()[this.selectedIndex];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTabsComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._selectedIndex === -1) {
            this.tabs.forEach(function (t) {
                if (t.isSelected) {
                    _this._selectedIndex = t.index;
                }
            });
        }
        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {
            this._selectedIndex = 0;
        }
        if (this.platformUtil.isBrowser) {
            requestAnimationFrame(function () {
                /** @type {?} */
                var newTab = _this.tabs.toArray()[_this._selectedIndex];
                if (newTab) {
                    _this.performSelection(newTab);
                }
                else {
                    _this.hideIndicator();
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this._resizeObserver = new ResizeObserver(function () {
                    if (!_this.hasContentTabs && _this._selectedIndex >= 0 && _this._selectedIndex < _this.tabs.length) {
                        /** @type {?} */
                        var newTab = _this.tabs.toArray()[_this._selectedIndex];
                        _this.transformContentAnimation(newTab, 0);
                    }
                });
                _this._resizeObserver.observe(_this.tabsContainer.nativeElement);
            });
        }
        this.setGroupsAttributes();
        this._groupChanges$ = this.groups.changes.subscribe(function () {
            _this.setGroupsAttributes();
            _this.resetSelectionOnCollectionChanged();
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTabsComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._groupChanges$) {
            this._groupChanges$.unsubscribe();
        }
        if (this._resizeObserver) {
            this._ngZone.runOutsideAngular(function () {
                _this._resizeObserver.disconnect();
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxTabsComponent.prototype.setGroupsAttributes = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var groupsArray = this.groups.toArray();
        for (var index = 0; index < this.groups.length; index++) {
            /** @type {?} */
            var tabsGroup = (/** @type {?} */ (groupsArray[index]));
            tabsGroup.nativeElement.setAttribute('id', this.getTabsGroupId(index));
            tabsGroup.nativeElement.setAttribute('aria-labelledby', this.getTabItemId(index));
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxTabsComponent.prototype.resetSelectionOnCollectionChanged = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame(function () {
            /** @type {?} */
            var currentTab = _this.tabs.toArray()[_this.selectedIndex];
            if (currentTab) {
                _this.performSelectionChange(currentTab);
            }
            else if (_this.selectedIndex >= _this.tabs.length) {
                _this.performSelectionChange(_this.tabs.last);
            }
            else {
                _this.hideIndicator();
            }
        });
    };
    /**
     * @private
     * @param {?} scrollRight
     * @return {?}
     */
    IgxTabsComponent.prototype.scroll = /**
     * @private
     * @param {?} scrollRight
     * @return {?}
     */
    function (scrollRight) {
        var e_1, _a;
        /** @type {?} */
        var tabsArray = this.tabs.toArray();
        try {
            for (var tabsArray_1 = tslib_1.__values(tabsArray), tabsArray_1_1 = tabsArray_1.next(); !tabsArray_1_1.done; tabsArray_1_1 = tabsArray_1.next()) {
                var tab = tabsArray_1_1.value;
                /** @type {?} */
                var element = tab.nativeTabItem.nativeElement;
                if (scrollRight) {
                    if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {
                        this.scrollElement(element, scrollRight);
                        break;
                    }
                }
                else {
                    if (element.offsetWidth + element.offsetLeft >= this.offset) {
                        this.scrollElement(element, scrollRight);
                        break;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tabsArray_1_1 && !tabsArray_1_1.done && (_a = tabsArray_1.return)) _a.call(tabsArray_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newTab
     * @return {?}
     */
    IgxTabsComponent.prototype.performSelectionChange = /**
     * @hidden
     * @param {?} newTab
     * @return {?}
     */
    function (newTab) {
        /** @type {?} */
        var oldTab = this.selectedTabItem;
        if (oldTab) {
            this.performDeselection(oldTab);
        }
        if (newTab) {
            this.performSelection(newTab);
        }
        else {
            // if there is no new selected tab hide the selection indicator
            this.hideIndicator();
        }
        this.selectedIndexChange.emit(this._selectedIndex);
    };
    /**
     * @private
     * @param {?} oldTab
     * @return {?}
     */
    IgxTabsComponent.prototype.performDeselection = /**
     * @private
     * @param {?} oldTab
     * @return {?}
     */
    function (oldTab) {
        oldTab.setSelectedInternal(false);
        /** @type {?} */
        var oldTabRelatedGroup = this.groups.toArray()[oldTab.index];
        if (oldTabRelatedGroup) {
            oldTabRelatedGroup.setSelectedInternal(false);
        }
        this._selectedIndex = -1;
        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });
    };
    /**
     * @private
     * @param {?} newTab
     * @return {?}
     */
    IgxTabsComponent.prototype.performSelection = /**
     * @private
     * @param {?} newTab
     * @return {?}
     */
    function (newTab) {
        var _this = this;
        newTab.setSelectedInternal(true);
        this._selectedIndex = newTab.index;
        /** @type {?} */
        var newTabRelatedGroup = null;
        if (!this.hasContentTabs && this.groups) {
            newTabRelatedGroup = this.groups.toArray()[newTab.index];
            if (newTabRelatedGroup) {
                newTabRelatedGroup.setSelectedInternal(true);
            }
        }
        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });
        requestAnimationFrame(function () {
            // bring the new selected tab into view if it is not
            _this.bringNewTabIntoView(newTab);
            // animate the new selection indicator
            _this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);
            // animate the new tab's group content
            if (!_this.hasContentTabs) {
                _this.transformContentAnimation(newTab, 0.2);
            }
        });
    };
    /**
     * @private
     * @param {?} newTab
     * @return {?}
     */
    IgxTabsComponent.prototype.bringNewTabIntoView = /**
     * @private
     * @param {?} newTab
     * @return {?}
     */
    function (newTab) {
        /** @type {?} */
        var tabNativeElement = newTab.nativeTabItem.nativeElement;
        // Scroll left if there is need
        if (tabNativeElement.offsetLeft < this.offset) {
            this.scrollElement(tabNativeElement, false);
        }
        // Scroll right if there is need
        /** @type {?} */
        var viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;
        /** @type {?} */
        var delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);
        // Fix for IE 11, a difference is accumulated from the widths calculations
        if (delta > 1) {
            this.scrollElement(tabNativeElement, true);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    IgxTabsComponent.prototype.getTabItemId = /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return "igx-tab-item-" + this._currentTabsId + "-" + index;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    IgxTabsComponent.prototype.getTabsGroupId = /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return "igx-tabs-group-" + this._currentTabsId + "-" + index;
    };
    /**
     * @hidden
     */
    // animation for the new panel/group (not needed for tab only mode)
    /**
     * @hidden
     * @param {?} tab
     * @param {?} duration
     * @return {?}
     */
    // animation for the new panel/group (not needed for tab only mode)
    IgxTabsComponent.prototype.transformContentAnimation = /**
     * @hidden
     * @param {?} tab
     * @param {?} duration
     * @return {?}
     */
    // animation for the new panel/group (not needed for tab only mode)
    function (tab, duration) {
        /** @type {?} */
        var contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;
        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? duration + "s" : 'initial';
        this.contentsContainer.nativeElement.style.transform = "translate(" + -contentOffset + "px)";
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} element
     * @param {?=} duration
     * @return {?}
     */
    IgxTabsComponent.prototype.transformIndicatorAnimation = /**
     * @hidden
     * @param {?} element
     * @param {?=} duration
     * @return {?}
     */
    function (element, duration) {
        if (duration === void 0) { duration = 0.3; }
        if (this.selectedIndicator) {
            this.selectedIndicator.nativeElement.style.visibility = 'visible';
            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? duration + "s" : 'initial';
            this.selectedIndicator.nativeElement.style.width = element.offsetWidth + "px";
            this.selectedIndicator.nativeElement.style.transform = "translate(" + element.offsetLeft + "px)";
        }
    };
    /**
     * @return {?}
     */
    IgxTabsComponent.prototype.hideIndicator = /**
     * @return {?}
     */
    function () {
        if (this.selectedIndicator) {
            this.selectedIndicator.nativeElement.style.visibility = 'hidden';
        }
    };
    IgxTabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-tabs',
                    template: "<!-- TODO Remove tab container from here -->\n<div #tabsContainer>\n    <div class=\"igx-tabs__header\" #headerContainer>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollLeft($event)\" igxLeftButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_before</igx-icon>\n        </button>\n        <div class=\"igx-tabs__header-wrapper-fixed\" #viewPort>\n            <div #itemsContainer class=\"igx-tabs__header-wrapper-fluid\">\n                <ng-container *ngIf=\"!hasContentTabs\">\n                    <igx-tab-item igxRipple\n                        *ngFor=\"let group of groups; let i = index\"\n                        [relatedGroup]=\"group\"\n                        [autoGenerated]=\"true\"\n                        [id]=\"getTabItemId(i)\"\n                        [attr.aria-controls]=\"getTabsGroupId(i)\">\n                    </igx-tab-item>\n                </ng-container>\n                <ng-content select=\"igx-tab-item\"></ng-content>\n                <div #selectedIndicator *ngIf=\"groups.length > 0 || contentTabs.length > 0\" class=\"igx-tabs__header-menu-item-indicator\"></div>\n            </div>\n        </div>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollRight($event)\" igxRightButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_next</igx-icon>\n        </button>\n    </div>\n    <div class=\"igx-tabs__content-fixed\">\n        <div #contentsContainer class=\"igx-tabs__content-fluid\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n",
                    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]
                }] }
    ];
    /** @nocollapse */
    IgxTabsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: PlatformUtil }
    ]; };
    IgxTabsComponent.propDecorators = {
        groups: [{ type: ContentChildren, args: [forwardRef(function () { return IgxTabsGroupComponent; }),] }],
        contentTabs: [{ type: ContentChildren, args: [forwardRef(function () { return IgxTabItemComponent; }),] }],
        selectedIndex: [{ type: Input }],
        selectedIndexChange: [{ type: Output }],
        tabsType: [{ type: Input, args: ['tabsType',] }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        class: [{ type: Input }],
        onTabItemDeselected: [{ type: Output }],
        onTabItemSelected: [{ type: Output }],
        contentsContainer: [{ type: ViewChild, args: ['contentsContainer', { static: true },] }],
        headerContainer: [{ type: ViewChild, args: ['headerContainer', { static: true },] }],
        itemsContainer: [{ type: ViewChild, args: ['itemsContainer', { static: true },] }],
        selectedIndicator: [{ type: ViewChild, args: ['selectedIndicator', { static: false },] }],
        tabsContainer: [{ type: ViewChild, args: ['tabsContainer', { static: true },] }],
        viewPort: [{ type: ViewChild, args: ['viewPort', { static: true },] }],
        viewTabs: [{ type: ViewChildren, args: [forwardRef(function () { return IgxTabItemComponent; }),] }],
        cssClass: [{ type: HostBinding, args: ['attr.class',] }]
    };
    return IgxTabsComponent;
}());
export { IgxTabsComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype._currentTabsId;
    /**
     * Provides an observable collection of all `IgxTabsGroupComponent`s.
     * ```typescript
     * const groupItems = this.myTabComponent.groups;
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.groups;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.
     * ```typescript
     * const tabItems = this.myTabComponent.contentTabs;
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.contentTabs;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.selectedIndexChange;
    /**
     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
     * By default the header sizing mode is `contentfit`.
     * ```html
     * <igx-tabs tabsType="fixed">
     *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
     * </igx-tabs>
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.tabsType;
    /**
     * Sets/gets the `id` of the tabs.
     *
     * \@remarks
     * If not set, the `id` will have value `"igx-tabs-0"`.
     *
     * \@example
     * ```html
     * <igx-tabs id="my-first-tabs"></igx-tabs>
     * ```
     * \@memberof IgxTabsComponent
     * @type {?}
     */
    IgxTabsComponent.prototype.id;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.class;
    /**
     * Emitted when a tab item is deselected.
     * ```html
     * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemDeselected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.onTabItemDeselected;
    /**
     * Emitted when a tab item is selected.
     * ```html
     * <igx-tabs (onTabItemSelected)="itemSelected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemSelected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.onTabItemSelected;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.contentsContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.headerContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.itemsContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.selectedIndicator;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.tabsContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.viewPort;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s.
     * ```typescript
     * const tabItems = this.myTabComponent.viewTabs;
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.viewTabs;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.calculatedWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.visibleItemsWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype._groupChanges$;
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype._selectedIndex;
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype._resizeObserver;
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    IgxTabsComponent.prototype.platformUtil;
}
/**
 * @hidden
 */
var IgxTabsModule = /** @class */ (function () {
    function IgxTabsModule() {
    }
    IgxTabsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxTabsComponent,
                        IgxTabsGroupComponent,
                        IgxTabItemComponent,
                        IgxTabItemTemplateDirective,
                        IgxRightButtonStyleDirective,
                        IgxLeftButtonStyleDirective],
                    exports: [IgxTabsComponent,
                        IgxTabsGroupComponent,
                        IgxTabItemComponent,
                        IgxTabItemTemplateDirective,
                        IgxRightButtonStyleDirective,
                        IgxLeftButtonStyleDirective],
                    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]
                },] }
    ];
    return IgxTabsModule;
}());
export { IgxTabsModule };
//# sourceMappingURL=data:application/json;base64,