/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, ElementRef, HostBinding, Input, } from '@angular/core';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';
var IgxTabsGroupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTabsGroupComponent, _super);
    function IgxTabsGroupComponent(_tabs, _element) {
        var _this = _super.call(this) || this;
        _this._tabs = _tabs;
        _this._element = _element;
        /**
         * An \@Input property that allows you to enable/disable the `IgxTabGroupComponent`.
         * ```html
         * <igx-tabs-group label="Tab 2  Lorem ipsum dolor sit" icon="home" [disabled]="true">
         * ```
         */
        _this.disabled = false;
        _this._isSelected = false;
        /**
         * @hidden
         */
        _this.role = 'tabpanel';
        /**
         * @hidden
         */
        _this.styleClass = true;
        return _this;
    }
    Object.defineProperty(IgxTabsGroupComponent.prototype, "isSelected", {
        /**
         * Sets/gets whether a tab group is selected.
         * ```typescript
         * this.tabGroup.isSelected = true;
         * ```
         * ```typescript
         * let isSelected = this.tabGroup.isSelected;
         * ```
         * @memberof IgxTabsGroupComponent
         */
        get: /**
         * Sets/gets whether a tab group is selected.
         * ```typescript
         * this.tabGroup.isSelected = true;
         * ```
         * ```typescript
         * let isSelected = this.tabGroup.isSelected;
         * ```
         * \@memberof IgxTabsGroupComponent
         * @return {?}
         */
        function () {
            return this._isSelected;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (!this.disabled && this.isSelected !== newValue) {
                this._tabs.performSelectionChange(newValue ? this.relatedTab : null);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "nativeElement", {
        /**
         * Returns the native element of the tabs-group component
         * ```typescript
         *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;
         * ```
         */
        get: /**
         * Returns the native element of the tabs-group component
         * ```typescript
         *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;
         * ```
         * @return {?}
         */
        function () {
            return this._element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "relatedTab", {
        /**
         * An accessor that returns the `IgxTabItemComponent` component.
         * ```typescript
         * @ViewChild("MyTabsGroup")
         * public tab: IgxTabsGroupComponent;
         * ngAfterViewInIt(){
         *    let tabComponent = this.tab.relatedTab;
         * }
         * ```
         */
        get: /**
         * An accessor that returns the `IgxTabItemComponent` component.
         * ```typescript
         * \@ViewChild("MyTabsGroup")
         * public tab: IgxTabsGroupComponent;
         * ngAfterViewInIt(){
         *    let tabComponent = this.tab.relatedTab;
         * }
         * ```
         * @return {?}
         */
        function () {
            if (this._tabs.tabs) {
                return (/** @type {?} */ (this._tabs.tabs.toArray()[this.index]));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "index", {
        /**
         * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.
         * ```typescript
         * @ViewChild("MyTabsGroup")
         * public tab: IgxTabsGroupComponent;
         * ngAfterViewInIt(){
         *    let tabIndex = this.tab.index;
         * }
         * ```
         */
        get: /**
         * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.
         * ```typescript
         * \@ViewChild("MyTabsGroup")
         * public tab: IgxTabsGroupComponent;
         * ngAfterViewInIt(){
         *    let tabIndex = this.tab.index;
         * }
         * ```
         * @return {?}
         */
        function () {
            if (this._tabs.groups) {
                return this._tabs.groups.toArray().indexOf(this);
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "customTabTemplate", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._tabTemplate;
        },
        /**
         *@hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._tabTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTabsGroupComponent.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    };
    /**
     * A method that sets the focus on a tab.
     * @memberof {@link IgxTabsGroupComponent}
     *```typescript
     *@ViewChild("MyChild")
     *public tab : IgxTabsGroupComponent;
     *ngAfterViewInit(){
     *    this.tab.select();
     *}
     *```
     */
    /**
     * A method that sets the focus on a tab.
     * \@memberof {\@link IgxTabsGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * public tab : IgxTabsGroupComponent;
     * ngAfterViewInit(){
     *    this.tab.select();
     * }
     * ```
     * @return {?}
     */
    IgxTabsGroupComponent.prototype.select = /**
     * A method that sets the focus on a tab.
     * \@memberof {\@link IgxTabsGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * public tab : IgxTabsGroupComponent;
     * ngAfterViewInit(){
     *    this.tab.select();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled && !this.isSelected) {
            this._tabs.performSelectionChange(this.relatedTab);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newValue
     * @return {?}
     */
    IgxTabsGroupComponent.prototype.setSelectedInternal = /**
     * @hidden
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        this._isSelected = newValue;
    };
    IgxTabsGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-tabs-group',
                    template: "<ng-content *ngIf=\"isSelected\"></ng-content>\n"
                }] }
    ];
    /** @nocollapse */
    IgxTabsGroupComponent.ctorParameters = function () { return [
        { type: IgxTabsBase },
        { type: ElementRef }
    ]; };
    IgxTabsGroupComponent.propDecorators = {
        disabled: [{ type: Input }],
        icon: [{ type: Input }],
        label: [{ type: Input }],
        tabTemplate: [{ type: ContentChild, args: [IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false },] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        styleClass: [{ type: HostBinding, args: ['class.igx-tabs__group',] }]
    };
    return IgxTabsGroupComponent;
}(IgxTabsGroupBase));
export { IgxTabsGroupComponent };
if (false) {
    /**
     * An \@Input property that allows you to enable/disable the `IgxTabGroupComponent`.
     * ```html
     * <igx-tabs-group label="Tab 2  Lorem ipsum dolor sit" icon="home" [disabled]="true">
     * ```
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.disabled;
    /**
     * An \@Input property that sets the value of the `icon`.
     * The value should be valid icon name from {\@link https://material.io/tools/icons/?style=baseline}.
     * ```html
     * <igx-tabs-group label="Tab 1" icon="home">
     * ```
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.icon;
    /**
     * An \@Input property that sets the value of the `label`.
     * ```html
     * <igx-tabs-group label="Tab 1" icon="folder">
     * ```
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.label;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxTabsGroupComponent.prototype.tabTemplate;
    /**
     * @type {?}
     * @private
     */
    IgxTabsGroupComponent.prototype._tabTemplate;
    /**
     * @type {?}
     * @private
     */
    IgxTabsGroupComponent.prototype._isSelected;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.role;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.styleClass;
    /**
     * @type {?}
     * @private
     */
    IgxTabsGroupComponent.prototype._tabs;
    /**
     * @type {?}
     * @private
     */
    IgxTabsGroupComponent.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,