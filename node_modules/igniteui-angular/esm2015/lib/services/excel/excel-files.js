/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExcelStrings } from './excel-strings';
/**
 * @hidden
 */
export class RootRelsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('.rels', ExcelStrings.getRels());
    }
}
/**
 * @hidden
 */
export class AppFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('app.xml', ExcelStrings.getApp());
    }
}
/**
 * @hidden
 */
export class CoreFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('core.xml', ExcelStrings.getCore());
    }
}
/**
 * @hidden
 */
export class WorkbookRelsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        /** @type {?} */
        const hasSharedStrings = worksheetData.isEmpty === false;
        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));
    }
}
/**
 * @hidden
 */
export class ThemeFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('theme1.xml', ExcelStrings.getTheme());
    }
}
/**
 * @hidden
 */
export class WorksheetFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        /** @type {?} */
        const sheetData = [];
        /** @type {?} */
        const cols = [];
        /** @type {?} */
        let dimension;
        /** @type {?} */
        const dictionary = worksheetData.dataDictionary;
        /** @type {?} */
        let freezePane = '';
        /** @type {?} */
        let maxOutlineLevel = 0;
        if (worksheetData.isEmpty) {
            sheetData.push('<sheetData/>');
            dimension = 'A1';
        }
        else {
            sheetData.push('<sheetData>');
            /** @type {?} */
            const height = worksheetData.options.rowHeight;
            /** @type {?} */
            const rowHeight = height ? ' ht="' + height + '" customHeight="1"' : '';
            sheetData.push(`<row r="1"${rowHeight}>`);
            for (let i = 0; i < worksheetData.columnCount; i++) {
                /** @type {?} */
                const column = ExcelStrings.getExcelColumn(i) + 1;
                /** @type {?} */
                const value = dictionary.saveValue(worksheetData.keys[i], i, true);
                sheetData.push(`<c r="${column}" t="s"><v>${value}</v></c>`);
            }
            sheetData.push('</row>');
            for (let i = 1; i < worksheetData.rowCount; i++) {
                if (!worksheetData.isTreeGridData) {
                    sheetData.push(`<row r="${(i + 1)}"${rowHeight}>`);
                }
                else {
                    /** @type {?} */
                    const rowData = worksheetData.data[i - 1].originalRowData;
                    /** @type {?} */
                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed="1"`;
                    /** @type {?} */
                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden="1"` : '';
                    /** @type {?} */
                    const rowOutlineLevel = rowData.level ? rowData.level : 0;
                    /** @type {?} */
                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel="${rowOutlineLevel}"` : '';
                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;
                    sheetData.push(`<row r="${(i + 1)}"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);
                }
                for (let j = 0; j < worksheetData.columnCount; j++) {
                    /** @type {?} */
                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);
                    sheetData.push(cellData);
                }
                sheetData.push('</row>');
            }
            sheetData.push('</sheetData>');
            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;
            cols.push('<cols>');
            for (let i = 0; i < worksheetData.columnCount; i++) {
                /** @type {?} */
                const width = dictionary.columnWidths[i];
                // Use the width provided in the options if it exists
                /** @type {?} */
                const widthInTwips = worksheetData.options.columnWidth ?
                    worksheetData.options.columnWidth :
                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);
                cols.push(`<col min="${(i + 1)}" max="${(i + 1)}" width="${widthInTwips}" customWidth="1"/>`);
            }
            cols.push('</cols>');
            if (worksheetData.indexOfLastPinnedColumn !== -1 &&
                !worksheetData.options.ignorePinning &&
                !worksheetData.options.ignoreColumnsOrder) {
                /** @type {?} */
                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;
                /** @type {?} */
                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';
                freezePane = `<pane xSplit="${frozenColumnCount}" topLeftCell="${firstCell}" activePane="topRight" state="frozen"/>`;
            }
        }
        /** @type {?} */
        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;
        folder.file('sheet1.xml', ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable, worksheetData.isTreeGridData, maxOutlineLevel));
    }
    /**
     * @private
     * @param {?} rowData
     * @return {?}
     */
    hasCollapsedParent(rowData) {
        /** @type {?} */
        let result = !rowData.parent.expanded;
        while (rowData.parent) {
            result = result || !rowData.parent.expanded;
            rowData = rowData.parent;
        }
        return result;
    }
    /* tslint:disable member-ordering */
    /**
     * @private
     * @param {?} worksheetData
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    static getCellData(worksheetData, row, column) {
        /** @type {?} */
        const dictionary = worksheetData.dataDictionary;
        /** @type {?} */
        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);
        /** @type {?} */
        const columnHeader = worksheetData.keys[column];
        /** @type {?} */
        const rowData = worksheetData.data[row - 1].rowData;
        /** @type {?} */
        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];
        if (cellValue === undefined || cellValue === null) {
            return `<c r="${columnName}" s="1"/>`;
        }
        else {
            /** @type {?} */
            const savedValue = dictionary.saveValue(cellValue, column, false);
            /** @type {?} */
            const isSavedAsString = savedValue !== -1;
            /** @type {?} */
            const value = isSavedAsString ? savedValue : cellValue;
            /** @type {?} */
            const type = isSavedAsString ? ` t="s"` : '';
            /** @type {?} */
            const format = isSavedAsString ? '' : ` s="1"`;
            return `<c r="${columnName}"${type}${format}><v>${value}</v></c>`;
        }
    }
}
WorksheetFile.MIN_WIDTH = 8.34;
if (false) {
    /**
     * @type {?}
     * @private
     */
    WorksheetFile.MIN_WIDTH;
}
/**
 * @hidden
 */
export class StyleFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));
    }
}
/**
 * @hidden
 */
export class WorkbookFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('workbook.xml', ExcelStrings.getWorkbook());
    }
}
/**
 * @hidden
 */
export class ContentTypesFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));
    }
}
/**
 * @hidden
 */
export class SharedStringsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        /** @type {?} */
        const dict = worksheetData.dataDictionary;
        /** @type {?} */
        const sortedValues = dict.getKeys();
        /** @type {?} */
        const sharedStrings = new Array(sortedValues.length);
        for (const value of sortedValues) {
            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';
        }
        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(dict.stringsCount, sortedValues.length, sharedStrings.join('')));
    }
}
/**
 * @hidden
 */
export class TablesFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        /** @type {?} */
        const columnCount = worksheetData.columnCount;
        /** @type {?} */
        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;
        /** @type {?} */
        const dimension = 'A1:' + lastColumn;
        /** @type {?} */
        const values = worksheetData.keys;
        /** @type {?} */
        let sortString = '';
        /** @type {?} */
        let tableColumns = '<tableColumns count="' + columnCount + '">';
        for (let i = 0; i < columnCount; i++) {
            /** @type {?} */
            const value = values[i];
            tableColumns += '<tableColumn id="' + (i + 1) + '" name="' + value + '"/>';
        }
        tableColumns += '</tableColumns>';
        if (worksheetData.sort) {
            /** @type {?} */
            const sortingExpression = worksheetData.sort;
            /** @type {?} */
            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));
            /** @type {?} */
            const dir = sortingExpression.dir - 1;
            sortString = `<sortState ref="A2:${lastColumn}"><sortCondition descending="${dir}" ref="${sc}1:${sc}15"/></sortState>`;
        }
        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));
    }
}
/**
 * @hidden
 */
export class WorksheetRelsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());
    }
}
//# sourceMappingURL=data:application/json;base64,