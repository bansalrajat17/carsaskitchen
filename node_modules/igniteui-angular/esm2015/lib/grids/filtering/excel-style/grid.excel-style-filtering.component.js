/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ViewChild, HostBinding, ChangeDetectionStrategy, TemplateRef, Directive, ElementRef } from '@angular/core';
import { HorizontalAlignment, VerticalAlignment, AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';
import { IgxStringFilteringOperand, IgxNumberFilteringOperand, IgxBooleanFilteringOperand, IgxDateFilteringOperand } from '../../../data-operations/filtering-condition';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { cloneArray } from '../../../core/utils';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { IgxExcelStyleSearchComponent } from './excel-style-search.component';
import { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';
import { Subscription, Subject } from 'rxjs';
import { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';
import { takeUntil } from 'rxjs/operators';
import { IgxDropDownComponent } from '../../../drop-down';
import { IgxDatePipeComponent, IgxDecimalPipeComponent } from '../../grid.common';
/**
 * @hidden
 */
export class FilterListItem {
    constructor() {
        this.isSpecial = false;
        this.isBlanks = false;
    }
}
if (false) {
    /** @type {?} */
    FilterListItem.prototype.value;
    /** @type {?} */
    FilterListItem.prototype.label;
    /** @type {?} */
    FilterListItem.prototype.isSelected;
    /** @type {?} */
    FilterListItem.prototype.indeterminate;
    /** @type {?} */
    FilterListItem.prototype.isSpecial;
    /** @type {?} */
    FilterListItem.prototype.isBlanks;
}
export class IgxExcelStyleSortingTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxExcelStyleSortingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxExcelStyleSorting]'
            },] }
];
/** @nocollapse */
IgxExcelStyleSortingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxExcelStyleSortingTemplateDirective.prototype.template;
}
export class IgxExcelStyleMovingTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxExcelStyleMovingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxExcelStyleMoving]'
            },] }
];
/** @nocollapse */
IgxExcelStyleMovingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxExcelStyleMovingTemplateDirective.prototype.template;
}
export class IgxExcelStyleHidingTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxExcelStyleHidingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxExcelStyleHiding]'
            },] }
];
/** @nocollapse */
IgxExcelStyleHidingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxExcelStyleHidingTemplateDirective.prototype.template;
}
export class IgxExcelStylePinningTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxExcelStylePinningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxExcelStylePinning]'
            },] }
];
/** @nocollapse */
IgxExcelStylePinningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxExcelStylePinningTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxGridExcelStyleFilteringComponent {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        this.cdr = cdr;
        this.shouldOpenSubMenu = true;
        this.expressionsList = new Array();
        this.destroy$ = new Subject();
        this.containsNullOrEmpty = false;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.filterValues = new Set();
        this.columnMoving = new Subscription();
        this.listData = new Array();
        this.uniqueValues = [];
        this._subMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Top
        };
        this._subMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
        this.className = 'igx-excel-filter';
    }
    /**
     * @return {?}
     */
    get grid() {
        return this.filteringService.grid;
    }
    /**
     * @return {?}
     */
    get conditions() {
        return this.column.filters.conditionList();
    }
    /**
     * @return {?}
     */
    get subMenuText() {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;
            case DataType.Number:
                return this.grid.resourceStrings.igx_grid_excel_number_filter;
            case DataType.Date:
                return this.grid.resourceStrings.igx_grid_excel_date_filter;
            default:
                return this.grid.resourceStrings.igx_grid_excel_text_filter;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isColumnPinnable = this.column.pinnable;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.expressionsList = new Array();
        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        if (this.expressionsList && this.expressionsList.length &&
            this.expressionsList[0].expression.condition.name !== 'in') {
            this.customDialog.expressionsList = this.expressionsList;
        }
        this.populateColumnData();
        if (this.excelStyleSorting) {
            /** @type {?} */
            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);
            if (se) {
                this.excelStyleSorting.selectButton(se.dir);
            }
        }
        requestAnimationFrame(() => {
            this.excelStyleSearch.searchInput.nativeElement.focus();
        });
    }
    /**
     * @return {?}
     */
    clearFilterClass() {
        if (this.column.filteringExpressionsTree) {
            return 'igx-excel-filter__actions-clear';
        }
        return 'igx-excel-filter__actions-clear--disabled';
    }
    /**
     * @return {?}
     */
    pinClass() {
        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';
    }
    /**
     * @param {?} column
     * @param {?} filteringService
     * @param {?} overlayService
     * @param {?} overlayComponentId
     * @return {?}
     */
    initialize(column, filteringService, overlayService, overlayComponentId) {
        this.column = column;
        this.filteringService = filteringService;
        this.overlayService = overlayService;
        this.overlayComponentId = overlayComponentId;
        this._subMenuOverlaySettings.outlet = this.grid.outlet;
        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.closeDropdown();
        });
    }
    /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    getCondition(value) {
        return this.column.filters.condition(value);
    }
    /**
     * Returns the translated condition name for a given value.
     * @param {?} value
     * @return {?}
     */
    translateCondition(value) {
        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;
    }
    /**
     * @return {?}
     */
    onPin() {
        this.column.pinned = !this.column.pinned;
        this.closeDropdown();
    }
    /**
     * @return {?}
     */
    onHide() {
        this.column.hidden = true;
        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });
        this.closeDropdown();
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onTextFilterClick(eventArgs) {
        if (this.shouldOpenSubMenu) {
            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;
            /** @type {?} */
            const gridRect = this.grid.nativeElement.getBoundingClientRect();
            /** @type {?} */
            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();
            /** @type {?} */
            let x = dropdownRect.left + dropdownRect.width;
            /** @type {?} */
            let x1 = gridRect.left + gridRect.width;
            x += window.pageXOffset;
            x1 += window.pageXOffset;
            if (Math.abs(x - x1) < 200) {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;
            }
            else {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;
            }
            this.subMenu.open(this._subMenuOverlaySettings);
            this.shouldOpenSubMenu = false;
        }
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onTextFilterKeyDown(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.onTextFilterClick(eventArgs);
        }
    }
    /**
     * @return {?}
     */
    onSubMenuClosed() {
        requestAnimationFrame(() => {
            this.shouldOpenSubMenu = true;
        });
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onSubMenuSelection(eventArgs) {
        this.customDialog.selectedOperator = eventArgs.newSelection.value;
        eventArgs.cancel = true;
        this.mainDropdown.nativeElement.style.display = 'none';
        this.subMenu.close();
        this.customDialog.open();
    }
    /**
     * @private
     * @return {?}
     */
    areExpressionsSelectable() {
        if (this.expressionsList.length === 1 &&
            (this.expressionsList[0].expression.condition.name === 'equals' ||
                this.expressionsList[0].expression.condition.name === 'true' ||
                this.expressionsList[0].expression.condition.name === 'false' ||
                this.expressionsList[0].expression.condition.name === 'empty' ||
                this.expressionsList[0].expression.condition.name === 'in')) {
            return true;
        }
        /** @type {?} */
        const selectableExpressionsCount = this.expressionsList.filter(exp => (exp.beforeOperator === 1 || exp.afterOperator === 1) &&
            (exp.expression.condition.name === 'equals' ||
                exp.expression.condition.name === 'true' ||
                exp.expression.condition.name === 'false' ||
                exp.expression.condition.name === 'empty' ||
                exp.expression.condition.name === 'in')).length;
        return selectableExpressionsCount === this.expressionsList.length;
    }
    /**
     * @private
     * @return {?}
     */
    areExpressionsValuesInTheList() {
        if (this.column.dataType === DataType.Boolean) {
            return true;
        }
        if (this.filterValues.size === 1) {
            /** @type {?} */
            const firstValue = this.filterValues.values().next().value;
            if (!firstValue && firstValue !== 0) {
                return true;
            }
        }
        for (let index = 0; index < this.uniqueValues.length; index++) {
            if (this.filterValues.has(this.uniqueValues[index])) {
                return true;
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    populateColumnData() {
        if (this.grid.uniqueColumnValuesStrategy) {
            this.renderColumnValuesRemotely();
        }
        else {
            this.renderColumnValuesFromData();
        }
    }
    /**
     * @private
     * @return {?}
     */
    renderColumnValuesRemotely() {
        this.excelStyleSearch.isLoading = true;
        /** @type {?} */
        const expressionsTree = this.getColumnFilterExpressionsTree();
        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals) => {
            /** @type {?} */
            const columnValues = (this.column.dataType === DataType.Date) ?
                colVals.map(val => val ? val.toDateString() : val) : colVals;
            this.renderValues(columnValues);
            this.excelStyleSearch.isLoading = false;
            this.excelStyleSearch.refreshSize();
        });
    }
    /**
     * @return {?}
     */
    renderColumnValuesFromData() {
        /** @type {?} */
        let data = this.column.gridAPI.get_all_data(this.grid.id);
        /** @type {?} */
        const expressionsTree = this.getColumnFilterExpressionsTree();
        if (expressionsTree.filteringOperands.length) {
            /** @type {?} */
            const state = { expressionsTree: expressionsTree };
            data = DataUtil.filter(cloneArray(data), state);
        }
        /** @type {?} */
        const columnField = this.column.field;
        /** @type {?} */
        const columnValues = (this.column.dataType === DataType.Date) ?
            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :
            data.map(record => record[columnField]);
        this.renderValues(columnValues);
    }
    /**
     * @private
     * @param {?} columnValues
     * @return {?}
     */
    renderValues(columnValues) {
        this.generateUniqueValues(columnValues);
        this.generateFilterValues(this.column.dataType === DataType.Date);
        this.generateListData();
    }
    /**
     * @private
     * @param {?} columnValues
     * @return {?}
     */
    generateUniqueValues(columnValues) {
        this.uniqueValues = Array.from(new Set(columnValues));
    }
    /**
     * @private
     * @param {?=} isDateColumn
     * @return {?}
     */
    generateFilterValues(isDateColumn = false) {
        if (isDateColumn) {
            this.filterValues = new Set(this.expressionsList.reduce((arr, e) => {
                if (e.expression.condition.name === 'in') {
                    return [...arr, ...Array.from(((/** @type {?} */ (e.expression.searchVal))).values()).map(v => new Date(v).toDateString())];
                }
                return [...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal]];
            }, []));
        }
        else {
            this.filterValues = new Set(this.expressionsList.reduce((arr, e) => {
                if (e.expression.condition.name === 'in') {
                    return [...arr, ...Array.from(((/** @type {?} */ (e.expression.searchVal))).values())];
                }
                return [...arr, ...[e.expression.searchVal]];
            }, []));
        }
    }
    /**
     * @private
     * @return {?}
     */
    generateListData() {
        this.listData = new Array();
        /** @type {?} */
        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();
        if (this.column.dataType === DataType.Boolean) {
            this.addBooleanItems();
        }
        else {
            this.addItems(shouldUpdateSelection);
        }
        this.listData.sort((a, b) => this.sortData(a, b));
        if (this.column.dataType === DataType.Date) {
            this.uniqueValues = this.uniqueValues.map(value => new Date(value));
        }
        if (this.containsNullOrEmpty) {
            this.addBlanksItem(shouldUpdateSelection);
        }
        this.addSelectAllItem();
        if (!((/** @type {?} */ (this.cdr))).destroyed) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getColumnFilterExpressionsTree() {
        /** @type {?} */
        const gridExpressionsTree = this.grid.filteringExpressionsTree;
        /** @type {?} */
        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);
        for (const operand of gridExpressionsTree.filteringOperands) {
            if (operand instanceof FilteringExpressionsTree) {
                /** @type {?} */
                const columnExprTree = (/** @type {?} */ (operand));
                if (columnExprTree.fieldName === this.column.field) {
                    break;
                }
            }
            expressionsTree.filteringOperands.push(operand);
        }
        return expressionsTree;
    }
    /**
     * @private
     * @return {?}
     */
    addBooleanItems() {
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(element => {
            /** @type {?} */
            const filterListItem = new FilterListItem();
            if (element !== undefined && element !== null && element !== '') {
                if (this.column.filteringExpressionsTree) {
                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true')) {
                        filterListItem.isSelected = true;
                        this.selectAllIndeterminate = true;
                    }
                    else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false')) {
                        filterListItem.isSelected = true;
                        this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                filterListItem.value = element;
                filterListItem.label = element;
                filterListItem.indeterminate = false;
                this.listData.push(filterListItem);
            }
            else {
                this.containsNullOrEmpty = true;
            }
        });
    }
    /**
     * @private
     * @param {?} shouldUpdateSelection
     * @return {?}
     */
    addItems(shouldUpdateSelection) {
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        /** @type {?} */
        const numberPipe = new IgxDecimalPipeComponent(this.column.grid.locale);
        /** @type {?} */
        const datePipe = new IgxDatePipeComponent(this.column.grid.locale);
        this.uniqueValues.forEach(element => {
            if (element !== undefined && element !== null && element !== '') {
                /** @type {?} */
                const filterListItem = new FilterListItem();
                if (this.column.filteringExpressionsTree) {
                    if (shouldUpdateSelection) {
                        if (this.filterValues.has(element)) {
                            filterListItem.isSelected = true;
                        }
                        else {
                            filterListItem.isSelected = false;
                        }
                        this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                        this.selectAllSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                if (this.column.dataType === DataType.Date) {
                    /** @type {?} */
                    const date = new Date(element);
                    filterListItem.value = date;
                    filterListItem.label = this.column.formatter ?
                        this.column.formatter(date) :
                        datePipe.transform(date, this.column.grid.locale);
                }
                else if (this.column.dataType === DataType.Number) {
                    filterListItem.value = element;
                    filterListItem.label = this.column.formatter ?
                        this.column.formatter(element) :
                        numberPipe.transform(element, this.column.grid.locale);
                }
                else {
                    filterListItem.value = element;
                    filterListItem.label = this.column.formatter ?
                        this.column.formatter(element) :
                        element;
                }
                filterListItem.indeterminate = false;
                this.listData.push(filterListItem);
            }
            else {
                this.containsNullOrEmpty = true;
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    addSelectAllItem() {
        /** @type {?} */
        const selectAll = new FilterListItem();
        selectAll.isSelected = this.selectAllSelected;
        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.indeterminate = this.selectAllIndeterminate;
        selectAll.isSpecial = true;
        this.listData.unshift(selectAll);
    }
    /**
     * @private
     * @param {?} shouldUpdateSelection
     * @return {?}
     */
    addBlanksItem(shouldUpdateSelection) {
        /** @type {?} */
        const blanks = new FilterListItem();
        if (this.column.filteringExpressionsTree) {
            if (shouldUpdateSelection) {
                if (this.filterValues.has(null)) {
                    blanks.isSelected = true;
                }
                else {
                    blanks.isSelected = false;
                }
            }
        }
        else {
            blanks.isSelected = true;
        }
        blanks.value = null;
        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;
        blanks.indeterminate = false;
        blanks.isSpecial = true;
        blanks.isBlanks = true;
        this.listData.unshift(blanks);
    }
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    sortData(a, b) {
        /** @type {?} */
        let valueA = a.value;
        /** @type {?} */
        let valueB = b.value;
        if (typeof (a) === DataType.String) {
            valueA = a.value.toUpperCase();
            valueB = b.value.toUpperCase();
        }
        if (valueA < valueB) {
            return -1;
        }
        else if (valueA > valueB) {
            return 1;
        }
        else {
            return 0;
        }
    }
    /**
     * @private
     * @return {?}
     */
    selectAllFilterItems() {
        this.listData.forEach(filterListItem => {
            filterListItem.isSelected = true;
            filterListItem.indeterminate = false;
        });
        this.excelStyleSearch.cdr.detectChanges();
    }
    // TODO: sort members by access modifier
    /**
     * @return {?}
     */
    get sortingTemplate() {
        if (this.grid.excelStyleSortingTemplateDirective) {
            return this.grid.excelStyleSortingTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleSortingTemplate;
        }
    }
    /**
     * @return {?}
     */
    get movingTemplate() {
        if (this.grid.excelStyleMovingTemplateDirective) {
            return this.grid.excelStyleMovingTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleMovingTemplate;
        }
    }
    /**
     * @return {?}
     */
    get pinningTemplate() {
        if (this.grid.excelStylePinningTemplateDirective) {
            return this.grid.excelStylePinningTemplateDirective.template;
        }
        else {
            return this.defaultExcelStylePinningTemplate;
        }
    }
    /**
     * @return {?}
     */
    get hidingTemplate() {
        if (this.grid.excelStyleHidingTemplateDirective) {
            return this.grid.excelStyleHidingTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleHidingTemplate;
        }
    }
    /**
     * @return {?}
     */
    get applyButtonDisabled() {
        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;
    }
    /**
     * @return {?}
     */
    applyFilter() {
        /** @type {?} */
        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);
        /** @type {?} */
        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);
        /** @type {?} */
        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);
        if (unselectedItem) {
            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {
                selectedItems.forEach(element => {
                    /** @type {?} */
                    let condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (this.column.dataType === DataType.Boolean) {
                            condition = this.createCondition(element.value.toString());
                        }
                        else {
                            condition = this.createCondition('equals');
                        }
                    }
                    else {
                        condition = this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition: condition,
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                /** @type {?} */
                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);
                /** @type {?} */
                let blanksItem;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                filterTree.filteringOperands.push({
                    condition: this.createCondition('in'),
                    fieldName: this.column.field,
                    ignoreCase: this.column.filteringIgnoreCase,
                    searchVal: new Set(this.column.dataType === DataType.Date ?
                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :
                        selectedItems.map(e => e.value))
                });
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            this.expressionsList = new Array();
            this.filteringService.filterInternal(this.column.field, filterTree);
        }
        else {
            this.filteringService.clearFilter(this.column.field);
        }
        this.closeDropdown();
    }
    /**
     * @return {?}
     */
    closeDropdown() {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
            this.overlayComponentId = null;
        }
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onKeyDown(eventArgs) {
        if (eventArgs.key === "Escape" /* ESCAPE */ || eventArgs.key === "Esc" /* ESCAPE_IE */) {
            this.closeDropdown();
        }
        eventArgs.stopPropagation();
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.filteringService.clearFilter(this.column.field);
        this.selectAllFilterItems();
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onClearFilterKeyDown(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.clearFilter();
        }
    }
    /**
     * @return {?}
     */
    showCustomFilterItem() {
        /** @type {?} */
        const exprTree = this.column.filteringExpressionsTree;
        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&
            !(((/** @type {?} */ (exprTree.filteringOperands[0]))).condition &&
                ((/** @type {?} */ (exprTree.filteringOperands[0]))).condition.name === 'in');
    }
    /**
     * @private
     * @param {?} conditionName
     * @return {?}
     */
    createCondition(conditionName) {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    }
}
IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold = 2;
IgxGridExcelStyleFilteringComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-excel-style-filtering',
                template: "<article #dropdown\n    class=\"igx-excel-filter__menu\"\n    [ngClass]=\"{\n        'igx-excel-filter__menu--cosy': grid.displayDensity === 'cosy',\n        'igx-excel-filter__menu--compact': grid.displayDensity === 'compact'\n    }\"\n    [id]=\"overlayComponentId\"\n    (keydown)=\"onKeyDown($event)\">\n\n    <header class=\"igx-excel-filter__menu-header\">\n        <h4>{{ column.header || column.field }}</h4>\n        <div *ngIf=\"grid.displayDensity!=='comfortable'\" class=\"igx-excel-filter__menu-header-actions\">\n            <button *ngIf=\"!column.disablePinning && !column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                [disabled]=\"!isColumnPinnable\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disablePinning && column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disableHiding\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                tabindex=\"0\"\n                (click)=\"onHide()\">\n                <igx-icon>visibility_off</igx-icon>\n            </button>\n        </div>\n    </header>\n\n    <ng-template #defaultExcelStyleSortingTemplate>\n        <igx-excel-style-sorting #excelStyleSorting\n            class=\"igx-excel-filter__sort\"\n            [column]=\"column\"\n            [grid]=\"grid\"\n            [displayDensity]=\"grid.displayDensity\">\n        </igx-excel-style-sorting>\n    </ng-template>\n\n    <div *ngIf=\"column.sortable\">\n        <ng-container *ngTemplateOutlet=\"sortingTemplate\"></ng-container>\n    </div>\n\n    <section class=\"igx-excel-filter__actions\">\n\n        <ng-template #defaultExcelStyleMovingTemplate>\n            <igx-excel-style-column-moving\n                class=\"igx-excel-filter__move\"\n                [column]=\"column\"\n                [grid]=\"grid\"\n                [isColumnPinnable]=\"isColumnPinnable\"\n                [displayDensity]=\"grid.displayDensity\">\n            </igx-excel-style-column-moving>\n        </ng-template>\n\n        <div *ngIf=\"column.movable\">\n            <ng-container *ngTemplateOutlet=\"movingTemplate\"></ng-container>\n        </div>\n\n        <ng-template #defaultExcelStylePinningTemplate>\n            <div [ngClass]=\"pinClass()\"\n                (click)=\"onPin()\"\n                tabindex=\"0\"\n                *ngIf=\"!column.pinned\">\n                <span>{{ grid.resourceStrings.igx_grid_excel_pin }}</span>\n                <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n            </div>\n\n            <div class=\"igx-excel-filter__actions-unpin\"\n                (click)=\"onPin()\"\n                tabindex=\"0\"\n                *ngIf=\"column.pinned\">\n                <span>{{ grid.resourceStrings.igx_grid_excel_unpin }}</span>\n                <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n            </div>\n        </ng-template>\n\n        <div *ngIf=\"!column.disablePinning && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"pinningTemplate\"></ng-container>\n        </div>\n\n        <ng-template #defaultExcelStyleHidingTemplate>\n            <div class=\"igx-excel-filter__actions-hide\"\n                tabindex=\"0\"\n                (click)=\"onHide()\">\n                <span>{{ grid.resourceStrings.igx_grid_excel_hide }}</span>\n                <igx-icon>visibility_off</igx-icon>\n            </div>\n        </ng-template>\n\n        <div *ngIf=\"!column.disableHiding && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"hidingTemplate\"></ng-container>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            [ngClass]=\"clearFilterClass()\"\n            (keydown)=\"onClearFilterKeyDown($event)\"\n            (click)=\"clearFilter()\">\n            <span>{{ grid.resourceStrings.igx_grid_excel_filter_clear }}</span>\n            <igx-icon>clear</igx-icon>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            class=\"igx-excel-filter__actions-filter\"\n            (keydown)=\"onTextFilterKeyDown($event)\"\n            (click)=\"onTextFilterClick($event)\"\n            [igxDropDownItemNavigation]=\"subMenu\" >\n            <span>{{ subMenuText }}</span>\n            <igx-icon>keyboard_arrow_right</igx-icon>\n        </div>\n    </section>\n\n    <igx-excel-style-search\n        class=\"igx-excel-filter__menu-main\"\n        #excelStyleSearch\n        [column]=\"column\"\n        [data]=\"listData\"\n        [grid]=\"grid\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-search>\n\n    <footer class=\"igx-excel-filter__menu-footer\">\n        <button igxButton [displayDensity]=\"grid.displayDensity\" (click)=\"closeDropdown()\">{{ grid.resourceStrings.igx_grid_excel_cancel }}</button>\n        <button igxButton=\"raised\" [displayDensity]=\"grid.displayDensity\" [disabled]=\"applyButtonDisabled\" (click)=\"applyFilter()\">{{ grid.resourceStrings.igx_grid_excel_apply }}</button>\n    </footer>\n</article>\n\n<igx-drop-down [maxHeight]=\"'397px'\" [displayDensity]=\"grid.displayDensity\" #subMenu (onSelection)=\"onSubMenuSelection($event)\" (onClosed)=\"onSubMenuClosed()\">\n    <div>\n        <igx-drop-down-item\n            *ngFor=\"let condition of conditions\"\n            [value]=\"condition\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n            <span style=\"margin-left: 16px\">{{ translateCondition(condition) }}</span>\n        </igx-drop-down-item>\n        <igx-drop-down-item *ngIf=\"showCustomFilterItem()\">\n            <igx-icon>filter_list</igx-icon>\n            <span style=\"margin-left: 16px\">{{ grid.resourceStrings.igx_grid_excel_custom_filter }}</span>\n        </igx-drop-down-item>\n    </div>\n</igx-drop-down>\n\n<igx-excel-style-custom-dialog\n    #customDialog\n    [column]=\"column\"\n    [filteringService]=\"filteringService\"\n    [overlayComponentId]=\"overlayComponentId\"\n    [overlayService]=\"overlayService\"\n    [displayDensity]=\"grid.displayDensity\">\n</igx-excel-style-custom-dialog>\n"
            }] }
];
/** @nocollapse */
IgxGridExcelStyleFilteringComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
IgxGridExcelStyleFilteringComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.igx-excel-filter',] }],
    mainDropdown: [{ type: ViewChild, args: ['dropdown', { read: ElementRef, static: true },] }],
    subMenu: [{ type: ViewChild, args: ['subMenu', { read: IgxDropDownComponent, static: true },] }],
    customDialog: [{ type: ViewChild, args: ['customDialog', { read: IgxExcelStyleCustomDialogComponent, static: true },] }],
    excelStyleSearch: [{ type: ViewChild, args: ['excelStyleSearch', { read: IgxExcelStyleSearchComponent, static: true },] }],
    excelStyleSorting: [{ type: ViewChild, args: ['excelStyleSorting', { read: IgxExcelStyleSortingComponent, static: false },] }],
    defaultExcelStyleSortingTemplate: [{ type: ViewChild, args: ['defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true },] }],
    defaultExcelStyleHidingTemplate: [{ type: ViewChild, args: ['defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true },] }],
    defaultExcelStyleMovingTemplate: [{ type: ViewChild, args: ['defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true },] }],
    defaultExcelStylePinningTemplate: [{ type: ViewChild, args: ['defaultExcelStylePinningTemplate', { read: TemplateRef, static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.shouldOpenSubMenu;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.expressionsList;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.containsNullOrEmpty;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.selectAllSelected;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.selectAllIndeterminate;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.filterValues;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.columnMoving;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.column;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.listData;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.uniqueValues;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.overlayService;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.overlayComponentId;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype._subMenuPositionSettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype._subMenuOverlaySettings;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.className;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.mainDropdown;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.subMenu;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.customDialog;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.excelStyleSearch;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.excelStyleSorting;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStyleSortingTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStyleHidingTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStyleMovingTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStylePinningTemplate;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.isColumnPinnable;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,